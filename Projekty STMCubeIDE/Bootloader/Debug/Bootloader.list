
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036a0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003834  08003834  00013834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800386c  0800386c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800386c  0800386c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800386c  0800386c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800386c  0800386c  0001386c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003874  08003874  00013874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001b8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001c4  200001c4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cbb7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cb0  00000000  00000000  0002cbf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000790  00000000  00000000  0002e8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006f8  00000000  00000000  0002f038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004709  00000000  00000000  0002f730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b0ac  00000000  00000000  00033e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c31d8  00000000  00000000  0003eee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001020bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d88  00000000  00000000  00102110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800381c 	.word	0x0800381c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800381c 	.word	0x0800381c

080001d4 <_ZN5M485EC1Ev>:
/*########################################################################################*/
/******************** KLASY ***************************************************************/      

  

  class M485E{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2200      	movs	r2, #0
 80001e0:	711a      	strb	r2, [r3, #4]
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	2200      	movs	r2, #0
 80001e6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2200      	movs	r2, #0
 80001ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	2200      	movs	r2, #0
 80001f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2200      	movs	r2, #0
 80001fc:	641a      	str	r2, [r3, #64]	; 0x40
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	645a      	str	r2, [r3, #68]	; 0x44
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2200      	movs	r2, #0
 8000208:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	2200      	movs	r2, #0
 8000210:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	2200      	movs	r2, #0
 8000218:	671a      	str	r2, [r3, #112]	; 0x70
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	2200      	movs	r2, #0
 800021e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2201      	movs	r2, #1
 8000226:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2201      	movs	r2, #1
 800022e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2200      	movs	r2, #0
 8000236:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4618      	mov	r0, r3
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr

08000248 <_ZN10MFlash_SSDC1Ev>:

#include "MFlash.h"

#define _SSD_TABSIZE_  8

  class MFlash_SSD{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	223f      	movs	r2, #63	; 0x3f
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	4a07      	ldr	r2, [pc, #28]	; (8000278 <_ZN10MFlash_SSDC1Ev+0x30>)
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2200      	movs	r2, #0
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2200      	movs	r2, #0
 8000266:	731a      	strb	r2, [r3, #12]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4618      	mov	r0, r3
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	0801f800 	.word	0x0801f800

0800027c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000282:	f000 faab 	bl	80007dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000286:	f000 f81d 	bl	80002c4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028a:	f000 f8f3 	bl	8000474 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800028e:	f000 f8bd 	bl	800040c <_ZL19MX_USART2_UART_Initv>
  MX_USART1_UART_Init();
 8000292:	f000 f887 	bl	80003a4 <_ZL19MX_USART1_UART_Initv>
//	  JumpToApplication();

	  //Przykład: Mruganie diodą powoli gdy nie ma wgranej aplikacji oraz kasowanie pamięci aplikacji
	  //if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_RESET) {HAL_Delay(1000); EraseUserApplication();}

	  for (int i = 0; i < 6; i++) {
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2b05      	cmp	r3, #5
 800029e:	dc0c      	bgt.n	80002ba <main+0x3e>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80002a0:	2120      	movs	r1, #32
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a6:	f000 fe4d 	bl	8000f44 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 80002aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ae:	f000 fafb 	bl	80008a8 <HAL_Delay>
	  for (int i = 0; i < 6; i++) {
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3301      	adds	r3, #1
 80002b6:	607b      	str	r3, [r7, #4]
 80002b8:	e7ef      	b.n	800029a <main+0x1e>
	  }

	  HAL_Delay(1000);
 80002ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002be:	f000 faf3 	bl	80008a8 <HAL_Delay>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80002c2:	e7e8      	b.n	8000296 <main+0x1a>

080002c4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b0a6      	sub	sp, #152	; 0x98
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002ce:	2228      	movs	r2, #40	; 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f003 fa9a 	bl	800380c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2258      	movs	r2, #88	; 0x58
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f003 fa8c 	bl	800380c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f4:	2302      	movs	r3, #2
 80002f6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f8:	2301      	movs	r3, #1
 80002fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fc:	2310      	movs	r3, #16
 80002fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000302:	2302      	movs	r3, #2
 8000304:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800030c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000310:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000314:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000322:	4618      	mov	r0, r3
 8000324:	f000 fe28 	bl	8000f78 <HAL_RCC_OscConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	bf14      	ite	ne
 800032e:	2301      	movne	r3, #1
 8000330:	2300      	moveq	r3, #0
 8000332:	b2db      	uxtb	r3, r3
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 8000338:	f000 f912 	bl	8000560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033c:	230f      	movs	r3, #15
 800033e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000340:	2302      	movs	r3, #2
 8000342:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800034c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000352:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000356:	2102      	movs	r1, #2
 8000358:	4618      	mov	r0, r3
 800035a:	f001 fe61 	bl	8002020 <HAL_RCC_ClockConfig>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	bf14      	ite	ne
 8000364:	2301      	movne	r3, #1
 8000366:	2300      	moveq	r3, #0
 8000368:	b2db      	uxtb	r3, r3
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 800036e:	f000 f8f7 	bl	8000560 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000372:	2303      	movs	r3, #3
 8000374:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	4618      	mov	r0, r3
 8000382:	f002 f883 	bl	800248c <HAL_RCCEx_PeriphCLKConfig>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	bf14      	ite	ne
 800038c:	2301      	movne	r3, #1
 800038e:	2300      	moveq	r3, #0
 8000390:	b2db      	uxtb	r3, r3
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8000396:	f000 f8e3 	bl	8000560 <Error_Handler>
  }
}
 800039a:	bf00      	nop
 800039c:	3798      	adds	r7, #152	; 0x98
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
	...

080003a4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003a8:	4b16      	ldr	r3, [pc, #88]	; (8000404 <_ZL19MX_USART1_UART_Initv+0x60>)
 80003aa:	4a17      	ldr	r2, [pc, #92]	; (8000408 <_ZL19MX_USART1_UART_Initv+0x64>)
 80003ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80003ae:	4b15      	ldr	r3, [pc, #84]	; (8000404 <_ZL19MX_USART1_UART_Initv+0x60>)
 80003b0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003b6:	4b13      	ldr	r3, [pc, #76]	; (8000404 <_ZL19MX_USART1_UART_Initv+0x60>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <_ZL19MX_USART1_UART_Initv+0x60>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <_ZL19MX_USART1_UART_Initv+0x60>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003c8:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <_ZL19MX_USART1_UART_Initv+0x60>)
 80003ca:	220c      	movs	r2, #12
 80003cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ce:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <_ZL19MX_USART1_UART_Initv+0x60>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d4:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <_ZL19MX_USART1_UART_Initv+0x60>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003da:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <_ZL19MX_USART1_UART_Initv+0x60>)
 80003dc:	2200      	movs	r2, #0
 80003de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e0:	4b08      	ldr	r3, [pc, #32]	; (8000404 <_ZL19MX_USART1_UART_Initv+0x60>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003e6:	4807      	ldr	r0, [pc, #28]	; (8000404 <_ZL19MX_USART1_UART_Initv+0x60>)
 80003e8:	f002 fa6e 	bl	80028c8 <HAL_UART_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	bf14      	ite	ne
 80003f2:	2301      	movne	r3, #1
 80003f4:	2300      	moveq	r3, #0
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80003fc:	f000 f8b0 	bl	8000560 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	200000b8 	.word	0x200000b8
 8000408:	40013800 	.word	0x40013800

0800040c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000410:	4b16      	ldr	r3, [pc, #88]	; (800046c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000412:	4a17      	ldr	r2, [pc, #92]	; (8000470 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000414:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000416:	4b15      	ldr	r3, [pc, #84]	; (800046c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000418:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800041c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800041e:	4b13      	ldr	r3, [pc, #76]	; (800046c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000424:	4b11      	ldr	r3, [pc, #68]	; (800046c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800042a:	4b10      	ldr	r3, [pc, #64]	; (800046c <_ZL19MX_USART2_UART_Initv+0x60>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000430:	4b0e      	ldr	r3, [pc, #56]	; (800046c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000432:	220c      	movs	r2, #12
 8000434:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000436:	4b0d      	ldr	r3, [pc, #52]	; (800046c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800043c:	4b0b      	ldr	r3, [pc, #44]	; (800046c <_ZL19MX_USART2_UART_Initv+0x60>)
 800043e:	2200      	movs	r2, #0
 8000440:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000442:	4b0a      	ldr	r3, [pc, #40]	; (800046c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000444:	2200      	movs	r2, #0
 8000446:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <_ZL19MX_USART2_UART_Initv+0x60>)
 800044a:	2200      	movs	r2, #0
 800044c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800044e:	4807      	ldr	r0, [pc, #28]	; (800046c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000450:	f002 fa3a 	bl	80028c8 <HAL_UART_Init>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	bf14      	ite	ne
 800045a:	2301      	movne	r3, #1
 800045c:	2300      	moveq	r3, #0
 800045e:	b2db      	uxtb	r3, r3
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000464:	f000 f87c 	bl	8000560 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	2000013c 	.word	0x2000013c
 8000470:	40004400 	.word	0x40004400

08000474 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08a      	sub	sp, #40	; 0x28
 8000478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	f107 0314 	add.w	r3, r7, #20
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048a:	4b32      	ldr	r3, [pc, #200]	; (8000554 <_ZL12MX_GPIO_Initv+0xe0>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a31      	ldr	r2, [pc, #196]	; (8000554 <_ZL12MX_GPIO_Initv+0xe0>)
 8000490:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b2f      	ldr	r3, [pc, #188]	; (8000554 <_ZL12MX_GPIO_Initv+0xe0>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800049e:	613b      	str	r3, [r7, #16]
 80004a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004a2:	4b2c      	ldr	r3, [pc, #176]	; (8000554 <_ZL12MX_GPIO_Initv+0xe0>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a2b      	ldr	r2, [pc, #172]	; (8000554 <_ZL12MX_GPIO_Initv+0xe0>)
 80004a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b29      	ldr	r3, [pc, #164]	; (8000554 <_ZL12MX_GPIO_Initv+0xe0>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b26      	ldr	r3, [pc, #152]	; (8000554 <_ZL12MX_GPIO_Initv+0xe0>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a25      	ldr	r2, [pc, #148]	; (8000554 <_ZL12MX_GPIO_Initv+0xe0>)
 80004c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004c4:	6153      	str	r3, [r2, #20]
 80004c6:	4b23      	ldr	r3, [pc, #140]	; (8000554 <_ZL12MX_GPIO_Initv+0xe0>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d2:	4b20      	ldr	r3, [pc, #128]	; (8000554 <_ZL12MX_GPIO_Initv+0xe0>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a1f      	ldr	r2, [pc, #124]	; (8000554 <_ZL12MX_GPIO_Initv+0xe0>)
 80004d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b1d      	ldr	r3, [pc, #116]	; (8000554 <_ZL12MX_GPIO_Initv+0xe0>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2120      	movs	r1, #32
 80004ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f2:	f000 fd0f 	bl	8000f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	4619      	mov	r1, r3
 800050c:	4812      	ldr	r0, [pc, #72]	; (8000558 <_ZL12MX_GPIO_Initv+0xe4>)
 800050e:	f000 fb77 	bl	8000c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000512:	2320      	movs	r3, #32
 8000514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000516:	2301      	movs	r3, #1
 8000518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	2300      	movs	r3, #0
 8000520:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	4619      	mov	r1, r3
 8000528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052c:	f000 fb68 	bl	8000c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000536:	2300      	movs	r3, #0
 8000538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	4619      	mov	r1, r3
 8000544:	4805      	ldr	r0, [pc, #20]	; (800055c <_ZL12MX_GPIO_Initv+0xe8>)
 8000546:	f000 fb5b 	bl	8000c00 <HAL_GPIO_Init>

}
 800054a:	bf00      	nop
 800054c:	3728      	adds	r7, #40	; 0x28
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000
 8000558:	48000800 	.word	0x48000800
 800055c:	48000400 	.word	0x48000400

08000560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000564:	b672      	cpsid	i
}
 8000566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000568:	e7fe      	b.n	8000568 <Error_Handler+0x8>
	...

0800056c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d10a      	bne.n	8000592 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000582:	4293      	cmp	r3, r2
 8000584:	d105      	bne.n	8000592 <_Z41__static_initialization_and_destruction_0ii+0x26>
    
    };//************************************************************************************



    M485E  g485E;
 8000586:	4805      	ldr	r0, [pc, #20]	; (800059c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000588:	f7ff fe24 	bl	80001d4 <_ZN5M485EC1Ev>
    
    };//************************************************************************



    MFlash_SSD gFlash_SSD;
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800058e:	f7ff fe5b 	bl	8000248 <_ZN10MFlash_SSDC1Ev>
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000028 	.word	0x20000028
 80005a0:	200000a0 	.word	0x200000a0

080005a4 <_GLOBAL__sub_I_g485E>:
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005ac:	2001      	movs	r0, #1
 80005ae:	f7ff ffdd 	bl	800056c <_Z41__static_initialization_and_destruction_0ii>
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <HAL_MspInit+0x44>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <HAL_MspInit+0x44>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6193      	str	r3, [r2, #24]
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <HAL_MspInit+0x44>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <HAL_MspInit+0x44>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	4a08      	ldr	r2, [pc, #32]	; (80005f8 <HAL_MspInit+0x44>)
 80005d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005dc:	61d3      	str	r3, [r2, #28]
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_MspInit+0x44>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005ea:	2007      	movs	r0, #7
 80005ec:	f000 fa50 	bl	8000a90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40021000 	.word	0x40021000

080005fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08c      	sub	sp, #48	; 0x30
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <HAL_UART_MspInit+0xe8>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d130      	bne.n	8000680 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800061e:	4b32      	ldr	r3, [pc, #200]	; (80006e8 <HAL_UART_MspInit+0xec>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4a31      	ldr	r2, [pc, #196]	; (80006e8 <HAL_UART_MspInit+0xec>)
 8000624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000628:	6193      	str	r3, [r2, #24]
 800062a:	4b2f      	ldr	r3, [pc, #188]	; (80006e8 <HAL_UART_MspInit+0xec>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000632:	61bb      	str	r3, [r7, #24]
 8000634:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <HAL_UART_MspInit+0xec>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a2b      	ldr	r2, [pc, #172]	; (80006e8 <HAL_UART_MspInit+0xec>)
 800063c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <HAL_UART_MspInit+0xec>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800064a:	617b      	str	r3, [r7, #20]
 800064c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800064e:	2330      	movs	r3, #48	; 0x30
 8000650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000652:	2302      	movs	r3, #2
 8000654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065a:	2303      	movs	r3, #3
 800065c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800065e:	2307      	movs	r3, #7
 8000660:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	4619      	mov	r1, r3
 8000668:	4820      	ldr	r0, [pc, #128]	; (80006ec <HAL_UART_MspInit+0xf0>)
 800066a:	f000 fac9 	bl	8000c00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	2025      	movs	r0, #37	; 0x25
 8000674:	f000 fa17 	bl	8000aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000678:	2025      	movs	r0, #37	; 0x25
 800067a:	f000 fa30 	bl	8000ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800067e:	e02d      	b.n	80006dc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a1a      	ldr	r2, [pc, #104]	; (80006f0 <HAL_UART_MspInit+0xf4>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d128      	bne.n	80006dc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <HAL_UART_MspInit+0xec>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <HAL_UART_MspInit+0xec>)
 8000690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000694:	61d3      	str	r3, [r2, #28]
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <HAL_UART_MspInit+0xec>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <HAL_UART_MspInit+0xec>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	4a10      	ldr	r2, [pc, #64]	; (80006e8 <HAL_UART_MspInit+0xec>)
 80006a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ac:	6153      	str	r3, [r2, #20]
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <HAL_UART_MspInit+0xec>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006ba:	230c      	movs	r3, #12
 80006bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	2302      	movs	r3, #2
 80006c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2300      	movs	r3, #0
 80006c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006ca:	2307      	movs	r3, #7
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	4619      	mov	r1, r3
 80006d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d8:	f000 fa92 	bl	8000c00 <HAL_GPIO_Init>
}
 80006dc:	bf00      	nop
 80006de:	3730      	adds	r7, #48	; 0x30
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40013800 	.word	0x40013800
 80006e8:	40021000 	.word	0x40021000
 80006ec:	48000800 	.word	0x48000800
 80006f0:	40004400 	.word	0x40004400

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <NMI_Handler+0x4>

080006fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <HardFault_Handler+0x4>

08000700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <MemManage_Handler+0x4>

08000706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <BusFault_Handler+0x4>

0800070c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <UsageFault_Handler+0x4>

08000712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000740:	f000 f892 	bl	8000868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <USART1_IRQHandler+0x10>)
 800074e:	f002 f909 	bl	8002964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200000b8 	.word	0x200000b8

0800075c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <SystemInit+0x28>)
 8000762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000766:	4a07      	ldr	r2, [pc, #28]	; (8000784 <SystemInit+0x28>)
 8000768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800076c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8000770:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SystemInit+0x28>)
 8000772:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000776:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007c0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800078e:	490e      	ldr	r1, [pc, #56]	; (80007c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000790:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <LoopForever+0xe>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000794:	e002      	b.n	800079c <LoopCopyDataInit>

08000796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079a:	3304      	adds	r3, #4

0800079c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800079c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a0:	d3f9      	bcc.n	8000796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a2:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007a4:	4c0b      	ldr	r4, [pc, #44]	; (80007d4 <LoopForever+0x16>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a8:	e001      	b.n	80007ae <LoopFillZerobss>

080007aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ac:	3204      	adds	r2, #4

080007ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b0:	d3fb      	bcc.n	80007aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007b2:	f7ff ffd3 	bl	800075c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007b6:	f003 f805 	bl	80037c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ba:	f7ff fd5f 	bl	800027c <main>

080007be <LoopForever>:

LoopForever:
    b LoopForever
 80007be:	e7fe      	b.n	80007be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007cc:	08003878 	.word	0x08003878
  ldr r2, =_sbss
 80007d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007d4:	200001c4 	.word	0x200001c4

080007d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007d8:	e7fe      	b.n	80007d8 <ADC1_2_IRQHandler>
	...

080007dc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <HAL_Init+0x28>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a07      	ldr	r2, [pc, #28]	; (8000804 <HAL_Init+0x28>)
 80007e6:	f043 0310 	orr.w	r3, r3, #16
 80007ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ec:	2003      	movs	r0, #3
 80007ee:	f000 f94f 	bl	8000a90 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f000 f808 	bl	8000808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f8:	f7ff fedc 	bl	80005b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40022000 	.word	0x40022000

08000808 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_InitTick+0x54>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_InitTick+0x58>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4619      	mov	r1, r3
 800081a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000822:	fbb2 f3f3 	udiv	r3, r2, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f967 	bl	8000afa <HAL_SYSTICK_Config>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000832:	2301      	movs	r3, #1
 8000834:	e00e      	b.n	8000854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b0f      	cmp	r3, #15
 800083a:	d80a      	bhi.n	8000852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800083c:	2200      	movs	r2, #0
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	f04f 30ff 	mov.w	r0, #4294967295
 8000844:	f000 f92f 	bl	8000aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000848:	4a06      	ldr	r2, [pc, #24]	; (8000864 <HAL_InitTick+0x5c>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800084e:	2300      	movs	r3, #0
 8000850:	e000      	b.n	8000854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
}
 8000854:	4618      	mov	r0, r3
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000000 	.word	0x20000000
 8000860:	20000008 	.word	0x20000008
 8000864:	20000004 	.word	0x20000004

08000868 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_IncTick+0x20>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_IncTick+0x24>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4413      	add	r3, r2
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <HAL_IncTick+0x24>)
 800087a:	6013      	str	r3, [r2, #0]
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	20000008 	.word	0x20000008
 800088c:	200001c0 	.word	0x200001c0

08000890 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return uwTick;  
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <HAL_GetTick+0x14>)
 8000896:	681b      	ldr	r3, [r3, #0]
}
 8000898:	4618      	mov	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	200001c0 	.word	0x200001c0

080008a8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b0:	f7ff ffee 	bl	8000890 <HAL_GetTick>
 80008b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c0:	d005      	beq.n	80008ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <HAL_Delay+0x44>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	461a      	mov	r2, r3
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	4413      	add	r3, r2
 80008cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008ce:	bf00      	nop
 80008d0:	f7ff ffde 	bl	8000890 <HAL_GetTick>
 80008d4:	4602      	mov	r2, r0
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d8f7      	bhi.n	80008d0 <HAL_Delay+0x28>
  {
  }
}
 80008e0:	bf00      	nop
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000008 	.word	0x20000008

080008f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <__NVIC_SetPriorityGrouping+0x44>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800090c:	4013      	ands	r3, r2
 800090e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800091c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000922:	4a04      	ldr	r2, [pc, #16]	; (8000934 <__NVIC_SetPriorityGrouping+0x44>)
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	60d3      	str	r3, [r2, #12]
}
 8000928:	bf00      	nop
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <__NVIC_GetPriorityGrouping+0x18>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	0a1b      	lsrs	r3, r3, #8
 8000942:	f003 0307 	and.w	r3, r3, #7
}
 8000946:	4618      	mov	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	2b00      	cmp	r3, #0
 8000964:	db0b      	blt.n	800097e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	f003 021f 	and.w	r2, r3, #31
 800096c:	4907      	ldr	r1, [pc, #28]	; (800098c <__NVIC_EnableIRQ+0x38>)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	095b      	lsrs	r3, r3, #5
 8000974:	2001      	movs	r0, #1
 8000976:	fa00 f202 	lsl.w	r2, r0, r2
 800097a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000e100 	.word	0xe000e100

08000990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	6039      	str	r1, [r7, #0]
 800099a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	db0a      	blt.n	80009ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	490c      	ldr	r1, [pc, #48]	; (80009dc <__NVIC_SetPriority+0x4c>)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	0112      	lsls	r2, r2, #4
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	440b      	add	r3, r1
 80009b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b8:	e00a      	b.n	80009d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4908      	ldr	r1, [pc, #32]	; (80009e0 <__NVIC_SetPriority+0x50>)
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	f003 030f 	and.w	r3, r3, #15
 80009c6:	3b04      	subs	r3, #4
 80009c8:	0112      	lsls	r2, r2, #4
 80009ca:	b2d2      	uxtb	r2, r2
 80009cc:	440b      	add	r3, r1
 80009ce:	761a      	strb	r2, [r3, #24]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000e100 	.word	0xe000e100
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b089      	sub	sp, #36	; 0x24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	f1c3 0307 	rsb	r3, r3, #7
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	bf28      	it	cs
 8000a02:	2304      	movcs	r3, #4
 8000a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	2b06      	cmp	r3, #6
 8000a0c:	d902      	bls.n	8000a14 <NVIC_EncodePriority+0x30>
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	3b03      	subs	r3, #3
 8000a12:	e000      	b.n	8000a16 <NVIC_EncodePriority+0x32>
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43da      	mvns	r2, r3
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	401a      	ands	r2, r3
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	fa01 f303 	lsl.w	r3, r1, r3
 8000a36:	43d9      	mvns	r1, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	4313      	orrs	r3, r2
         );
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3724      	adds	r7, #36	; 0x24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a5c:	d301      	bcc.n	8000a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00f      	b.n	8000a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <SysTick_Config+0x40>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6a:	210f      	movs	r1, #15
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	f7ff ff8e 	bl	8000990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <SysTick_Config+0x40>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <SysTick_Config+0x40>)
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	e000e010 	.word	0xe000e010

08000a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ff29 	bl	80008f0 <__NVIC_SetPriorityGrouping>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4603      	mov	r3, r0
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab8:	f7ff ff3e 	bl	8000938 <__NVIC_GetPriorityGrouping>
 8000abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	68b9      	ldr	r1, [r7, #8]
 8000ac2:	6978      	ldr	r0, [r7, #20]
 8000ac4:	f7ff ff8e 	bl	80009e4 <NVIC_EncodePriority>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff5d 	bl	8000990 <__NVIC_SetPriority>
}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff31 	bl	8000954 <__NVIC_EnableIRQ>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff ffa2 	bl	8000a4c <SysTick_Config>
 8000b08:	4603      	mov	r3, r0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d008      	beq.n	8000b36 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2204      	movs	r2, #4
 8000b28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e020      	b.n	8000b78 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f022 020e 	bic.w	r2, r2, #14
 8000b44:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f022 0201 	bic.w	r2, r2, #1
 8000b54:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b5e:	2101      	movs	r1, #1
 8000b60:	fa01 f202 	lsl.w	r2, r1, r2
 8000b64:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2200      	movs	r2, #0
 8000b72:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d005      	beq.n	8000ba6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	73fb      	strb	r3, [r7, #15]
 8000ba4:	e027      	b.n	8000bf6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f022 020e 	bic.w	r2, r2, #14
 8000bb4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f022 0201 	bic.w	r2, r2, #1
 8000bc4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bce:	2101      	movs	r1, #1
 8000bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d003      	beq.n	8000bf6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	4798      	blx	r3
    } 
  }
  return status;
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b087      	sub	sp, #28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0e:	e160      	b.n	8000ed2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	2101      	movs	r1, #1
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 8152 	beq.w	8000ecc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 0303 	and.w	r3, r3, #3
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d005      	beq.n	8000c40 <HAL_GPIO_Init+0x40>
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d130      	bne.n	8000ca2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	68da      	ldr	r2, [r3, #12]
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c76:	2201      	movs	r2, #1
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	091b      	lsrs	r3, r3, #4
 8000c8c:	f003 0201 	and.w	r2, r3, #1
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d017      	beq.n	8000cde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	2203      	movs	r2, #3
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 0303 	and.w	r3, r3, #3
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d123      	bne.n	8000d32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	08da      	lsrs	r2, r3, #3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3208      	adds	r2, #8
 8000cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	220f      	movs	r2, #15
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	691a      	ldr	r2, [r3, #16]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	f003 0307 	and.w	r3, r3, #7
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	08da      	lsrs	r2, r3, #3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3208      	adds	r2, #8
 8000d2c:	6939      	ldr	r1, [r7, #16]
 8000d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0203 	and.w	r2, r3, #3
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 80ac 	beq.w	8000ecc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d74:	4b5e      	ldr	r3, [pc, #376]	; (8000ef0 <HAL_GPIO_Init+0x2f0>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a5d      	ldr	r2, [pc, #372]	; (8000ef0 <HAL_GPIO_Init+0x2f0>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b5b      	ldr	r3, [pc, #364]	; (8000ef0 <HAL_GPIO_Init+0x2f0>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d8c:	4a59      	ldr	r2, [pc, #356]	; (8000ef4 <HAL_GPIO_Init+0x2f4>)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	3302      	adds	r3, #2
 8000d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	220f      	movs	r2, #15
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000db6:	d025      	beq.n	8000e04 <HAL_GPIO_Init+0x204>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a4f      	ldr	r2, [pc, #316]	; (8000ef8 <HAL_GPIO_Init+0x2f8>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d01f      	beq.n	8000e00 <HAL_GPIO_Init+0x200>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a4e      	ldr	r2, [pc, #312]	; (8000efc <HAL_GPIO_Init+0x2fc>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d019      	beq.n	8000dfc <HAL_GPIO_Init+0x1fc>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a4d      	ldr	r2, [pc, #308]	; (8000f00 <HAL_GPIO_Init+0x300>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d013      	beq.n	8000df8 <HAL_GPIO_Init+0x1f8>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a4c      	ldr	r2, [pc, #304]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d00d      	beq.n	8000df4 <HAL_GPIO_Init+0x1f4>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a4b      	ldr	r2, [pc, #300]	; (8000f08 <HAL_GPIO_Init+0x308>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d007      	beq.n	8000df0 <HAL_GPIO_Init+0x1f0>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a4a      	ldr	r2, [pc, #296]	; (8000f0c <HAL_GPIO_Init+0x30c>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d101      	bne.n	8000dec <HAL_GPIO_Init+0x1ec>
 8000de8:	2306      	movs	r3, #6
 8000dea:	e00c      	b.n	8000e06 <HAL_GPIO_Init+0x206>
 8000dec:	2307      	movs	r3, #7
 8000dee:	e00a      	b.n	8000e06 <HAL_GPIO_Init+0x206>
 8000df0:	2305      	movs	r3, #5
 8000df2:	e008      	b.n	8000e06 <HAL_GPIO_Init+0x206>
 8000df4:	2304      	movs	r3, #4
 8000df6:	e006      	b.n	8000e06 <HAL_GPIO_Init+0x206>
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e004      	b.n	8000e06 <HAL_GPIO_Init+0x206>
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	e002      	b.n	8000e06 <HAL_GPIO_Init+0x206>
 8000e00:	2301      	movs	r3, #1
 8000e02:	e000      	b.n	8000e06 <HAL_GPIO_Init+0x206>
 8000e04:	2300      	movs	r3, #0
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	f002 0203 	and.w	r2, r2, #3
 8000e0c:	0092      	lsls	r2, r2, #2
 8000e0e:	4093      	lsls	r3, r2
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e16:	4937      	ldr	r1, [pc, #220]	; (8000ef4 <HAL_GPIO_Init+0x2f4>)
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	089b      	lsrs	r3, r3, #2
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e24:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <HAL_GPIO_Init+0x310>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e48:	4a31      	ldr	r2, [pc, #196]	; (8000f10 <HAL_GPIO_Init+0x310>)
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e4e:	4b30      	ldr	r3, [pc, #192]	; (8000f10 <HAL_GPIO_Init+0x310>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	43db      	mvns	r3, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e72:	4a27      	ldr	r2, [pc, #156]	; (8000f10 <HAL_GPIO_Init+0x310>)
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e78:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <HAL_GPIO_Init+0x310>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e9c:	4a1c      	ldr	r2, [pc, #112]	; (8000f10 <HAL_GPIO_Init+0x310>)
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <HAL_GPIO_Init+0x310>)
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ec6:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <HAL_GPIO_Init+0x310>)
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f47f ae97 	bne.w	8000c10 <HAL_GPIO_Init+0x10>
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	bf00      	nop
 8000ee6:	371c      	adds	r7, #28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40010000 	.word	0x40010000
 8000ef8:	48000400 	.word	0x48000400
 8000efc:	48000800 	.word	0x48000800
 8000f00:	48000c00 	.word	0x48000c00
 8000f04:	48001000 	.word	0x48001000
 8000f08:	48001400 	.word	0x48001400
 8000f0c:	48001800 	.word	0x48001800
 8000f10:	40010400 	.word	0x40010400

08000f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
 8000f20:	4613      	mov	r3, r2
 8000f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f24:	787b      	ldrb	r3, [r7, #1]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f2a:	887a      	ldrh	r2, [r7, #2]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f30:	e002      	b.n	8000f38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f32:	887a      	ldrh	r2, [r7, #2]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f56:	887a      	ldrh	r2, [r7, #2]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	041a      	lsls	r2, r3, #16
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	43d9      	mvns	r1, r3
 8000f62:	887b      	ldrh	r3, [r7, #2]
 8000f64:	400b      	ands	r3, r1
 8000f66:	431a      	orrs	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	619a      	str	r2, [r3, #24]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f84:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f88:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d102      	bne.n	8000f9e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	f001 b83a 	b.w	8002012 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fa2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 816f 	beq.w	8001292 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fb4:	4bb5      	ldr	r3, [pc, #724]	; (800128c <HAL_RCC_OscConfig+0x314>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 030c 	and.w	r3, r3, #12
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d00c      	beq.n	8000fda <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fc0:	4bb2      	ldr	r3, [pc, #712]	; (800128c <HAL_RCC_OscConfig+0x314>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 030c 	and.w	r3, r3, #12
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d15c      	bne.n	8001086 <HAL_RCC_OscConfig+0x10e>
 8000fcc:	4baf      	ldr	r3, [pc, #700]	; (800128c <HAL_RCC_OscConfig+0x314>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd8:	d155      	bne.n	8001086 <HAL_RCC_OscConfig+0x10e>
 8000fda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fde:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000fe6:	fa93 f3a3 	rbit	r3, r3
 8000fea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff2:	fab3 f383 	clz	r3, r3
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	095b      	lsrs	r3, r3, #5
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b01      	cmp	r3, #1
 8001004:	d102      	bne.n	800100c <HAL_RCC_OscConfig+0x94>
 8001006:	4ba1      	ldr	r3, [pc, #644]	; (800128c <HAL_RCC_OscConfig+0x314>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	e015      	b.n	8001038 <HAL_RCC_OscConfig+0xc0>
 800100c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001010:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001014:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001018:	fa93 f3a3 	rbit	r3, r3
 800101c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001020:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001024:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001028:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800102c:	fa93 f3a3 	rbit	r3, r3
 8001030:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001034:	4b95      	ldr	r3, [pc, #596]	; (800128c <HAL_RCC_OscConfig+0x314>)
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800103c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001040:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001044:	fa92 f2a2 	rbit	r2, r2
 8001048:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800104c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001050:	fab2 f282 	clz	r2, r2
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	f042 0220 	orr.w	r2, r2, #32
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	f002 021f 	and.w	r2, r2, #31
 8001060:	2101      	movs	r1, #1
 8001062:	fa01 f202 	lsl.w	r2, r1, r2
 8001066:	4013      	ands	r3, r2
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 8111 	beq.w	8001290 <HAL_RCC_OscConfig+0x318>
 800106e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001072:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	f040 8108 	bne.w	8001290 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	f000 bfc6 	b.w	8002012 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001086:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800108a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001096:	d106      	bne.n	80010a6 <HAL_RCC_OscConfig+0x12e>
 8001098:	4b7c      	ldr	r3, [pc, #496]	; (800128c <HAL_RCC_OscConfig+0x314>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a7b      	ldr	r2, [pc, #492]	; (800128c <HAL_RCC_OscConfig+0x314>)
 800109e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	e036      	b.n	8001114 <HAL_RCC_OscConfig+0x19c>
 80010a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10c      	bne.n	80010d0 <HAL_RCC_OscConfig+0x158>
 80010b6:	4b75      	ldr	r3, [pc, #468]	; (800128c <HAL_RCC_OscConfig+0x314>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a74      	ldr	r2, [pc, #464]	; (800128c <HAL_RCC_OscConfig+0x314>)
 80010bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4b72      	ldr	r3, [pc, #456]	; (800128c <HAL_RCC_OscConfig+0x314>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a71      	ldr	r2, [pc, #452]	; (800128c <HAL_RCC_OscConfig+0x314>)
 80010c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e021      	b.n	8001114 <HAL_RCC_OscConfig+0x19c>
 80010d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010e0:	d10c      	bne.n	80010fc <HAL_RCC_OscConfig+0x184>
 80010e2:	4b6a      	ldr	r3, [pc, #424]	; (800128c <HAL_RCC_OscConfig+0x314>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a69      	ldr	r2, [pc, #420]	; (800128c <HAL_RCC_OscConfig+0x314>)
 80010e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	4b67      	ldr	r3, [pc, #412]	; (800128c <HAL_RCC_OscConfig+0x314>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a66      	ldr	r2, [pc, #408]	; (800128c <HAL_RCC_OscConfig+0x314>)
 80010f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	e00b      	b.n	8001114 <HAL_RCC_OscConfig+0x19c>
 80010fc:	4b63      	ldr	r3, [pc, #396]	; (800128c <HAL_RCC_OscConfig+0x314>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a62      	ldr	r2, [pc, #392]	; (800128c <HAL_RCC_OscConfig+0x314>)
 8001102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	4b60      	ldr	r3, [pc, #384]	; (800128c <HAL_RCC_OscConfig+0x314>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a5f      	ldr	r2, [pc, #380]	; (800128c <HAL_RCC_OscConfig+0x314>)
 800110e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001112:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001114:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001118:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d059      	beq.n	80011d8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fbb4 	bl	8000890 <HAL_GetTick>
 8001128:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112c:	e00a      	b.n	8001144 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800112e:	f7ff fbaf 	bl	8000890 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b64      	cmp	r3, #100	; 0x64
 800113c:	d902      	bls.n	8001144 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	f000 bf67 	b.w	8002012 <HAL_RCC_OscConfig+0x109a>
 8001144:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001148:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001150:	fa93 f3a3 	rbit	r3, r3
 8001154:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001158:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115c:	fab3 f383 	clz	r3, r3
 8001160:	b2db      	uxtb	r3, r3
 8001162:	095b      	lsrs	r3, r3, #5
 8001164:	b2db      	uxtb	r3, r3
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b01      	cmp	r3, #1
 800116e:	d102      	bne.n	8001176 <HAL_RCC_OscConfig+0x1fe>
 8001170:	4b46      	ldr	r3, [pc, #280]	; (800128c <HAL_RCC_OscConfig+0x314>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	e015      	b.n	80011a2 <HAL_RCC_OscConfig+0x22a>
 8001176:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800117a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001182:	fa93 f3a3 	rbit	r3, r3
 8001186:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800118a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800118e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001192:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001196:	fa93 f3a3 	rbit	r3, r3
 800119a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800119e:	4b3b      	ldr	r3, [pc, #236]	; (800128c <HAL_RCC_OscConfig+0x314>)
 80011a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011a6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80011aa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80011ae:	fa92 f2a2 	rbit	r2, r2
 80011b2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80011b6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80011ba:	fab2 f282 	clz	r2, r2
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	f042 0220 	orr.w	r2, r2, #32
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	f002 021f 	and.w	r2, r2, #31
 80011ca:	2101      	movs	r1, #1
 80011cc:	fa01 f202 	lsl.w	r2, r1, r2
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0ab      	beq.n	800112e <HAL_RCC_OscConfig+0x1b6>
 80011d6:	e05c      	b.n	8001292 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fb5a 	bl	8000890 <HAL_GetTick>
 80011dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e0:	e00a      	b.n	80011f8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e2:	f7ff fb55 	bl	8000890 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	; 0x64
 80011f0:	d902      	bls.n	80011f8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	f000 bf0d 	b.w	8002012 <HAL_RCC_OscConfig+0x109a>
 80011f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011fc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001200:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001204:	fa93 f3a3 	rbit	r3, r3
 8001208:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800120c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001210:	fab3 f383 	clz	r3, r3
 8001214:	b2db      	uxtb	r3, r3
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	b2db      	uxtb	r3, r3
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b01      	cmp	r3, #1
 8001222:	d102      	bne.n	800122a <HAL_RCC_OscConfig+0x2b2>
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <HAL_RCC_OscConfig+0x314>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	e015      	b.n	8001256 <HAL_RCC_OscConfig+0x2de>
 800122a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800122e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001232:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001236:	fa93 f3a3 	rbit	r3, r3
 800123a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800123e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001242:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001246:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800124a:	fa93 f3a3 	rbit	r3, r3
 800124e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <HAL_RCC_OscConfig+0x314>)
 8001254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001256:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800125a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800125e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001262:	fa92 f2a2 	rbit	r2, r2
 8001266:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800126a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800126e:	fab2 f282 	clz	r2, r2
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	f042 0220 	orr.w	r2, r2, #32
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	f002 021f 	and.w	r2, r2, #31
 800127e:	2101      	movs	r1, #1
 8001280:	fa01 f202 	lsl.w	r2, r1, r2
 8001284:	4013      	ands	r3, r2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1ab      	bne.n	80011e2 <HAL_RCC_OscConfig+0x26a>
 800128a:	e002      	b.n	8001292 <HAL_RCC_OscConfig+0x31a>
 800128c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001292:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001296:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 817f 	beq.w	80015a6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012a8:	4ba7      	ldr	r3, [pc, #668]	; (8001548 <HAL_RCC_OscConfig+0x5d0>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 030c 	and.w	r3, r3, #12
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00c      	beq.n	80012ce <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012b4:	4ba4      	ldr	r3, [pc, #656]	; (8001548 <HAL_RCC_OscConfig+0x5d0>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 030c 	and.w	r3, r3, #12
 80012bc:	2b08      	cmp	r3, #8
 80012be:	d173      	bne.n	80013a8 <HAL_RCC_OscConfig+0x430>
 80012c0:	4ba1      	ldr	r3, [pc, #644]	; (8001548 <HAL_RCC_OscConfig+0x5d0>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80012c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012cc:	d16c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x430>
 80012ce:	2302      	movs	r3, #2
 80012d0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80012d8:	fa93 f3a3 	rbit	r3, r3
 80012dc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80012e0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e4:	fab3 f383 	clz	r3, r3
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d102      	bne.n	80012fe <HAL_RCC_OscConfig+0x386>
 80012f8:	4b93      	ldr	r3, [pc, #588]	; (8001548 <HAL_RCC_OscConfig+0x5d0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	e013      	b.n	8001326 <HAL_RCC_OscConfig+0x3ae>
 80012fe:	2302      	movs	r3, #2
 8001300:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001304:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001308:	fa93 f3a3 	rbit	r3, r3
 800130c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001310:	2302      	movs	r3, #2
 8001312:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001316:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800131a:	fa93 f3a3 	rbit	r3, r3
 800131e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001322:	4b89      	ldr	r3, [pc, #548]	; (8001548 <HAL_RCC_OscConfig+0x5d0>)
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	2202      	movs	r2, #2
 8001328:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800132c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001330:	fa92 f2a2 	rbit	r2, r2
 8001334:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001338:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800133c:	fab2 f282 	clz	r2, r2
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	f042 0220 	orr.w	r2, r2, #32
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	f002 021f 	and.w	r2, r2, #31
 800134c:	2101      	movs	r1, #1
 800134e:	fa01 f202 	lsl.w	r2, r1, r2
 8001352:	4013      	ands	r3, r2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00a      	beq.n	800136e <HAL_RCC_OscConfig+0x3f6>
 8001358:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800135c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d002      	beq.n	800136e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	f000 be52 	b.w	8002012 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136e:	4b76      	ldr	r3, [pc, #472]	; (8001548 <HAL_RCC_OscConfig+0x5d0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001376:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800137a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	21f8      	movs	r1, #248	; 0xf8
 8001384:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001388:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800138c:	fa91 f1a1 	rbit	r1, r1
 8001390:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001394:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001398:	fab1 f181 	clz	r1, r1
 800139c:	b2c9      	uxtb	r1, r1
 800139e:	408b      	lsls	r3, r1
 80013a0:	4969      	ldr	r1, [pc, #420]	; (8001548 <HAL_RCC_OscConfig+0x5d0>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a6:	e0fe      	b.n	80015a6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 8088 	beq.w	80014ca <HAL_RCC_OscConfig+0x552>
 80013ba:	2301      	movs	r3, #1
 80013bc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80013c4:	fa93 f3a3 	rbit	r3, r3
 80013c8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80013cc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d0:	fab3 f383 	clz	r3, r3
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	461a      	mov	r2, r3
 80013e2:	2301      	movs	r3, #1
 80013e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e6:	f7ff fa53 	bl	8000890 <HAL_GetTick>
 80013ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ee:	e00a      	b.n	8001406 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f0:	f7ff fa4e 	bl	8000890 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d902      	bls.n	8001406 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	f000 be06 	b.w	8002012 <HAL_RCC_OscConfig+0x109a>
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001410:	fa93 f3a3 	rbit	r3, r3
 8001414:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001418:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141c:	fab3 f383 	clz	r3, r3
 8001420:	b2db      	uxtb	r3, r3
 8001422:	095b      	lsrs	r3, r3, #5
 8001424:	b2db      	uxtb	r3, r3
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b01      	cmp	r3, #1
 800142e:	d102      	bne.n	8001436 <HAL_RCC_OscConfig+0x4be>
 8001430:	4b45      	ldr	r3, [pc, #276]	; (8001548 <HAL_RCC_OscConfig+0x5d0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	e013      	b.n	800145e <HAL_RCC_OscConfig+0x4e6>
 8001436:	2302      	movs	r3, #2
 8001438:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001440:	fa93 f3a3 	rbit	r3, r3
 8001444:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001448:	2302      	movs	r3, #2
 800144a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800144e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001452:	fa93 f3a3 	rbit	r3, r3
 8001456:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800145a:	4b3b      	ldr	r3, [pc, #236]	; (8001548 <HAL_RCC_OscConfig+0x5d0>)
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	2202      	movs	r2, #2
 8001460:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001464:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001468:	fa92 f2a2 	rbit	r2, r2
 800146c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001470:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001474:	fab2 f282 	clz	r2, r2
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	f042 0220 	orr.w	r2, r2, #32
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	f002 021f 	and.w	r2, r2, #31
 8001484:	2101      	movs	r1, #1
 8001486:	fa01 f202 	lsl.w	r2, r1, r2
 800148a:	4013      	ands	r3, r2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0af      	beq.n	80013f0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001490:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <HAL_RCC_OscConfig+0x5d0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001498:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800149c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	21f8      	movs	r1, #248	; 0xf8
 80014a6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014aa:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80014ae:	fa91 f1a1 	rbit	r1, r1
 80014b2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80014b6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80014ba:	fab1 f181 	clz	r1, r1
 80014be:	b2c9      	uxtb	r1, r1
 80014c0:	408b      	lsls	r3, r1
 80014c2:	4921      	ldr	r1, [pc, #132]	; (8001548 <HAL_RCC_OscConfig+0x5d0>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	600b      	str	r3, [r1, #0]
 80014c8:	e06d      	b.n	80015a6 <HAL_RCC_OscConfig+0x62e>
 80014ca:	2301      	movs	r3, #1
 80014cc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80014d4:	fa93 f3a3 	rbit	r3, r3
 80014d8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80014dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e0:	fab3 f383 	clz	r3, r3
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	461a      	mov	r2, r3
 80014f2:	2300      	movs	r3, #0
 80014f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff f9cb 	bl	8000890 <HAL_GetTick>
 80014fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fe:	e00a      	b.n	8001516 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001500:	f7ff f9c6 	bl	8000890 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d902      	bls.n	8001516 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	f000 bd7e 	b.w	8002012 <HAL_RCC_OscConfig+0x109a>
 8001516:	2302      	movs	r3, #2
 8001518:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001520:	fa93 f3a3 	rbit	r3, r3
 8001524:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001528:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b01      	cmp	r3, #1
 800153e:	d105      	bne.n	800154c <HAL_RCC_OscConfig+0x5d4>
 8001540:	4b01      	ldr	r3, [pc, #4]	; (8001548 <HAL_RCC_OscConfig+0x5d0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	e016      	b.n	8001574 <HAL_RCC_OscConfig+0x5fc>
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000
 800154c:	2302      	movs	r3, #2
 800154e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001552:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001556:	fa93 f3a3 	rbit	r3, r3
 800155a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800155e:	2302      	movs	r3, #2
 8001560:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001564:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001568:	fa93 f3a3 	rbit	r3, r3
 800156c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001570:	4bbf      	ldr	r3, [pc, #764]	; (8001870 <HAL_RCC_OscConfig+0x8f8>)
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	2202      	movs	r2, #2
 8001576:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800157a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800157e:	fa92 f2a2 	rbit	r2, r2
 8001582:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001586:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800158a:	fab2 f282 	clz	r2, r2
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	f042 0220 	orr.w	r2, r2, #32
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	f002 021f 	and.w	r2, r2, #31
 800159a:	2101      	movs	r1, #1
 800159c:	fa01 f202 	lsl.w	r2, r1, r2
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1ac      	bne.n	8001500 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 8113 	beq.w	80017e2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d07c      	beq.n	80016c6 <HAL_RCC_OscConfig+0x74e>
 80015cc:	2301      	movs	r3, #1
 80015ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015d6:	fa93 f3a3 	rbit	r3, r3
 80015da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80015de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015e2:	fab3 f383 	clz	r3, r3
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	4ba2      	ldr	r3, [pc, #648]	; (8001874 <HAL_RCC_OscConfig+0x8fc>)
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	461a      	mov	r2, r3
 80015f2:	2301      	movs	r3, #1
 80015f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f6:	f7ff f94b 	bl	8000890 <HAL_GetTick>
 80015fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fe:	e00a      	b.n	8001616 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001600:	f7ff f946 	bl	8000890 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d902      	bls.n	8001616 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	f000 bcfe 	b.w	8002012 <HAL_RCC_OscConfig+0x109a>
 8001616:	2302      	movs	r3, #2
 8001618:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001620:	fa93 f2a3 	rbit	r2, r3
 8001624:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001628:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001636:	2202      	movs	r2, #2
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800163e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	fa93 f2a3 	rbit	r2, r3
 8001648:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800164c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001656:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800165a:	2202      	movs	r2, #2
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001662:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	fa93 f2a3 	rbit	r2, r3
 800166c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001670:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001674:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001676:	4b7e      	ldr	r3, [pc, #504]	; (8001870 <HAL_RCC_OscConfig+0x8f8>)
 8001678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800167a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800167e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001682:	2102      	movs	r1, #2
 8001684:	6019      	str	r1, [r3, #0]
 8001686:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800168a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	fa93 f1a3 	rbit	r1, r3
 8001694:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001698:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800169c:	6019      	str	r1, [r3, #0]
  return result;
 800169e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	fab3 f383 	clz	r3, r3
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	f003 031f 	and.w	r3, r3, #31
 80016b8:	2101      	movs	r1, #1
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d09d      	beq.n	8001600 <HAL_RCC_OscConfig+0x688>
 80016c4:	e08d      	b.n	80017e2 <HAL_RCC_OscConfig+0x86a>
 80016c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	fa93 f2a3 	rbit	r2, r3
 80016e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80016e8:	601a      	str	r2, [r3, #0]
  return result;
 80016ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80016f2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f4:	fab3 f383 	clz	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b5d      	ldr	r3, [pc, #372]	; (8001874 <HAL_RCC_OscConfig+0x8fc>)
 80016fe:	4413      	add	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	461a      	mov	r2, r3
 8001704:	2300      	movs	r3, #0
 8001706:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001708:	f7ff f8c2 	bl	8000890 <HAL_GetTick>
 800170c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001710:	e00a      	b.n	8001728 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001712:	f7ff f8bd 	bl	8000890 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d902      	bls.n	8001728 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	f000 bc75 	b.w	8002012 <HAL_RCC_OscConfig+0x109a>
 8001728:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800172c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001730:	2202      	movs	r2, #2
 8001732:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001734:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001738:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	fa93 f2a3 	rbit	r2, r3
 8001742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001746:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001750:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001754:	2202      	movs	r2, #2
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800175c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	fa93 f2a3 	rbit	r2, r3
 8001766:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800176a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001774:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001778:	2202      	movs	r2, #2
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001780:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	fa93 f2a3 	rbit	r2, r3
 800178a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800178e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001792:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001794:	4b36      	ldr	r3, [pc, #216]	; (8001870 <HAL_RCC_OscConfig+0x8f8>)
 8001796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001798:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800179c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017a0:	2102      	movs	r1, #2
 80017a2:	6019      	str	r1, [r3, #0]
 80017a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	fa93 f1a3 	rbit	r1, r3
 80017b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017ba:	6019      	str	r1, [r3, #0]
  return result;
 80017bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	fab3 f383 	clz	r3, r3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	f003 031f 	and.w	r3, r3, #31
 80017d6:	2101      	movs	r1, #1
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	4013      	ands	r3, r2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d197      	bne.n	8001712 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 81a5 	beq.w	8001b42 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017fe:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <HAL_RCC_OscConfig+0x8f8>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d116      	bne.n	8001838 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	4b19      	ldr	r3, [pc, #100]	; (8001870 <HAL_RCC_OscConfig+0x8f8>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	4a18      	ldr	r2, [pc, #96]	; (8001870 <HAL_RCC_OscConfig+0x8f8>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	61d3      	str	r3, [r2, #28]
 8001816:	4b16      	ldr	r3, [pc, #88]	; (8001870 <HAL_RCC_OscConfig+0x8f8>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800181e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001822:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800182c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001830:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001832:	2301      	movs	r3, #1
 8001834:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <HAL_RCC_OscConfig+0x900>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d121      	bne.n	8001888 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_RCC_OscConfig+0x900>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <HAL_RCC_OscConfig+0x900>)
 800184a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001850:	f7ff f81e 	bl	8000890 <HAL_GetTick>
 8001854:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001858:	e010      	b.n	800187c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800185a:	f7ff f819 	bl	8000890 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b64      	cmp	r3, #100	; 0x64
 8001868:	d908      	bls.n	800187c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e3d1      	b.n	8002012 <HAL_RCC_OscConfig+0x109a>
 800186e:	bf00      	nop
 8001870:	40021000 	.word	0x40021000
 8001874:	10908120 	.word	0x10908120
 8001878:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187c:	4b8d      	ldr	r3, [pc, #564]	; (8001ab4 <HAL_RCC_OscConfig+0xb3c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0e8      	beq.n	800185a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001888:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d106      	bne.n	80018a6 <HAL_RCC_OscConfig+0x92e>
 8001898:	4b87      	ldr	r3, [pc, #540]	; (8001ab8 <HAL_RCC_OscConfig+0xb40>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4a86      	ldr	r2, [pc, #536]	; (8001ab8 <HAL_RCC_OscConfig+0xb40>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6213      	str	r3, [r2, #32]
 80018a4:	e035      	b.n	8001912 <HAL_RCC_OscConfig+0x99a>
 80018a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x958>
 80018b6:	4b80      	ldr	r3, [pc, #512]	; (8001ab8 <HAL_RCC_OscConfig+0xb40>)
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	4a7f      	ldr	r2, [pc, #508]	; (8001ab8 <HAL_RCC_OscConfig+0xb40>)
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	6213      	str	r3, [r2, #32]
 80018c2:	4b7d      	ldr	r3, [pc, #500]	; (8001ab8 <HAL_RCC_OscConfig+0xb40>)
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4a7c      	ldr	r2, [pc, #496]	; (8001ab8 <HAL_RCC_OscConfig+0xb40>)
 80018c8:	f023 0304 	bic.w	r3, r3, #4
 80018cc:	6213      	str	r3, [r2, #32]
 80018ce:	e020      	b.n	8001912 <HAL_RCC_OscConfig+0x99a>
 80018d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b05      	cmp	r3, #5
 80018de:	d10c      	bne.n	80018fa <HAL_RCC_OscConfig+0x982>
 80018e0:	4b75      	ldr	r3, [pc, #468]	; (8001ab8 <HAL_RCC_OscConfig+0xb40>)
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	4a74      	ldr	r2, [pc, #464]	; (8001ab8 <HAL_RCC_OscConfig+0xb40>)
 80018e6:	f043 0304 	orr.w	r3, r3, #4
 80018ea:	6213      	str	r3, [r2, #32]
 80018ec:	4b72      	ldr	r3, [pc, #456]	; (8001ab8 <HAL_RCC_OscConfig+0xb40>)
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	4a71      	ldr	r2, [pc, #452]	; (8001ab8 <HAL_RCC_OscConfig+0xb40>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6213      	str	r3, [r2, #32]
 80018f8:	e00b      	b.n	8001912 <HAL_RCC_OscConfig+0x99a>
 80018fa:	4b6f      	ldr	r3, [pc, #444]	; (8001ab8 <HAL_RCC_OscConfig+0xb40>)
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4a6e      	ldr	r2, [pc, #440]	; (8001ab8 <HAL_RCC_OscConfig+0xb40>)
 8001900:	f023 0301 	bic.w	r3, r3, #1
 8001904:	6213      	str	r3, [r2, #32]
 8001906:	4b6c      	ldr	r3, [pc, #432]	; (8001ab8 <HAL_RCC_OscConfig+0xb40>)
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	4a6b      	ldr	r2, [pc, #428]	; (8001ab8 <HAL_RCC_OscConfig+0xb40>)
 800190c:	f023 0304 	bic.w	r3, r3, #4
 8001910:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001916:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8081 	beq.w	8001a26 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001924:	f7fe ffb4 	bl	8000890 <HAL_GetTick>
 8001928:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192c:	e00b      	b.n	8001946 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7fe ffaf 	bl	8000890 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	f241 3288 	movw	r2, #5000	; 0x1388
 800193e:	4293      	cmp	r3, r2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e365      	b.n	8002012 <HAL_RCC_OscConfig+0x109a>
 8001946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800194a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800194e:	2202      	movs	r2, #2
 8001950:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001956:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	fa93 f2a3 	rbit	r2, r3
 8001960:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001964:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800196e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001972:	2202      	movs	r2, #2
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800197a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	fa93 f2a3 	rbit	r2, r3
 8001984:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001988:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800198c:	601a      	str	r2, [r3, #0]
  return result;
 800198e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001992:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001996:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	f043 0302 	orr.w	r3, r3, #2
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d102      	bne.n	80019b2 <HAL_RCC_OscConfig+0xa3a>
 80019ac:	4b42      	ldr	r3, [pc, #264]	; (8001ab8 <HAL_RCC_OscConfig+0xb40>)
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	e013      	b.n	80019da <HAL_RCC_OscConfig+0xa62>
 80019b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80019ba:	2202      	movs	r2, #2
 80019bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	fa93 f2a3 	rbit	r2, r3
 80019cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <HAL_RCC_OscConfig+0xb40>)
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019de:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80019e2:	2102      	movs	r1, #2
 80019e4:	6011      	str	r1, [r2, #0]
 80019e6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019ea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	fa92 f1a2 	rbit	r1, r2
 80019f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019f8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80019fc:	6011      	str	r1, [r2, #0]
  return result;
 80019fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a02:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	fab2 f282 	clz	r2, r2
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	f002 021f 	and.w	r2, r2, #31
 8001a18:	2101      	movs	r1, #1
 8001a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d084      	beq.n	800192e <HAL_RCC_OscConfig+0x9b6>
 8001a24:	e083      	b.n	8001b2e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a26:	f7fe ff33 	bl	8000890 <HAL_GetTick>
 8001a2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a2e:	e00b      	b.n	8001a48 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a30:	f7fe ff2e 	bl	8000890 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e2e4      	b.n	8002012 <HAL_RCC_OscConfig+0x109a>
 8001a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a50:	2202      	movs	r2, #2
 8001a52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a58:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	fa93 f2a3 	rbit	r2, r3
 8001a62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a66:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a70:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a74:	2202      	movs	r2, #2
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	fa93 f2a3 	rbit	r2, r3
 8001a86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a8a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a8e:	601a      	str	r2, [r3, #0]
  return result;
 8001a90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a94:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a98:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9a:	fab3 f383 	clz	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	095b      	lsrs	r3, r3, #5
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d106      	bne.n	8001abc <HAL_RCC_OscConfig+0xb44>
 8001aae:	4b02      	ldr	r3, [pc, #8]	; (8001ab8 <HAL_RCC_OscConfig+0xb40>)
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	e017      	b.n	8001ae4 <HAL_RCC_OscConfig+0xb6c>
 8001ab4:	40007000 	.word	0x40007000
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001acc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	fa93 f2a3 	rbit	r2, r3
 8001ad6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ada:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	4bb3      	ldr	r3, [pc, #716]	; (8001db0 <HAL_RCC_OscConfig+0xe38>)
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ae8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001aec:	2102      	movs	r1, #2
 8001aee:	6011      	str	r1, [r2, #0]
 8001af0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001af4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	fa92 f1a2 	rbit	r1, r2
 8001afe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b02:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001b06:	6011      	str	r1, [r2, #0]
  return result;
 8001b08:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b0c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	fab2 f282 	clz	r2, r2
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	f002 021f 	and.w	r2, r2, #31
 8001b22:	2101      	movs	r1, #1
 8001b24:	fa01 f202 	lsl.w	r2, r1, r2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d180      	bne.n	8001a30 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b2e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d105      	bne.n	8001b42 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b36:	4b9e      	ldr	r3, [pc, #632]	; (8001db0 <HAL_RCC_OscConfig+0xe38>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	4a9d      	ldr	r2, [pc, #628]	; (8001db0 <HAL_RCC_OscConfig+0xe38>)
 8001b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b40:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 825e 	beq.w	8002010 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b54:	4b96      	ldr	r3, [pc, #600]	; (8001db0 <HAL_RCC_OscConfig+0xe38>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	f000 821f 	beq.w	8001fa0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	f040 8170 	bne.w	8001e54 <HAL_RCC_OscConfig+0xedc>
 8001b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b78:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b86:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	fa93 f2a3 	rbit	r2, r3
 8001b90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b94:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b98:	601a      	str	r2, [r3, #0]
  return result;
 8001b9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001ba2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba4:	fab3 f383 	clz	r3, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bba:	f7fe fe69 	bl	8000890 <HAL_GetTick>
 8001bbe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc2:	e009      	b.n	8001bd8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc4:	f7fe fe64 	bl	8000890 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e21c      	b.n	8002012 <HAL_RCC_OscConfig+0x109a>
 8001bd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bdc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001be0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001be4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bea:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	fa93 f2a3 	rbit	r2, r3
 8001bf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001bfc:	601a      	str	r2, [r3, #0]
  return result;
 8001bfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c02:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c06:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c08:	fab3 f383 	clz	r3, r3
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d102      	bne.n	8001c22 <HAL_RCC_OscConfig+0xcaa>
 8001c1c:	4b64      	ldr	r3, [pc, #400]	; (8001db0 <HAL_RCC_OscConfig+0xe38>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	e027      	b.n	8001c72 <HAL_RCC_OscConfig+0xcfa>
 8001c22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c26:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001c2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c34:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	fa93 f2a3 	rbit	r2, r3
 8001c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c42:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c4c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001c50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c5a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	fa93 f2a3 	rbit	r2, r3
 8001c64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c68:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	4b50      	ldr	r3, [pc, #320]	; (8001db0 <HAL_RCC_OscConfig+0xe38>)
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c76:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c7a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c7e:	6011      	str	r1, [r2, #0]
 8001c80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c84:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	fa92 f1a2 	rbit	r1, r2
 8001c8e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c92:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001c96:	6011      	str	r1, [r2, #0]
  return result;
 8001c98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c9c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	fab2 f282 	clz	r2, r2
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	f042 0220 	orr.w	r2, r2, #32
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	f002 021f 	and.w	r2, r2, #31
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d182      	bne.n	8001bc4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cbe:	4b3c      	ldr	r3, [pc, #240]	; (8001db0 <HAL_RCC_OscConfig+0xe38>)
 8001cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc2:	f023 020f 	bic.w	r2, r3, #15
 8001cc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	4937      	ldr	r1, [pc, #220]	; (8001db0 <HAL_RCC_OscConfig+0xe38>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001cd8:	4b35      	ldr	r3, [pc, #212]	; (8001db0 <HAL_RCC_OscConfig+0xe38>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001ce0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6a19      	ldr	r1, [r3, #32]
 8001cec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	492d      	ldr	r1, [pc, #180]	; (8001db0 <HAL_RCC_OscConfig+0xe38>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]
 8001d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d04:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d12:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	fa93 f2a3 	rbit	r2, r3
 8001d1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d20:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d24:	601a      	str	r2, [r3, #0]
  return result;
 8001d26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d2e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	461a      	mov	r2, r3
 8001d42:	2301      	movs	r3, #1
 8001d44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d46:	f7fe fda3 	bl	8000890 <HAL_GetTick>
 8001d4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d4e:	e009      	b.n	8001d64 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d50:	f7fe fd9e 	bl	8000890 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e156      	b.n	8002012 <HAL_RCC_OscConfig+0x109a>
 8001d64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d68:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d76:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	fa93 f2a3 	rbit	r2, r3
 8001d80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d84:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d88:	601a      	str	r2, [r3, #0]
  return result;
 8001d8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d92:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d94:	fab3 f383 	clz	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d105      	bne.n	8001db4 <HAL_RCC_OscConfig+0xe3c>
 8001da8:	4b01      	ldr	r3, [pc, #4]	; (8001db0 <HAL_RCC_OscConfig+0xe38>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	e02a      	b.n	8001e04 <HAL_RCC_OscConfig+0xe8c>
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001dbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	fa93 f2a3 	rbit	r2, r3
 8001dd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dde:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001de2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dec:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	fa93 f2a3 	rbit	r2, r3
 8001df6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfa:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	4b86      	ldr	r3, [pc, #536]	; (800201c <HAL_RCC_OscConfig+0x10a4>)
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e08:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e10:	6011      	str	r1, [r2, #0]
 8001e12:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e16:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	fa92 f1a2 	rbit	r1, r2
 8001e20:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e24:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001e28:	6011      	str	r1, [r2, #0]
  return result;
 8001e2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e2e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	fab2 f282 	clz	r2, r2
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	f042 0220 	orr.w	r2, r2, #32
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	f002 021f 	and.w	r2, r2, #31
 8001e44:	2101      	movs	r1, #1
 8001e46:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f43f af7f 	beq.w	8001d50 <HAL_RCC_OscConfig+0xdd8>
 8001e52:	e0dd      	b.n	8002010 <HAL_RCC_OscConfig+0x1098>
 8001e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e58:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e66:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	fa93 f2a3 	rbit	r2, r3
 8001e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e74:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e78:	601a      	str	r2, [r3, #0]
  return result;
 8001e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e82:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e84:	fab3 f383 	clz	r3, r3
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e8e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	461a      	mov	r2, r3
 8001e96:	2300      	movs	r3, #0
 8001e98:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7fe fcf9 	bl	8000890 <HAL_GetTick>
 8001e9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea2:	e009      	b.n	8001eb8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7fe fcf4 	bl	8000890 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e0ac      	b.n	8002012 <HAL_RCC_OscConfig+0x109a>
 8001eb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ebc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ec0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	fa93 f2a3 	rbit	r2, r3
 8001ed4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001edc:	601a      	str	r2, [r3, #0]
  return result;
 8001ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ee6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d102      	bne.n	8001f02 <HAL_RCC_OscConfig+0xf8a>
 8001efc:	4b47      	ldr	r3, [pc, #284]	; (800201c <HAL_RCC_OscConfig+0x10a4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	e027      	b.n	8001f52 <HAL_RCC_OscConfig+0xfda>
 8001f02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f06:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001f0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f14:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	fa93 f2a3 	rbit	r2, r3
 8001f1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f22:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f3a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	fa93 f2a3 	rbit	r2, r3
 8001f44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f48:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	4b33      	ldr	r3, [pc, #204]	; (800201c <HAL_RCC_OscConfig+0x10a4>)
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f56:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f5a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f5e:	6011      	str	r1, [r2, #0]
 8001f60:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f64:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	fa92 f1a2 	rbit	r1, r2
 8001f6e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f72:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001f76:	6011      	str	r1, [r2, #0]
  return result;
 8001f78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f7c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	fab2 f282 	clz	r2, r2
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	f042 0220 	orr.w	r2, r2, #32
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	f002 021f 	and.w	r2, r2, #31
 8001f92:	2101      	movs	r1, #1
 8001f94:	fa01 f202 	lsl.w	r2, r1, r2
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d182      	bne.n	8001ea4 <HAL_RCC_OscConfig+0xf2c>
 8001f9e:	e037      	b.n	8002010 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e02e      	b.n	8002012 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fb4:	4b19      	ldr	r3, [pc, #100]	; (800201c <HAL_RCC_OscConfig+0x10a4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001fbc:	4b17      	ldr	r3, [pc, #92]	; (800201c <HAL_RCC_OscConfig+0x10a4>)
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fc4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001fc8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d117      	bne.n	800200c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001fdc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001fe0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fe4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d10b      	bne.n	800200c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001ff4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ff8:	f003 020f 	and.w	r2, r3, #15
 8001ffc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002000:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40021000 	.word	0x40021000

08002020 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b09e      	sub	sp, #120	; 0x78
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e162      	b.n	80022fe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002038:	4b90      	ldr	r3, [pc, #576]	; (800227c <HAL_RCC_ClockConfig+0x25c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d910      	bls.n	8002068 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b8d      	ldr	r3, [pc, #564]	; (800227c <HAL_RCC_ClockConfig+0x25c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 0207 	bic.w	r2, r3, #7
 800204e:	498b      	ldr	r1, [pc, #556]	; (800227c <HAL_RCC_ClockConfig+0x25c>)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b89      	ldr	r3, [pc, #548]	; (800227c <HAL_RCC_ClockConfig+0x25c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e14a      	b.n	80022fe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002074:	4b82      	ldr	r3, [pc, #520]	; (8002280 <HAL_RCC_ClockConfig+0x260>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	497f      	ldr	r1, [pc, #508]	; (8002280 <HAL_RCC_ClockConfig+0x260>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 80dc 	beq.w	800224c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d13c      	bne.n	8002116 <HAL_RCC_ClockConfig+0xf6>
 800209c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020a4:	fa93 f3a3 	rbit	r3, r3
 80020a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80020aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ac:	fab3 f383 	clz	r3, r3
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d102      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xa6>
 80020c0:	4b6f      	ldr	r3, [pc, #444]	; (8002280 <HAL_RCC_ClockConfig+0x260>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	e00f      	b.n	80020e6 <HAL_RCC_ClockConfig+0xc6>
 80020c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020ce:	fa93 f3a3 	rbit	r3, r3
 80020d2:	667b      	str	r3, [r7, #100]	; 0x64
 80020d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020d8:	663b      	str	r3, [r7, #96]	; 0x60
 80020da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020dc:	fa93 f3a3 	rbit	r3, r3
 80020e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020e2:	4b67      	ldr	r3, [pc, #412]	; (8002280 <HAL_RCC_ClockConfig+0x260>)
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80020ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020ee:	fa92 f2a2 	rbit	r2, r2
 80020f2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80020f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020f6:	fab2 f282 	clz	r2, r2
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	f042 0220 	orr.w	r2, r2, #32
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	f002 021f 	and.w	r2, r2, #31
 8002106:	2101      	movs	r1, #1
 8002108:	fa01 f202 	lsl.w	r2, r1, r2
 800210c:	4013      	ands	r3, r2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d17b      	bne.n	800220a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e0f3      	b.n	80022fe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d13c      	bne.n	8002198 <HAL_RCC_ClockConfig+0x178>
 800211e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002122:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800212c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	095b      	lsrs	r3, r3, #5
 8002136:	b2db      	uxtb	r3, r3
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b01      	cmp	r3, #1
 8002140:	d102      	bne.n	8002148 <HAL_RCC_ClockConfig+0x128>
 8002142:	4b4f      	ldr	r3, [pc, #316]	; (8002280 <HAL_RCC_ClockConfig+0x260>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	e00f      	b.n	8002168 <HAL_RCC_ClockConfig+0x148>
 8002148:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800214c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	647b      	str	r3, [r7, #68]	; 0x44
 8002156:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800215a:	643b      	str	r3, [r7, #64]	; 0x40
 800215c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002164:	4b46      	ldr	r3, [pc, #280]	; (8002280 <HAL_RCC_ClockConfig+0x260>)
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800216c:	63ba      	str	r2, [r7, #56]	; 0x38
 800216e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002170:	fa92 f2a2 	rbit	r2, r2
 8002174:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002176:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002178:	fab2 f282 	clz	r2, r2
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	f042 0220 	orr.w	r2, r2, #32
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	f002 021f 	and.w	r2, r2, #31
 8002188:	2101      	movs	r1, #1
 800218a:	fa01 f202 	lsl.w	r2, r1, r2
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d13a      	bne.n	800220a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0b2      	b.n	80022fe <HAL_RCC_ClockConfig+0x2de>
 8002198:	2302      	movs	r3, #2
 800219a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219e:	fa93 f3a3 	rbit	r3, r3
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	095b      	lsrs	r3, r3, #5
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d102      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x1a0>
 80021ba:	4b31      	ldr	r3, [pc, #196]	; (8002280 <HAL_RCC_ClockConfig+0x260>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	e00d      	b.n	80021dc <HAL_RCC_ClockConfig+0x1bc>
 80021c0:	2302      	movs	r3, #2
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
 80021cc:	2302      	movs	r3, #2
 80021ce:	623b      	str	r3, [r7, #32]
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	4b29      	ldr	r3, [pc, #164]	; (8002280 <HAL_RCC_ClockConfig+0x260>)
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	2202      	movs	r2, #2
 80021de:	61ba      	str	r2, [r7, #24]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	fa92 f2a2 	rbit	r2, r2
 80021e6:	617a      	str	r2, [r7, #20]
  return result;
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	fab2 f282 	clz	r2, r2
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	f042 0220 	orr.w	r2, r2, #32
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	f002 021f 	and.w	r2, r2, #31
 80021fa:	2101      	movs	r1, #1
 80021fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e079      	b.n	80022fe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800220a:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <HAL_RCC_ClockConfig+0x260>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f023 0203 	bic.w	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	491a      	ldr	r1, [pc, #104]	; (8002280 <HAL_RCC_ClockConfig+0x260>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800221c:	f7fe fb38 	bl	8000890 <HAL_GetTick>
 8002220:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	e00a      	b.n	800223a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002224:	f7fe fb34 	bl	8000890 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e061      	b.n	80022fe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_RCC_ClockConfig+0x260>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 020c 	and.w	r2, r3, #12
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	429a      	cmp	r2, r3
 800224a:	d1eb      	bne.n	8002224 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_RCC_ClockConfig+0x25c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d214      	bcs.n	8002284 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	4b08      	ldr	r3, [pc, #32]	; (800227c <HAL_RCC_ClockConfig+0x25c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 0207 	bic.w	r2, r3, #7
 8002262:	4906      	ldr	r1, [pc, #24]	; (800227c <HAL_RCC_ClockConfig+0x25c>)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b04      	ldr	r3, [pc, #16]	; (800227c <HAL_RCC_ClockConfig+0x25c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d005      	beq.n	8002284 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e040      	b.n	80022fe <HAL_RCC_ClockConfig+0x2de>
 800227c:	40022000 	.word	0x40022000
 8002280:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002290:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_RCC_ClockConfig+0x2e8>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	491a      	ldr	r1, [pc, #104]	; (8002308 <HAL_RCC_ClockConfig+0x2e8>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ae:	4b16      	ldr	r3, [pc, #88]	; (8002308 <HAL_RCC_ClockConfig+0x2e8>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4912      	ldr	r1, [pc, #72]	; (8002308 <HAL_RCC_ClockConfig+0x2e8>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022c2:	f000 f829 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 80022c6:	4601      	mov	r1, r0
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <HAL_RCC_ClockConfig+0x2e8>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022d0:	22f0      	movs	r2, #240	; 0xf0
 80022d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	fa92 f2a2 	rbit	r2, r2
 80022da:	60fa      	str	r2, [r7, #12]
  return result;
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	fab2 f282 	clz	r2, r2
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	40d3      	lsrs	r3, r2
 80022e6:	4a09      	ldr	r2, [pc, #36]	; (800230c <HAL_RCC_ClockConfig+0x2ec>)
 80022e8:	5cd3      	ldrb	r3, [r2, r3]
 80022ea:	fa21 f303 	lsr.w	r3, r1, r3
 80022ee:	4a08      	ldr	r2, [pc, #32]	; (8002310 <HAL_RCC_ClockConfig+0x2f0>)
 80022f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <HAL_RCC_ClockConfig+0x2f4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe fa86 	bl	8000808 <HAL_InitTick>
  
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3778      	adds	r7, #120	; 0x78
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	08003834 	.word	0x08003834
 8002310:	20000000 	.word	0x20000000
 8002314:	20000004 	.word	0x20000004

08002318 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002318:	b480      	push	{r7}
 800231a:	b08b      	sub	sp, #44	; 0x2c
 800231c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800231e:	2300      	movs	r3, #0
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
 8002326:	2300      	movs	r3, #0
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002332:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	2b04      	cmp	r3, #4
 8002340:	d002      	beq.n	8002348 <HAL_RCC_GetSysClockFreq+0x30>
 8002342:	2b08      	cmp	r3, #8
 8002344:	d003      	beq.n	800234e <HAL_RCC_GetSysClockFreq+0x36>
 8002346:	e03f      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002348:	4b25      	ldr	r3, [pc, #148]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800234a:	623b      	str	r3, [r7, #32]
      break;
 800234c:	e03f      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002354:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002358:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	fa92 f2a2 	rbit	r2, r2
 8002360:	607a      	str	r2, [r7, #4]
  return result;
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	fab2 f282 	clz	r2, r2
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	40d3      	lsrs	r3, r2
 800236c:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800236e:	5cd3      	ldrb	r3, [r2, r3]
 8002370:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002372:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	220f      	movs	r2, #15
 800237c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	fa92 f2a2 	rbit	r2, r2
 8002384:	60fa      	str	r2, [r7, #12]
  return result;
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	fab2 f282 	clz	r2, r2
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	40d3      	lsrs	r3, r2
 8002390:	4a15      	ldr	r2, [pc, #84]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002392:	5cd3      	ldrb	r3, [r2, r3]
 8002394:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023a0:	4a0f      	ldr	r2, [pc, #60]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fb02 f303 	mul.w	r3, r2, r3
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
 80023b0:	e007      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023b2:	4a0b      	ldr	r2, [pc, #44]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	fb02 f303 	mul.w	r3, r2, r3
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	623b      	str	r3, [r7, #32]
      break;
 80023c6:	e002      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023ca:	623b      	str	r3, [r7, #32]
      break;
 80023cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ce:	6a3b      	ldr	r3, [r7, #32]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	372c      	adds	r7, #44	; 0x2c
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	40021000 	.word	0x40021000
 80023e0:	007a1200 	.word	0x007a1200
 80023e4:	0800384c 	.word	0x0800384c
 80023e8:	0800385c 	.word	0x0800385c

080023ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f0:	4b03      	ldr	r3, [pc, #12]	; (8002400 <HAL_RCC_GetHCLKFreq+0x14>)
 80023f2:	681b      	ldr	r3, [r3, #0]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000000 	.word	0x20000000

08002404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800240a:	f7ff ffef 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 800240e:	4601      	mov	r1, r0
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002418:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800241c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	fa92 f2a2 	rbit	r2, r2
 8002424:	603a      	str	r2, [r7, #0]
  return result;
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	fab2 f282 	clz	r2, r2
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	40d3      	lsrs	r3, r2
 8002430:	4a04      	ldr	r2, [pc, #16]	; (8002444 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002432:	5cd3      	ldrb	r3, [r2, r3]
 8002434:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40021000 	.word	0x40021000
 8002444:	08003844 	.word	0x08003844

08002448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800244e:	f7ff ffcd 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 8002452:	4601      	mov	r1, r0
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800245c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002460:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	fa92 f2a2 	rbit	r2, r2
 8002468:	603a      	str	r2, [r7, #0]
  return result;
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	fab2 f282 	clz	r2, r2
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	40d3      	lsrs	r3, r2
 8002474:	4a04      	ldr	r2, [pc, #16]	; (8002488 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002476:	5cd3      	ldrb	r3, [r2, r3]
 8002478:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40021000 	.word	0x40021000
 8002488:	08003844 	.word	0x08003844

0800248c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b092      	sub	sp, #72	; 0x48
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800249c:	2300      	movs	r3, #0
 800249e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 80d4 	beq.w	8002658 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024b0:	4b4e      	ldr	r3, [pc, #312]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10e      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024bc:	4b4b      	ldr	r3, [pc, #300]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	4a4a      	ldr	r2, [pc, #296]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c6:	61d3      	str	r3, [r2, #28]
 80024c8:	4b48      	ldr	r3, [pc, #288]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d4:	2301      	movs	r3, #1
 80024d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024da:	4b45      	ldr	r3, [pc, #276]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d118      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024e6:	4b42      	ldr	r3, [pc, #264]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a41      	ldr	r2, [pc, #260]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f2:	f7fe f9cd 	bl	8000890 <HAL_GetTick>
 80024f6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f8:	e008      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fa:	f7fe f9c9 	bl	8000890 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b64      	cmp	r3, #100	; 0x64
 8002506:	d901      	bls.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e1d6      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250c:	4b38      	ldr	r3, [pc, #224]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002518:	4b34      	ldr	r3, [pc, #208]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002520:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 8084 	beq.w	8002632 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002532:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002534:	429a      	cmp	r2, r3
 8002536:	d07c      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002538:	4b2c      	ldr	r3, [pc, #176]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002540:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002542:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002546:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002552:	fab3 f383 	clz	r3, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	461a      	mov	r2, r3
 800255a:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	461a      	mov	r2, r3
 8002562:	2301      	movs	r3, #1
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800256a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	461a      	mov	r2, r3
 8002586:	2300      	movs	r3, #0
 8002588:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800258a:	4a18      	ldr	r2, [pc, #96]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800258e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d04b      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7fe f979 	bl	8000890 <HAL_GetTick>
 800259e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7fe f975 	bl	8000890 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e180      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80025b8:	2302      	movs	r3, #2
 80025ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
 80025c4:	2302      	movs	r3, #2
 80025c6:	623b      	str	r3, [r7, #32]
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	fa93 f3a3 	rbit	r3, r3
 80025ce:	61fb      	str	r3, [r7, #28]
  return result;
 80025d0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d2:	fab3 f383 	clz	r3, r3
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	095b      	lsrs	r3, r3, #5
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f043 0302 	orr.w	r3, r3, #2
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d108      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80025e6:	4b01      	ldr	r3, [pc, #4]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	e00d      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40007000 	.word	0x40007000
 80025f4:	10908100 	.word	0x10908100
 80025f8:	2302      	movs	r3, #2
 80025fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	4b9a      	ldr	r3, [pc, #616]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	2202      	movs	r2, #2
 800260a:	613a      	str	r2, [r7, #16]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	fa92 f2a2 	rbit	r2, r2
 8002612:	60fa      	str	r2, [r7, #12]
  return result;
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	fab2 f282 	clz	r2, r2
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	f002 021f 	and.w	r2, r2, #31
 8002626:	2101      	movs	r1, #1
 8002628:	fa01 f202 	lsl.w	r2, r1, r2
 800262c:	4013      	ands	r3, r2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0b7      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002632:	4b8f      	ldr	r3, [pc, #572]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	498c      	ldr	r1, [pc, #560]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002640:	4313      	orrs	r3, r2
 8002642:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002644:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002648:	2b01      	cmp	r3, #1
 800264a:	d105      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800264c:	4b88      	ldr	r3, [pc, #544]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	4a87      	ldr	r2, [pc, #540]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002656:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002664:	4b82      	ldr	r3, [pc, #520]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	f023 0203 	bic.w	r2, r3, #3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	497f      	ldr	r1, [pc, #508]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d008      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002682:	4b7b      	ldr	r3, [pc, #492]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	4978      	ldr	r1, [pc, #480]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002690:	4313      	orrs	r3, r2
 8002692:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026a0:	4b73      	ldr	r3, [pc, #460]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	4970      	ldr	r1, [pc, #448]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026be:	4b6c      	ldr	r3, [pc, #432]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	f023 0210 	bic.w	r2, r3, #16
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	4969      	ldr	r1, [pc, #420]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80026dc:	4b64      	ldr	r3, [pc, #400]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e8:	4961      	ldr	r1, [pc, #388]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d008      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026fa:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f023 0220 	bic.w	r2, r3, #32
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	495a      	ldr	r1, [pc, #360]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002708:	4313      	orrs	r3, r2
 800270a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002718:	4b55      	ldr	r3, [pc, #340]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	4952      	ldr	r1, [pc, #328]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002726:	4313      	orrs	r3, r2
 8002728:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d008      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002736:	4b4e      	ldr	r3, [pc, #312]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	494b      	ldr	r1, [pc, #300]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002744:	4313      	orrs	r3, r2
 8002746:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002754:	4b46      	ldr	r3, [pc, #280]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	4943      	ldr	r1, [pc, #268]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002762:	4313      	orrs	r3, r2
 8002764:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800276e:	2b00      	cmp	r3, #0
 8002770:	d008      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002772:	4b3f      	ldr	r3, [pc, #252]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	493c      	ldr	r1, [pc, #240]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002790:	4b37      	ldr	r3, [pc, #220]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	4934      	ldr	r1, [pc, #208]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d008      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80027ae:	4b30      	ldr	r3, [pc, #192]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	492d      	ldr	r1, [pc, #180]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80027cc:	4b28      	ldr	r3, [pc, #160]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d8:	4925      	ldr	r1, [pc, #148]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d008      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80027ea:	4b21      	ldr	r3, [pc, #132]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	491e      	ldr	r1, [pc, #120]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002808:	4b19      	ldr	r3, [pc, #100]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002814:	4916      	ldr	r1, [pc, #88]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002816:	4313      	orrs	r3, r2
 8002818:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d008      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002826:	4b12      	ldr	r3, [pc, #72]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002832:	490f      	ldr	r1, [pc, #60]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002834:	4313      	orrs	r3, r2
 8002836:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002844:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002850:	4907      	ldr	r1, [pc, #28]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002852:	4313      	orrs	r3, r2
 8002854:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00c      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002862:	4b03      	ldr	r3, [pc, #12]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	e002      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000
 8002874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002876:	4913      	ldr	r1, [pc, #76]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002878:	4313      	orrs	r3, r2
 800287a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002888:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002894:	490b      	ldr	r1, [pc, #44]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002896:	4313      	orrs	r3, r2
 8002898:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80028a6:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b2:	4904      	ldr	r1, [pc, #16]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3748      	adds	r7, #72	; 0x48
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000

080028c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e040      	b.n	800295c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fd fe86 	bl	80005fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2224      	movs	r2, #36	; 0x24
 80028f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0201 	bic.w	r2, r2, #1
 8002904:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fb2a 	bl	8002f60 <UART_SetConfig>
 800290c:	4603      	mov	r3, r0
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e022      	b.n	800295c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fcf4 	bl	800330c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002932:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002942:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 fd7b 	bl	8003450 <UART_CheckIdleState>
 800295a:	4603      	mov	r3, r0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b0ba      	sub	sp, #232	; 0xe8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800298a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800298e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002992:	4013      	ands	r3, r2
 8002994:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002998:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d115      	bne.n	80029cc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80029a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00f      	beq.n	80029cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029b0:	f003 0320 	and.w	r3, r3, #32
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d009      	beq.n	80029cc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 82a3 	beq.w	8002f08 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	4798      	blx	r3
      }
      return;
 80029ca:	e29d      	b.n	8002f08 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80029cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 8117 	beq.w	8002c04 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80029d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d106      	bne.n	80029f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80029e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80029e6:	4b85      	ldr	r3, [pc, #532]	; (8002bfc <HAL_UART_IRQHandler+0x298>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 810a 	beq.w	8002c04 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d011      	beq.n	8002a20 <HAL_UART_IRQHandler+0xbc>
 80029fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00b      	beq.n	8002a20 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a16:	f043 0201 	orr.w	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d011      	beq.n	8002a50 <HAL_UART_IRQHandler+0xec>
 8002a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00b      	beq.n	8002a50 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a46:	f043 0204 	orr.w	r2, r3, #4
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d011      	beq.n	8002a80 <HAL_UART_IRQHandler+0x11c>
 8002a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00b      	beq.n	8002a80 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2204      	movs	r2, #4
 8002a6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a76:	f043 0202 	orr.w	r2, r3, #2
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d017      	beq.n	8002abc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d105      	bne.n	8002aa4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a9c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00b      	beq.n	8002abc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2208      	movs	r2, #8
 8002aaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ab2:	f043 0208 	orr.w	r2, r3, #8
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d012      	beq.n	8002aee <HAL_UART_IRQHandler+0x18a>
 8002ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002acc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00c      	beq.n	8002aee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002adc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ae4:	f043 0220 	orr.w	r2, r3, #32
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 8209 	beq.w	8002f0c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00d      	beq.n	8002b22 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d007      	beq.n	8002b22 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b36:	2b40      	cmp	r3, #64	; 0x40
 8002b38:	d005      	beq.n	8002b46 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d04f      	beq.n	8002be6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fd8f 	bl	800366a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b56:	2b40      	cmp	r3, #64	; 0x40
 8002b58:	d141      	bne.n	8002bde <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	3308      	adds	r3, #8
 8002b60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b68:	e853 3f00 	ldrex	r3, [r3]
 8002b6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3308      	adds	r3, #8
 8002b82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b96:	e841 2300 	strex	r3, r2, [r1]
 8002b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1d9      	bne.n	8002b5a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d013      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb2:	4a13      	ldr	r2, [pc, #76]	; (8002c00 <HAL_UART_IRQHandler+0x29c>)
 8002bb4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fd ffe2 	bl	8000b84 <HAL_DMA_Abort_IT>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d017      	beq.n	8002bf6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd4:	e00f      	b.n	8002bf6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f9ac 	bl	8002f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bdc:	e00b      	b.n	8002bf6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f9a8 	bl	8002f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be4:	e007      	b.n	8002bf6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f9a4 	bl	8002f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002bf4:	e18a      	b.n	8002f0c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf6:	bf00      	nop
    return;
 8002bf8:	e188      	b.n	8002f0c <HAL_UART_IRQHandler+0x5a8>
 8002bfa:	bf00      	nop
 8002bfc:	04000120 	.word	0x04000120
 8002c00:	08003731 	.word	0x08003731

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	f040 8143 	bne.w	8002e94 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 813c 	beq.w	8002e94 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c20:	f003 0310 	and.w	r3, r3, #16
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 8135 	beq.w	8002e94 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2210      	movs	r2, #16
 8002c30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3c:	2b40      	cmp	r3, #64	; 0x40
 8002c3e:	f040 80b1 	bne.w	8002da4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c4e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 815c 	beq.w	8002f10 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002c5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c62:	429a      	cmp	r2, r3
 8002c64:	f080 8154 	bcs.w	8002f10 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	f000 8085 	beq.w	8002d88 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c8a:	e853 3f00 	ldrex	r3, [r3]
 8002c8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ca8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002cac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002cb4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cb8:	e841 2300 	strex	r3, r2, [r1]
 8002cbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002cc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1da      	bne.n	8002c7e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3308      	adds	r3, #8
 8002cce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cd2:	e853 3f00 	ldrex	r3, [r3]
 8002cd6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cda:	f023 0301 	bic.w	r3, r3, #1
 8002cde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3308      	adds	r3, #8
 8002ce8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cf0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cf4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cf8:	e841 2300 	strex	r3, r2, [r1]
 8002cfc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002cfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1e1      	bne.n	8002cc8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3308      	adds	r3, #8
 8002d0a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d0e:	e853 3f00 	ldrex	r3, [r3]
 8002d12:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3308      	adds	r3, #8
 8002d24:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d28:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d30:	e841 2300 	strex	r3, r2, [r1]
 8002d34:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1e3      	bne.n	8002d04 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d50:	e853 3f00 	ldrex	r3, [r3]
 8002d54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d58:	f023 0310 	bic.w	r3, r3, #16
 8002d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d6c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d72:	e841 2300 	strex	r3, r2, [r1]
 8002d76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1e4      	bne.n	8002d48 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fd fec5 	bl	8000b12 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f8d3 	bl	8002f48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002da2:	e0b5      	b.n	8002f10 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80a7 	beq.w	8002f14 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8002dc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 80a2 	beq.w	8002f14 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd8:	e853 3f00 	ldrex	r3, [r3]
 8002ddc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002de4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002df2:	647b      	str	r3, [r7, #68]	; 0x44
 8002df4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002df8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dfa:	e841 2300 	strex	r3, r2, [r1]
 8002dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1e4      	bne.n	8002dd0 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3308      	adds	r3, #8
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	e853 3f00 	ldrex	r3, [r3]
 8002e14:	623b      	str	r3, [r7, #32]
   return(result);
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	f023 0301 	bic.w	r3, r3, #1
 8002e1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	3308      	adds	r3, #8
 8002e26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e2a:	633a      	str	r2, [r7, #48]	; 0x30
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e32:	e841 2300 	strex	r3, r2, [r1]
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1e3      	bne.n	8002e06 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2220      	movs	r2, #32
 8002e42:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	e853 3f00 	ldrex	r3, [r3]
 8002e5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f023 0310 	bic.w	r3, r3, #16
 8002e64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e76:	69b9      	ldr	r1, [r7, #24]
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	e841 2300 	strex	r3, r2, [r1]
 8002e7e:	617b      	str	r3, [r7, #20]
   return(result);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1e4      	bne.n	8002e50 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f85b 	bl	8002f48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e92:	e03f      	b.n	8002f14 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00e      	beq.n	8002ebe <HAL_UART_IRQHandler+0x55a>
 8002ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002eb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fc7a 	bl	80037b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ebc:	e02d      	b.n	8002f1a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00e      	beq.n	8002ee8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d008      	beq.n	8002ee8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d01c      	beq.n	8002f18 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	4798      	blx	r3
    }
    return;
 8002ee6:	e017      	b.n	8002f18 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d012      	beq.n	8002f1a <HAL_UART_IRQHandler+0x5b6>
 8002ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00c      	beq.n	8002f1a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fc2b 	bl	800375c <UART_EndTransmit_IT>
    return;
 8002f06:	e008      	b.n	8002f1a <HAL_UART_IRQHandler+0x5b6>
      return;
 8002f08:	bf00      	nop
 8002f0a:	e006      	b.n	8002f1a <HAL_UART_IRQHandler+0x5b6>
    return;
 8002f0c:	bf00      	nop
 8002f0e:	e004      	b.n	8002f1a <HAL_UART_IRQHandler+0x5b6>
      return;
 8002f10:	bf00      	nop
 8002f12:	e002      	b.n	8002f1a <HAL_UART_IRQHandler+0x5b6>
      return;
 8002f14:	bf00      	nop
 8002f16:	e000      	b.n	8002f1a <HAL_UART_IRQHandler+0x5b6>
    return;
 8002f18:	bf00      	nop
  }

}
 8002f1a:	37e8      	adds	r7, #232	; 0xe8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b92      	ldr	r3, [pc, #584]	; (80031d4 <UART_SetConfig+0x274>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	6979      	ldr	r1, [r7, #20]
 8002f94:	430b      	orrs	r3, r1
 8002f96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a80      	ldr	r2, [pc, #512]	; (80031d8 <UART_SetConfig+0x278>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d120      	bne.n	800301e <UART_SetConfig+0xbe>
 8002fdc:	4b7f      	ldr	r3, [pc, #508]	; (80031dc <UART_SetConfig+0x27c>)
 8002fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d817      	bhi.n	8003018 <UART_SetConfig+0xb8>
 8002fe8:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <UART_SetConfig+0x90>)
 8002fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fee:	bf00      	nop
 8002ff0:	08003001 	.word	0x08003001
 8002ff4:	0800300d 	.word	0x0800300d
 8002ff8:	08003013 	.word	0x08003013
 8002ffc:	08003007 	.word	0x08003007
 8003000:	2301      	movs	r3, #1
 8003002:	77fb      	strb	r3, [r7, #31]
 8003004:	e0b5      	b.n	8003172 <UART_SetConfig+0x212>
 8003006:	2302      	movs	r3, #2
 8003008:	77fb      	strb	r3, [r7, #31]
 800300a:	e0b2      	b.n	8003172 <UART_SetConfig+0x212>
 800300c:	2304      	movs	r3, #4
 800300e:	77fb      	strb	r3, [r7, #31]
 8003010:	e0af      	b.n	8003172 <UART_SetConfig+0x212>
 8003012:	2308      	movs	r3, #8
 8003014:	77fb      	strb	r3, [r7, #31]
 8003016:	e0ac      	b.n	8003172 <UART_SetConfig+0x212>
 8003018:	2310      	movs	r3, #16
 800301a:	77fb      	strb	r3, [r7, #31]
 800301c:	e0a9      	b.n	8003172 <UART_SetConfig+0x212>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a6f      	ldr	r2, [pc, #444]	; (80031e0 <UART_SetConfig+0x280>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d124      	bne.n	8003072 <UART_SetConfig+0x112>
 8003028:	4b6c      	ldr	r3, [pc, #432]	; (80031dc <UART_SetConfig+0x27c>)
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003030:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003034:	d011      	beq.n	800305a <UART_SetConfig+0xfa>
 8003036:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800303a:	d817      	bhi.n	800306c <UART_SetConfig+0x10c>
 800303c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003040:	d011      	beq.n	8003066 <UART_SetConfig+0x106>
 8003042:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003046:	d811      	bhi.n	800306c <UART_SetConfig+0x10c>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <UART_SetConfig+0xf4>
 800304c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003050:	d006      	beq.n	8003060 <UART_SetConfig+0x100>
 8003052:	e00b      	b.n	800306c <UART_SetConfig+0x10c>
 8003054:	2300      	movs	r3, #0
 8003056:	77fb      	strb	r3, [r7, #31]
 8003058:	e08b      	b.n	8003172 <UART_SetConfig+0x212>
 800305a:	2302      	movs	r3, #2
 800305c:	77fb      	strb	r3, [r7, #31]
 800305e:	e088      	b.n	8003172 <UART_SetConfig+0x212>
 8003060:	2304      	movs	r3, #4
 8003062:	77fb      	strb	r3, [r7, #31]
 8003064:	e085      	b.n	8003172 <UART_SetConfig+0x212>
 8003066:	2308      	movs	r3, #8
 8003068:	77fb      	strb	r3, [r7, #31]
 800306a:	e082      	b.n	8003172 <UART_SetConfig+0x212>
 800306c:	2310      	movs	r3, #16
 800306e:	77fb      	strb	r3, [r7, #31]
 8003070:	e07f      	b.n	8003172 <UART_SetConfig+0x212>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a5b      	ldr	r2, [pc, #364]	; (80031e4 <UART_SetConfig+0x284>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d124      	bne.n	80030c6 <UART_SetConfig+0x166>
 800307c:	4b57      	ldr	r3, [pc, #348]	; (80031dc <UART_SetConfig+0x27c>)
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003084:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003088:	d011      	beq.n	80030ae <UART_SetConfig+0x14e>
 800308a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800308e:	d817      	bhi.n	80030c0 <UART_SetConfig+0x160>
 8003090:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003094:	d011      	beq.n	80030ba <UART_SetConfig+0x15a>
 8003096:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800309a:	d811      	bhi.n	80030c0 <UART_SetConfig+0x160>
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <UART_SetConfig+0x148>
 80030a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030a4:	d006      	beq.n	80030b4 <UART_SetConfig+0x154>
 80030a6:	e00b      	b.n	80030c0 <UART_SetConfig+0x160>
 80030a8:	2300      	movs	r3, #0
 80030aa:	77fb      	strb	r3, [r7, #31]
 80030ac:	e061      	b.n	8003172 <UART_SetConfig+0x212>
 80030ae:	2302      	movs	r3, #2
 80030b0:	77fb      	strb	r3, [r7, #31]
 80030b2:	e05e      	b.n	8003172 <UART_SetConfig+0x212>
 80030b4:	2304      	movs	r3, #4
 80030b6:	77fb      	strb	r3, [r7, #31]
 80030b8:	e05b      	b.n	8003172 <UART_SetConfig+0x212>
 80030ba:	2308      	movs	r3, #8
 80030bc:	77fb      	strb	r3, [r7, #31]
 80030be:	e058      	b.n	8003172 <UART_SetConfig+0x212>
 80030c0:	2310      	movs	r3, #16
 80030c2:	77fb      	strb	r3, [r7, #31]
 80030c4:	e055      	b.n	8003172 <UART_SetConfig+0x212>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a47      	ldr	r2, [pc, #284]	; (80031e8 <UART_SetConfig+0x288>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d124      	bne.n	800311a <UART_SetConfig+0x1ba>
 80030d0:	4b42      	ldr	r3, [pc, #264]	; (80031dc <UART_SetConfig+0x27c>)
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80030d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030dc:	d011      	beq.n	8003102 <UART_SetConfig+0x1a2>
 80030de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030e2:	d817      	bhi.n	8003114 <UART_SetConfig+0x1b4>
 80030e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030e8:	d011      	beq.n	800310e <UART_SetConfig+0x1ae>
 80030ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030ee:	d811      	bhi.n	8003114 <UART_SetConfig+0x1b4>
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <UART_SetConfig+0x19c>
 80030f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030f8:	d006      	beq.n	8003108 <UART_SetConfig+0x1a8>
 80030fa:	e00b      	b.n	8003114 <UART_SetConfig+0x1b4>
 80030fc:	2300      	movs	r3, #0
 80030fe:	77fb      	strb	r3, [r7, #31]
 8003100:	e037      	b.n	8003172 <UART_SetConfig+0x212>
 8003102:	2302      	movs	r3, #2
 8003104:	77fb      	strb	r3, [r7, #31]
 8003106:	e034      	b.n	8003172 <UART_SetConfig+0x212>
 8003108:	2304      	movs	r3, #4
 800310a:	77fb      	strb	r3, [r7, #31]
 800310c:	e031      	b.n	8003172 <UART_SetConfig+0x212>
 800310e:	2308      	movs	r3, #8
 8003110:	77fb      	strb	r3, [r7, #31]
 8003112:	e02e      	b.n	8003172 <UART_SetConfig+0x212>
 8003114:	2310      	movs	r3, #16
 8003116:	77fb      	strb	r3, [r7, #31]
 8003118:	e02b      	b.n	8003172 <UART_SetConfig+0x212>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a33      	ldr	r2, [pc, #204]	; (80031ec <UART_SetConfig+0x28c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d124      	bne.n	800316e <UART_SetConfig+0x20e>
 8003124:	4b2d      	ldr	r3, [pc, #180]	; (80031dc <UART_SetConfig+0x27c>)
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800312c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003130:	d011      	beq.n	8003156 <UART_SetConfig+0x1f6>
 8003132:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003136:	d817      	bhi.n	8003168 <UART_SetConfig+0x208>
 8003138:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800313c:	d011      	beq.n	8003162 <UART_SetConfig+0x202>
 800313e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003142:	d811      	bhi.n	8003168 <UART_SetConfig+0x208>
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <UART_SetConfig+0x1f0>
 8003148:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800314c:	d006      	beq.n	800315c <UART_SetConfig+0x1fc>
 800314e:	e00b      	b.n	8003168 <UART_SetConfig+0x208>
 8003150:	2300      	movs	r3, #0
 8003152:	77fb      	strb	r3, [r7, #31]
 8003154:	e00d      	b.n	8003172 <UART_SetConfig+0x212>
 8003156:	2302      	movs	r3, #2
 8003158:	77fb      	strb	r3, [r7, #31]
 800315a:	e00a      	b.n	8003172 <UART_SetConfig+0x212>
 800315c:	2304      	movs	r3, #4
 800315e:	77fb      	strb	r3, [r7, #31]
 8003160:	e007      	b.n	8003172 <UART_SetConfig+0x212>
 8003162:	2308      	movs	r3, #8
 8003164:	77fb      	strb	r3, [r7, #31]
 8003166:	e004      	b.n	8003172 <UART_SetConfig+0x212>
 8003168:	2310      	movs	r3, #16
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	e001      	b.n	8003172 <UART_SetConfig+0x212>
 800316e:	2310      	movs	r3, #16
 8003170:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800317a:	d16c      	bne.n	8003256 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 800317c:	7ffb      	ldrb	r3, [r7, #31]
 800317e:	2b08      	cmp	r3, #8
 8003180:	d838      	bhi.n	80031f4 <UART_SetConfig+0x294>
 8003182:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <UART_SetConfig+0x228>)
 8003184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003188:	080031ad 	.word	0x080031ad
 800318c:	080031b5 	.word	0x080031b5
 8003190:	080031bd 	.word	0x080031bd
 8003194:	080031f5 	.word	0x080031f5
 8003198:	080031c3 	.word	0x080031c3
 800319c:	080031f5 	.word	0x080031f5
 80031a0:	080031f5 	.word	0x080031f5
 80031a4:	080031f5 	.word	0x080031f5
 80031a8:	080031cb 	.word	0x080031cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031ac:	f7ff f92a 	bl	8002404 <HAL_RCC_GetPCLK1Freq>
 80031b0:	61b8      	str	r0, [r7, #24]
        break;
 80031b2:	e024      	b.n	80031fe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031b4:	f7ff f948 	bl	8002448 <HAL_RCC_GetPCLK2Freq>
 80031b8:	61b8      	str	r0, [r7, #24]
        break;
 80031ba:	e020      	b.n	80031fe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031bc:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <UART_SetConfig+0x290>)
 80031be:	61bb      	str	r3, [r7, #24]
        break;
 80031c0:	e01d      	b.n	80031fe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031c2:	f7ff f8a9 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 80031c6:	61b8      	str	r0, [r7, #24]
        break;
 80031c8:	e019      	b.n	80031fe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ce:	61bb      	str	r3, [r7, #24]
        break;
 80031d0:	e015      	b.n	80031fe <UART_SetConfig+0x29e>
 80031d2:	bf00      	nop
 80031d4:	efff69f3 	.word	0xefff69f3
 80031d8:	40013800 	.word	0x40013800
 80031dc:	40021000 	.word	0x40021000
 80031e0:	40004400 	.word	0x40004400
 80031e4:	40004800 	.word	0x40004800
 80031e8:	40004c00 	.word	0x40004c00
 80031ec:	40005000 	.word	0x40005000
 80031f0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	77bb      	strb	r3, [r7, #30]
        break;
 80031fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d075      	beq.n	80032f0 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	005a      	lsls	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	085b      	lsrs	r3, r3, #1
 800320e:	441a      	add	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	fbb2 f3f3 	udiv	r3, r2, r3
 8003218:	b29b      	uxth	r3, r3
 800321a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	2b0f      	cmp	r3, #15
 8003220:	d916      	bls.n	8003250 <UART_SetConfig+0x2f0>
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003228:	d212      	bcs.n	8003250 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	b29b      	uxth	r3, r3
 800322e:	f023 030f 	bic.w	r3, r3, #15
 8003232:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	085b      	lsrs	r3, r3, #1
 8003238:	b29b      	uxth	r3, r3
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	b29a      	uxth	r2, r3
 8003240:	89fb      	ldrh	r3, [r7, #14]
 8003242:	4313      	orrs	r3, r2
 8003244:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	89fa      	ldrh	r2, [r7, #14]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	e04f      	b.n	80032f0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	77bb      	strb	r3, [r7, #30]
 8003254:	e04c      	b.n	80032f0 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003256:	7ffb      	ldrb	r3, [r7, #31]
 8003258:	2b08      	cmp	r3, #8
 800325a:	d828      	bhi.n	80032ae <UART_SetConfig+0x34e>
 800325c:	a201      	add	r2, pc, #4	; (adr r2, 8003264 <UART_SetConfig+0x304>)
 800325e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003262:	bf00      	nop
 8003264:	08003289 	.word	0x08003289
 8003268:	08003291 	.word	0x08003291
 800326c:	08003299 	.word	0x08003299
 8003270:	080032af 	.word	0x080032af
 8003274:	0800329f 	.word	0x0800329f
 8003278:	080032af 	.word	0x080032af
 800327c:	080032af 	.word	0x080032af
 8003280:	080032af 	.word	0x080032af
 8003284:	080032a7 	.word	0x080032a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003288:	f7ff f8bc 	bl	8002404 <HAL_RCC_GetPCLK1Freq>
 800328c:	61b8      	str	r0, [r7, #24]
        break;
 800328e:	e013      	b.n	80032b8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003290:	f7ff f8da 	bl	8002448 <HAL_RCC_GetPCLK2Freq>
 8003294:	61b8      	str	r0, [r7, #24]
        break;
 8003296:	e00f      	b.n	80032b8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003298:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <UART_SetConfig+0x3a8>)
 800329a:	61bb      	str	r3, [r7, #24]
        break;
 800329c:	e00c      	b.n	80032b8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800329e:	f7ff f83b 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 80032a2:	61b8      	str	r0, [r7, #24]
        break;
 80032a4:	e008      	b.n	80032b8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032aa:	61bb      	str	r3, [r7, #24]
        break;
 80032ac:	e004      	b.n	80032b8 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	77bb      	strb	r3, [r7, #30]
        break;
 80032b6:	bf00      	nop
    }

    if (pclk != 0U)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d018      	beq.n	80032f0 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	085a      	lsrs	r2, r3, #1
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	441a      	add	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	2b0f      	cmp	r3, #15
 80032d8:	d908      	bls.n	80032ec <UART_SetConfig+0x38c>
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e0:	d204      	bcs.n	80032ec <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	60da      	str	r2, [r3, #12]
 80032ea:	e001      	b.n	80032f0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	007a1200 	.word	0x007a1200

0800330c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	f003 0320 	and.w	r3, r3, #32
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01a      	beq.n	8003422 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800340a:	d10a      	bne.n	8003422 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	605a      	str	r2, [r3, #4]
  }
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af02      	add	r7, sp, #8
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003460:	f7fd fa16 	bl	8000890 <HAL_GetTick>
 8003464:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b08      	cmp	r3, #8
 8003472:	d10e      	bne.n	8003492 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003474:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f82d 	bl	80034e2 <UART_WaitOnFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e023      	b.n	80034da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b04      	cmp	r3, #4
 800349e:	d10e      	bne.n	80034be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f817 	bl	80034e2 <UART_WaitOnFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e00d      	b.n	80034da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2220      	movs	r2, #32
 80034c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b09c      	sub	sp, #112	; 0x70
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	4613      	mov	r3, r2
 80034f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f2:	e0a5      	b.n	8003640 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fa:	f000 80a1 	beq.w	8003640 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fe:	f7fd f9c7 	bl	8000890 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800350a:	429a      	cmp	r2, r3
 800350c:	d302      	bcc.n	8003514 <UART_WaitOnFlagUntilTimeout+0x32>
 800350e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003510:	2b00      	cmp	r3, #0
 8003512:	d13e      	bne.n	8003592 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800351c:	e853 3f00 	ldrex	r3, [r3]
 8003520:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003524:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003528:	667b      	str	r3, [r7, #100]	; 0x64
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	461a      	mov	r2, r3
 8003530:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003532:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003534:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003536:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003538:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800353a:	e841 2300 	strex	r3, r2, [r1]
 800353e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1e6      	bne.n	8003514 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3308      	adds	r3, #8
 800354c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003550:	e853 3f00 	ldrex	r3, [r3]
 8003554:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003558:	f023 0301 	bic.w	r3, r3, #1
 800355c:	663b      	str	r3, [r7, #96]	; 0x60
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3308      	adds	r3, #8
 8003564:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003566:	64ba      	str	r2, [r7, #72]	; 0x48
 8003568:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800356c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1e5      	bne.n	8003546 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e067      	b.n	8003662 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d04f      	beq.n	8003640 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ae:	d147      	bne.n	8003640 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c2:	e853 3f00 	ldrex	r3, [r3]
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d8:	637b      	str	r3, [r7, #52]	; 0x34
 80035da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035e0:	e841 2300 	strex	r3, r2, [r1]
 80035e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e6      	bne.n	80035ba <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3308      	adds	r3, #8
 80035f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	e853 3f00 	ldrex	r3, [r3]
 80035fa:	613b      	str	r3, [r7, #16]
   return(result);
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f023 0301 	bic.w	r3, r3, #1
 8003602:	66bb      	str	r3, [r7, #104]	; 0x68
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3308      	adds	r3, #8
 800360a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800360c:	623a      	str	r2, [r7, #32]
 800360e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003610:	69f9      	ldr	r1, [r7, #28]
 8003612:	6a3a      	ldr	r2, [r7, #32]
 8003614:	e841 2300 	strex	r3, r2, [r1]
 8003618:	61bb      	str	r3, [r7, #24]
   return(result);
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e5      	bne.n	80035ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2220      	movs	r2, #32
 800362a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e010      	b.n	8003662 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	69da      	ldr	r2, [r3, #28]
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	4013      	ands	r3, r2
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	429a      	cmp	r2, r3
 800364e:	bf0c      	ite	eq
 8003650:	2301      	moveq	r3, #1
 8003652:	2300      	movne	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	461a      	mov	r2, r3
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	429a      	cmp	r2, r3
 800365c:	f43f af4a 	beq.w	80034f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3770      	adds	r7, #112	; 0x70
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800366a:	b480      	push	{r7}
 800366c:	b095      	sub	sp, #84	; 0x54
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367a:	e853 3f00 	ldrex	r3, [r3]
 800367e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003682:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003690:	643b      	str	r3, [r7, #64]	; 0x40
 8003692:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003694:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003696:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003698:	e841 2300 	strex	r3, r2, [r1]
 800369c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800369e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1e6      	bne.n	8003672 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3308      	adds	r3, #8
 80036aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	e853 3f00 	ldrex	r3, [r3]
 80036b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f023 0301 	bic.w	r3, r3, #1
 80036ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3308      	adds	r3, #8
 80036c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036cc:	e841 2300 	strex	r3, r2, [r1]
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e5      	bne.n	80036a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d118      	bne.n	8003712 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	e853 3f00 	ldrex	r3, [r3]
 80036ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f023 0310 	bic.w	r3, r3, #16
 80036f4:	647b      	str	r3, [r7, #68]	; 0x44
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003702:	6979      	ldr	r1, [r7, #20]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	e841 2300 	strex	r3, r2, [r1]
 800370a:	613b      	str	r3, [r7, #16]
   return(result);
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1e6      	bne.n	80036e0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2220      	movs	r2, #32
 8003716:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003724:	bf00      	nop
 8003726:	3754      	adds	r7, #84	; 0x54
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f7ff fbf0 	bl	8002f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003754:	bf00      	nop
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	e853 3f00 	ldrex	r3, [r3]
 8003770:	60bb      	str	r3, [r7, #8]
   return(result);
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003778:	61fb      	str	r3, [r7, #28]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	61bb      	str	r3, [r7, #24]
 8003784:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003786:	6979      	ldr	r1, [r7, #20]
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	e841 2300 	strex	r3, r2, [r1]
 800378e:	613b      	str	r3, [r7, #16]
   return(result);
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1e6      	bne.n	8003764 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2220      	movs	r2, #32
 800379a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff fbbc 	bl	8002f20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037a8:	bf00      	nop
 80037aa:	3720      	adds	r7, #32
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <__libc_init_array>:
 80037c4:	b570      	push	{r4, r5, r6, lr}
 80037c6:	4d0d      	ldr	r5, [pc, #52]	; (80037fc <__libc_init_array+0x38>)
 80037c8:	4c0d      	ldr	r4, [pc, #52]	; (8003800 <__libc_init_array+0x3c>)
 80037ca:	1b64      	subs	r4, r4, r5
 80037cc:	10a4      	asrs	r4, r4, #2
 80037ce:	2600      	movs	r6, #0
 80037d0:	42a6      	cmp	r6, r4
 80037d2:	d109      	bne.n	80037e8 <__libc_init_array+0x24>
 80037d4:	4d0b      	ldr	r5, [pc, #44]	; (8003804 <__libc_init_array+0x40>)
 80037d6:	4c0c      	ldr	r4, [pc, #48]	; (8003808 <__libc_init_array+0x44>)
 80037d8:	f000 f820 	bl	800381c <_init>
 80037dc:	1b64      	subs	r4, r4, r5
 80037de:	10a4      	asrs	r4, r4, #2
 80037e0:	2600      	movs	r6, #0
 80037e2:	42a6      	cmp	r6, r4
 80037e4:	d105      	bne.n	80037f2 <__libc_init_array+0x2e>
 80037e6:	bd70      	pop	{r4, r5, r6, pc}
 80037e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ec:	4798      	blx	r3
 80037ee:	3601      	adds	r6, #1
 80037f0:	e7ee      	b.n	80037d0 <__libc_init_array+0xc>
 80037f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f6:	4798      	blx	r3
 80037f8:	3601      	adds	r6, #1
 80037fa:	e7f2      	b.n	80037e2 <__libc_init_array+0x1e>
 80037fc:	0800386c 	.word	0x0800386c
 8003800:	0800386c 	.word	0x0800386c
 8003804:	0800386c 	.word	0x0800386c
 8003808:	08003874 	.word	0x08003874

0800380c <memset>:
 800380c:	4402      	add	r2, r0
 800380e:	4603      	mov	r3, r0
 8003810:	4293      	cmp	r3, r2
 8003812:	d100      	bne.n	8003816 <memset+0xa>
 8003814:	4770      	bx	lr
 8003816:	f803 1b01 	strb.w	r1, [r3], #1
 800381a:	e7f9      	b.n	8003810 <memset+0x4>

0800381c <_init>:
 800381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381e:	bf00      	nop
 8003820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003822:	bc08      	pop	{r3}
 8003824:	469e      	mov	lr, r3
 8003826:	4770      	bx	lr

08003828 <_fini>:
 8003828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382a:	bf00      	nop
 800382c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382e:	bc08      	pop	{r3}
 8003830:	469e      	mov	lr, r3
 8003832:	4770      	bx	lr
