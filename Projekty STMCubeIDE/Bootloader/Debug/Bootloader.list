
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003194  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003328  08003328  00013328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003360  08003360  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003360  08003360  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003360  08003360  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003360  08003360  00013360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003364  08003364  00013364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000c8  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200000d8  200000d8  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a3aa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ba9  00000000  00000000  0002a3e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c0  00000000  00000000  0002bf90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000718  00000000  00000000  0002c750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f21d  00000000  00000000  0002ce68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b03c  00000000  00000000  0004c085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc782  00000000  00000000  000570c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00113843  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001dec  00000000  00000000  00113894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003310 	.word	0x08003310

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08003310 	.word	0x08003310

080001d4 <EraseUserApplication>:

    return 1;
}

//Usuwanie aplikacji użytkownika z pamięci FLASH
uint8_t EraseUserApplication() {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef success = HAL_ERROR;
 80001da:	2301      	movs	r3, #1
 80001dc:	75fb      	strb	r3, [r7, #23]
    uint32_t errorSector = 0;
 80001de:	2300      	movs	r3, #0
 80001e0:	613b      	str	r3, [r7, #16]

    if (HAL_FLASH_Unlock() == HAL_OK) {
 80001e2:	f000 fc29 	bl	8000a38 <HAL_FLASH_Unlock>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d115      	bne.n	8000218 <EraseUserApplication+0x44>
        FLASH_EraseInitTypeDef eraseInit = {0};
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
        eraseInit.NbPages = 96; // Count of pages to erase
 80001f6:	2360      	movs	r3, #96	; 0x60
 80001f8:	60fb      	str	r3, [r7, #12]
        eraseInit.PageAddress = 0x08010000; // Start address of the first page to erase
 80001fa:	4b0c      	ldr	r3, [pc, #48]	; (800022c <EraseUserApplication+0x58>)
 80001fc:	60bb      	str	r3, [r7, #8]
        eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]

        success = HAL_FLASHEx_Erase(&eraseInit, &errorSector);
 8000202:	f107 0210 	add.w	r2, r7, #16
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4611      	mov	r1, r2
 800020a:	4618      	mov	r0, r3
 800020c:	f000 fcbc 	bl	8000b88 <HAL_FLASHEx_Erase>
 8000210:	4603      	mov	r3, r0
 8000212:	75fb      	strb	r3, [r7, #23]

        HAL_FLASH_Lock();
 8000214:	f000 fc36 	bl	8000a84 <HAL_FLASH_Lock>
    }

    return success == HAL_OK ? 1 : 0;
 8000218:	7dfb      	ldrb	r3, [r7, #23]
 800021a:	2b00      	cmp	r3, #0
 800021c:	bf0c      	ite	eq
 800021e:	2301      	moveq	r3, #1
 8000220:	2300      	movne	r3, #0
 8000222:	b2db      	uxtb	r3, r3
}
 8000224:	4618      	mov	r0, r3
 8000226:	3718      	adds	r7, #24
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}
 800022c:	08010000 	.word	0x08010000

08000230 <UserApplicationExists>:
        //SendByte(app[i]); //TUTAJ WYWOLAC FUNKCJE DO WYSYLANIA JEDNEGO BAJTU
    }
}

//Funkcja do sprawdzania czy aplikacja użytkownika jest w bootloaderze
uint8_t UserApplicationExists() {
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
    uint32_t bootloaderMspValue = *(uint32_t *) (FLASH_BASE);
 8000236:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	607b      	str	r3, [r7, #4]
    uint32_t appMspValue = *(uint32_t *) (APP_ADDRESS);
 800023e:	4b08      	ldr	r3, [pc, #32]	; (8000260 <UserApplicationExists+0x30>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	603b      	str	r3, [r7, #0]

    return appMspValue == bootloaderMspValue ? 1 : 0;
 8000244:	683a      	ldr	r2, [r7, #0]
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	429a      	cmp	r2, r3
 800024a:	bf0c      	ite	eq
 800024c:	2301      	moveq	r3, #1
 800024e:	2300      	movne	r3, #0
 8000250:	b2db      	uxtb	r3, r3
}
 8000252:	4618      	mov	r0, r3
 8000254:	370c      	adds	r7, #12
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	08010000 	.word	0x08010000

08000264 <JumpToAddress>:

//Funkcja do przeskoczenia z bootloadera do aplikacji użytkownika
void JumpToAddress(uint32_t addr) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
    uint32_t JumpAddress = *(uint32_t *) (addr + 4); //Definitions for jump
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	3304      	adds	r3, #4
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	617b      	str	r3, [r7, #20]
    pFunction Jump = (pFunction) JumpAddress; //Definitions for jump
 8000274:	697b      	ldr	r3, [r7, #20]
 8000276:	613b      	str	r3, [r7, #16]

    HAL_RCC_DeInit(); //Peripherials deinitialization
 8000278:	f000 fefe 	bl	8001078 <HAL_RCC_DeInit>
    HAL_DeInit();
 800027c:	f000 fa5c 	bl	8000738 <HAL_DeInit>
    SysTick->CTRL = 0;	//SysTick Reset
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <JumpToAddress+0x50>)
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;	//SysTick Reset
 8000286:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <JumpToAddress+0x50>)
 8000288:	2200      	movs	r2, #0
 800028a:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0; 	//SysTick Reset
 800028c:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <JumpToAddress+0x50>)
 800028e:	2200      	movs	r2, #0
 8000290:	609a      	str	r2, [r3, #8]

    /* Ustawić offset tablicy wektorów przerwań (SCB→VTOR). */
    SCB->VTOR = addr;
 8000292:	4a09      	ldr	r2, [pc, #36]	; (80002b8 <JumpToAddress+0x54>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	6093      	str	r3, [r2, #8]
    /*Ustawić wskaźnik stosu (odczytany z tablicy przerwań
    z adresu 0x0000 [względnego do początku programu aplikacji
     użytkownika]).*/
    __set_MSP(*(uint32_t *) addr);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	f383 8808 	msr	MSP, r3
}
 80002a4:	bf00      	nop

    Jump(); //Jump to begin of the program -> start_of_program + 0x0004
 80002a6:	693b      	ldr	r3, [r7, #16]
 80002a8:	4798      	blx	r3
}
 80002aa:	bf00      	nop
 80002ac:	3718      	adds	r7, #24
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	e000e010 	.word	0xe000e010
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <JumpToApplication>:

void JumpToApplication() {
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
    JumpToAddress(APP_ADDRESS);
 80002c0:	4802      	ldr	r0, [pc, #8]	; (80002cc <JumpToApplication+0x10>)
 80002c2:	f7ff ffcf 	bl	8000264 <JumpToAddress>
}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	08010000 	.word	0x08010000

080002d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d6:	f000 fa19 	bl	800070c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002da:	f000 f83d 	bl	8000358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002de:	f000 f8c9 	bl	8000474 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002e2:	f000 f897 	bl	8000414 <MX_USART2_UART_Init>
//		  HAL_Delay (500);   /* Insert delay 100 ms */
//	  }
//	  JumpToApplication();

	  //Przykład: Mruganie diodą powoli gdy nie ma wgranej aplikacji oraz kasowanie pamięci aplikacji
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_RESET) {HAL_Delay(1000); EraseUserApplication();}
 80002e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ea:	481a      	ldr	r0, [pc, #104]	; (8000354 <main+0x84>)
 80002ec:	f000 fe7a 	bl	8000fe4 <HAL_GPIO_ReadPin>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d105      	bne.n	8000302 <main+0x32>
 80002f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fa:	f000 fa93 	bl	8000824 <HAL_Delay>
 80002fe:	f7ff ff69 	bl	80001d4 <EraseUserApplication>

	  for (int i = 0; i < 6; i++) {
 8000302:	2300      	movs	r3, #0
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	e00b      	b.n	8000320 <main+0x50>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000308:	2120      	movs	r1, #32
 800030a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030e:	f000 fe99 	bl	8001044 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8000312:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000316:	f000 fa85 	bl	8000824 <HAL_Delay>
	  for (int i = 0; i < 6; i++) {
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	3301      	adds	r3, #1
 800031e:	607b      	str	r3, [r7, #4]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2b05      	cmp	r3, #5
 8000324:	ddf0      	ble.n	8000308 <main+0x38>
	  }

	  HAL_Delay(1000);
 8000326:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800032a:	f000 fa7b 	bl	8000824 <HAL_Delay>

	  if (UserApplicationExists()) {
 800032e:	f7ff ff7f 	bl	8000230 <UserApplicationExists>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d002      	beq.n	800033e <main+0x6e>
		  JumpToApplication();
 8000338:	f7ff ffc0 	bl	80002bc <JumpToApplication>
 800033c:	e7d3      	b.n	80002e6 <main+0x16>
	  } else {
		  while (1) {
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800033e:	2120      	movs	r1, #32
 8000340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000344:	f000 fe7e 	bl	8001044 <HAL_GPIO_TogglePin>
			  HAL_Delay(1000);
 8000348:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800034c:	f000 fa6a 	bl	8000824 <HAL_Delay>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000350:	e7f5      	b.n	800033e <main+0x6e>
 8000352:	bf00      	nop
 8000354:	48000400 	.word	0x48000400

08000358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b0a6      	sub	sp, #152	; 0x98
 800035c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000362:	2228      	movs	r2, #40	; 0x28
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f002 ffca 	bl	8003300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800036c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	605a      	str	r2, [r3, #4]
 8000376:	609a      	str	r2, [r3, #8]
 8000378:	60da      	str	r2, [r3, #12]
 800037a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2258      	movs	r2, #88	; 0x58
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f002 ffbc 	bl	8003300 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000388:	2302      	movs	r3, #2
 800038a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038c:	2301      	movs	r3, #1
 800038e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000390:	2310      	movs	r3, #16
 8000392:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000396:	2302      	movs	r3, #2
 8000398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800039c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003a4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 ff02 	bl	80011c0 <HAL_RCC_OscConfig>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003c2:	f000 f8cd 	bl	8000560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c6:	230f      	movs	r3, #15
 80003c8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ca:	2302      	movs	r3, #2
 80003cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003e0:	2102      	movs	r1, #2
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 ff40 	bl	8002268 <HAL_RCC_ClockConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003ee:	f000 f8b7 	bl	8000560 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80003f2:	2302      	movs	r3, #2
 80003f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	4618      	mov	r0, r3
 80003fe:	f002 f969 	bl	80026d4 <HAL_RCCEx_PeriphCLKConfig>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000408:	f000 f8aa 	bl	8000560 <Error_Handler>
  }
}
 800040c:	bf00      	nop
 800040e:	3798      	adds	r7, #152	; 0x98
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000418:	4b14      	ldr	r3, [pc, #80]	; (800046c <MX_USART2_UART_Init+0x58>)
 800041a:	4a15      	ldr	r2, [pc, #84]	; (8000470 <MX_USART2_UART_Init+0x5c>)
 800041c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800041e:	4b13      	ldr	r3, [pc, #76]	; (800046c <MX_USART2_UART_Init+0x58>)
 8000420:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000426:	4b11      	ldr	r3, [pc, #68]	; (800046c <MX_USART2_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <MX_USART2_UART_Init+0x58>)
 800042e:	2200      	movs	r2, #0
 8000430:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <MX_USART2_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MX_USART2_UART_Init+0x58>)
 800043a:	220c      	movs	r2, #12
 800043c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <MX_USART2_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000444:	4b09      	ldr	r3, [pc, #36]	; (800046c <MX_USART2_UART_Init+0x58>)
 8000446:	2200      	movs	r2, #0
 8000448:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <MX_USART2_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <MX_USART2_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000456:	4805      	ldr	r0, [pc, #20]	; (800046c <MX_USART2_UART_Init+0x58>)
 8000458:	f002 fb5a 	bl	8002b10 <HAL_UART_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000462:	f000 f87d 	bl	8000560 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	2000002c 	.word	0x2000002c
 8000470:	40004400 	.word	0x40004400

08000474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08a      	sub	sp, #40	; 0x28
 8000478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	f107 0314 	add.w	r3, r7, #20
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048a:	4b32      	ldr	r3, [pc, #200]	; (8000554 <MX_GPIO_Init+0xe0>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a31      	ldr	r2, [pc, #196]	; (8000554 <MX_GPIO_Init+0xe0>)
 8000490:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b2f      	ldr	r3, [pc, #188]	; (8000554 <MX_GPIO_Init+0xe0>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800049e:	613b      	str	r3, [r7, #16]
 80004a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004a2:	4b2c      	ldr	r3, [pc, #176]	; (8000554 <MX_GPIO_Init+0xe0>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a2b      	ldr	r2, [pc, #172]	; (8000554 <MX_GPIO_Init+0xe0>)
 80004a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b29      	ldr	r3, [pc, #164]	; (8000554 <MX_GPIO_Init+0xe0>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b26      	ldr	r3, [pc, #152]	; (8000554 <MX_GPIO_Init+0xe0>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a25      	ldr	r2, [pc, #148]	; (8000554 <MX_GPIO_Init+0xe0>)
 80004c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004c4:	6153      	str	r3, [r2, #20]
 80004c6:	4b23      	ldr	r3, [pc, #140]	; (8000554 <MX_GPIO_Init+0xe0>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d2:	4b20      	ldr	r3, [pc, #128]	; (8000554 <MX_GPIO_Init+0xe0>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a1f      	ldr	r2, [pc, #124]	; (8000554 <MX_GPIO_Init+0xe0>)
 80004d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b1d      	ldr	r3, [pc, #116]	; (8000554 <MX_GPIO_Init+0xe0>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2120      	movs	r1, #32
 80004ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f2:	f000 fd8f 	bl	8001014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	4619      	mov	r1, r3
 800050c:	4812      	ldr	r0, [pc, #72]	; (8000558 <MX_GPIO_Init+0xe4>)
 800050e:	f000 fbdf 	bl	8000cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000512:	2320      	movs	r3, #32
 8000514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000516:	2301      	movs	r3, #1
 8000518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	2300      	movs	r3, #0
 8000520:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	4619      	mov	r1, r3
 8000528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052c:	f000 fbd0 	bl	8000cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000536:	2300      	movs	r3, #0
 8000538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	4619      	mov	r1, r3
 8000544:	4805      	ldr	r0, [pc, #20]	; (800055c <MX_GPIO_Init+0xe8>)
 8000546:	f000 fbc3 	bl	8000cd0 <HAL_GPIO_Init>

}
 800054a:	bf00      	nop
 800054c:	3728      	adds	r7, #40	; 0x28
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000
 8000558:	48000800 	.word	0x48000800
 800055c:	48000400 	.word	0x48000400

08000560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000564:	b672      	cpsid	i
}
 8000566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000568:	e7fe      	b.n	8000568 <Error_Handler+0x8>
	...

0800056c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <HAL_MspInit+0x44>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <HAL_MspInit+0x44>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6193      	str	r3, [r2, #24]
 800057e:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <HAL_MspInit+0x44>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <HAL_MspInit+0x44>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <HAL_MspInit+0x44>)
 8000590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000594:	61d3      	str	r3, [r2, #28]
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_MspInit+0x44>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005a2:	2007      	movs	r0, #7
 80005a4:	f000 fa14 	bl	80009d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000

080005b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a17      	ldr	r2, [pc, #92]	; (8000630 <HAL_UART_MspInit+0x7c>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d128      	bne.n	8000628 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <HAL_UART_MspInit+0x80>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	4a16      	ldr	r2, [pc, #88]	; (8000634 <HAL_UART_MspInit+0x80>)
 80005dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e0:	61d3      	str	r3, [r2, #28]
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <HAL_UART_MspInit+0x80>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <HAL_UART_MspInit+0x80>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	4a10      	ldr	r2, [pc, #64]	; (8000634 <HAL_UART_MspInit+0x80>)
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f8:	6153      	str	r3, [r2, #20]
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <HAL_UART_MspInit+0x80>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000606:	230c      	movs	r3, #12
 8000608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060a:	2302      	movs	r3, #2
 800060c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000616:	2307      	movs	r3, #7
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000624:	f000 fb54 	bl	8000cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000628:	bf00      	nop
 800062a:	3728      	adds	r7, #40	; 0x28
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40004400 	.word	0x40004400
 8000634:	40021000 	.word	0x40021000

08000638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800063c:	e7fe      	b.n	800063c <NMI_Handler+0x4>

0800063e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000642:	e7fe      	b.n	8000642 <HardFault_Handler+0x4>

08000644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <MemManage_Handler+0x4>

0800064a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <BusFault_Handler+0x4>

08000650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <UsageFault_Handler+0x4>

08000656 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000684:	f000 f8ae 	bl	80007e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}

0800068c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <SystemInit+0x28>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <SystemInit+0x28>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <SystemInit+0x28>)
 80006a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006a6:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <Reset_Handler>:
 80006b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006f0 <LoopForever+0x2>
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <LoopForever+0x6>)
 80006be:	490e      	ldr	r1, [pc, #56]	; (80006f8 <LoopForever+0xa>)
 80006c0:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <LoopForever+0xe>)
 80006c2:	2300      	movs	r3, #0
 80006c4:	e002      	b.n	80006cc <LoopCopyDataInit>

080006c6 <CopyDataInit>:
 80006c6:	58d4      	ldr	r4, [r2, r3]
 80006c8:	50c4      	str	r4, [r0, r3]
 80006ca:	3304      	adds	r3, #4

080006cc <LoopCopyDataInit>:
 80006cc:	18c4      	adds	r4, r0, r3
 80006ce:	428c      	cmp	r4, r1
 80006d0:	d3f9      	bcc.n	80006c6 <CopyDataInit>
 80006d2:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <LoopForever+0x12>)
 80006d4:	4c0b      	ldr	r4, [pc, #44]	; (8000704 <LoopForever+0x16>)
 80006d6:	2300      	movs	r3, #0
 80006d8:	e001      	b.n	80006de <LoopFillZerobss>

080006da <FillZerobss>:
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	3204      	adds	r2, #4

080006de <LoopFillZerobss>:
 80006de:	42a2      	cmp	r2, r4
 80006e0:	d3fb      	bcc.n	80006da <FillZerobss>
 80006e2:	f7ff ffd3 	bl	800068c <SystemInit>
 80006e6:	f002 fde7 	bl	80032b8 <__libc_init_array>
 80006ea:	f7ff fdf1 	bl	80002d0 <main>

080006ee <LoopForever>:
 80006ee:	e7fe      	b.n	80006ee <LoopForever>
 80006f0:	20010000 	.word	0x20010000
 80006f4:	20000000 	.word	0x20000000
 80006f8:	2000000c 	.word	0x2000000c
 80006fc:	08003368 	.word	0x08003368
 8000700:	20000010 	.word	0x20000010
 8000704:	200000d8 	.word	0x200000d8

08000708 <ADC1_2_IRQHandler>:
 8000708:	e7fe      	b.n	8000708 <ADC1_2_IRQHandler>
	...

0800070c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <HAL_Init+0x28>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a07      	ldr	r2, [pc, #28]	; (8000734 <HAL_Init+0x28>)
 8000716:	f043 0310 	orr.w	r3, r3, #16
 800071a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800071c:	2003      	movs	r0, #3
 800071e:	f000 f957 	bl	80009d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000722:	2000      	movs	r0, #0
 8000724:	f000 f82e 	bl	8000784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000728:	f7ff ff20 	bl	800056c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800072c:	2300      	movs	r3, #0
}
 800072e:	4618      	mov	r0, r3
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40022000 	.word	0x40022000

08000738 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <HAL_DeInit+0x38>)
 800073e:	f04f 32ff 	mov.w	r2, #4294967295
 8000742:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <HAL_DeInit+0x38>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <HAL_DeInit+0x38>)
 800074c:	f04f 32ff 	mov.w	r2, #4294967295
 8000750:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <HAL_DeInit+0x38>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]

  __HAL_RCC_AHB_FORCE_RESET();
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_DeInit+0x38>)
 800075a:	f04f 32ff 	mov.w	r2, #4294967295
 800075e:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <HAL_DeInit+0x38>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	; 0x28

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000766:	f000 f805 	bl	8000774 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800076a:	2300      	movs	r3, #0
}
 800076c:	4618      	mov	r0, r3
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40021000 	.word	0x40021000

08000774 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
	...

08000784 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_InitTick+0x54>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <HAL_InitTick+0x58>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4619      	mov	r1, r3
 8000796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079a:	fbb3 f3f1 	udiv	r3, r3, r1
 800079e:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 f93b 	bl	8000a1e <HAL_SYSTICK_Config>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	e00e      	b.n	80007d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b0f      	cmp	r3, #15
 80007b6:	d80a      	bhi.n	80007ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b8:	2200      	movs	r2, #0
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	f04f 30ff 	mov.w	r0, #4294967295
 80007c0:	f000 f911 	bl	80009e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c4:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <HAL_InitTick+0x5c>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007ca:	2300      	movs	r3, #0
 80007cc:	e000      	b.n	80007d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000000 	.word	0x20000000
 80007dc:	20000008 	.word	0x20000008
 80007e0:	20000004 	.word	0x20000004

080007e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_IncTick+0x20>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_IncTick+0x24>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	4a04      	ldr	r2, [pc, #16]	; (8000808 <HAL_IncTick+0x24>)
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000008 	.word	0x20000008
 8000808:	200000b0 	.word	0x200000b0

0800080c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <HAL_GetTick+0x14>)
 8000812:	681b      	ldr	r3, [r3, #0]
}
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	200000b0 	.word	0x200000b0

08000824 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800082c:	f7ff ffee 	bl	800080c <HAL_GetTick>
 8000830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800083c:	d005      	beq.n	800084a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <HAL_Delay+0x44>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	461a      	mov	r2, r3
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	4413      	add	r3, r2
 8000848:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800084a:	bf00      	nop
 800084c:	f7ff ffde 	bl	800080c <HAL_GetTick>
 8000850:	4602      	mov	r2, r0
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	429a      	cmp	r2, r3
 800085a:	d8f7      	bhi.n	800084c <HAL_Delay+0x28>
  {
  }
}
 800085c:	bf00      	nop
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000008 	.word	0x20000008

0800086c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <__NVIC_SetPriorityGrouping+0x44>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000888:	4013      	ands	r3, r2
 800088a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800089e:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <__NVIC_SetPriorityGrouping+0x44>)
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	60d3      	str	r3, [r2, #12]
}
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <__NVIC_GetPriorityGrouping+0x18>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	0a1b      	lsrs	r3, r3, #8
 80008be:	f003 0307 	and.w	r3, r3, #7
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	db0a      	blt.n	80008fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	490c      	ldr	r1, [pc, #48]	; (800091c <__NVIC_SetPriority+0x4c>)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	0112      	lsls	r2, r2, #4
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	440b      	add	r3, r1
 80008f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f8:	e00a      	b.n	8000910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4908      	ldr	r1, [pc, #32]	; (8000920 <__NVIC_SetPriority+0x50>)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	f003 030f 	and.w	r3, r3, #15
 8000906:	3b04      	subs	r3, #4
 8000908:	0112      	lsls	r2, r2, #4
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	440b      	add	r3, r1
 800090e:	761a      	strb	r2, [r3, #24]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000924:	b480      	push	{r7}
 8000926:	b089      	sub	sp, #36	; 0x24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	f1c3 0307 	rsb	r3, r3, #7
 800093e:	2b04      	cmp	r3, #4
 8000940:	bf28      	it	cs
 8000942:	2304      	movcs	r3, #4
 8000944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3304      	adds	r3, #4
 800094a:	2b06      	cmp	r3, #6
 800094c:	d902      	bls.n	8000954 <NVIC_EncodePriority+0x30>
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3b03      	subs	r3, #3
 8000952:	e000      	b.n	8000956 <NVIC_EncodePriority+0x32>
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	f04f 32ff 	mov.w	r2, #4294967295
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43da      	mvns	r2, r3
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	401a      	ands	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800096c:	f04f 31ff 	mov.w	r1, #4294967295
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	fa01 f303 	lsl.w	r3, r1, r3
 8000976:	43d9      	mvns	r1, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	4313      	orrs	r3, r2
         );
}
 800097e:	4618      	mov	r0, r3
 8000980:	3724      	adds	r7, #36	; 0x24
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
	...

0800098c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800099c:	d301      	bcc.n	80009a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800099e:	2301      	movs	r3, #1
 80009a0:	e00f      	b.n	80009c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <SysTick_Config+0x40>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009aa:	210f      	movs	r1, #15
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f7ff ff8e 	bl	80008d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <SysTick_Config+0x40>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ba:	4b04      	ldr	r3, [pc, #16]	; (80009cc <SysTick_Config+0x40>)
 80009bc:	2207      	movs	r2, #7
 80009be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	e000e010 	.word	0xe000e010

080009d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff ff47 	bl	800086c <__NVIC_SetPriorityGrouping>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b086      	sub	sp, #24
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	4603      	mov	r3, r0
 80009ee:	60b9      	str	r1, [r7, #8]
 80009f0:	607a      	str	r2, [r7, #4]
 80009f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009f8:	f7ff ff5c 	bl	80008b4 <__NVIC_GetPriorityGrouping>
 80009fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	68b9      	ldr	r1, [r7, #8]
 8000a02:	6978      	ldr	r0, [r7, #20]
 8000a04:	f7ff ff8e 	bl	8000924 <NVIC_EncodePriority>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff5d 	bl	80008d0 <__NVIC_SetPriority>
}
 8000a16:	bf00      	nop
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff ffb0 	bl	800098c <SysTick_Config>
 8000a2c:	4603      	mov	r3, r0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_FLASH_Unlock+0x40>)
 8000a44:	691b      	ldr	r3, [r3, #16]
 8000a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d00d      	beq.n	8000a6a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <HAL_FLASH_Unlock+0x40>)
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_FLASH_Unlock+0x44>)
 8000a52:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_FLASH_Unlock+0x40>)
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <HAL_FLASH_Unlock+0x48>)
 8000a58:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a5a:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <HAL_FLASH_Unlock+0x40>)
 8000a5c:	691b      	ldr	r3, [r3, #16]
 8000a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	40022000 	.word	0x40022000
 8000a7c:	45670123 	.word	0x45670123
 8000a80:	cdef89ab 	.word	0xcdef89ab

08000a84 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <HAL_FLASH_Lock+0x1c>)
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_FLASH_Lock+0x1c>)
 8000a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a92:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	40022000 	.word	0x40022000

08000aa4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000aac:	f7ff feae 	bl	800080c <HAL_GetTick>
 8000ab0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000ab2:	e010      	b.n	8000ad6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aba:	d00c      	beq.n	8000ad6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d007      	beq.n	8000ad2 <FLASH_WaitForLastOperation+0x2e>
 8000ac2:	f7ff fea3 	bl	800080c <HAL_GetTick>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d201      	bcs.n	8000ad6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	e01f      	b.n	8000b16 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <FLASH_WaitForLastOperation+0x7c>)
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d0e8      	beq.n	8000ab4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <FLASH_WaitForLastOperation+0x7c>)
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	f003 0320 	and.w	r3, r3, #32
 8000aea:	2b20      	cmp	r3, #32
 8000aec:	d102      	bne.n	8000af4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <FLASH_WaitForLastOperation+0x7c>)
 8000af0:	2220      	movs	r2, #32
 8000af2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <FLASH_WaitForLastOperation+0x7c>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	f003 0310 	and.w	r3, r3, #16
 8000afc:	2b10      	cmp	r3, #16
 8000afe:	d005      	beq.n	8000b0c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <FLASH_WaitForLastOperation+0x7c>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b08:	2b04      	cmp	r3, #4
 8000b0a:	d103      	bne.n	8000b14 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000b0c:	f000 f80a 	bl	8000b24 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	e000      	b.n	8000b16 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40022000 	.word	0x40022000

08000b24 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <FLASH_SetErrorCode+0x5c>)
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	f003 0310 	and.w	r3, r3, #16
 8000b36:	2b10      	cmp	r3, #16
 8000b38:	d109      	bne.n	8000b4e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <FLASH_SetErrorCode+0x60>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f043 0302 	orr.w	r3, r3, #2
 8000b42:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <FLASH_SetErrorCode+0x60>)
 8000b44:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f043 0310 	orr.w	r3, r3, #16
 8000b4c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <FLASH_SetErrorCode+0x5c>)
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	d109      	bne.n	8000b6e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <FLASH_SetErrorCode+0x60>)
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <FLASH_SetErrorCode+0x60>)
 8000b64:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000b6e:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <FLASH_SetErrorCode+0x5c>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	60d3      	str	r3, [r2, #12]
}  
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	40022000 	.word	0x40022000
 8000b84:	200000b8 	.word	0x200000b8

08000b88 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000b9a:	4b2e      	ldr	r3, [pc, #184]	; (8000c54 <HAL_FLASHEx_Erase+0xcc>)
 8000b9c:	7e1b      	ldrb	r3, [r3, #24]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d101      	bne.n	8000ba6 <HAL_FLASHEx_Erase+0x1e>
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	e052      	b.n	8000c4c <HAL_FLASHEx_Erase+0xc4>
 8000ba6:	4b2b      	ldr	r3, [pc, #172]	; (8000c54 <HAL_FLASHEx_Erase+0xcc>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d115      	bne.n	8000be0 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000bb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bb8:	f7ff ff74 	bl	8000aa4 <FLASH_WaitForLastOperation>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d140      	bne.n	8000c44 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8000bc2:	f000 f84b 	bl	8000c5c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000bc6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bca:	f7ff ff6b 	bl	8000aa4 <FLASH_WaitForLastOperation>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000bd2:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <HAL_FLASHEx_Erase+0xd0>)
 8000bd4:	691b      	ldr	r3, [r3, #16]
 8000bd6:	4a20      	ldr	r2, [pc, #128]	; (8000c58 <HAL_FLASHEx_Erase+0xd0>)
 8000bd8:	f023 0304 	bic.w	r3, r3, #4
 8000bdc:	6113      	str	r3, [r2, #16]
 8000bde:	e031      	b.n	8000c44 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000be0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000be4:	f7ff ff5e 	bl	8000aa4 <FLASH_WaitForLastOperation>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d12a      	bne.n	8000c44 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf4:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	e019      	b.n	8000c32 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000bfe:	68b8      	ldr	r0, [r7, #8]
 8000c00:	f000 f846 	bl	8000c90 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c08:	f7ff ff4c 	bl	8000aa4 <FLASH_WaitForLastOperation>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_FLASHEx_Erase+0xd0>)
 8000c12:	691b      	ldr	r3, [r3, #16]
 8000c14:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <HAL_FLASHEx_Erase+0xd0>)
 8000c16:	f023 0302 	bic.w	r3, r3, #2
 8000c1a:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d003      	beq.n	8000c2a <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	68ba      	ldr	r2, [r7, #8]
 8000c26:	601a      	str	r2, [r3, #0]
            break;
 8000c28:	e00c      	b.n	8000c44 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000c30:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	02da      	lsls	r2, r3, #11
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d3dc      	bcc.n	8000bfe <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <HAL_FLASHEx_Erase+0xcc>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	761a      	strb	r2, [r3, #24]

  return status;
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200000b8 	.word	0x200000b8
 8000c58:	40022000 	.word	0x40022000

08000c5c <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <FLASH_MassErase+0x2c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <FLASH_MassErase+0x30>)
 8000c68:	691b      	ldr	r3, [r3, #16]
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <FLASH_MassErase+0x30>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <FLASH_MassErase+0x30>)
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <FLASH_MassErase+0x30>)
 8000c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c7c:	6113      	str	r3, [r2, #16]
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	200000b8 	.word	0x200000b8
 8000c8c:	40022000 	.word	0x40022000

08000c90 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <FLASH_PageErase+0x38>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <FLASH_PageErase+0x3c>)
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <FLASH_PageErase+0x3c>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <FLASH_PageErase+0x3c>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <FLASH_PageErase+0x3c>)
 8000cb2:	691b      	ldr	r3, [r3, #16]
 8000cb4:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <FLASH_PageErase+0x3c>)
 8000cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cba:	6113      	str	r3, [r2, #16]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	200000b8 	.word	0x200000b8
 8000ccc:	40022000 	.word	0x40022000

08000cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b087      	sub	sp, #28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cde:	e160      	b.n	8000fa2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cec:	4013      	ands	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f000 8152 	beq.w	8000f9c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d005      	beq.n	8000d10 <HAL_GPIO_Init+0x40>
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d130      	bne.n	8000d72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d46:	2201      	movs	r2, #1
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	091b      	lsrs	r3, r3, #4
 8000d5c:	f003 0201 	and.w	r2, r3, #1
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 0303 	and.w	r3, r3, #3
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d017      	beq.n	8000dae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d123      	bne.n	8000e02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	08da      	lsrs	r2, r3, #3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3208      	adds	r2, #8
 8000dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	220f      	movs	r2, #15
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	691a      	ldr	r2, [r3, #16]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	f003 0307 	and.w	r3, r3, #7
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	08da      	lsrs	r2, r3, #3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3208      	adds	r2, #8
 8000dfc:	6939      	ldr	r1, [r7, #16]
 8000dfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0203 	and.w	r2, r3, #3
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 80ac 	beq.w	8000f9c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e44:	4b5e      	ldr	r3, [pc, #376]	; (8000fc0 <HAL_GPIO_Init+0x2f0>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a5d      	ldr	r2, [pc, #372]	; (8000fc0 <HAL_GPIO_Init+0x2f0>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b5b      	ldr	r3, [pc, #364]	; (8000fc0 <HAL_GPIO_Init+0x2f0>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e5c:	4a59      	ldr	r2, [pc, #356]	; (8000fc4 <HAL_GPIO_Init+0x2f4>)
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	089b      	lsrs	r3, r3, #2
 8000e62:	3302      	adds	r3, #2
 8000e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	220f      	movs	r2, #15
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e86:	d025      	beq.n	8000ed4 <HAL_GPIO_Init+0x204>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a4f      	ldr	r2, [pc, #316]	; (8000fc8 <HAL_GPIO_Init+0x2f8>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d01f      	beq.n	8000ed0 <HAL_GPIO_Init+0x200>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a4e      	ldr	r2, [pc, #312]	; (8000fcc <HAL_GPIO_Init+0x2fc>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d019      	beq.n	8000ecc <HAL_GPIO_Init+0x1fc>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a4d      	ldr	r2, [pc, #308]	; (8000fd0 <HAL_GPIO_Init+0x300>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d013      	beq.n	8000ec8 <HAL_GPIO_Init+0x1f8>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a4c      	ldr	r2, [pc, #304]	; (8000fd4 <HAL_GPIO_Init+0x304>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d00d      	beq.n	8000ec4 <HAL_GPIO_Init+0x1f4>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a4b      	ldr	r2, [pc, #300]	; (8000fd8 <HAL_GPIO_Init+0x308>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d007      	beq.n	8000ec0 <HAL_GPIO_Init+0x1f0>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a4a      	ldr	r2, [pc, #296]	; (8000fdc <HAL_GPIO_Init+0x30c>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d101      	bne.n	8000ebc <HAL_GPIO_Init+0x1ec>
 8000eb8:	2306      	movs	r3, #6
 8000eba:	e00c      	b.n	8000ed6 <HAL_GPIO_Init+0x206>
 8000ebc:	2307      	movs	r3, #7
 8000ebe:	e00a      	b.n	8000ed6 <HAL_GPIO_Init+0x206>
 8000ec0:	2305      	movs	r3, #5
 8000ec2:	e008      	b.n	8000ed6 <HAL_GPIO_Init+0x206>
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	e006      	b.n	8000ed6 <HAL_GPIO_Init+0x206>
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e004      	b.n	8000ed6 <HAL_GPIO_Init+0x206>
 8000ecc:	2302      	movs	r3, #2
 8000ece:	e002      	b.n	8000ed6 <HAL_GPIO_Init+0x206>
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e000      	b.n	8000ed6 <HAL_GPIO_Init+0x206>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	f002 0203 	and.w	r2, r2, #3
 8000edc:	0092      	lsls	r2, r2, #2
 8000ede:	4093      	lsls	r3, r2
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ee6:	4937      	ldr	r1, [pc, #220]	; (8000fc4 <HAL_GPIO_Init+0x2f4>)
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	3302      	adds	r3, #2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ef4:	4b3a      	ldr	r3, [pc, #232]	; (8000fe0 <HAL_GPIO_Init+0x310>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f18:	4a31      	ldr	r2, [pc, #196]	; (8000fe0 <HAL_GPIO_Init+0x310>)
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f1e:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <HAL_GPIO_Init+0x310>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f42:	4a27      	ldr	r2, [pc, #156]	; (8000fe0 <HAL_GPIO_Init+0x310>)
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f48:	4b25      	ldr	r3, [pc, #148]	; (8000fe0 <HAL_GPIO_Init+0x310>)
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f6c:	4a1c      	ldr	r2, [pc, #112]	; (8000fe0 <HAL_GPIO_Init+0x310>)
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <HAL_GPIO_Init+0x310>)
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <HAL_GPIO_Init+0x310>)
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f47f ae97 	bne.w	8000ce0 <HAL_GPIO_Init+0x10>
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
 8000fb6:	371c      	adds	r7, #28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40010000 	.word	0x40010000
 8000fc8:	48000400 	.word	0x48000400
 8000fcc:	48000800 	.word	0x48000800
 8000fd0:	48000c00 	.word	0x48000c00
 8000fd4:	48001000 	.word	0x48001000
 8000fd8:	48001400 	.word	0x48001400
 8000fdc:	48001800 	.word	0x48001800
 8000fe0:	40010400 	.word	0x40010400

08000fe4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	691a      	ldr	r2, [r3, #16]
 8000ff4:	887b      	ldrh	r3, [r7, #2]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d002      	beq.n	8001002 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	73fb      	strb	r3, [r7, #15]
 8001000:	e001      	b.n	8001006 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001002:	2300      	movs	r3, #0
 8001004:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001006:	7bfb      	ldrb	r3, [r7, #15]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	807b      	strh	r3, [r7, #2]
 8001020:	4613      	mov	r3, r2
 8001022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001024:	787b      	ldrb	r3, [r7, #1]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800102a:	887a      	ldrh	r2, [r7, #2]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001030:	e002      	b.n	8001038 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001032:	887a      	ldrh	r2, [r7, #2]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001056:	887a      	ldrh	r2, [r7, #2]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4013      	ands	r3, r2
 800105c:	041a      	lsls	r2, r3, #16
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43d9      	mvns	r1, r3
 8001062:	887b      	ldrh	r3, [r7, #2]
 8001064:	400b      	ands	r3, r1
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	619a      	str	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001082:	4b49      	ldr	r3, [pc, #292]	; (80011a8 <HAL_RCC_DeInit+0x130>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a48      	ldr	r2, [pc, #288]	; (80011a8 <HAL_RCC_DeInit+0x130>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6013      	str	r3, [r2, #0]

  /* Insure HSIRDY bit is set before writing default HSITRIM value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 800108e:	f7ff fbbd 	bl	800080c <HAL_GetTick>
 8001092:	60f8      	str	r0, [r7, #12]

  /* Wait till HSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001094:	e008      	b.n	80010a8 <HAL_RCC_DeInit+0x30>
  {
    if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001096:	f7ff fbb9 	bl	800080c <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e07b      	b.n	80011a0 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80010a8:	4b3f      	ldr	r3, [pc, #252]	; (80011a8 <HAL_RCC_DeInit+0x130>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Set HSITRIM default value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, RCC_CR_HSITRIM_4);
 80010b4:	4b3c      	ldr	r3, [pc, #240]	; (80011a8 <HAL_RCC_DeInit+0x130>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80010bc:	4a3a      	ldr	r2, [pc, #232]	; (80011a8 <HAL_RCC_DeInit+0x130>)
 80010be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c2:	6013      	str	r3, [r2, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0] and MCOSEL[2:0] bits */
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2 | RCC_CFGR_MCO);
 80010c4:	4b38      	ldr	r3, [pc, #224]	; (80011a8 <HAL_RCC_DeInit+0x130>)
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	4937      	ldr	r1, [pc, #220]	; (80011a8 <HAL_RCC_DeInit+0x130>)
 80010ca:	4b38      	ldr	r3, [pc, #224]	; (80011ac <HAL_RCC_DeInit+0x134>)
 80010cc:	4013      	ands	r3, r2
 80010ce:	604b      	str	r3, [r1, #4]

  /* Insure HSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 80010d0:	f7ff fb9c 	bl	800080c <HAL_GetTick>
 80010d4:	60f8      	str	r0, [r7, #12]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80010d6:	e00a      	b.n	80010ee <HAL_RCC_DeInit+0x76>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010d8:	f7ff fb98 	bl	800080c <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_DeInit+0x76>
    {
      return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e058      	b.n	80011a0 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80010ee:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <HAL_RCC_DeInit+0x130>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 030c 	and.w	r3, r3, #12
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1ee      	bne.n	80010d8 <HAL_RCC_DeInit+0x60>
    }
  }

  /* Update the SystemCoreClock global variable for HSI as system clock source */
  SystemCoreClock = HSI_VALUE;
 80010fa:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_RCC_DeInit+0x138>)
 80010fc:	4a2d      	ldr	r2, [pc, #180]	; (80011b4 <HAL_RCC_DeInit+0x13c>)
 80010fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8001100:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <HAL_RCC_DeInit+0x140>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fb3d 	bl	8000784 <HAL_InitTick>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_RCC_DeInit+0x9c>
  {
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e045      	b.n	80011a0 <HAL_RCC_DeInit+0x128>
  }

  /* Reset HSEON, CSSON, PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
 8001114:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <HAL_RCC_DeInit+0x130>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a23      	ldr	r2, [pc, #140]	; (80011a8 <HAL_RCC_DeInit+0x130>)
 800111a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800111e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001122:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001124:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <HAL_RCC_DeInit+0x130>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a1f      	ldr	r2, [pc, #124]	; (80011a8 <HAL_RCC_DeInit+0x130>)
 800112a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112e:	6013      	str	r3, [r2, #0]

  /* Insure PLLRDY is reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8001130:	f7ff fb6c 	bl	800080c <HAL_GetTick>
 8001134:	60f8      	str	r0, [r7, #12]
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001136:	e008      	b.n	800114a <HAL_RCC_DeInit+0xd2>
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001138:	f7ff fb68 	bl	800080c <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_DeInit+0xd2>
    {
      return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e02a      	b.n	80011a0 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <HAL_RCC_DeInit+0x130>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f0      	bne.n	8001138 <HAL_RCC_DeInit+0xc0>
    }
  }

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <HAL_RCC_DeInit+0x130>)
 8001158:	2200      	movs	r2, #0
 800115a:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_RCC_DeInit+0x130>)
 800115e:	2200      	movs	r2, #0
 8001160:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset CFGR3 register */
  CLEAR_REG(RCC->CFGR3);
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_RCC_DeInit+0x130>)
 8001164:	2200      	movs	r2, #0
 8001166:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <HAL_RCC_DeInit+0x130>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <HAL_RCC_DeInit+0x130>)
 800116e:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8001172:	6093      	str	r3, [r2, #8]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_RCC_DeInit+0x130>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800117e:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	fa93 f3a3 	rbit	r3, r3
 8001186:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001188:	687b      	ldr	r3, [r7, #4]

  /* Reset all CSR flags */
  __HAL_RCC_CLEAR_RESET_FLAGS();
 800118a:	fab3 f383 	clz	r3, r3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	461a      	mov	r2, r3
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_RCC_DeInit+0x144>)
 8001194:	4413      	add	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	461a      	mov	r2, r3
 800119a:	2301      	movs	r3, #1
 800119c:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40021000 	.word	0x40021000
 80011ac:	f8ffc00c 	.word	0xf8ffc00c
 80011b0:	20000000 	.word	0x20000000
 80011b4:	007a1200 	.word	0x007a1200
 80011b8:	20000004 	.word	0x20000004
 80011bc:	10908120 	.word	0x10908120

080011c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011d0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	f001 b83a 	b.w	800225a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 816f 	beq.w	80014da <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011fc:	4bb5      	ldr	r3, [pc, #724]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 030c 	and.w	r3, r3, #12
 8001204:	2b04      	cmp	r3, #4
 8001206:	d00c      	beq.n	8001222 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001208:	4bb2      	ldr	r3, [pc, #712]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 030c 	and.w	r3, r3, #12
 8001210:	2b08      	cmp	r3, #8
 8001212:	d15c      	bne.n	80012ce <HAL_RCC_OscConfig+0x10e>
 8001214:	4baf      	ldr	r3, [pc, #700]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800121c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001220:	d155      	bne.n	80012ce <HAL_RCC_OscConfig+0x10e>
 8001222:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001226:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800122e:	fa93 f3a3 	rbit	r3, r3
 8001232:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8001236:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123a:	fab3 f383 	clz	r3, r3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	095b      	lsrs	r3, r3, #5
 8001242:	b2db      	uxtb	r3, r3
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b01      	cmp	r3, #1
 800124c:	d102      	bne.n	8001254 <HAL_RCC_OscConfig+0x94>
 800124e:	4ba1      	ldr	r3, [pc, #644]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	e015      	b.n	8001280 <HAL_RCC_OscConfig+0xc0>
 8001254:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001258:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001260:	fa93 f3a3 	rbit	r3, r3
 8001264:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001268:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800126c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001270:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001274:	fa93 f3a3 	rbit	r3, r3
 8001278:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800127c:	4b95      	ldr	r3, [pc, #596]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 800127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001280:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001284:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001288:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800128c:	fa92 f2a2 	rbit	r2, r2
 8001290:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001294:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001298:	fab2 f282 	clz	r2, r2
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	f042 0220 	orr.w	r2, r2, #32
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	f002 021f 	and.w	r2, r2, #31
 80012a8:	2101      	movs	r1, #1
 80012aa:	fa01 f202 	lsl.w	r2, r1, r2
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 8111 	beq.w	80014d8 <HAL_RCC_OscConfig+0x318>
 80012b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f040 8108 	bne.w	80014d8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	f000 bfc6 	b.w	800225a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012de:	d106      	bne.n	80012ee <HAL_RCC_OscConfig+0x12e>
 80012e0:	4b7c      	ldr	r3, [pc, #496]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a7b      	ldr	r2, [pc, #492]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 80012e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	e036      	b.n	800135c <HAL_RCC_OscConfig+0x19c>
 80012ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10c      	bne.n	8001318 <HAL_RCC_OscConfig+0x158>
 80012fe:	4b75      	ldr	r3, [pc, #468]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a74      	ldr	r2, [pc, #464]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 8001304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	4b72      	ldr	r3, [pc, #456]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a71      	ldr	r2, [pc, #452]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 8001310:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e021      	b.n	800135c <HAL_RCC_OscConfig+0x19c>
 8001318:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800131c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001328:	d10c      	bne.n	8001344 <HAL_RCC_OscConfig+0x184>
 800132a:	4b6a      	ldr	r3, [pc, #424]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a69      	ldr	r2, [pc, #420]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 8001330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	4b67      	ldr	r3, [pc, #412]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a66      	ldr	r2, [pc, #408]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 800133c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e00b      	b.n	800135c <HAL_RCC_OscConfig+0x19c>
 8001344:	4b63      	ldr	r3, [pc, #396]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a62      	ldr	r2, [pc, #392]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 800134a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	4b60      	ldr	r3, [pc, #384]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a5f      	ldr	r2, [pc, #380]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 8001356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800135a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800135c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001360:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d059      	beq.n	8001420 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fa4e 	bl	800080c <HAL_GetTick>
 8001370:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001374:	e00a      	b.n	800138c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001376:	f7ff fa49 	bl	800080c <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d902      	bls.n	800138c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	f000 bf67 	b.w	800225a <HAL_RCC_OscConfig+0x109a>
 800138c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001390:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001394:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001398:	fa93 f3a3 	rbit	r3, r3
 800139c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80013a0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a4:	fab3 f383 	clz	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d102      	bne.n	80013be <HAL_RCC_OscConfig+0x1fe>
 80013b8:	4b46      	ldr	r3, [pc, #280]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	e015      	b.n	80013ea <HAL_RCC_OscConfig+0x22a>
 80013be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013c2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80013ca:	fa93 f3a3 	rbit	r3, r3
 80013ce:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80013d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013d6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80013da:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80013de:	fa93 f3a3 	rbit	r3, r3
 80013e2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80013e6:	4b3b      	ldr	r3, [pc, #236]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013ee:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80013f2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80013f6:	fa92 f2a2 	rbit	r2, r2
 80013fa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80013fe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001402:	fab2 f282 	clz	r2, r2
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	f042 0220 	orr.w	r2, r2, #32
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	f002 021f 	and.w	r2, r2, #31
 8001412:	2101      	movs	r1, #1
 8001414:	fa01 f202 	lsl.w	r2, r1, r2
 8001418:	4013      	ands	r3, r2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0ab      	beq.n	8001376 <HAL_RCC_OscConfig+0x1b6>
 800141e:	e05c      	b.n	80014da <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff f9f4 	bl	800080c <HAL_GetTick>
 8001424:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001428:	e00a      	b.n	8001440 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800142a:	f7ff f9ef 	bl	800080c <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b64      	cmp	r3, #100	; 0x64
 8001438:	d902      	bls.n	8001440 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	f000 bf0d 	b.w	800225a <HAL_RCC_OscConfig+0x109a>
 8001440:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001444:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001448:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800144c:	fa93 f3a3 	rbit	r3, r3
 8001450:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001454:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001458:	fab3 f383 	clz	r3, r3
 800145c:	b2db      	uxtb	r3, r3
 800145e:	095b      	lsrs	r3, r3, #5
 8001460:	b2db      	uxtb	r3, r3
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b01      	cmp	r3, #1
 800146a:	d102      	bne.n	8001472 <HAL_RCC_OscConfig+0x2b2>
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	e015      	b.n	800149e <HAL_RCC_OscConfig+0x2de>
 8001472:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001476:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800147e:	fa93 f3a3 	rbit	r3, r3
 8001482:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001486:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800148a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800148e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001492:	fa93 f3a3 	rbit	r3, r3
 8001496:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HAL_RCC_OscConfig+0x314>)
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014a2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80014a6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80014aa:	fa92 f2a2 	rbit	r2, r2
 80014ae:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80014b2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80014b6:	fab2 f282 	clz	r2, r2
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	f042 0220 	orr.w	r2, r2, #32
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	f002 021f 	and.w	r2, r2, #31
 80014c6:	2101      	movs	r1, #1
 80014c8:	fa01 f202 	lsl.w	r2, r1, r2
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1ab      	bne.n	800142a <HAL_RCC_OscConfig+0x26a>
 80014d2:	e002      	b.n	80014da <HAL_RCC_OscConfig+0x31a>
 80014d4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 817f 	beq.w	80017ee <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014f0:	4ba7      	ldr	r3, [pc, #668]	; (8001790 <HAL_RCC_OscConfig+0x5d0>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 030c 	and.w	r3, r3, #12
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00c      	beq.n	8001516 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014fc:	4ba4      	ldr	r3, [pc, #656]	; (8001790 <HAL_RCC_OscConfig+0x5d0>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 030c 	and.w	r3, r3, #12
 8001504:	2b08      	cmp	r3, #8
 8001506:	d173      	bne.n	80015f0 <HAL_RCC_OscConfig+0x430>
 8001508:	4ba1      	ldr	r3, [pc, #644]	; (8001790 <HAL_RCC_OscConfig+0x5d0>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001514:	d16c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x430>
 8001516:	2302      	movs	r3, #2
 8001518:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001520:	fa93 f3a3 	rbit	r3, r3
 8001524:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001528:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b01      	cmp	r3, #1
 800153e:	d102      	bne.n	8001546 <HAL_RCC_OscConfig+0x386>
 8001540:	4b93      	ldr	r3, [pc, #588]	; (8001790 <HAL_RCC_OscConfig+0x5d0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	e013      	b.n	800156e <HAL_RCC_OscConfig+0x3ae>
 8001546:	2302      	movs	r3, #2
 8001548:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001550:	fa93 f3a3 	rbit	r3, r3
 8001554:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001558:	2302      	movs	r3, #2
 800155a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800155e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001562:	fa93 f3a3 	rbit	r3, r3
 8001566:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800156a:	4b89      	ldr	r3, [pc, #548]	; (8001790 <HAL_RCC_OscConfig+0x5d0>)
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	2202      	movs	r2, #2
 8001570:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001574:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001578:	fa92 f2a2 	rbit	r2, r2
 800157c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001580:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001584:	fab2 f282 	clz	r2, r2
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	f042 0220 	orr.w	r2, r2, #32
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	f002 021f 	and.w	r2, r2, #31
 8001594:	2101      	movs	r1, #1
 8001596:	fa01 f202 	lsl.w	r2, r1, r2
 800159a:	4013      	ands	r3, r2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00a      	beq.n	80015b6 <HAL_RCC_OscConfig+0x3f6>
 80015a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d002      	beq.n	80015b6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	f000 be52 	b.w	800225a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b6:	4b76      	ldr	r3, [pc, #472]	; (8001790 <HAL_RCC_OscConfig+0x5d0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	21f8      	movs	r1, #248	; 0xf8
 80015cc:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80015d4:	fa91 f1a1 	rbit	r1, r1
 80015d8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80015dc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80015e0:	fab1 f181 	clz	r1, r1
 80015e4:	b2c9      	uxtb	r1, r1
 80015e6:	408b      	lsls	r3, r1
 80015e8:	4969      	ldr	r1, [pc, #420]	; (8001790 <HAL_RCC_OscConfig+0x5d0>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ee:	e0fe      	b.n	80017ee <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 8088 	beq.w	8001712 <HAL_RCC_OscConfig+0x552>
 8001602:	2301      	movs	r3, #1
 8001604:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001608:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800160c:	fa93 f3a3 	rbit	r3, r3
 8001610:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001614:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001618:	fab3 f383 	clz	r3, r3
 800161c:	b2db      	uxtb	r3, r3
 800161e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001622:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	461a      	mov	r2, r3
 800162a:	2301      	movs	r3, #1
 800162c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162e:	f7ff f8ed 	bl	800080c <HAL_GetTick>
 8001632:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001636:	e00a      	b.n	800164e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001638:	f7ff f8e8 	bl	800080c <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d902      	bls.n	800164e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	f000 be06 	b.w	800225a <HAL_RCC_OscConfig+0x109a>
 800164e:	2302      	movs	r3, #2
 8001650:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001654:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001658:	fa93 f3a3 	rbit	r3, r3
 800165c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001660:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001664:	fab3 f383 	clz	r3, r3
 8001668:	b2db      	uxtb	r3, r3
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	b2db      	uxtb	r3, r3
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b01      	cmp	r3, #1
 8001676:	d102      	bne.n	800167e <HAL_RCC_OscConfig+0x4be>
 8001678:	4b45      	ldr	r3, [pc, #276]	; (8001790 <HAL_RCC_OscConfig+0x5d0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	e013      	b.n	80016a6 <HAL_RCC_OscConfig+0x4e6>
 800167e:	2302      	movs	r3, #2
 8001680:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001684:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001688:	fa93 f3a3 	rbit	r3, r3
 800168c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001690:	2302      	movs	r3, #2
 8001692:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001696:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800169a:	fa93 f3a3 	rbit	r3, r3
 800169e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80016a2:	4b3b      	ldr	r3, [pc, #236]	; (8001790 <HAL_RCC_OscConfig+0x5d0>)
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	2202      	movs	r2, #2
 80016a8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80016ac:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80016b0:	fa92 f2a2 	rbit	r2, r2
 80016b4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80016b8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80016bc:	fab2 f282 	clz	r2, r2
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	f042 0220 	orr.w	r2, r2, #32
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	f002 021f 	and.w	r2, r2, #31
 80016cc:	2101      	movs	r1, #1
 80016ce:	fa01 f202 	lsl.w	r2, r1, r2
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0af      	beq.n	8001638 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d8:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_RCC_OscConfig+0x5d0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	21f8      	movs	r1, #248	; 0xf8
 80016ee:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80016f6:	fa91 f1a1 	rbit	r1, r1
 80016fa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80016fe:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001702:	fab1 f181 	clz	r1, r1
 8001706:	b2c9      	uxtb	r1, r1
 8001708:	408b      	lsls	r3, r1
 800170a:	4921      	ldr	r1, [pc, #132]	; (8001790 <HAL_RCC_OscConfig+0x5d0>)
 800170c:	4313      	orrs	r3, r2
 800170e:	600b      	str	r3, [r1, #0]
 8001710:	e06d      	b.n	80017ee <HAL_RCC_OscConfig+0x62e>
 8001712:	2301      	movs	r3, #1
 8001714:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001718:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800171c:	fa93 f3a3 	rbit	r3, r3
 8001720:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001724:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001728:	fab3 f383 	clz	r3, r3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001732:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	461a      	mov	r2, r3
 800173a:	2300      	movs	r3, #0
 800173c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173e:	f7ff f865 	bl	800080c <HAL_GetTick>
 8001742:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001746:	e00a      	b.n	800175e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001748:	f7ff f860 	bl	800080c <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d902      	bls.n	800175e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	f000 bd7e 	b.w	800225a <HAL_RCC_OscConfig+0x109a>
 800175e:	2302      	movs	r3, #2
 8001760:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001764:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001768:	fa93 f3a3 	rbit	r3, r3
 800176c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001770:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001774:	fab3 f383 	clz	r3, r3
 8001778:	b2db      	uxtb	r3, r3
 800177a:	095b      	lsrs	r3, r3, #5
 800177c:	b2db      	uxtb	r3, r3
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b01      	cmp	r3, #1
 8001786:	d105      	bne.n	8001794 <HAL_RCC_OscConfig+0x5d4>
 8001788:	4b01      	ldr	r3, [pc, #4]	; (8001790 <HAL_RCC_OscConfig+0x5d0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	e016      	b.n	80017bc <HAL_RCC_OscConfig+0x5fc>
 800178e:	bf00      	nop
 8001790:	40021000 	.word	0x40021000
 8001794:	2302      	movs	r3, #2
 8001796:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800179e:	fa93 f3a3 	rbit	r3, r3
 80017a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80017a6:	2302      	movs	r3, #2
 80017a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80017ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80017b0:	fa93 f3a3 	rbit	r3, r3
 80017b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80017b8:	4bbf      	ldr	r3, [pc, #764]	; (8001ab8 <HAL_RCC_OscConfig+0x8f8>)
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	2202      	movs	r2, #2
 80017be:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80017c2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80017c6:	fa92 f2a2 	rbit	r2, r2
 80017ca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80017ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80017d2:	fab2 f282 	clz	r2, r2
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	f042 0220 	orr.w	r2, r2, #32
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	f002 021f 	and.w	r2, r2, #31
 80017e2:	2101      	movs	r1, #1
 80017e4:	fa01 f202 	lsl.w	r2, r1, r2
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1ac      	bne.n	8001748 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 8113 	beq.w	8001a2a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001808:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d07c      	beq.n	800190e <HAL_RCC_OscConfig+0x74e>
 8001814:	2301      	movs	r3, #1
 8001816:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800181e:	fa93 f3a3 	rbit	r3, r3
 8001822:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001826:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800182a:	fab3 f383 	clz	r3, r3
 800182e:	b2db      	uxtb	r3, r3
 8001830:	461a      	mov	r2, r3
 8001832:	4ba2      	ldr	r3, [pc, #648]	; (8001abc <HAL_RCC_OscConfig+0x8fc>)
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	461a      	mov	r2, r3
 800183a:	2301      	movs	r3, #1
 800183c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183e:	f7fe ffe5 	bl	800080c <HAL_GetTick>
 8001842:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001846:	e00a      	b.n	800185e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001848:	f7fe ffe0 	bl	800080c <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d902      	bls.n	800185e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	f000 bcfe 	b.w	800225a <HAL_RCC_OscConfig+0x109a>
 800185e:	2302      	movs	r3, #2
 8001860:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001864:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001868:	fa93 f2a3 	rbit	r2, r3
 800186c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001870:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800187a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800187e:	2202      	movs	r2, #2
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001886:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	fa93 f2a3 	rbit	r2, r3
 8001890:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800189e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018a2:	2202      	movs	r2, #2
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	fa93 f2a3 	rbit	r2, r3
 80018b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80018bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018be:	4b7e      	ldr	r3, [pc, #504]	; (8001ab8 <HAL_RCC_OscConfig+0x8f8>)
 80018c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80018ca:	2102      	movs	r1, #2
 80018cc:	6019      	str	r1, [r3, #0]
 80018ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	fa93 f1a3 	rbit	r1, r3
 80018dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80018e4:	6019      	str	r1, [r3, #0]
  return result;
 80018e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	2101      	movs	r1, #1
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	4013      	ands	r3, r2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d09d      	beq.n	8001848 <HAL_RCC_OscConfig+0x688>
 800190c:	e08d      	b.n	8001a2a <HAL_RCC_OscConfig+0x86a>
 800190e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001912:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001916:	2201      	movs	r2, #1
 8001918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800191e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	fa93 f2a3 	rbit	r2, r3
 8001928:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800192c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001930:	601a      	str	r2, [r3, #0]
  return result;
 8001932:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001936:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800193a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	b2db      	uxtb	r3, r3
 8001942:	461a      	mov	r2, r3
 8001944:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <HAL_RCC_OscConfig+0x8fc>)
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	461a      	mov	r2, r3
 800194c:	2300      	movs	r3, #0
 800194e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001950:	f7fe ff5c 	bl	800080c <HAL_GetTick>
 8001954:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001958:	e00a      	b.n	8001970 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800195a:	f7fe ff57 	bl	800080c <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d902      	bls.n	8001970 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	f000 bc75 	b.w	800225a <HAL_RCC_OscConfig+0x109a>
 8001970:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001974:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001978:	2202      	movs	r2, #2
 800197a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001980:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	fa93 f2a3 	rbit	r2, r3
 800198a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800198e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001998:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800199c:	2202      	movs	r2, #2
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	fa93 f2a3 	rbit	r2, r3
 80019ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019c0:	2202      	movs	r2, #2
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	fa93 f2a3 	rbit	r2, r3
 80019d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80019da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019dc:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <HAL_RCC_OscConfig+0x8f8>)
 80019de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80019e8:	2102      	movs	r1, #2
 80019ea:	6019      	str	r1, [r3, #0]
 80019ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	fa93 f1a3 	rbit	r1, r3
 80019fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019fe:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a02:	6019      	str	r1, [r3, #0]
  return result;
 8001a04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a08:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	fab3 f383 	clz	r3, r3
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	f003 031f 	and.w	r3, r3, #31
 8001a1e:	2101      	movs	r1, #1
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d197      	bne.n	800195a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a2e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 81a5 	beq.w	8001d8a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a46:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <HAL_RCC_OscConfig+0x8f8>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d116      	bne.n	8001a80 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_RCC_OscConfig+0x8f8>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a18      	ldr	r2, [pc, #96]	; (8001ab8 <HAL_RCC_OscConfig+0x8f8>)
 8001a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	61d3      	str	r3, [r2, #28]
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <HAL_RCC_OscConfig+0x8f8>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a78:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <HAL_RCC_OscConfig+0x900>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d121      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <HAL_RCC_OscConfig+0x900>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <HAL_RCC_OscConfig+0x900>)
 8001a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a96:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a98:	f7fe feb8 	bl	800080c <HAL_GetTick>
 8001a9c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa0:	e010      	b.n	8001ac4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa2:	f7fe feb3 	bl	800080c <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	; 0x64
 8001ab0:	d908      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e3d1      	b.n	800225a <HAL_RCC_OscConfig+0x109a>
 8001ab6:	bf00      	nop
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	10908120 	.word	0x10908120
 8001ac0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac4:	4b8d      	ldr	r3, [pc, #564]	; (8001cfc <HAL_RCC_OscConfig+0xb3c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0e8      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d106      	bne.n	8001aee <HAL_RCC_OscConfig+0x92e>
 8001ae0:	4b87      	ldr	r3, [pc, #540]	; (8001d00 <HAL_RCC_OscConfig+0xb40>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	4a86      	ldr	r2, [pc, #536]	; (8001d00 <HAL_RCC_OscConfig+0xb40>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6213      	str	r3, [r2, #32]
 8001aec:	e035      	b.n	8001b5a <HAL_RCC_OscConfig+0x99a>
 8001aee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x958>
 8001afe:	4b80      	ldr	r3, [pc, #512]	; (8001d00 <HAL_RCC_OscConfig+0xb40>)
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	4a7f      	ldr	r2, [pc, #508]	; (8001d00 <HAL_RCC_OscConfig+0xb40>)
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	6213      	str	r3, [r2, #32]
 8001b0a:	4b7d      	ldr	r3, [pc, #500]	; (8001d00 <HAL_RCC_OscConfig+0xb40>)
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	4a7c      	ldr	r2, [pc, #496]	; (8001d00 <HAL_RCC_OscConfig+0xb40>)
 8001b10:	f023 0304 	bic.w	r3, r3, #4
 8001b14:	6213      	str	r3, [r2, #32]
 8001b16:	e020      	b.n	8001b5a <HAL_RCC_OscConfig+0x99a>
 8001b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b05      	cmp	r3, #5
 8001b26:	d10c      	bne.n	8001b42 <HAL_RCC_OscConfig+0x982>
 8001b28:	4b75      	ldr	r3, [pc, #468]	; (8001d00 <HAL_RCC_OscConfig+0xb40>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	4a74      	ldr	r2, [pc, #464]	; (8001d00 <HAL_RCC_OscConfig+0xb40>)
 8001b2e:	f043 0304 	orr.w	r3, r3, #4
 8001b32:	6213      	str	r3, [r2, #32]
 8001b34:	4b72      	ldr	r3, [pc, #456]	; (8001d00 <HAL_RCC_OscConfig+0xb40>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	4a71      	ldr	r2, [pc, #452]	; (8001d00 <HAL_RCC_OscConfig+0xb40>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6213      	str	r3, [r2, #32]
 8001b40:	e00b      	b.n	8001b5a <HAL_RCC_OscConfig+0x99a>
 8001b42:	4b6f      	ldr	r3, [pc, #444]	; (8001d00 <HAL_RCC_OscConfig+0xb40>)
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	4a6e      	ldr	r2, [pc, #440]	; (8001d00 <HAL_RCC_OscConfig+0xb40>)
 8001b48:	f023 0301 	bic.w	r3, r3, #1
 8001b4c:	6213      	str	r3, [r2, #32]
 8001b4e:	4b6c      	ldr	r3, [pc, #432]	; (8001d00 <HAL_RCC_OscConfig+0xb40>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4a6b      	ldr	r2, [pc, #428]	; (8001d00 <HAL_RCC_OscConfig+0xb40>)
 8001b54:	f023 0304 	bic.w	r3, r3, #4
 8001b58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 8081 	beq.w	8001c6e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6c:	f7fe fe4e 	bl	800080c <HAL_GetTick>
 8001b70:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b74:	e00b      	b.n	8001b8e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7fe fe49 	bl	800080c <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e365      	b.n	800225a <HAL_RCC_OscConfig+0x109a>
 8001b8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b92:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b96:	2202      	movs	r2, #2
 8001b98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	fa93 f2a3 	rbit	r2, r3
 8001ba8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001bba:	2202      	movs	r2, #2
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	fa93 f2a3 	rbit	r2, r3
 8001bcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001bd4:	601a      	str	r2, [r3, #0]
  return result;
 8001bd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bda:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001bde:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be0:	fab3 f383 	clz	r3, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	095b      	lsrs	r3, r3, #5
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	f043 0302 	orr.w	r3, r3, #2
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d102      	bne.n	8001bfa <HAL_RCC_OscConfig+0xa3a>
 8001bf4:	4b42      	ldr	r3, [pc, #264]	; (8001d00 <HAL_RCC_OscConfig+0xb40>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	e013      	b.n	8001c22 <HAL_RCC_OscConfig+0xa62>
 8001bfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001c02:	2202      	movs	r2, #2
 8001c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c0a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	fa93 f2a3 	rbit	r2, r3
 8001c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c18:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <HAL_RCC_OscConfig+0xb40>)
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c26:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001c2a:	2102      	movs	r1, #2
 8001c2c:	6011      	str	r1, [r2, #0]
 8001c2e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c32:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	fa92 f1a2 	rbit	r1, r2
 8001c3c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c40:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001c44:	6011      	str	r1, [r2, #0]
  return result;
 8001c46:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c4a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	fab2 f282 	clz	r2, r2
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	f002 021f 	and.w	r2, r2, #31
 8001c60:	2101      	movs	r1, #1
 8001c62:	fa01 f202 	lsl.w	r2, r1, r2
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d084      	beq.n	8001b76 <HAL_RCC_OscConfig+0x9b6>
 8001c6c:	e083      	b.n	8001d76 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6e:	f7fe fdcd 	bl	800080c <HAL_GetTick>
 8001c72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c76:	e00b      	b.n	8001c90 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c78:	f7fe fdc8 	bl	800080c <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e2e4      	b.n	800225a <HAL_RCC_OscConfig+0x109a>
 8001c90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c94:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001c98:	2202      	movs	r2, #2
 8001c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	fa93 f2a3 	rbit	r2, r3
 8001caa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	fa93 f2a3 	rbit	r2, r3
 8001cce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001cd6:	601a      	str	r2, [r3, #0]
  return result;
 8001cd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cdc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ce0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	095b      	lsrs	r3, r3, #5
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d106      	bne.n	8001d04 <HAL_RCC_OscConfig+0xb44>
 8001cf6:	4b02      	ldr	r3, [pc, #8]	; (8001d00 <HAL_RCC_OscConfig+0xb40>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	e017      	b.n	8001d2c <HAL_RCC_OscConfig+0xb6c>
 8001cfc:	40007000 	.word	0x40007000
 8001d00:	40021000 	.word	0x40021000
 8001d04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d08:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d14:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	fa93 f2a3 	rbit	r2, r3
 8001d1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d22:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	4bb3      	ldr	r3, [pc, #716]	; (8001ff8 <HAL_RCC_OscConfig+0xe38>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d30:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001d34:	2102      	movs	r1, #2
 8001d36:	6011      	str	r1, [r2, #0]
 8001d38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d3c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	fa92 f1a2 	rbit	r1, r2
 8001d46:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d4a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001d4e:	6011      	str	r1, [r2, #0]
  return result;
 8001d50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d54:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	fab2 f282 	clz	r2, r2
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	f002 021f 	and.w	r2, r2, #31
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d180      	bne.n	8001c78 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d76:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d105      	bne.n	8001d8a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7e:	4b9e      	ldr	r3, [pc, #632]	; (8001ff8 <HAL_RCC_OscConfig+0xe38>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	4a9d      	ldr	r2, [pc, #628]	; (8001ff8 <HAL_RCC_OscConfig+0xe38>)
 8001d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d88:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 825e 	beq.w	8002258 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d9c:	4b96      	ldr	r3, [pc, #600]	; (8001ff8 <HAL_RCC_OscConfig+0xe38>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	f000 821f 	beq.w	80021e8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	f040 8170 	bne.w	800209c <HAL_RCC_OscConfig+0xedc>
 8001dbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001dc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	fa93 f2a3 	rbit	r2, r3
 8001dd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ddc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001de0:	601a      	str	r2, [r3, #0]
  return result;
 8001de2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001dea:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dec:	fab3 f383 	clz	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001df6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7fe fd03 	bl	800080c <HAL_GetTick>
 8001e06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0a:	e009      	b.n	8001e20 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7fe fcfe 	bl	800080c <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e21c      	b.n	800225a <HAL_RCC_OscConfig+0x109a>
 8001e20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e24:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e32:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	fa93 f2a3 	rbit	r2, r3
 8001e3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e40:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e44:	601a      	str	r2, [r3, #0]
  return result;
 8001e46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e4a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e50:	fab3 f383 	clz	r3, r3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d102      	bne.n	8001e6a <HAL_RCC_OscConfig+0xcaa>
 8001e64:	4b64      	ldr	r3, [pc, #400]	; (8001ff8 <HAL_RCC_OscConfig+0xe38>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	e027      	b.n	8001eba <HAL_RCC_OscConfig+0xcfa>
 8001e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	fa93 f2a3 	rbit	r2, r3
 8001e86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e8a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e94:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001e98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	fa93 f2a3 	rbit	r2, r3
 8001eac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	4b50      	ldr	r3, [pc, #320]	; (8001ff8 <HAL_RCC_OscConfig+0xe38>)
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ebe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ec2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ec6:	6011      	str	r1, [r2, #0]
 8001ec8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ecc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	fa92 f1a2 	rbit	r1, r2
 8001ed6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eda:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001ede:	6011      	str	r1, [r2, #0]
  return result;
 8001ee0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ee4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	fab2 f282 	clz	r2, r2
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	f042 0220 	orr.w	r2, r2, #32
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	f002 021f 	and.w	r2, r2, #31
 8001efa:	2101      	movs	r1, #1
 8001efc:	fa01 f202 	lsl.w	r2, r1, r2
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d182      	bne.n	8001e0c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f06:	4b3c      	ldr	r3, [pc, #240]	; (8001ff8 <HAL_RCC_OscConfig+0xe38>)
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0a:	f023 020f 	bic.w	r2, r3, #15
 8001f0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	4937      	ldr	r1, [pc, #220]	; (8001ff8 <HAL_RCC_OscConfig+0xe38>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001f20:	4b35      	ldr	r3, [pc, #212]	; (8001ff8 <HAL_RCC_OscConfig+0xe38>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6a19      	ldr	r1, [r3, #32]
 8001f34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f38:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	430b      	orrs	r3, r1
 8001f42:	492d      	ldr	r1, [pc, #180]	; (8001ff8 <HAL_RCC_OscConfig+0xe38>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]
 8001f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	fa93 f2a3 	rbit	r2, r3
 8001f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f68:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f6c:	601a      	str	r2, [r3, #0]
  return result;
 8001f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f72:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f76:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f78:	fab3 f383 	clz	r3, r3
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f82:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	461a      	mov	r2, r3
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7fe fc3d 	bl	800080c <HAL_GetTick>
 8001f92:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f96:	e009      	b.n	8001fac <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f98:	f7fe fc38 	bl	800080c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e156      	b.n	800225a <HAL_RCC_OscConfig+0x109a>
 8001fac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001fb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fbe:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	fa93 f2a3 	rbit	r2, r3
 8001fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fcc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001fd0:	601a      	str	r2, [r3, #0]
  return result;
 8001fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001fda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d105      	bne.n	8001ffc <HAL_RCC_OscConfig+0xe3c>
 8001ff0:	4b01      	ldr	r3, [pc, #4]	; (8001ff8 <HAL_RCC_OscConfig+0xe38>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	e02a      	b.n	800204c <HAL_RCC_OscConfig+0xe8c>
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002000:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002004:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800200e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	fa93 f2a3 	rbit	r2, r3
 8002018:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800201c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002026:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800202a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002034:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	fa93 f2a3 	rbit	r2, r3
 800203e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002042:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	4b86      	ldr	r3, [pc, #536]	; (8002264 <HAL_RCC_OscConfig+0x10a4>)
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002050:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002054:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002058:	6011      	str	r1, [r2, #0]
 800205a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800205e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	fa92 f1a2 	rbit	r1, r2
 8002068:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800206c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002070:	6011      	str	r1, [r2, #0]
  return result;
 8002072:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002076:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	fab2 f282 	clz	r2, r2
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	f042 0220 	orr.w	r2, r2, #32
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	f002 021f 	and.w	r2, r2, #31
 800208c:	2101      	movs	r1, #1
 800208e:	fa01 f202 	lsl.w	r2, r1, r2
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	f43f af7f 	beq.w	8001f98 <HAL_RCC_OscConfig+0xdd8>
 800209a:	e0dd      	b.n	8002258 <HAL_RCC_OscConfig+0x1098>
 800209c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80020a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	fa93 f2a3 	rbit	r2, r3
 80020b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020bc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80020c0:	601a      	str	r2, [r3, #0]
  return result;
 80020c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80020ca:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020cc:	fab3 f383 	clz	r3, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	461a      	mov	r2, r3
 80020de:	2300      	movs	r3, #0
 80020e0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7fe fb93 	bl	800080c <HAL_GetTick>
 80020e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ea:	e009      	b.n	8002100 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ec:	f7fe fb8e 	bl	800080c <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e0ac      	b.n	800225a <HAL_RCC_OscConfig+0x109a>
 8002100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002104:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002108:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800210c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002112:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	fa93 f2a3 	rbit	r2, r3
 800211c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002120:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002124:	601a      	str	r2, [r3, #0]
  return result;
 8002126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800212e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002130:	fab3 f383 	clz	r3, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	b2db      	uxtb	r3, r3
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b01      	cmp	r3, #1
 8002142:	d102      	bne.n	800214a <HAL_RCC_OscConfig+0xf8a>
 8002144:	4b47      	ldr	r3, [pc, #284]	; (8002264 <HAL_RCC_OscConfig+0x10a4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	e027      	b.n	800219a <HAL_RCC_OscConfig+0xfda>
 800214a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800214e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002152:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002156:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800215c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	fa93 f2a3 	rbit	r2, r3
 8002166:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800216a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002174:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002178:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002182:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	fa93 f2a3 	rbit	r2, r3
 800218c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002190:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	4b33      	ldr	r3, [pc, #204]	; (8002264 <HAL_RCC_OscConfig+0x10a4>)
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800219e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80021a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021a6:	6011      	str	r1, [r2, #0]
 80021a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021ac:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	fa92 f1a2 	rbit	r1, r2
 80021b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021ba:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80021be:	6011      	str	r1, [r2, #0]
  return result;
 80021c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021c4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	fab2 f282 	clz	r2, r2
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	f042 0220 	orr.w	r2, r2, #32
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	f002 021f 	and.w	r2, r2, #31
 80021da:	2101      	movs	r1, #1
 80021dc:	fa01 f202 	lsl.w	r2, r1, r2
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d182      	bne.n	80020ec <HAL_RCC_OscConfig+0xf2c>
 80021e6:	e037      	b.n	8002258 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e02e      	b.n	800225a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021fc:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_RCC_OscConfig+0x10a4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002204:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HAL_RCC_OscConfig+0x10a4>)
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800220c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002210:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002214:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002218:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	429a      	cmp	r2, r3
 8002222:	d117      	bne.n	8002254 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002224:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002228:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800222c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002230:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002238:	429a      	cmp	r2, r3
 800223a:	d10b      	bne.n	8002254 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800223c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002240:	f003 020f 	and.w	r2, r3, #15
 8002244:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002248:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000

08002268 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b09e      	sub	sp, #120	; 0x78
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e162      	b.n	8002546 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002280:	4b90      	ldr	r3, [pc, #576]	; (80024c4 <HAL_RCC_ClockConfig+0x25c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d910      	bls.n	80022b0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228e:	4b8d      	ldr	r3, [pc, #564]	; (80024c4 <HAL_RCC_ClockConfig+0x25c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 0207 	bic.w	r2, r3, #7
 8002296:	498b      	ldr	r1, [pc, #556]	; (80024c4 <HAL_RCC_ClockConfig+0x25c>)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229e:	4b89      	ldr	r3, [pc, #548]	; (80024c4 <HAL_RCC_ClockConfig+0x25c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e14a      	b.n	8002546 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d008      	beq.n	80022ce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022bc:	4b82      	ldr	r3, [pc, #520]	; (80024c8 <HAL_RCC_ClockConfig+0x260>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	497f      	ldr	r1, [pc, #508]	; (80024c8 <HAL_RCC_ClockConfig+0x260>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 80dc 	beq.w	8002494 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d13c      	bne.n	800235e <HAL_RCC_ClockConfig+0xf6>
 80022e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022e8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80022f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b01      	cmp	r3, #1
 8002306:	d102      	bne.n	800230e <HAL_RCC_ClockConfig+0xa6>
 8002308:	4b6f      	ldr	r3, [pc, #444]	; (80024c8 <HAL_RCC_ClockConfig+0x260>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	e00f      	b.n	800232e <HAL_RCC_ClockConfig+0xc6>
 800230e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002312:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002314:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002316:	fa93 f3a3 	rbit	r3, r3
 800231a:	667b      	str	r3, [r7, #100]	; 0x64
 800231c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002320:	663b      	str	r3, [r7, #96]	; 0x60
 8002322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	65fb      	str	r3, [r7, #92]	; 0x5c
 800232a:	4b67      	ldr	r3, [pc, #412]	; (80024c8 <HAL_RCC_ClockConfig+0x260>)
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002332:	65ba      	str	r2, [r7, #88]	; 0x58
 8002334:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002336:	fa92 f2a2 	rbit	r2, r2
 800233a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800233c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800233e:	fab2 f282 	clz	r2, r2
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	f042 0220 	orr.w	r2, r2, #32
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	f002 021f 	and.w	r2, r2, #31
 800234e:	2101      	movs	r1, #1
 8002350:	fa01 f202 	lsl.w	r2, r1, r2
 8002354:	4013      	ands	r3, r2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d17b      	bne.n	8002452 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e0f3      	b.n	8002546 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d13c      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x178>
 8002366:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800236a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	095b      	lsrs	r3, r3, #5
 800237e:	b2db      	uxtb	r3, r3
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d102      	bne.n	8002390 <HAL_RCC_ClockConfig+0x128>
 800238a:	4b4f      	ldr	r3, [pc, #316]	; (80024c8 <HAL_RCC_ClockConfig+0x260>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	e00f      	b.n	80023b0 <HAL_RCC_ClockConfig+0x148>
 8002390:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002394:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002398:	fa93 f3a3 	rbit	r3, r3
 800239c:	647b      	str	r3, [r7, #68]	; 0x44
 800239e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023a2:	643b      	str	r3, [r7, #64]	; 0x40
 80023a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a6:	fa93 f3a3 	rbit	r3, r3
 80023aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ac:	4b46      	ldr	r3, [pc, #280]	; (80024c8 <HAL_RCC_ClockConfig+0x260>)
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023b4:	63ba      	str	r2, [r7, #56]	; 0x38
 80023b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023b8:	fa92 f2a2 	rbit	r2, r2
 80023bc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80023be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023c0:	fab2 f282 	clz	r2, r2
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	f042 0220 	orr.w	r2, r2, #32
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	f002 021f 	and.w	r2, r2, #31
 80023d0:	2101      	movs	r1, #1
 80023d2:	fa01 f202 	lsl.w	r2, r1, r2
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d13a      	bne.n	8002452 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0b2      	b.n	8002546 <HAL_RCC_ClockConfig+0x2de>
 80023e0:	2302      	movs	r3, #2
 80023e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	095b      	lsrs	r3, r3, #5
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d102      	bne.n	8002408 <HAL_RCC_ClockConfig+0x1a0>
 8002402:	4b31      	ldr	r3, [pc, #196]	; (80024c8 <HAL_RCC_ClockConfig+0x260>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	e00d      	b.n	8002424 <HAL_RCC_ClockConfig+0x1bc>
 8002408:	2302      	movs	r3, #2
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
 8002414:	2302      	movs	r3, #2
 8002416:	623b      	str	r3, [r7, #32]
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	fa93 f3a3 	rbit	r3, r3
 800241e:	61fb      	str	r3, [r7, #28]
 8002420:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <HAL_RCC_ClockConfig+0x260>)
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	2202      	movs	r2, #2
 8002426:	61ba      	str	r2, [r7, #24]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	fa92 f2a2 	rbit	r2, r2
 800242e:	617a      	str	r2, [r7, #20]
  return result;
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	fab2 f282 	clz	r2, r2
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	f042 0220 	orr.w	r2, r2, #32
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	f002 021f 	and.w	r2, r2, #31
 8002442:	2101      	movs	r1, #1
 8002444:	fa01 f202 	lsl.w	r2, r1, r2
 8002448:	4013      	ands	r3, r2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e079      	b.n	8002546 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002452:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <HAL_RCC_ClockConfig+0x260>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f023 0203 	bic.w	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	491a      	ldr	r1, [pc, #104]	; (80024c8 <HAL_RCC_ClockConfig+0x260>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002464:	f7fe f9d2 	bl	800080c <HAL_GetTick>
 8002468:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	e00a      	b.n	8002482 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246c:	f7fe f9ce 	bl	800080c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e061      	b.n	8002546 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <HAL_RCC_ClockConfig+0x260>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 020c 	and.w	r2, r3, #12
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	429a      	cmp	r2, r3
 8002492:	d1eb      	bne.n	800246c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_RCC_ClockConfig+0x25c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d214      	bcs.n	80024cc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <HAL_RCC_ClockConfig+0x25c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 0207 	bic.w	r2, r3, #7
 80024aa:	4906      	ldr	r1, [pc, #24]	; (80024c4 <HAL_RCC_ClockConfig+0x25c>)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b2:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <HAL_RCC_ClockConfig+0x25c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d005      	beq.n	80024cc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e040      	b.n	8002546 <HAL_RCC_ClockConfig+0x2de>
 80024c4:	40022000 	.word	0x40022000
 80024c8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <HAL_RCC_ClockConfig+0x2e8>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	491a      	ldr	r1, [pc, #104]	; (8002550 <HAL_RCC_ClockConfig+0x2e8>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d009      	beq.n	800250a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024f6:	4b16      	ldr	r3, [pc, #88]	; (8002550 <HAL_RCC_ClockConfig+0x2e8>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4912      	ldr	r1, [pc, #72]	; (8002550 <HAL_RCC_ClockConfig+0x2e8>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800250a:	f000 f829 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 800250e:	4601      	mov	r1, r0
 8002510:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <HAL_RCC_ClockConfig+0x2e8>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002518:	22f0      	movs	r2, #240	; 0xf0
 800251a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	fa92 f2a2 	rbit	r2, r2
 8002522:	60fa      	str	r2, [r7, #12]
  return result;
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	fab2 f282 	clz	r2, r2
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	40d3      	lsrs	r3, r2
 800252e:	4a09      	ldr	r2, [pc, #36]	; (8002554 <HAL_RCC_ClockConfig+0x2ec>)
 8002530:	5cd3      	ldrb	r3, [r2, r3]
 8002532:	fa21 f303 	lsr.w	r3, r1, r3
 8002536:	4a08      	ldr	r2, [pc, #32]	; (8002558 <HAL_RCC_ClockConfig+0x2f0>)
 8002538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <HAL_RCC_ClockConfig+0x2f4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe f920 	bl	8000784 <HAL_InitTick>
  
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3778      	adds	r7, #120	; 0x78
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	08003328 	.word	0x08003328
 8002558:	20000000 	.word	0x20000000
 800255c:	20000004 	.word	0x20000004

08002560 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002560:	b480      	push	{r7}
 8002562:	b08b      	sub	sp, #44	; 0x2c
 8002564:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	2300      	movs	r3, #0
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	2300      	movs	r3, #0
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002576:	2300      	movs	r3, #0
 8002578:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800257a:	4b2a      	ldr	r3, [pc, #168]	; (8002624 <HAL_RCC_GetSysClockFreq+0xc4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b04      	cmp	r3, #4
 8002588:	d002      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x30>
 800258a:	2b08      	cmp	r3, #8
 800258c:	d003      	beq.n	8002596 <HAL_RCC_GetSysClockFreq+0x36>
 800258e:	e03f      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002590:	4b25      	ldr	r3, [pc, #148]	; (8002628 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002592:	623b      	str	r3, [r7, #32]
      break;
 8002594:	e03f      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800259c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80025a0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	fa92 f2a2 	rbit	r2, r2
 80025a8:	607a      	str	r2, [r7, #4]
  return result;
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	fab2 f282 	clz	r2, r2
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	40d3      	lsrs	r3, r2
 80025b4:	4a1d      	ldr	r2, [pc, #116]	; (800262c <HAL_RCC_GetSysClockFreq+0xcc>)
 80025b6:	5cd3      	ldrb	r3, [r2, r3]
 80025b8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025ba:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	220f      	movs	r2, #15
 80025c4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	fa92 f2a2 	rbit	r2, r2
 80025cc:	60fa      	str	r2, [r7, #12]
  return result;
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	fab2 f282 	clz	r2, r2
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	40d3      	lsrs	r3, r2
 80025d8:	4a15      	ldr	r2, [pc, #84]	; (8002630 <HAL_RCC_GetSysClockFreq+0xd0>)
 80025da:	5cd3      	ldrb	r3, [r2, r3]
 80025dc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d008      	beq.n	80025fa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025e8:	4a0f      	ldr	r2, [pc, #60]	; (8002628 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	fb02 f303 	mul.w	r3, r2, r3
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
 80025f8:	e007      	b.n	800260a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025fa:	4a0b      	ldr	r2, [pc, #44]	; (8002628 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	623b      	str	r3, [r7, #32]
      break;
 800260e:	e002      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002612:	623b      	str	r3, [r7, #32]
      break;
 8002614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002616:	6a3b      	ldr	r3, [r7, #32]
}
 8002618:	4618      	mov	r0, r3
 800261a:	372c      	adds	r7, #44	; 0x2c
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	40021000 	.word	0x40021000
 8002628:	007a1200 	.word	0x007a1200
 800262c:	08003340 	.word	0x08003340
 8002630:	08003350 	.word	0x08003350

08002634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002638:	4b03      	ldr	r3, [pc, #12]	; (8002648 <HAL_RCC_GetHCLKFreq+0x14>)
 800263a:	681b      	ldr	r3, [r3, #0]
}
 800263c:	4618      	mov	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20000000 	.word	0x20000000

0800264c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002652:	f7ff ffef 	bl	8002634 <HAL_RCC_GetHCLKFreq>
 8002656:	4601      	mov	r1, r0
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002660:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002664:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	fa92 f2a2 	rbit	r2, r2
 800266c:	603a      	str	r2, [r7, #0]
  return result;
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	fab2 f282 	clz	r2, r2
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	40d3      	lsrs	r3, r2
 8002678:	4a04      	ldr	r2, [pc, #16]	; (800268c <HAL_RCC_GetPCLK1Freq+0x40>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40021000 	.word	0x40021000
 800268c:	08003338 	.word	0x08003338

08002690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002696:	f7ff ffcd 	bl	8002634 <HAL_RCC_GetHCLKFreq>
 800269a:	4601      	mov	r1, r0
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80026a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80026a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	fa92 f2a2 	rbit	r2, r2
 80026b0:	603a      	str	r2, [r7, #0]
  return result;
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	fab2 f282 	clz	r2, r2
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	40d3      	lsrs	r3, r2
 80026bc:	4a04      	ldr	r2, [pc, #16]	; (80026d0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80026be:	5cd3      	ldrb	r3, [r2, r3]
 80026c0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40021000 	.word	0x40021000
 80026d0:	08003338 	.word	0x08003338

080026d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b092      	sub	sp, #72	; 0x48
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80026e4:	2300      	movs	r3, #0
 80026e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 80d4 	beq.w	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f8:	4b4e      	ldr	r3, [pc, #312]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10e      	bne.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002704:	4b4b      	ldr	r3, [pc, #300]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	4a4a      	ldr	r2, [pc, #296]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800270a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270e:	61d3      	str	r3, [r2, #28]
 8002710:	4b48      	ldr	r3, [pc, #288]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800271c:	2301      	movs	r3, #1
 800271e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002722:	4b45      	ldr	r3, [pc, #276]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272a:	2b00      	cmp	r3, #0
 800272c:	d118      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800272e:	4b42      	ldr	r3, [pc, #264]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a41      	ldr	r2, [pc, #260]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002738:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800273a:	f7fe f867 	bl	800080c <HAL_GetTick>
 800273e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002740:	e008      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002742:	f7fe f863 	bl	800080c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b64      	cmp	r3, #100	; 0x64
 800274e:	d901      	bls.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e1d6      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002754:	4b38      	ldr	r3, [pc, #224]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002760:	4b34      	ldr	r3, [pc, #208]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002768:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800276a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 8084 	beq.w	800287a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800277a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800277c:	429a      	cmp	r2, r3
 800277e:	d07c      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002780:	4b2c      	ldr	r3, [pc, #176]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002788:	63fb      	str	r3, [r7, #60]	; 0x3c
 800278a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800278e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b26      	ldr	r3, [pc, #152]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	461a      	mov	r2, r3
 80027aa:	2301      	movs	r3, #1
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b1d      	ldr	r3, [pc, #116]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	461a      	mov	r2, r3
 80027ce:	2300      	movs	r3, #0
 80027d0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027d2:	4a18      	ldr	r2, [pc, #96]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027d6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d04b      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7fe f813 	bl	800080c <HAL_GetTick>
 80027e6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e8:	e00a      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f7fe f80f 	bl	800080c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d901      	bls.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e180      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002800:	2302      	movs	r3, #2
 8002802:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
 800280c:	2302      	movs	r3, #2
 800280e:	623b      	str	r3, [r7, #32]
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	fa93 f3a3 	rbit	r3, r3
 8002816:	61fb      	str	r3, [r7, #28]
  return result;
 8002818:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	b2db      	uxtb	r3, r3
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d108      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800282e:	4b01      	ldr	r3, [pc, #4]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	e00d      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002834:	40021000 	.word	0x40021000
 8002838:	40007000 	.word	0x40007000
 800283c:	10908100 	.word	0x10908100
 8002840:	2302      	movs	r3, #2
 8002842:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	4b9a      	ldr	r3, [pc, #616]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	2202      	movs	r2, #2
 8002852:	613a      	str	r2, [r7, #16]
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	fa92 f2a2 	rbit	r2, r2
 800285a:	60fa      	str	r2, [r7, #12]
  return result;
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	fab2 f282 	clz	r2, r2
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	f002 021f 	and.w	r2, r2, #31
 800286e:	2101      	movs	r1, #1
 8002870:	fa01 f202 	lsl.w	r2, r1, r2
 8002874:	4013      	ands	r3, r2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0b7      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800287a:	4b8f      	ldr	r3, [pc, #572]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	498c      	ldr	r1, [pc, #560]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002888:	4313      	orrs	r3, r2
 800288a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800288c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002890:	2b01      	cmp	r3, #1
 8002892:	d105      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002894:	4b88      	ldr	r3, [pc, #544]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	4a87      	ldr	r2, [pc, #540]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800289a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800289e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ac:	4b82      	ldr	r3, [pc, #520]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	f023 0203 	bic.w	r2, r3, #3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	497f      	ldr	r1, [pc, #508]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d008      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028ca:	4b7b      	ldr	r3, [pc, #492]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	4978      	ldr	r1, [pc, #480]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028e8:	4b73      	ldr	r3, [pc, #460]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	4970      	ldr	r1, [pc, #448]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b00      	cmp	r3, #0
 8002904:	d008      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002906:	4b6c      	ldr	r3, [pc, #432]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f023 0210 	bic.w	r2, r3, #16
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	4969      	ldr	r1, [pc, #420]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002914:	4313      	orrs	r3, r2
 8002916:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002924:	4b64      	ldr	r3, [pc, #400]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002930:	4961      	ldr	r1, [pc, #388]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002932:	4313      	orrs	r3, r2
 8002934:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d008      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002942:	4b5d      	ldr	r3, [pc, #372]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	f023 0220 	bic.w	r2, r3, #32
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	495a      	ldr	r1, [pc, #360]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002950:	4313      	orrs	r3, r2
 8002952:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002960:	4b55      	ldr	r3, [pc, #340]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	4952      	ldr	r1, [pc, #328]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800296e:	4313      	orrs	r3, r2
 8002970:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800297e:	4b4e      	ldr	r3, [pc, #312]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	494b      	ldr	r1, [pc, #300]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800298c:	4313      	orrs	r3, r2
 800298e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800299c:	4b46      	ldr	r3, [pc, #280]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	4943      	ldr	r1, [pc, #268]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029ba:	4b3f      	ldr	r3, [pc, #252]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	493c      	ldr	r1, [pc, #240]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029d8:	4b37      	ldr	r3, [pc, #220]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	4934      	ldr	r1, [pc, #208]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d008      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80029f6:	4b30      	ldr	r3, [pc, #192]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	492d      	ldr	r1, [pc, #180]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a14:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a20:	4925      	ldr	r1, [pc, #148]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d008      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002a32:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	491e      	ldr	r1, [pc, #120]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5c:	4916      	ldr	r1, [pc, #88]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d008      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002a6e:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7a:	490f      	ldr	r1, [pc, #60]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a98:	4907      	ldr	r1, [pc, #28]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00c      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002aaa:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	e002      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002abe:	4913      	ldr	r1, [pc, #76]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002adc:	490b      	ldr	r1, [pc, #44]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d008      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002aee:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afa:	4904      	ldr	r1, [pc, #16]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3748      	adds	r7, #72	; 0x48
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000

08002b10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e040      	b.n	8002ba4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fd fd3e 	bl	80005b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2224      	movs	r2, #36	; 0x24
 8002b3c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0201 	bic.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f82c 	bl	8002bac <UART_SetConfig>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e022      	b.n	8002ba4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f9f6 	bl	8002f58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fa7d 	bl	800309c <UART_CheckIdleState>
 8002ba2:	4603      	mov	r3, r0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4b92      	ldr	r3, [pc, #584]	; (8002e20 <UART_SetConfig+0x274>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	6979      	ldr	r1, [r7, #20]
 8002be0:	430b      	orrs	r3, r1
 8002be2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a80      	ldr	r2, [pc, #512]	; (8002e24 <UART_SetConfig+0x278>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d120      	bne.n	8002c6a <UART_SetConfig+0xbe>
 8002c28:	4b7f      	ldr	r3, [pc, #508]	; (8002e28 <UART_SetConfig+0x27c>)
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d817      	bhi.n	8002c64 <UART_SetConfig+0xb8>
 8002c34:	a201      	add	r2, pc, #4	; (adr r2, 8002c3c <UART_SetConfig+0x90>)
 8002c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3a:	bf00      	nop
 8002c3c:	08002c4d 	.word	0x08002c4d
 8002c40:	08002c59 	.word	0x08002c59
 8002c44:	08002c5f 	.word	0x08002c5f
 8002c48:	08002c53 	.word	0x08002c53
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	77fb      	strb	r3, [r7, #31]
 8002c50:	e0b5      	b.n	8002dbe <UART_SetConfig+0x212>
 8002c52:	2302      	movs	r3, #2
 8002c54:	77fb      	strb	r3, [r7, #31]
 8002c56:	e0b2      	b.n	8002dbe <UART_SetConfig+0x212>
 8002c58:	2304      	movs	r3, #4
 8002c5a:	77fb      	strb	r3, [r7, #31]
 8002c5c:	e0af      	b.n	8002dbe <UART_SetConfig+0x212>
 8002c5e:	2308      	movs	r3, #8
 8002c60:	77fb      	strb	r3, [r7, #31]
 8002c62:	e0ac      	b.n	8002dbe <UART_SetConfig+0x212>
 8002c64:	2310      	movs	r3, #16
 8002c66:	77fb      	strb	r3, [r7, #31]
 8002c68:	e0a9      	b.n	8002dbe <UART_SetConfig+0x212>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a6f      	ldr	r2, [pc, #444]	; (8002e2c <UART_SetConfig+0x280>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d124      	bne.n	8002cbe <UART_SetConfig+0x112>
 8002c74:	4b6c      	ldr	r3, [pc, #432]	; (8002e28 <UART_SetConfig+0x27c>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c80:	d011      	beq.n	8002ca6 <UART_SetConfig+0xfa>
 8002c82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c86:	d817      	bhi.n	8002cb8 <UART_SetConfig+0x10c>
 8002c88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c8c:	d011      	beq.n	8002cb2 <UART_SetConfig+0x106>
 8002c8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c92:	d811      	bhi.n	8002cb8 <UART_SetConfig+0x10c>
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <UART_SetConfig+0xf4>
 8002c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9c:	d006      	beq.n	8002cac <UART_SetConfig+0x100>
 8002c9e:	e00b      	b.n	8002cb8 <UART_SetConfig+0x10c>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	77fb      	strb	r3, [r7, #31]
 8002ca4:	e08b      	b.n	8002dbe <UART_SetConfig+0x212>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	77fb      	strb	r3, [r7, #31]
 8002caa:	e088      	b.n	8002dbe <UART_SetConfig+0x212>
 8002cac:	2304      	movs	r3, #4
 8002cae:	77fb      	strb	r3, [r7, #31]
 8002cb0:	e085      	b.n	8002dbe <UART_SetConfig+0x212>
 8002cb2:	2308      	movs	r3, #8
 8002cb4:	77fb      	strb	r3, [r7, #31]
 8002cb6:	e082      	b.n	8002dbe <UART_SetConfig+0x212>
 8002cb8:	2310      	movs	r3, #16
 8002cba:	77fb      	strb	r3, [r7, #31]
 8002cbc:	e07f      	b.n	8002dbe <UART_SetConfig+0x212>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a5b      	ldr	r2, [pc, #364]	; (8002e30 <UART_SetConfig+0x284>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d124      	bne.n	8002d12 <UART_SetConfig+0x166>
 8002cc8:	4b57      	ldr	r3, [pc, #348]	; (8002e28 <UART_SetConfig+0x27c>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002cd0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002cd4:	d011      	beq.n	8002cfa <UART_SetConfig+0x14e>
 8002cd6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002cda:	d817      	bhi.n	8002d0c <UART_SetConfig+0x160>
 8002cdc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ce0:	d011      	beq.n	8002d06 <UART_SetConfig+0x15a>
 8002ce2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ce6:	d811      	bhi.n	8002d0c <UART_SetConfig+0x160>
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <UART_SetConfig+0x148>
 8002cec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cf0:	d006      	beq.n	8002d00 <UART_SetConfig+0x154>
 8002cf2:	e00b      	b.n	8002d0c <UART_SetConfig+0x160>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	77fb      	strb	r3, [r7, #31]
 8002cf8:	e061      	b.n	8002dbe <UART_SetConfig+0x212>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	77fb      	strb	r3, [r7, #31]
 8002cfe:	e05e      	b.n	8002dbe <UART_SetConfig+0x212>
 8002d00:	2304      	movs	r3, #4
 8002d02:	77fb      	strb	r3, [r7, #31]
 8002d04:	e05b      	b.n	8002dbe <UART_SetConfig+0x212>
 8002d06:	2308      	movs	r3, #8
 8002d08:	77fb      	strb	r3, [r7, #31]
 8002d0a:	e058      	b.n	8002dbe <UART_SetConfig+0x212>
 8002d0c:	2310      	movs	r3, #16
 8002d0e:	77fb      	strb	r3, [r7, #31]
 8002d10:	e055      	b.n	8002dbe <UART_SetConfig+0x212>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a47      	ldr	r2, [pc, #284]	; (8002e34 <UART_SetConfig+0x288>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d124      	bne.n	8002d66 <UART_SetConfig+0x1ba>
 8002d1c:	4b42      	ldr	r3, [pc, #264]	; (8002e28 <UART_SetConfig+0x27c>)
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d28:	d011      	beq.n	8002d4e <UART_SetConfig+0x1a2>
 8002d2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d2e:	d817      	bhi.n	8002d60 <UART_SetConfig+0x1b4>
 8002d30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d34:	d011      	beq.n	8002d5a <UART_SetConfig+0x1ae>
 8002d36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d3a:	d811      	bhi.n	8002d60 <UART_SetConfig+0x1b4>
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <UART_SetConfig+0x19c>
 8002d40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d44:	d006      	beq.n	8002d54 <UART_SetConfig+0x1a8>
 8002d46:	e00b      	b.n	8002d60 <UART_SetConfig+0x1b4>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	77fb      	strb	r3, [r7, #31]
 8002d4c:	e037      	b.n	8002dbe <UART_SetConfig+0x212>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	77fb      	strb	r3, [r7, #31]
 8002d52:	e034      	b.n	8002dbe <UART_SetConfig+0x212>
 8002d54:	2304      	movs	r3, #4
 8002d56:	77fb      	strb	r3, [r7, #31]
 8002d58:	e031      	b.n	8002dbe <UART_SetConfig+0x212>
 8002d5a:	2308      	movs	r3, #8
 8002d5c:	77fb      	strb	r3, [r7, #31]
 8002d5e:	e02e      	b.n	8002dbe <UART_SetConfig+0x212>
 8002d60:	2310      	movs	r3, #16
 8002d62:	77fb      	strb	r3, [r7, #31]
 8002d64:	e02b      	b.n	8002dbe <UART_SetConfig+0x212>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a33      	ldr	r2, [pc, #204]	; (8002e38 <UART_SetConfig+0x28c>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d124      	bne.n	8002dba <UART_SetConfig+0x20e>
 8002d70:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <UART_SetConfig+0x27c>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002d78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d7c:	d011      	beq.n	8002da2 <UART_SetConfig+0x1f6>
 8002d7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d82:	d817      	bhi.n	8002db4 <UART_SetConfig+0x208>
 8002d84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d88:	d011      	beq.n	8002dae <UART_SetConfig+0x202>
 8002d8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d8e:	d811      	bhi.n	8002db4 <UART_SetConfig+0x208>
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <UART_SetConfig+0x1f0>
 8002d94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d98:	d006      	beq.n	8002da8 <UART_SetConfig+0x1fc>
 8002d9a:	e00b      	b.n	8002db4 <UART_SetConfig+0x208>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	77fb      	strb	r3, [r7, #31]
 8002da0:	e00d      	b.n	8002dbe <UART_SetConfig+0x212>
 8002da2:	2302      	movs	r3, #2
 8002da4:	77fb      	strb	r3, [r7, #31]
 8002da6:	e00a      	b.n	8002dbe <UART_SetConfig+0x212>
 8002da8:	2304      	movs	r3, #4
 8002daa:	77fb      	strb	r3, [r7, #31]
 8002dac:	e007      	b.n	8002dbe <UART_SetConfig+0x212>
 8002dae:	2308      	movs	r3, #8
 8002db0:	77fb      	strb	r3, [r7, #31]
 8002db2:	e004      	b.n	8002dbe <UART_SetConfig+0x212>
 8002db4:	2310      	movs	r3, #16
 8002db6:	77fb      	strb	r3, [r7, #31]
 8002db8:	e001      	b.n	8002dbe <UART_SetConfig+0x212>
 8002dba:	2310      	movs	r3, #16
 8002dbc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc6:	d16c      	bne.n	8002ea2 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8002dc8:	7ffb      	ldrb	r3, [r7, #31]
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d838      	bhi.n	8002e40 <UART_SetConfig+0x294>
 8002dce:	a201      	add	r2, pc, #4	; (adr r2, 8002dd4 <UART_SetConfig+0x228>)
 8002dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd4:	08002df9 	.word	0x08002df9
 8002dd8:	08002e01 	.word	0x08002e01
 8002ddc:	08002e09 	.word	0x08002e09
 8002de0:	08002e41 	.word	0x08002e41
 8002de4:	08002e0f 	.word	0x08002e0f
 8002de8:	08002e41 	.word	0x08002e41
 8002dec:	08002e41 	.word	0x08002e41
 8002df0:	08002e41 	.word	0x08002e41
 8002df4:	08002e17 	.word	0x08002e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002df8:	f7ff fc28 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8002dfc:	61b8      	str	r0, [r7, #24]
        break;
 8002dfe:	e024      	b.n	8002e4a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e00:	f7ff fc46 	bl	8002690 <HAL_RCC_GetPCLK2Freq>
 8002e04:	61b8      	str	r0, [r7, #24]
        break;
 8002e06:	e020      	b.n	8002e4a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <UART_SetConfig+0x290>)
 8002e0a:	61bb      	str	r3, [r7, #24]
        break;
 8002e0c:	e01d      	b.n	8002e4a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e0e:	f7ff fba7 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 8002e12:	61b8      	str	r0, [r7, #24]
        break;
 8002e14:	e019      	b.n	8002e4a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e1a:	61bb      	str	r3, [r7, #24]
        break;
 8002e1c:	e015      	b.n	8002e4a <UART_SetConfig+0x29e>
 8002e1e:	bf00      	nop
 8002e20:	efff69f3 	.word	0xefff69f3
 8002e24:	40013800 	.word	0x40013800
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	40004400 	.word	0x40004400
 8002e30:	40004800 	.word	0x40004800
 8002e34:	40004c00 	.word	0x40004c00
 8002e38:	40005000 	.word	0x40005000
 8002e3c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	77bb      	strb	r3, [r7, #30]
        break;
 8002e48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d075      	beq.n	8002f3c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	005a      	lsls	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	085b      	lsrs	r3, r3, #1
 8002e5a:	441a      	add	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	2b0f      	cmp	r3, #15
 8002e6c:	d916      	bls.n	8002e9c <UART_SetConfig+0x2f0>
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e74:	d212      	bcs.n	8002e9c <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	f023 030f 	bic.w	r3, r3, #15
 8002e7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	085b      	lsrs	r3, r3, #1
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	89fb      	ldrh	r3, [r7, #14]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	89fa      	ldrh	r2, [r7, #14]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	e04f      	b.n	8002f3c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	77bb      	strb	r3, [r7, #30]
 8002ea0:	e04c      	b.n	8002f3c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ea2:	7ffb      	ldrb	r3, [r7, #31]
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d828      	bhi.n	8002efa <UART_SetConfig+0x34e>
 8002ea8:	a201      	add	r2, pc, #4	; (adr r2, 8002eb0 <UART_SetConfig+0x304>)
 8002eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eae:	bf00      	nop
 8002eb0:	08002ed5 	.word	0x08002ed5
 8002eb4:	08002edd 	.word	0x08002edd
 8002eb8:	08002ee5 	.word	0x08002ee5
 8002ebc:	08002efb 	.word	0x08002efb
 8002ec0:	08002eeb 	.word	0x08002eeb
 8002ec4:	08002efb 	.word	0x08002efb
 8002ec8:	08002efb 	.word	0x08002efb
 8002ecc:	08002efb 	.word	0x08002efb
 8002ed0:	08002ef3 	.word	0x08002ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ed4:	f7ff fbba 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8002ed8:	61b8      	str	r0, [r7, #24]
        break;
 8002eda:	e013      	b.n	8002f04 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002edc:	f7ff fbd8 	bl	8002690 <HAL_RCC_GetPCLK2Freq>
 8002ee0:	61b8      	str	r0, [r7, #24]
        break;
 8002ee2:	e00f      	b.n	8002f04 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <UART_SetConfig+0x3a8>)
 8002ee6:	61bb      	str	r3, [r7, #24]
        break;
 8002ee8:	e00c      	b.n	8002f04 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eea:	f7ff fb39 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 8002eee:	61b8      	str	r0, [r7, #24]
        break;
 8002ef0:	e008      	b.n	8002f04 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ef6:	61bb      	str	r3, [r7, #24]
        break;
 8002ef8:	e004      	b.n	8002f04 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	77bb      	strb	r3, [r7, #30]
        break;
 8002f02:	bf00      	nop
    }

    if (pclk != 0U)
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d018      	beq.n	8002f3c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	085a      	lsrs	r2, r3, #1
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	441a      	add	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	2b0f      	cmp	r3, #15
 8002f24:	d908      	bls.n	8002f38 <UART_SetConfig+0x38c>
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2c:	d204      	bcs.n	8002f38 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	60da      	str	r2, [r3, #12]
 8002f36:	e001      	b.n	8002f3c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f48:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	007a1200 	.word	0x007a1200

08002f58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00a      	beq.n	8002f82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	f003 0310 	and.w	r3, r3, #16
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00a      	beq.n	800300a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01a      	beq.n	800306e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003056:	d10a      	bne.n	800306e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	605a      	str	r2, [r3, #4]
  }
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af02      	add	r7, sp, #8
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030ac:	f7fd fbae 	bl	800080c <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d10e      	bne.n	80030de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f82d 	bl	800312e <UART_WaitOnFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e023      	b.n	8003126 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d10e      	bne.n	800310a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f817 	bl	800312e <UART_WaitOnFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e00d      	b.n	8003126 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2220      	movs	r2, #32
 800310e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b09c      	sub	sp, #112	; 0x70
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	4613      	mov	r3, r2
 800313c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800313e:	e0a5      	b.n	800328c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003146:	f000 80a1 	beq.w	800328c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314a:	f7fd fb5f 	bl	800080c <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003156:	429a      	cmp	r2, r3
 8003158:	d302      	bcc.n	8003160 <UART_WaitOnFlagUntilTimeout+0x32>
 800315a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800315c:	2b00      	cmp	r3, #0
 800315e:	d13e      	bne.n	80031de <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003168:	e853 3f00 	ldrex	r3, [r3]
 800316c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800316e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003170:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003174:	667b      	str	r3, [r7, #100]	; 0x64
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800317e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003180:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003182:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003184:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003186:	e841 2300 	strex	r3, r2, [r1]
 800318a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800318c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1e6      	bne.n	8003160 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	3308      	adds	r3, #8
 8003198:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800319c:	e853 3f00 	ldrex	r3, [r3]
 80031a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	663b      	str	r3, [r7, #96]	; 0x60
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3308      	adds	r3, #8
 80031b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80031b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80031b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031ba:	e841 2300 	strex	r3, r2, [r1]
 80031be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80031c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1e5      	bne.n	8003192 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2220      	movs	r2, #32
 80031ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2220      	movs	r2, #32
 80031d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e067      	b.n	80032ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d04f      	beq.n	800328c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031fa:	d147      	bne.n	800328c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003204:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320e:	e853 3f00 	ldrex	r3, [r3]
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800321a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003224:	637b      	str	r3, [r7, #52]	; 0x34
 8003226:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003228:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800322a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800322c:	e841 2300 	strex	r3, r2, [r1]
 8003230:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1e6      	bne.n	8003206 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3308      	adds	r3, #8
 800323e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	e853 3f00 	ldrex	r3, [r3]
 8003246:	613b      	str	r3, [r7, #16]
   return(result);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f023 0301 	bic.w	r3, r3, #1
 800324e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3308      	adds	r3, #8
 8003256:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003258:	623a      	str	r2, [r7, #32]
 800325a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325c:	69f9      	ldr	r1, [r7, #28]
 800325e:	6a3a      	ldr	r2, [r7, #32]
 8003260:	e841 2300 	strex	r3, r2, [r1]
 8003264:	61bb      	str	r3, [r7, #24]
   return(result);
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1e5      	bne.n	8003238 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2220      	movs	r2, #32
 8003276:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2220      	movs	r2, #32
 800327c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e010      	b.n	80032ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	69da      	ldr	r2, [r3, #28]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	4013      	ands	r3, r2
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	429a      	cmp	r2, r3
 800329a:	bf0c      	ite	eq
 800329c:	2301      	moveq	r3, #1
 800329e:	2300      	movne	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	461a      	mov	r2, r3
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	f43f af4a 	beq.w	8003140 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3770      	adds	r7, #112	; 0x70
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <__libc_init_array>:
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	4d0d      	ldr	r5, [pc, #52]	; (80032f0 <__libc_init_array+0x38>)
 80032bc:	4c0d      	ldr	r4, [pc, #52]	; (80032f4 <__libc_init_array+0x3c>)
 80032be:	1b64      	subs	r4, r4, r5
 80032c0:	10a4      	asrs	r4, r4, #2
 80032c2:	2600      	movs	r6, #0
 80032c4:	42a6      	cmp	r6, r4
 80032c6:	d109      	bne.n	80032dc <__libc_init_array+0x24>
 80032c8:	4d0b      	ldr	r5, [pc, #44]	; (80032f8 <__libc_init_array+0x40>)
 80032ca:	4c0c      	ldr	r4, [pc, #48]	; (80032fc <__libc_init_array+0x44>)
 80032cc:	f000 f820 	bl	8003310 <_init>
 80032d0:	1b64      	subs	r4, r4, r5
 80032d2:	10a4      	asrs	r4, r4, #2
 80032d4:	2600      	movs	r6, #0
 80032d6:	42a6      	cmp	r6, r4
 80032d8:	d105      	bne.n	80032e6 <__libc_init_array+0x2e>
 80032da:	bd70      	pop	{r4, r5, r6, pc}
 80032dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e0:	4798      	blx	r3
 80032e2:	3601      	adds	r6, #1
 80032e4:	e7ee      	b.n	80032c4 <__libc_init_array+0xc>
 80032e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ea:	4798      	blx	r3
 80032ec:	3601      	adds	r6, #1
 80032ee:	e7f2      	b.n	80032d6 <__libc_init_array+0x1e>
 80032f0:	08003360 	.word	0x08003360
 80032f4:	08003360 	.word	0x08003360
 80032f8:	08003360 	.word	0x08003360
 80032fc:	08003364 	.word	0x08003364

08003300 <memset>:
 8003300:	4402      	add	r2, r0
 8003302:	4603      	mov	r3, r0
 8003304:	4293      	cmp	r3, r2
 8003306:	d100      	bne.n	800330a <memset+0xa>
 8003308:	4770      	bx	lr
 800330a:	f803 1b01 	strb.w	r1, [r3], #1
 800330e:	e7f9      	b.n	8003304 <memset+0x4>

08003310 <_init>:
 8003310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003312:	bf00      	nop
 8003314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003316:	bc08      	pop	{r3}
 8003318:	469e      	mov	lr, r3
 800331a:	4770      	bx	lr

0800331c <_fini>:
 800331c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331e:	bf00      	nop
 8003320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003322:	bc08      	pop	{r3}
 8003324:	469e      	mov	lr, r3
 8003326:	4770      	bx	lr
