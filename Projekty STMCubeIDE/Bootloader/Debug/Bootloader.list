
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003660  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080037f4  080037f4  000137f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800382c  0800382c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800382c  0800382c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800382c  0800382c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800382c  0800382c  0001382c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003834  08003834  00013834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001a0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ac  200001ac  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c864  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c95  00000000  00000000  0002c8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000788  00000000  00000000  0002e538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006f0  00000000  00000000  0002ecc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000046f9  00000000  00000000  0002f3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b081  00000000  00000000  00033aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2e46  00000000  00000000  0003eb2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00101970  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d60  00000000  00000000  001019c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080037dc 	.word	0x080037dc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080037dc 	.word	0x080037dc

080001d4 <_ZN5M485EC1Ev>:
/*########################################################################################*/
/******************** KLASY ***************************************************************/      

  

  class M485E{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2200      	movs	r2, #0
 80001e0:	711a      	strb	r2, [r3, #4]
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	2200      	movs	r2, #0
 80001e6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2200      	movs	r2, #0
 80001ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	2200      	movs	r2, #0
 80001f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2200      	movs	r2, #0
 80001fc:	641a      	str	r2, [r3, #64]	; 0x40
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	645a      	str	r2, [r3, #68]	; 0x44
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2200      	movs	r2, #0
 8000208:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	2200      	movs	r2, #0
 8000210:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	2200      	movs	r2, #0
 8000218:	671a      	str	r2, [r3, #112]	; 0x70
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	2200      	movs	r2, #0
 800021e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2201      	movs	r2, #1
 8000226:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2201      	movs	r2, #1
 800022e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2200      	movs	r2, #0
 8000236:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4618      	mov	r0, r3
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024e:	f000 faa5 	bl	800079c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000252:	f000 f81d 	bl	8000290 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000256:	f000 f8f3 	bl	8000440 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800025a:	f000 f8bd 	bl	80003d8 <_ZL19MX_USART2_UART_Initv>
  MX_USART1_UART_Init();
 800025e:	f000 f887 	bl	8000370 <_ZL19MX_USART1_UART_Initv>
//	  JumpToApplication();

	  //Przykład: Mruganie diodą powoli gdy nie ma wgranej aplikacji oraz kasowanie pamięci aplikacji
	  //if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_RESET) {HAL_Delay(1000); EraseUserApplication();}

	  for (int i = 0; i < 6; i++) {
 8000262:	2300      	movs	r3, #0
 8000264:	607b      	str	r3, [r7, #4]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2b05      	cmp	r3, #5
 800026a:	dc0c      	bgt.n	8000286 <main+0x3e>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800026c:	2120      	movs	r1, #32
 800026e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000272:	f000 fe47 	bl	8000f04 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8000276:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800027a:	f000 faf5 	bl	8000868 <HAL_Delay>
	  for (int i = 0; i < 6; i++) {
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	3301      	adds	r3, #1
 8000282:	607b      	str	r3, [r7, #4]
 8000284:	e7ef      	b.n	8000266 <main+0x1e>
	  }

	  HAL_Delay(1000);
 8000286:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800028a:	f000 faed 	bl	8000868 <HAL_Delay>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800028e:	e7e8      	b.n	8000262 <main+0x1a>

08000290 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b0a6      	sub	sp, #152	; 0x98
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800029a:	2228      	movs	r2, #40	; 0x28
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f003 fa94 	bl	80037cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2258      	movs	r2, #88	; 0x58
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f003 fa86 	bl	80037cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c0:	2302      	movs	r3, #2
 80002c2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c4:	2301      	movs	r3, #1
 80002c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c8:	2310      	movs	r3, #16
 80002ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ce:	2302      	movs	r3, #2
 80002d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 fe22 	bl	8000f38 <HAL_RCC_OscConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	bf14      	ite	ne
 80002fa:	2301      	movne	r3, #1
 80002fc:	2300      	moveq	r3, #0
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 8000304:	f000 f912 	bl	800052c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000308:	230f      	movs	r3, #15
 800030a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030c:	2302      	movs	r3, #2
 800030e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000318:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800031e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000322:	2102      	movs	r1, #2
 8000324:	4618      	mov	r0, r3
 8000326:	f001 fe5b 	bl	8001fe0 <HAL_RCC_ClockConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	bf14      	ite	ne
 8000330:	2301      	movne	r3, #1
 8000332:	2300      	moveq	r3, #0
 8000334:	b2db      	uxtb	r3, r3
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 800033a:	f000 f8f7 	bl	800052c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800033e:	2303      	movs	r3, #3
 8000340:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000342:	2300      	movs	r3, #0
 8000344:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000346:	2300      	movs	r3, #0
 8000348:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	4618      	mov	r0, r3
 800034e:	f002 f87d 	bl	800244c <HAL_RCCEx_PeriphCLKConfig>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	bf14      	ite	ne
 8000358:	2301      	movne	r3, #1
 800035a:	2300      	moveq	r3, #0
 800035c:	b2db      	uxtb	r3, r3
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8000362:	f000 f8e3 	bl	800052c <Error_Handler>
  }
}
 8000366:	bf00      	nop
 8000368:	3798      	adds	r7, #152	; 0x98
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000374:	4b16      	ldr	r3, [pc, #88]	; (80003d0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000376:	4a17      	ldr	r2, [pc, #92]	; (80003d4 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000378:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800037a:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <_ZL19MX_USART1_UART_Initv+0x60>)
 800037c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000380:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000382:	4b13      	ldr	r3, [pc, #76]	; (80003d0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <_ZL19MX_USART1_UART_Initv+0x60>)
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800038e:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000390:	2200      	movs	r2, #0
 8000392:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000396:	220c      	movs	r2, #12
 8000398:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800039a:	4b0d      	ldr	r3, [pc, #52]	; (80003d0 <_ZL19MX_USART1_UART_Initv+0x60>)
 800039c:	2200      	movs	r2, #0
 800039e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a0:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003a6:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003b2:	4807      	ldr	r0, [pc, #28]	; (80003d0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80003b4:	f002 fa68 	bl	8002888 <HAL_UART_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	bf14      	ite	ne
 80003be:	2301      	movne	r3, #1
 80003c0:	2300      	moveq	r3, #0
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80003c8:	f000 f8b0 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	200000a0 	.word	0x200000a0
 80003d4:	40013800 	.word	0x40013800

080003d8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003dc:	4b16      	ldr	r3, [pc, #88]	; (8000438 <_ZL19MX_USART2_UART_Initv+0x60>)
 80003de:	4a17      	ldr	r2, [pc, #92]	; (800043c <_ZL19MX_USART2_UART_Initv+0x64>)
 80003e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <_ZL19MX_USART2_UART_Initv+0x60>)
 80003e4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ea:	4b13      	ldr	r3, [pc, #76]	; (8000438 <_ZL19MX_USART2_UART_Initv+0x60>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <_ZL19MX_USART2_UART_Initv+0x60>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003f6:	4b10      	ldr	r3, [pc, #64]	; (8000438 <_ZL19MX_USART2_UART_Initv+0x60>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003fc:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <_ZL19MX_USART2_UART_Initv+0x60>)
 80003fe:	220c      	movs	r2, #12
 8000400:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000402:	4b0d      	ldr	r3, [pc, #52]	; (8000438 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000408:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <_ZL19MX_USART2_UART_Initv+0x60>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800040e:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000410:	2200      	movs	r2, #0
 8000412:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000416:	2200      	movs	r2, #0
 8000418:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800041a:	4807      	ldr	r0, [pc, #28]	; (8000438 <_ZL19MX_USART2_UART_Initv+0x60>)
 800041c:	f002 fa34 	bl	8002888 <HAL_UART_Init>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	bf14      	ite	ne
 8000426:	2301      	movne	r3, #1
 8000428:	2300      	moveq	r3, #0
 800042a:	b2db      	uxtb	r3, r3
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000430:	f000 f87c 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000124 	.word	0x20000124
 800043c:	40004400 	.word	0x40004400

08000440 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b08a      	sub	sp, #40	; 0x28
 8000444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000446:	f107 0314 	add.w	r3, r7, #20
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]
 8000454:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000456:	4b32      	ldr	r3, [pc, #200]	; (8000520 <_ZL12MX_GPIO_Initv+0xe0>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a31      	ldr	r2, [pc, #196]	; (8000520 <_ZL12MX_GPIO_Initv+0xe0>)
 800045c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000460:	6153      	str	r3, [r2, #20]
 8000462:	4b2f      	ldr	r3, [pc, #188]	; (8000520 <_ZL12MX_GPIO_Initv+0xe0>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800046a:	613b      	str	r3, [r7, #16]
 800046c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800046e:	4b2c      	ldr	r3, [pc, #176]	; (8000520 <_ZL12MX_GPIO_Initv+0xe0>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a2b      	ldr	r2, [pc, #172]	; (8000520 <_ZL12MX_GPIO_Initv+0xe0>)
 8000474:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000478:	6153      	str	r3, [r2, #20]
 800047a:	4b29      	ldr	r3, [pc, #164]	; (8000520 <_ZL12MX_GPIO_Initv+0xe0>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000486:	4b26      	ldr	r3, [pc, #152]	; (8000520 <_ZL12MX_GPIO_Initv+0xe0>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	4a25      	ldr	r2, [pc, #148]	; (8000520 <_ZL12MX_GPIO_Initv+0xe0>)
 800048c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000490:	6153      	str	r3, [r2, #20]
 8000492:	4b23      	ldr	r3, [pc, #140]	; (8000520 <_ZL12MX_GPIO_Initv+0xe0>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049e:	4b20      	ldr	r3, [pc, #128]	; (8000520 <_ZL12MX_GPIO_Initv+0xe0>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	4a1f      	ldr	r2, [pc, #124]	; (8000520 <_ZL12MX_GPIO_Initv+0xe0>)
 80004a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004a8:	6153      	str	r3, [r2, #20]
 80004aa:	4b1d      	ldr	r3, [pc, #116]	; (8000520 <_ZL12MX_GPIO_Initv+0xe0>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2120      	movs	r1, #32
 80004ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004be:	f000 fd09 	bl	8000ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80004cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	4619      	mov	r1, r3
 80004d8:	4812      	ldr	r0, [pc, #72]	; (8000524 <_ZL12MX_GPIO_Initv+0xe4>)
 80004da:	f000 fb71 	bl	8000bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004de:	2320      	movs	r3, #32
 80004e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e2:	2301      	movs	r3, #1
 80004e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	2300      	movs	r3, #0
 80004e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ea:	2300      	movs	r3, #0
 80004ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	4619      	mov	r1, r3
 80004f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f8:	f000 fb62 	bl	8000bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	4619      	mov	r1, r3
 8000510:	4805      	ldr	r0, [pc, #20]	; (8000528 <_ZL12MX_GPIO_Initv+0xe8>)
 8000512:	f000 fb55 	bl	8000bc0 <HAL_GPIO_Init>

}
 8000516:	bf00      	nop
 8000518:	3728      	adds	r7, #40	; 0x28
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000
 8000524:	48000800 	.word	0x48000800
 8000528:	48000400 	.word	0x48000400

0800052c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
}
 8000532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000534:	e7fe      	b.n	8000534 <Error_Handler+0x8>
	...

08000538 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d107      	bne.n	8000558 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800054e:	4293      	cmp	r3, r2
 8000550:	d102      	bne.n	8000558 <_Z41__static_initialization_and_destruction_0ii+0x20>
    
    };//************************************************************************************



    M485E  g485E;
 8000552:	4803      	ldr	r0, [pc, #12]	; (8000560 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000554:	f7ff fe3e 	bl	80001d4 <_ZN5M485EC1Ev>
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000028 	.word	0x20000028

08000564 <_GLOBAL__sub_I_g485E>:
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
 8000568:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800056c:	2001      	movs	r0, #1
 800056e:	f7ff ffe3 	bl	8000538 <_Z41__static_initialization_and_destruction_0ii>
 8000572:	bd80      	pop	{r7, pc}

08000574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <HAL_MspInit+0x44>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <HAL_MspInit+0x44>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6193      	str	r3, [r2, #24]
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <HAL_MspInit+0x44>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <HAL_MspInit+0x44>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	4a08      	ldr	r2, [pc, #32]	; (80005b8 <HAL_MspInit+0x44>)
 8000598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059c:	61d3      	str	r3, [r2, #28]
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_MspInit+0x44>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005aa:	2007      	movs	r0, #7
 80005ac:	f000 fa50 	bl	8000a50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000

080005bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08c      	sub	sp, #48	; 0x30
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	f107 031c 	add.w	r3, r7, #28
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a32      	ldr	r2, [pc, #200]	; (80006a4 <HAL_UART_MspInit+0xe8>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d130      	bne.n	8000640 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005de:	4b32      	ldr	r3, [pc, #200]	; (80006a8 <HAL_UART_MspInit+0xec>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	4a31      	ldr	r2, [pc, #196]	; (80006a8 <HAL_UART_MspInit+0xec>)
 80005e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e8:	6193      	str	r3, [r2, #24]
 80005ea:	4b2f      	ldr	r3, [pc, #188]	; (80006a8 <HAL_UART_MspInit+0xec>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f2:	61bb      	str	r3, [r7, #24]
 80005f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	4b2c      	ldr	r3, [pc, #176]	; (80006a8 <HAL_UART_MspInit+0xec>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a2b      	ldr	r2, [pc, #172]	; (80006a8 <HAL_UART_MspInit+0xec>)
 80005fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000600:	6153      	str	r3, [r2, #20]
 8000602:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <HAL_UART_MspInit+0xec>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800060e:	2330      	movs	r3, #48	; 0x30
 8000610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000612:	2302      	movs	r3, #2
 8000614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800061a:	2303      	movs	r3, #3
 800061c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800061e:	2307      	movs	r3, #7
 8000620:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	4619      	mov	r1, r3
 8000628:	4820      	ldr	r0, [pc, #128]	; (80006ac <HAL_UART_MspInit+0xf0>)
 800062a:	f000 fac9 	bl	8000bc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	2025      	movs	r0, #37	; 0x25
 8000634:	f000 fa17 	bl	8000a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000638:	2025      	movs	r0, #37	; 0x25
 800063a:	f000 fa30 	bl	8000a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800063e:	e02d      	b.n	800069c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a1a      	ldr	r2, [pc, #104]	; (80006b0 <HAL_UART_MspInit+0xf4>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d128      	bne.n	800069c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800064a:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <HAL_UART_MspInit+0xec>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	4a16      	ldr	r2, [pc, #88]	; (80006a8 <HAL_UART_MspInit+0xec>)
 8000650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000654:	61d3      	str	r3, [r2, #28]
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <HAL_UART_MspInit+0xec>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <HAL_UART_MspInit+0xec>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <HAL_UART_MspInit+0xec>)
 8000668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066c:	6153      	str	r3, [r2, #20]
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <HAL_UART_MspInit+0xec>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800067a:	230c      	movs	r3, #12
 800067c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067e:	2302      	movs	r3, #2
 8000680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800068a:	2307      	movs	r3, #7
 800068c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	4619      	mov	r1, r3
 8000694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000698:	f000 fa92 	bl	8000bc0 <HAL_GPIO_Init>
}
 800069c:	bf00      	nop
 800069e:	3730      	adds	r7, #48	; 0x30
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40013800 	.word	0x40013800
 80006a8:	40021000 	.word	0x40021000
 80006ac:	48000800 	.word	0x48000800
 80006b0:	40004400 	.word	0x40004400

080006b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <NMI_Handler+0x4>

080006ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006be:	e7fe      	b.n	80006be <HardFault_Handler+0x4>

080006c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <MemManage_Handler+0x4>

080006c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <BusFault_Handler+0x4>

080006cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <UsageFault_Handler+0x4>

080006d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr

080006ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000700:	f000 f892 	bl	8000828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}

08000708 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800070c:	4802      	ldr	r0, [pc, #8]	; (8000718 <USART1_IRQHandler+0x10>)
 800070e:	f002 f909 	bl	8002924 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200000a0 	.word	0x200000a0

0800071c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <SystemInit+0x28>)
 8000722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000726:	4a07      	ldr	r2, [pc, #28]	; (8000744 <SystemInit+0x28>)
 8000728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800072c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <SystemInit+0x28>)
 8000732:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000736:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000780 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <LoopForever+0x6>)
  ldr r1, =_edata
 800074e:	490e      	ldr	r1, [pc, #56]	; (8000788 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000750:	4a0e      	ldr	r2, [pc, #56]	; (800078c <LoopForever+0xe>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000754:	e002      	b.n	800075c <LoopCopyDataInit>

08000756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075a:	3304      	adds	r3, #4

0800075c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800075c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000760:	d3f9      	bcc.n	8000756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000764:	4c0b      	ldr	r4, [pc, #44]	; (8000794 <LoopForever+0x16>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000768:	e001      	b.n	800076e <LoopFillZerobss>

0800076a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800076c:	3204      	adds	r2, #4

0800076e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000770:	d3fb      	bcc.n	800076a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000772:	f7ff ffd3 	bl	800071c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000776:	f003 f805 	bl	8003784 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800077a:	f7ff fd65 	bl	8000248 <main>

0800077e <LoopForever>:

LoopForever:
    b LoopForever
 800077e:	e7fe      	b.n	800077e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000780:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800078c:	08003838 	.word	0x08003838
  ldr r2, =_sbss
 8000790:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000794:	200001ac 	.word	0x200001ac

08000798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC1_2_IRQHandler>
	...

0800079c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <HAL_Init+0x28>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <HAL_Init+0x28>)
 80007a6:	f043 0310 	orr.w	r3, r3, #16
 80007aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 f94f 	bl	8000a50 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b2:	2000      	movs	r0, #0
 80007b4:	f000 f808 	bl	80007c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b8:	f7ff fedc 	bl	8000574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40022000 	.word	0x40022000

080007c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_InitTick+0x54>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_InitTick+0x58>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007de:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f967 	bl	8000aba <HAL_SYSTICK_Config>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00e      	b.n	8000814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b0f      	cmp	r3, #15
 80007fa:	d80a      	bhi.n	8000812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fc:	2200      	movs	r2, #0
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	f000 f92f 	bl	8000a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000808:	4a06      	ldr	r2, [pc, #24]	; (8000824 <HAL_InitTick+0x5c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000000 	.word	0x20000000
 8000820:	20000008 	.word	0x20000008
 8000824:	20000004 	.word	0x20000004

08000828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_IncTick+0x20>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_IncTick+0x24>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <HAL_IncTick+0x24>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000008 	.word	0x20000008
 800084c:	200001a8 	.word	0x200001a8

08000850 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return uwTick;  
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <HAL_GetTick+0x14>)
 8000856:	681b      	ldr	r3, [r3, #0]
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	200001a8 	.word	0x200001a8

08000868 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000870:	f7ff ffee 	bl	8000850 <HAL_GetTick>
 8000874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000880:	d005      	beq.n	800088e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000882:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <HAL_Delay+0x44>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	461a      	mov	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	4413      	add	r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800088e:	bf00      	nop
 8000890:	f7ff ffde 	bl	8000850 <HAL_GetTick>
 8000894:	4602      	mov	r2, r0
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	429a      	cmp	r2, r3
 800089e:	d8f7      	bhi.n	8000890 <HAL_Delay+0x28>
  {
  }
}
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000008 	.word	0x20000008

080008b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008cc:	4013      	ands	r3, r2
 80008ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008e2:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	60d3      	str	r3, [r2, #12]
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <__NVIC_GetPriorityGrouping+0x18>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	0a1b      	lsrs	r3, r3, #8
 8000902:	f003 0307 	and.w	r3, r3, #7
}
 8000906:	4618      	mov	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	2b00      	cmp	r3, #0
 8000924:	db0b      	blt.n	800093e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 021f 	and.w	r2, r3, #31
 800092c:	4907      	ldr	r1, [pc, #28]	; (800094c <__NVIC_EnableIRQ+0x38>)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	095b      	lsrs	r3, r3, #5
 8000934:	2001      	movs	r0, #1
 8000936:	fa00 f202 	lsl.w	r2, r0, r2
 800093a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000e100 	.word	0xe000e100

08000950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	6039      	str	r1, [r7, #0]
 800095a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	db0a      	blt.n	800097a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	b2da      	uxtb	r2, r3
 8000968:	490c      	ldr	r1, [pc, #48]	; (800099c <__NVIC_SetPriority+0x4c>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	0112      	lsls	r2, r2, #4
 8000970:	b2d2      	uxtb	r2, r2
 8000972:	440b      	add	r3, r1
 8000974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000978:	e00a      	b.n	8000990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4908      	ldr	r1, [pc, #32]	; (80009a0 <__NVIC_SetPriority+0x50>)
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	f003 030f 	and.w	r3, r3, #15
 8000986:	3b04      	subs	r3, #4
 8000988:	0112      	lsls	r2, r2, #4
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	440b      	add	r3, r1
 800098e:	761a      	strb	r2, [r3, #24]
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000e100 	.word	0xe000e100
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b089      	sub	sp, #36	; 0x24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f1c3 0307 	rsb	r3, r3, #7
 80009be:	2b04      	cmp	r3, #4
 80009c0:	bf28      	it	cs
 80009c2:	2304      	movcs	r3, #4
 80009c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3304      	adds	r3, #4
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	d902      	bls.n	80009d4 <NVIC_EncodePriority+0x30>
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3b03      	subs	r3, #3
 80009d2:	e000      	b.n	80009d6 <NVIC_EncodePriority+0x32>
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	f04f 32ff 	mov.w	r2, #4294967295
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43da      	mvns	r2, r3
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	401a      	ands	r2, r3
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ec:	f04f 31ff 	mov.w	r1, #4294967295
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	43d9      	mvns	r1, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	4313      	orrs	r3, r2
         );
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3724      	adds	r7, #36	; 0x24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
	...

08000a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a1c:	d301      	bcc.n	8000a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00f      	b.n	8000a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <SysTick_Config+0x40>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f7ff ff8e 	bl	8000950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <SysTick_Config+0x40>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <SysTick_Config+0x40>)
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	e000e010 	.word	0xe000e010

08000a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ff29 	bl	80008b0 <__NVIC_SetPriorityGrouping>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b086      	sub	sp, #24
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
 8000a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a78:	f7ff ff3e 	bl	80008f8 <__NVIC_GetPriorityGrouping>
 8000a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	68b9      	ldr	r1, [r7, #8]
 8000a82:	6978      	ldr	r0, [r7, #20]
 8000a84:	f7ff ff8e 	bl	80009a4 <NVIC_EncodePriority>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff5d 	bl	8000950 <__NVIC_SetPriority>
}
 8000a96:	bf00      	nop
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff31 	bl	8000914 <__NVIC_EnableIRQ>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ffa2 	bl	8000a0c <SysTick_Config>
 8000ac8:	4603      	mov	r3, r0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d008      	beq.n	8000af6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e020      	b.n	8000b38 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f022 020e 	bic.w	r2, r2, #14
 8000b04:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f022 0201 	bic.w	r2, r2, #1
 8000b14:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b1e:	2101      	movs	r1, #1
 8000b20:	fa01 f202 	lsl.w	r2, r1, r2
 8000b24:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d005      	beq.n	8000b66 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2204      	movs	r2, #4
 8000b5e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
 8000b64:	e027      	b.n	8000bb6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f022 020e 	bic.w	r2, r2, #14
 8000b74:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f022 0201 	bic.w	r2, r2, #1
 8000b84:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b8e:	2101      	movs	r1, #1
 8000b90:	fa01 f202 	lsl.w	r2, r1, r2
 8000b94:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d003      	beq.n	8000bb6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	4798      	blx	r3
    } 
  }
  return status;
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b087      	sub	sp, #28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bce:	e160      	b.n	8000e92 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f000 8152 	beq.w	8000e8c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f003 0303 	and.w	r3, r3, #3
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d005      	beq.n	8000c00 <HAL_GPIO_Init+0x40>
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 0303 	and.w	r3, r3, #3
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d130      	bne.n	8000c62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	68da      	ldr	r2, [r3, #12]
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c36:	2201      	movs	r2, #1
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	091b      	lsrs	r3, r3, #4
 8000c4c:	f003 0201 	and.w	r2, r3, #1
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d017      	beq.n	8000c9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	2203      	movs	r2, #3
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	689a      	ldr	r2, [r3, #8]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 0303 	and.w	r3, r3, #3
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d123      	bne.n	8000cf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	08da      	lsrs	r2, r3, #3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	3208      	adds	r2, #8
 8000cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	220f      	movs	r2, #15
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	691a      	ldr	r2, [r3, #16]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	f003 0307 	and.w	r3, r3, #7
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	08da      	lsrs	r2, r3, #3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3208      	adds	r2, #8
 8000cec:	6939      	ldr	r1, [r7, #16]
 8000cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 0203 	and.w	r2, r3, #3
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f000 80ac 	beq.w	8000e8c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d34:	4b5e      	ldr	r3, [pc, #376]	; (8000eb0 <HAL_GPIO_Init+0x2f0>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a5d      	ldr	r2, [pc, #372]	; (8000eb0 <HAL_GPIO_Init+0x2f0>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b5b      	ldr	r3, [pc, #364]	; (8000eb0 <HAL_GPIO_Init+0x2f0>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d4c:	4a59      	ldr	r2, [pc, #356]	; (8000eb4 <HAL_GPIO_Init+0x2f4>)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	089b      	lsrs	r3, r3, #2
 8000d52:	3302      	adds	r3, #2
 8000d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	220f      	movs	r2, #15
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d76:	d025      	beq.n	8000dc4 <HAL_GPIO_Init+0x204>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a4f      	ldr	r2, [pc, #316]	; (8000eb8 <HAL_GPIO_Init+0x2f8>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d01f      	beq.n	8000dc0 <HAL_GPIO_Init+0x200>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a4e      	ldr	r2, [pc, #312]	; (8000ebc <HAL_GPIO_Init+0x2fc>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d019      	beq.n	8000dbc <HAL_GPIO_Init+0x1fc>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a4d      	ldr	r2, [pc, #308]	; (8000ec0 <HAL_GPIO_Init+0x300>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d013      	beq.n	8000db8 <HAL_GPIO_Init+0x1f8>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a4c      	ldr	r2, [pc, #304]	; (8000ec4 <HAL_GPIO_Init+0x304>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d00d      	beq.n	8000db4 <HAL_GPIO_Init+0x1f4>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a4b      	ldr	r2, [pc, #300]	; (8000ec8 <HAL_GPIO_Init+0x308>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d007      	beq.n	8000db0 <HAL_GPIO_Init+0x1f0>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a4a      	ldr	r2, [pc, #296]	; (8000ecc <HAL_GPIO_Init+0x30c>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d101      	bne.n	8000dac <HAL_GPIO_Init+0x1ec>
 8000da8:	2306      	movs	r3, #6
 8000daa:	e00c      	b.n	8000dc6 <HAL_GPIO_Init+0x206>
 8000dac:	2307      	movs	r3, #7
 8000dae:	e00a      	b.n	8000dc6 <HAL_GPIO_Init+0x206>
 8000db0:	2305      	movs	r3, #5
 8000db2:	e008      	b.n	8000dc6 <HAL_GPIO_Init+0x206>
 8000db4:	2304      	movs	r3, #4
 8000db6:	e006      	b.n	8000dc6 <HAL_GPIO_Init+0x206>
 8000db8:	2303      	movs	r3, #3
 8000dba:	e004      	b.n	8000dc6 <HAL_GPIO_Init+0x206>
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	e002      	b.n	8000dc6 <HAL_GPIO_Init+0x206>
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e000      	b.n	8000dc6 <HAL_GPIO_Init+0x206>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	f002 0203 	and.w	r2, r2, #3
 8000dcc:	0092      	lsls	r2, r2, #2
 8000dce:	4093      	lsls	r3, r2
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dd6:	4937      	ldr	r1, [pc, #220]	; (8000eb4 <HAL_GPIO_Init+0x2f4>)
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	089b      	lsrs	r3, r3, #2
 8000ddc:	3302      	adds	r3, #2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000de4:	4b3a      	ldr	r3, [pc, #232]	; (8000ed0 <HAL_GPIO_Init+0x310>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e08:	4a31      	ldr	r2, [pc, #196]	; (8000ed0 <HAL_GPIO_Init+0x310>)
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e0e:	4b30      	ldr	r3, [pc, #192]	; (8000ed0 <HAL_GPIO_Init+0x310>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e32:	4a27      	ldr	r2, [pc, #156]	; (8000ed0 <HAL_GPIO_Init+0x310>)
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e38:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <HAL_GPIO_Init+0x310>)
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e5c:	4a1c      	ldr	r2, [pc, #112]	; (8000ed0 <HAL_GPIO_Init+0x310>)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <HAL_GPIO_Init+0x310>)
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <HAL_GPIO_Init+0x310>)
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	fa22 f303 	lsr.w	r3, r2, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f47f ae97 	bne.w	8000bd0 <HAL_GPIO_Init+0x10>
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	bf00      	nop
 8000ea6:	371c      	adds	r7, #28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40010000 	.word	0x40010000
 8000eb8:	48000400 	.word	0x48000400
 8000ebc:	48000800 	.word	0x48000800
 8000ec0:	48000c00 	.word	0x48000c00
 8000ec4:	48001000 	.word	0x48001000
 8000ec8:	48001400 	.word	0x48001400
 8000ecc:	48001800 	.word	0x48001800
 8000ed0:	40010400 	.word	0x40010400

08000ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	807b      	strh	r3, [r7, #2]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ee4:	787b      	ldrb	r3, [r7, #1]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eea:	887a      	ldrh	r2, [r7, #2]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ef0:	e002      	b.n	8000ef8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ef2:	887a      	ldrh	r2, [r7, #2]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f16:	887a      	ldrh	r2, [r7, #2]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	041a      	lsls	r2, r3, #16
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	43d9      	mvns	r1, r3
 8000f22:	887b      	ldrh	r3, [r7, #2]
 8000f24:	400b      	ands	r3, r1
 8000f26:	431a      	orrs	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	619a      	str	r2, [r3, #24]
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f48:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f4e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	f001 b83a 	b.w	8001fd2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f62:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 816f 	beq.w	8001252 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f74:	4bb5      	ldr	r3, [pc, #724]	; (800124c <HAL_RCC_OscConfig+0x314>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 030c 	and.w	r3, r3, #12
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	d00c      	beq.n	8000f9a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f80:	4bb2      	ldr	r3, [pc, #712]	; (800124c <HAL_RCC_OscConfig+0x314>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 030c 	and.w	r3, r3, #12
 8000f88:	2b08      	cmp	r3, #8
 8000f8a:	d15c      	bne.n	8001046 <HAL_RCC_OscConfig+0x10e>
 8000f8c:	4baf      	ldr	r3, [pc, #700]	; (800124c <HAL_RCC_OscConfig+0x314>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f98:	d155      	bne.n	8001046 <HAL_RCC_OscConfig+0x10e>
 8000f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f9e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000fa6:	fa93 f3a3 	rbit	r3, r3
 8000faa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb2:	fab3 f383 	clz	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	095b      	lsrs	r3, r3, #5
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d102      	bne.n	8000fcc <HAL_RCC_OscConfig+0x94>
 8000fc6:	4ba1      	ldr	r3, [pc, #644]	; (800124c <HAL_RCC_OscConfig+0x314>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	e015      	b.n	8000ff8 <HAL_RCC_OscConfig+0xc0>
 8000fcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000fd8:	fa93 f3a3 	rbit	r3, r3
 8000fdc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000fe0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000fe8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000fec:	fa93 f3a3 	rbit	r3, r3
 8000ff0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000ff4:	4b95      	ldr	r3, [pc, #596]	; (800124c <HAL_RCC_OscConfig+0x314>)
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ffc:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001000:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001004:	fa92 f2a2 	rbit	r2, r2
 8001008:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800100c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001010:	fab2 f282 	clz	r2, r2
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	f042 0220 	orr.w	r2, r2, #32
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	f002 021f 	and.w	r2, r2, #31
 8001020:	2101      	movs	r1, #1
 8001022:	fa01 f202 	lsl.w	r2, r1, r2
 8001026:	4013      	ands	r3, r2
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 8111 	beq.w	8001250 <HAL_RCC_OscConfig+0x318>
 800102e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001032:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 8108 	bne.w	8001250 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	f000 bfc6 	b.w	8001fd2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800104a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001056:	d106      	bne.n	8001066 <HAL_RCC_OscConfig+0x12e>
 8001058:	4b7c      	ldr	r3, [pc, #496]	; (800124c <HAL_RCC_OscConfig+0x314>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a7b      	ldr	r2, [pc, #492]	; (800124c <HAL_RCC_OscConfig+0x314>)
 800105e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	e036      	b.n	80010d4 <HAL_RCC_OscConfig+0x19c>
 8001066:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800106a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10c      	bne.n	8001090 <HAL_RCC_OscConfig+0x158>
 8001076:	4b75      	ldr	r3, [pc, #468]	; (800124c <HAL_RCC_OscConfig+0x314>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a74      	ldr	r2, [pc, #464]	; (800124c <HAL_RCC_OscConfig+0x314>)
 800107c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	4b72      	ldr	r3, [pc, #456]	; (800124c <HAL_RCC_OscConfig+0x314>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a71      	ldr	r2, [pc, #452]	; (800124c <HAL_RCC_OscConfig+0x314>)
 8001088:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	e021      	b.n	80010d4 <HAL_RCC_OscConfig+0x19c>
 8001090:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001094:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010a0:	d10c      	bne.n	80010bc <HAL_RCC_OscConfig+0x184>
 80010a2:	4b6a      	ldr	r3, [pc, #424]	; (800124c <HAL_RCC_OscConfig+0x314>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a69      	ldr	r2, [pc, #420]	; (800124c <HAL_RCC_OscConfig+0x314>)
 80010a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	4b67      	ldr	r3, [pc, #412]	; (800124c <HAL_RCC_OscConfig+0x314>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a66      	ldr	r2, [pc, #408]	; (800124c <HAL_RCC_OscConfig+0x314>)
 80010b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	e00b      	b.n	80010d4 <HAL_RCC_OscConfig+0x19c>
 80010bc:	4b63      	ldr	r3, [pc, #396]	; (800124c <HAL_RCC_OscConfig+0x314>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a62      	ldr	r2, [pc, #392]	; (800124c <HAL_RCC_OscConfig+0x314>)
 80010c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b60      	ldr	r3, [pc, #384]	; (800124c <HAL_RCC_OscConfig+0x314>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a5f      	ldr	r2, [pc, #380]	; (800124c <HAL_RCC_OscConfig+0x314>)
 80010ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d059      	beq.n	8001198 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fbb4 	bl	8000850 <HAL_GetTick>
 80010e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ec:	e00a      	b.n	8001104 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ee:	f7ff fbaf 	bl	8000850 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b64      	cmp	r3, #100	; 0x64
 80010fc:	d902      	bls.n	8001104 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	f000 bf67 	b.w	8001fd2 <HAL_RCC_OscConfig+0x109a>
 8001104:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001108:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001110:	fa93 f3a3 	rbit	r3, r3
 8001114:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001118:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111c:	fab3 f383 	clz	r3, r3
 8001120:	b2db      	uxtb	r3, r3
 8001122:	095b      	lsrs	r3, r3, #5
 8001124:	b2db      	uxtb	r3, r3
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b01      	cmp	r3, #1
 800112e:	d102      	bne.n	8001136 <HAL_RCC_OscConfig+0x1fe>
 8001130:	4b46      	ldr	r3, [pc, #280]	; (800124c <HAL_RCC_OscConfig+0x314>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	e015      	b.n	8001162 <HAL_RCC_OscConfig+0x22a>
 8001136:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800113a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001142:	fa93 f3a3 	rbit	r3, r3
 8001146:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800114a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800114e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001152:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001156:	fa93 f3a3 	rbit	r3, r3
 800115a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800115e:	4b3b      	ldr	r3, [pc, #236]	; (800124c <HAL_RCC_OscConfig+0x314>)
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001166:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800116a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800116e:	fa92 f2a2 	rbit	r2, r2
 8001172:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001176:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800117a:	fab2 f282 	clz	r2, r2
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	f042 0220 	orr.w	r2, r2, #32
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	f002 021f 	and.w	r2, r2, #31
 800118a:	2101      	movs	r1, #1
 800118c:	fa01 f202 	lsl.w	r2, r1, r2
 8001190:	4013      	ands	r3, r2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d0ab      	beq.n	80010ee <HAL_RCC_OscConfig+0x1b6>
 8001196:	e05c      	b.n	8001252 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001198:	f7ff fb5a 	bl	8000850 <HAL_GetTick>
 800119c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a0:	e00a      	b.n	80011b8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a2:	f7ff fb55 	bl	8000850 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b64      	cmp	r3, #100	; 0x64
 80011b0:	d902      	bls.n	80011b8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	f000 bf0d 	b.w	8001fd2 <HAL_RCC_OscConfig+0x109a>
 80011b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011bc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80011c4:	fa93 f3a3 	rbit	r3, r3
 80011c8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80011cc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d0:	fab3 f383 	clz	r3, r3
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	095b      	lsrs	r3, r3, #5
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d102      	bne.n	80011ea <HAL_RCC_OscConfig+0x2b2>
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_RCC_OscConfig+0x314>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	e015      	b.n	8001216 <HAL_RCC_OscConfig+0x2de>
 80011ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80011f6:	fa93 f3a3 	rbit	r3, r3
 80011fa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80011fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001202:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001206:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800120a:	fa93 f3a3 	rbit	r3, r3
 800120e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <HAL_RCC_OscConfig+0x314>)
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800121a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800121e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001222:	fa92 f2a2 	rbit	r2, r2
 8001226:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800122a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800122e:	fab2 f282 	clz	r2, r2
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	f042 0220 	orr.w	r2, r2, #32
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	f002 021f 	and.w	r2, r2, #31
 800123e:	2101      	movs	r1, #1
 8001240:	fa01 f202 	lsl.w	r2, r1, r2
 8001244:	4013      	ands	r3, r2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1ab      	bne.n	80011a2 <HAL_RCC_OscConfig+0x26a>
 800124a:	e002      	b.n	8001252 <HAL_RCC_OscConfig+0x31a>
 800124c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001256:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 817f 	beq.w	8001566 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001268:	4ba7      	ldr	r3, [pc, #668]	; (8001508 <HAL_RCC_OscConfig+0x5d0>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 030c 	and.w	r3, r3, #12
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00c      	beq.n	800128e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001274:	4ba4      	ldr	r3, [pc, #656]	; (8001508 <HAL_RCC_OscConfig+0x5d0>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 030c 	and.w	r3, r3, #12
 800127c:	2b08      	cmp	r3, #8
 800127e:	d173      	bne.n	8001368 <HAL_RCC_OscConfig+0x430>
 8001280:	4ba1      	ldr	r3, [pc, #644]	; (8001508 <HAL_RCC_OscConfig+0x5d0>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800128c:	d16c      	bne.n	8001368 <HAL_RCC_OscConfig+0x430>
 800128e:	2302      	movs	r3, #2
 8001290:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001294:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001298:	fa93 f3a3 	rbit	r3, r3
 800129c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80012a0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a4:	fab3 f383 	clz	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d102      	bne.n	80012be <HAL_RCC_OscConfig+0x386>
 80012b8:	4b93      	ldr	r3, [pc, #588]	; (8001508 <HAL_RCC_OscConfig+0x5d0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	e013      	b.n	80012e6 <HAL_RCC_OscConfig+0x3ae>
 80012be:	2302      	movs	r3, #2
 80012c0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80012c8:	fa93 f3a3 	rbit	r3, r3
 80012cc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80012d0:	2302      	movs	r3, #2
 80012d2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80012d6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80012da:	fa93 f3a3 	rbit	r3, r3
 80012de:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80012e2:	4b89      	ldr	r3, [pc, #548]	; (8001508 <HAL_RCC_OscConfig+0x5d0>)
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	2202      	movs	r2, #2
 80012e8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80012ec:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80012f0:	fa92 f2a2 	rbit	r2, r2
 80012f4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80012f8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80012fc:	fab2 f282 	clz	r2, r2
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	f042 0220 	orr.w	r2, r2, #32
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	f002 021f 	and.w	r2, r2, #31
 800130c:	2101      	movs	r1, #1
 800130e:	fa01 f202 	lsl.w	r2, r1, r2
 8001312:	4013      	ands	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00a      	beq.n	800132e <HAL_RCC_OscConfig+0x3f6>
 8001318:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800131c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d002      	beq.n	800132e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	f000 be52 	b.w	8001fd2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132e:	4b76      	ldr	r3, [pc, #472]	; (8001508 <HAL_RCC_OscConfig+0x5d0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001336:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800133a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	21f8      	movs	r1, #248	; 0xf8
 8001344:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001348:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800134c:	fa91 f1a1 	rbit	r1, r1
 8001350:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001354:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001358:	fab1 f181 	clz	r1, r1
 800135c:	b2c9      	uxtb	r1, r1
 800135e:	408b      	lsls	r3, r1
 8001360:	4969      	ldr	r1, [pc, #420]	; (8001508 <HAL_RCC_OscConfig+0x5d0>)
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001366:	e0fe      	b.n	8001566 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001368:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800136c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 8088 	beq.w	800148a <HAL_RCC_OscConfig+0x552>
 800137a:	2301      	movs	r3, #1
 800137c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001380:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001384:	fa93 f3a3 	rbit	r3, r3
 8001388:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800138c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001390:	fab3 f383 	clz	r3, r3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800139a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	461a      	mov	r2, r3
 80013a2:	2301      	movs	r3, #1
 80013a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a6:	f7ff fa53 	bl	8000850 <HAL_GetTick>
 80013aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ae:	e00a      	b.n	80013c6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b0:	f7ff fa4e 	bl	8000850 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d902      	bls.n	80013c6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	f000 be06 	b.w	8001fd2 <HAL_RCC_OscConfig+0x109a>
 80013c6:	2302      	movs	r3, #2
 80013c8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013cc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80013d0:	fa93 f3a3 	rbit	r3, r3
 80013d4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80013d8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	fab3 f383 	clz	r3, r3
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	095b      	lsrs	r3, r3, #5
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d102      	bne.n	80013f6 <HAL_RCC_OscConfig+0x4be>
 80013f0:	4b45      	ldr	r3, [pc, #276]	; (8001508 <HAL_RCC_OscConfig+0x5d0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	e013      	b.n	800141e <HAL_RCC_OscConfig+0x4e6>
 80013f6:	2302      	movs	r3, #2
 80013f8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001400:	fa93 f3a3 	rbit	r3, r3
 8001404:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001408:	2302      	movs	r3, #2
 800140a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800140e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001412:	fa93 f3a3 	rbit	r3, r3
 8001416:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800141a:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <HAL_RCC_OscConfig+0x5d0>)
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141e:	2202      	movs	r2, #2
 8001420:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001424:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001428:	fa92 f2a2 	rbit	r2, r2
 800142c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001430:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001434:	fab2 f282 	clz	r2, r2
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	f042 0220 	orr.w	r2, r2, #32
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	f002 021f 	and.w	r2, r2, #31
 8001444:	2101      	movs	r1, #1
 8001446:	fa01 f202 	lsl.w	r2, r1, r2
 800144a:	4013      	ands	r3, r2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0af      	beq.n	80013b0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001450:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <HAL_RCC_OscConfig+0x5d0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001458:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800145c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	21f8      	movs	r1, #248	; 0xf8
 8001466:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800146e:	fa91 f1a1 	rbit	r1, r1
 8001472:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001476:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800147a:	fab1 f181 	clz	r1, r1
 800147e:	b2c9      	uxtb	r1, r1
 8001480:	408b      	lsls	r3, r1
 8001482:	4921      	ldr	r1, [pc, #132]	; (8001508 <HAL_RCC_OscConfig+0x5d0>)
 8001484:	4313      	orrs	r3, r2
 8001486:	600b      	str	r3, [r1, #0]
 8001488:	e06d      	b.n	8001566 <HAL_RCC_OscConfig+0x62e>
 800148a:	2301      	movs	r3, #1
 800148c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001494:	fa93 f3a3 	rbit	r3, r3
 8001498:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800149c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a0:	fab3 f383 	clz	r3, r3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	461a      	mov	r2, r3
 80014b2:	2300      	movs	r3, #0
 80014b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b6:	f7ff f9cb 	bl	8000850 <HAL_GetTick>
 80014ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014be:	e00a      	b.n	80014d6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c0:	f7ff f9c6 	bl	8000850 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d902      	bls.n	80014d6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	f000 bd7e 	b.w	8001fd2 <HAL_RCC_OscConfig+0x109a>
 80014d6:	2302      	movs	r3, #2
 80014d8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80014e0:	fa93 f3a3 	rbit	r3, r3
 80014e4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80014e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ec:	fab3 f383 	clz	r3, r3
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d105      	bne.n	800150c <HAL_RCC_OscConfig+0x5d4>
 8001500:	4b01      	ldr	r3, [pc, #4]	; (8001508 <HAL_RCC_OscConfig+0x5d0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	e016      	b.n	8001534 <HAL_RCC_OscConfig+0x5fc>
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000
 800150c:	2302      	movs	r3, #2
 800150e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001512:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001516:	fa93 f3a3 	rbit	r3, r3
 800151a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800151e:	2302      	movs	r3, #2
 8001520:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001524:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001528:	fa93 f3a3 	rbit	r3, r3
 800152c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001530:	4bbf      	ldr	r3, [pc, #764]	; (8001830 <HAL_RCC_OscConfig+0x8f8>)
 8001532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001534:	2202      	movs	r2, #2
 8001536:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800153a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800153e:	fa92 f2a2 	rbit	r2, r2
 8001542:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001546:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800154a:	fab2 f282 	clz	r2, r2
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	f042 0220 	orr.w	r2, r2, #32
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	f002 021f 	and.w	r2, r2, #31
 800155a:	2101      	movs	r1, #1
 800155c:	fa01 f202 	lsl.w	r2, r1, r2
 8001560:	4013      	ands	r3, r2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1ac      	bne.n	80014c0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001566:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800156a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 8113 	beq.w	80017a2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800157c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001580:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d07c      	beq.n	8001686 <HAL_RCC_OscConfig+0x74e>
 800158c:	2301      	movs	r3, #1
 800158e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001596:	fa93 f3a3 	rbit	r3, r3
 800159a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800159e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a2:	fab3 f383 	clz	r3, r3
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	461a      	mov	r2, r3
 80015aa:	4ba2      	ldr	r3, [pc, #648]	; (8001834 <HAL_RCC_OscConfig+0x8fc>)
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	461a      	mov	r2, r3
 80015b2:	2301      	movs	r3, #1
 80015b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b6:	f7ff f94b 	bl	8000850 <HAL_GetTick>
 80015ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015be:	e00a      	b.n	80015d6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c0:	f7ff f946 	bl	8000850 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d902      	bls.n	80015d6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	f000 bcfe 	b.w	8001fd2 <HAL_RCC_OscConfig+0x109a>
 80015d6:	2302      	movs	r3, #2
 80015d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015e0:	fa93 f2a3 	rbit	r2, r3
 80015e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015e8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015f6:	2202      	movs	r2, #2
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	fa93 f2a3 	rbit	r2, r3
 8001608:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800160c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001616:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800161a:	2202      	movs	r2, #2
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001622:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	fa93 f2a3 	rbit	r2, r3
 800162c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001630:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001634:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001636:	4b7e      	ldr	r3, [pc, #504]	; (8001830 <HAL_RCC_OscConfig+0x8f8>)
 8001638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800163a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800163e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001642:	2102      	movs	r1, #2
 8001644:	6019      	str	r1, [r3, #0]
 8001646:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800164a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	fa93 f1a3 	rbit	r1, r3
 8001654:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001658:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800165c:	6019      	str	r1, [r3, #0]
  return result;
 800165e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001662:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	fab3 f383 	clz	r3, r3
 800166c:	b2db      	uxtb	r3, r3
 800166e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001672:	b2db      	uxtb	r3, r3
 8001674:	f003 031f 	and.w	r3, r3, #31
 8001678:	2101      	movs	r1, #1
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d09d      	beq.n	80015c0 <HAL_RCC_OscConfig+0x688>
 8001684:	e08d      	b.n	80017a2 <HAL_RCC_OscConfig+0x86a>
 8001686:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800168a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001692:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001696:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	fa93 f2a3 	rbit	r2, r3
 80016a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80016a8:	601a      	str	r2, [r3, #0]
  return result;
 80016aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80016b2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b4:	fab3 f383 	clz	r3, r3
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b5d      	ldr	r3, [pc, #372]	; (8001834 <HAL_RCC_OscConfig+0x8fc>)
 80016be:	4413      	add	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	461a      	mov	r2, r3
 80016c4:	2300      	movs	r3, #0
 80016c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c8:	f7ff f8c2 	bl	8000850 <HAL_GetTick>
 80016cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d0:	e00a      	b.n	80016e8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d2:	f7ff f8bd 	bl	8000850 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d902      	bls.n	80016e8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	f000 bc75 	b.w	8001fd2 <HAL_RCC_OscConfig+0x109a>
 80016e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80016f0:	2202      	movs	r2, #2
 80016f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	fa93 f2a3 	rbit	r2, r3
 8001702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001706:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001710:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001714:	2202      	movs	r2, #2
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800171c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	fa93 f2a3 	rbit	r2, r3
 8001726:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800172a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001734:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001738:	2202      	movs	r2, #2
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001740:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	fa93 f2a3 	rbit	r2, r3
 800174a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800174e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001752:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001754:	4b36      	ldr	r3, [pc, #216]	; (8001830 <HAL_RCC_OscConfig+0x8f8>)
 8001756:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001758:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800175c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001760:	2102      	movs	r1, #2
 8001762:	6019      	str	r1, [r3, #0]
 8001764:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001768:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	fa93 f1a3 	rbit	r1, r3
 8001772:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001776:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800177a:	6019      	str	r1, [r3, #0]
  return result;
 800177c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001780:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	fab3 f383 	clz	r3, r3
 800178a:	b2db      	uxtb	r3, r3
 800178c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001790:	b2db      	uxtb	r3, r3
 8001792:	f003 031f 	and.w	r3, r3, #31
 8001796:	2101      	movs	r1, #1
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	4013      	ands	r3, r2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d197      	bne.n	80016d2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 81a5 	beq.w	8001b02 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017be:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <HAL_RCC_OscConfig+0x8f8>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d116      	bne.n	80017f8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_RCC_OscConfig+0x8f8>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	4a18      	ldr	r2, [pc, #96]	; (8001830 <HAL_RCC_OscConfig+0x8f8>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d4:	61d3      	str	r3, [r2, #28]
 80017d6:	4b16      	ldr	r3, [pc, #88]	; (8001830 <HAL_RCC_OscConfig+0x8f8>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80017de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017f0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80017f2:	2301      	movs	r3, #1
 80017f4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <HAL_RCC_OscConfig+0x900>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d121      	bne.n	8001848 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <HAL_RCC_OscConfig+0x900>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <HAL_RCC_OscConfig+0x900>)
 800180a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001810:	f7ff f81e 	bl	8000850 <HAL_GetTick>
 8001814:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001818:	e010      	b.n	800183c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181a:	f7ff f819 	bl	8000850 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	; 0x64
 8001828:	d908      	bls.n	800183c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e3d1      	b.n	8001fd2 <HAL_RCC_OscConfig+0x109a>
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000
 8001834:	10908120 	.word	0x10908120
 8001838:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183c:	4b8d      	ldr	r3, [pc, #564]	; (8001a74 <HAL_RCC_OscConfig+0xb3c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0e8      	beq.n	800181a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001848:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800184c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d106      	bne.n	8001866 <HAL_RCC_OscConfig+0x92e>
 8001858:	4b87      	ldr	r3, [pc, #540]	; (8001a78 <HAL_RCC_OscConfig+0xb40>)
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	4a86      	ldr	r2, [pc, #536]	; (8001a78 <HAL_RCC_OscConfig+0xb40>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6213      	str	r3, [r2, #32]
 8001864:	e035      	b.n	80018d2 <HAL_RCC_OscConfig+0x99a>
 8001866:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800186a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0x958>
 8001876:	4b80      	ldr	r3, [pc, #512]	; (8001a78 <HAL_RCC_OscConfig+0xb40>)
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	4a7f      	ldr	r2, [pc, #508]	; (8001a78 <HAL_RCC_OscConfig+0xb40>)
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	6213      	str	r3, [r2, #32]
 8001882:	4b7d      	ldr	r3, [pc, #500]	; (8001a78 <HAL_RCC_OscConfig+0xb40>)
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	4a7c      	ldr	r2, [pc, #496]	; (8001a78 <HAL_RCC_OscConfig+0xb40>)
 8001888:	f023 0304 	bic.w	r3, r3, #4
 800188c:	6213      	str	r3, [r2, #32]
 800188e:	e020      	b.n	80018d2 <HAL_RCC_OscConfig+0x99a>
 8001890:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001894:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b05      	cmp	r3, #5
 800189e:	d10c      	bne.n	80018ba <HAL_RCC_OscConfig+0x982>
 80018a0:	4b75      	ldr	r3, [pc, #468]	; (8001a78 <HAL_RCC_OscConfig+0xb40>)
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	4a74      	ldr	r2, [pc, #464]	; (8001a78 <HAL_RCC_OscConfig+0xb40>)
 80018a6:	f043 0304 	orr.w	r3, r3, #4
 80018aa:	6213      	str	r3, [r2, #32]
 80018ac:	4b72      	ldr	r3, [pc, #456]	; (8001a78 <HAL_RCC_OscConfig+0xb40>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	4a71      	ldr	r2, [pc, #452]	; (8001a78 <HAL_RCC_OscConfig+0xb40>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6213      	str	r3, [r2, #32]
 80018b8:	e00b      	b.n	80018d2 <HAL_RCC_OscConfig+0x99a>
 80018ba:	4b6f      	ldr	r3, [pc, #444]	; (8001a78 <HAL_RCC_OscConfig+0xb40>)
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	4a6e      	ldr	r2, [pc, #440]	; (8001a78 <HAL_RCC_OscConfig+0xb40>)
 80018c0:	f023 0301 	bic.w	r3, r3, #1
 80018c4:	6213      	str	r3, [r2, #32]
 80018c6:	4b6c      	ldr	r3, [pc, #432]	; (8001a78 <HAL_RCC_OscConfig+0xb40>)
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	4a6b      	ldr	r2, [pc, #428]	; (8001a78 <HAL_RCC_OscConfig+0xb40>)
 80018cc:	f023 0304 	bic.w	r3, r3, #4
 80018d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 8081 	beq.w	80019e6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e4:	f7fe ffb4 	bl	8000850 <HAL_GetTick>
 80018e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ec:	e00b      	b.n	8001906 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ee:	f7fe ffaf 	bl	8000850 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e365      	b.n	8001fd2 <HAL_RCC_OscConfig+0x109a>
 8001906:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800190a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800190e:	2202      	movs	r2, #2
 8001910:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001916:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	fa93 f2a3 	rbit	r2, r3
 8001920:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001924:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800192e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001932:	2202      	movs	r2, #2
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800193a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	fa93 f2a3 	rbit	r2, r3
 8001944:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001948:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800194c:	601a      	str	r2, [r3, #0]
  return result;
 800194e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001952:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001956:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001958:	fab3 f383 	clz	r3, r3
 800195c:	b2db      	uxtb	r3, r3
 800195e:	095b      	lsrs	r3, r3, #5
 8001960:	b2db      	uxtb	r3, r3
 8001962:	f043 0302 	orr.w	r3, r3, #2
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d102      	bne.n	8001972 <HAL_RCC_OscConfig+0xa3a>
 800196c:	4b42      	ldr	r3, [pc, #264]	; (8001a78 <HAL_RCC_OscConfig+0xb40>)
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	e013      	b.n	800199a <HAL_RCC_OscConfig+0xa62>
 8001972:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001976:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800197a:	2202      	movs	r2, #2
 800197c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001982:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	fa93 f2a3 	rbit	r2, r3
 800198c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001990:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <HAL_RCC_OscConfig+0xb40>)
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800199e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80019a2:	2102      	movs	r1, #2
 80019a4:	6011      	str	r1, [r2, #0]
 80019a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019aa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	fa92 f1a2 	rbit	r1, r2
 80019b4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019b8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80019bc:	6011      	str	r1, [r2, #0]
  return result;
 80019be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019c2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	fab2 f282 	clz	r2, r2
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	f002 021f 	and.w	r2, r2, #31
 80019d8:	2101      	movs	r1, #1
 80019da:	fa01 f202 	lsl.w	r2, r1, r2
 80019de:	4013      	ands	r3, r2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d084      	beq.n	80018ee <HAL_RCC_OscConfig+0x9b6>
 80019e4:	e083      	b.n	8001aee <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e6:	f7fe ff33 	bl	8000850 <HAL_GetTick>
 80019ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ee:	e00b      	b.n	8001a08 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f0:	f7fe ff2e 	bl	8000850 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e2e4      	b.n	8001fd2 <HAL_RCC_OscConfig+0x109a>
 8001a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a10:	2202      	movs	r2, #2
 8001a12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a18:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	fa93 f2a3 	rbit	r2, r3
 8001a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a26:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a30:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a34:	2202      	movs	r2, #2
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	fa93 f2a3 	rbit	r2, r3
 8001a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a4e:	601a      	str	r2, [r3, #0]
  return result;
 8001a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a54:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a58:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a5a:	fab3 f383 	clz	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	095b      	lsrs	r3, r3, #5
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d106      	bne.n	8001a7c <HAL_RCC_OscConfig+0xb44>
 8001a6e:	4b02      	ldr	r3, [pc, #8]	; (8001a78 <HAL_RCC_OscConfig+0xb40>)
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	e017      	b.n	8001aa4 <HAL_RCC_OscConfig+0xb6c>
 8001a74:	40007000 	.word	0x40007000
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a80:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a84:	2202      	movs	r2, #2
 8001a86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a8c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	fa93 f2a3 	rbit	r2, r3
 8001a96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a9a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	4bb3      	ldr	r3, [pc, #716]	; (8001d70 <HAL_RCC_OscConfig+0xe38>)
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001aa8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001aac:	2102      	movs	r1, #2
 8001aae:	6011      	str	r1, [r2, #0]
 8001ab0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ab4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	fa92 f1a2 	rbit	r1, r2
 8001abe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ac2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001ac6:	6011      	str	r1, [r2, #0]
  return result;
 8001ac8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001acc:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	fab2 f282 	clz	r2, r2
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	f002 021f 	and.w	r2, r2, #31
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d180      	bne.n	80019f0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001aee:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d105      	bne.n	8001b02 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af6:	4b9e      	ldr	r3, [pc, #632]	; (8001d70 <HAL_RCC_OscConfig+0xe38>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	4a9d      	ldr	r2, [pc, #628]	; (8001d70 <HAL_RCC_OscConfig+0xe38>)
 8001afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b00:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 825e 	beq.w	8001fd0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b14:	4b96      	ldr	r3, [pc, #600]	; (8001d70 <HAL_RCC_OscConfig+0xe38>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	f000 821f 	beq.w	8001f60 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	f040 8170 	bne.w	8001e14 <HAL_RCC_OscConfig+0xedc>
 8001b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b38:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b46:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	fa93 f2a3 	rbit	r2, r3
 8001b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b54:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b58:	601a      	str	r2, [r3, #0]
  return result;
 8001b5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b62:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b64:	fab3 f383 	clz	r3, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b6e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	461a      	mov	r2, r3
 8001b76:	2300      	movs	r3, #0
 8001b78:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7a:	f7fe fe69 	bl	8000850 <HAL_GetTick>
 8001b7e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b82:	e009      	b.n	8001b98 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b84:	f7fe fe64 	bl	8000850 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e21c      	b.n	8001fd2 <HAL_RCC_OscConfig+0x109a>
 8001b98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ba0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001baa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	fa93 f2a3 	rbit	r2, r3
 8001bb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001bbc:	601a      	str	r2, [r3, #0]
  return result;
 8001bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001bc6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d102      	bne.n	8001be2 <HAL_RCC_OscConfig+0xcaa>
 8001bdc:	4b64      	ldr	r3, [pc, #400]	; (8001d70 <HAL_RCC_OscConfig+0xe38>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	e027      	b.n	8001c32 <HAL_RCC_OscConfig+0xcfa>
 8001be2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001bea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	fa93 f2a3 	rbit	r2, r3
 8001bfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c02:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c0c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001c10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c1a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	fa93 f2a3 	rbit	r2, r3
 8001c24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c28:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	4b50      	ldr	r3, [pc, #320]	; (8001d70 <HAL_RCC_OscConfig+0xe38>)
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c36:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c3a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c3e:	6011      	str	r1, [r2, #0]
 8001c40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c44:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	fa92 f1a2 	rbit	r1, r2
 8001c4e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c52:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001c56:	6011      	str	r1, [r2, #0]
  return result;
 8001c58:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c5c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	fab2 f282 	clz	r2, r2
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	f042 0220 	orr.w	r2, r2, #32
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	f002 021f 	and.w	r2, r2, #31
 8001c72:	2101      	movs	r1, #1
 8001c74:	fa01 f202 	lsl.w	r2, r1, r2
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d182      	bne.n	8001b84 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c7e:	4b3c      	ldr	r3, [pc, #240]	; (8001d70 <HAL_RCC_OscConfig+0xe38>)
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c82:	f023 020f 	bic.w	r2, r3, #15
 8001c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	4937      	ldr	r1, [pc, #220]	; (8001d70 <HAL_RCC_OscConfig+0xe38>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001c98:	4b35      	ldr	r3, [pc, #212]	; (8001d70 <HAL_RCC_OscConfig+0xe38>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001ca0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6a19      	ldr	r1, [r3, #32]
 8001cac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	492d      	ldr	r1, [pc, #180]	; (8001d70 <HAL_RCC_OscConfig+0xe38>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
 8001cc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001cc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	fa93 f2a3 	rbit	r2, r3
 8001cdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ce4:	601a      	str	r2, [r3, #0]
  return result;
 8001ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cea:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001cee:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf0:	fab3 f383 	clz	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cfa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	461a      	mov	r2, r3
 8001d02:	2301      	movs	r3, #1
 8001d04:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7fe fda3 	bl	8000850 <HAL_GetTick>
 8001d0a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d0e:	e009      	b.n	8001d24 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d10:	f7fe fd9e 	bl	8000850 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e156      	b.n	8001fd2 <HAL_RCC_OscConfig+0x109a>
 8001d24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d28:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d36:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	fa93 f2a3 	rbit	r2, r3
 8001d40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d44:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d48:	601a      	str	r2, [r3, #0]
  return result;
 8001d4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d52:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d54:	fab3 f383 	clz	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d105      	bne.n	8001d74 <HAL_RCC_OscConfig+0xe3c>
 8001d68:	4b01      	ldr	r3, [pc, #4]	; (8001d70 <HAL_RCC_OscConfig+0xe38>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	e02a      	b.n	8001dc4 <HAL_RCC_OscConfig+0xe8c>
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000
 8001d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d78:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d86:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	fa93 f2a3 	rbit	r2, r3
 8001d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d94:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001da2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dac:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	fa93 f2a3 	rbit	r2, r3
 8001db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dba:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	4b86      	ldr	r3, [pc, #536]	; (8001fdc <HAL_RCC_OscConfig+0x10a4>)
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dc8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001dcc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dd0:	6011      	str	r1, [r2, #0]
 8001dd2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dd6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	fa92 f1a2 	rbit	r1, r2
 8001de0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001de4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001de8:	6011      	str	r1, [r2, #0]
  return result;
 8001dea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dee:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	fab2 f282 	clz	r2, r2
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	f042 0220 	orr.w	r2, r2, #32
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	f002 021f 	and.w	r2, r2, #31
 8001e04:	2101      	movs	r1, #1
 8001e06:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f43f af7f 	beq.w	8001d10 <HAL_RCC_OscConfig+0xdd8>
 8001e12:	e0dd      	b.n	8001fd0 <HAL_RCC_OscConfig+0x1098>
 8001e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e18:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e26:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	fa93 f2a3 	rbit	r2, r3
 8001e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e34:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e38:	601a      	str	r2, [r3, #0]
  return result;
 8001e3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e42:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e44:	fab3 f383 	clz	r3, r3
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	461a      	mov	r2, r3
 8001e56:	2300      	movs	r3, #0
 8001e58:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5a:	f7fe fcf9 	bl	8000850 <HAL_GetTick>
 8001e5e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e62:	e009      	b.n	8001e78 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e64:	f7fe fcf4 	bl	8000850 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e0ac      	b.n	8001fd2 <HAL_RCC_OscConfig+0x109a>
 8001e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e8a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	fa93 f2a3 	rbit	r2, r3
 8001e94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e98:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e9c:	601a      	str	r2, [r3, #0]
  return result;
 8001e9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ea6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea8:	fab3 f383 	clz	r3, r3
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	095b      	lsrs	r3, r3, #5
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d102      	bne.n	8001ec2 <HAL_RCC_OscConfig+0xf8a>
 8001ebc:	4b47      	ldr	r3, [pc, #284]	; (8001fdc <HAL_RCC_OscConfig+0x10a4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	e027      	b.n	8001f12 <HAL_RCC_OscConfig+0xfda>
 8001ec2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001eca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ece:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	fa93 f2a3 	rbit	r2, r3
 8001ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eec:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001ef0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001efa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	fa93 f2a3 	rbit	r2, r3
 8001f04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f08:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <HAL_RCC_OscConfig+0x10a4>)
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f16:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f1a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f1e:	6011      	str	r1, [r2, #0]
 8001f20:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f24:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	fa92 f1a2 	rbit	r1, r2
 8001f2e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f32:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001f36:	6011      	str	r1, [r2, #0]
  return result;
 8001f38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f3c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	fab2 f282 	clz	r2, r2
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	f042 0220 	orr.w	r2, r2, #32
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	f002 021f 	and.w	r2, r2, #31
 8001f52:	2101      	movs	r1, #1
 8001f54:	fa01 f202 	lsl.w	r2, r1, r2
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d182      	bne.n	8001e64 <HAL_RCC_OscConfig+0xf2c>
 8001f5e:	e037      	b.n	8001fd0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e02e      	b.n	8001fd2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f74:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <HAL_RCC_OscConfig+0x10a4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001f7c:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <HAL_RCC_OscConfig+0x10a4>)
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f88:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d117      	bne.n	8001fcc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001fa0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d10b      	bne.n	8001fcc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001fb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fb8:	f003 020f 	and.w	r2, r3, #15
 8001fbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40021000 	.word	0x40021000

08001fe0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b09e      	sub	sp, #120	; 0x78
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e162      	b.n	80022be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff8:	4b90      	ldr	r3, [pc, #576]	; (800223c <HAL_RCC_ClockConfig+0x25c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d910      	bls.n	8002028 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002006:	4b8d      	ldr	r3, [pc, #564]	; (800223c <HAL_RCC_ClockConfig+0x25c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 0207 	bic.w	r2, r3, #7
 800200e:	498b      	ldr	r1, [pc, #556]	; (800223c <HAL_RCC_ClockConfig+0x25c>)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002016:	4b89      	ldr	r3, [pc, #548]	; (800223c <HAL_RCC_ClockConfig+0x25c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d001      	beq.n	8002028 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e14a      	b.n	80022be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002034:	4b82      	ldr	r3, [pc, #520]	; (8002240 <HAL_RCC_ClockConfig+0x260>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	497f      	ldr	r1, [pc, #508]	; (8002240 <HAL_RCC_ClockConfig+0x260>)
 8002042:	4313      	orrs	r3, r2
 8002044:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 80dc 	beq.w	800220c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d13c      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xf6>
 800205c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002060:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800206a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206c:	fab3 f383 	clz	r3, r3
 8002070:	b2db      	uxtb	r3, r3
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	b2db      	uxtb	r3, r3
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b01      	cmp	r3, #1
 800207e:	d102      	bne.n	8002086 <HAL_RCC_ClockConfig+0xa6>
 8002080:	4b6f      	ldr	r3, [pc, #444]	; (8002240 <HAL_RCC_ClockConfig+0x260>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	e00f      	b.n	80020a6 <HAL_RCC_ClockConfig+0xc6>
 8002086:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800208a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	667b      	str	r3, [r7, #100]	; 0x64
 8002094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002098:	663b      	str	r3, [r7, #96]	; 0x60
 800209a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020a2:	4b67      	ldr	r3, [pc, #412]	; (8002240 <HAL_RCC_ClockConfig+0x260>)
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80020ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020ae:	fa92 f2a2 	rbit	r2, r2
 80020b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80020b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020b6:	fab2 f282 	clz	r2, r2
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	f042 0220 	orr.w	r2, r2, #32
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	f002 021f 	and.w	r2, r2, #31
 80020c6:	2101      	movs	r1, #1
 80020c8:	fa01 f202 	lsl.w	r2, r1, r2
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d17b      	bne.n	80021ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0f3      	b.n	80022be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d13c      	bne.n	8002158 <HAL_RCC_ClockConfig+0x178>
 80020de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020e6:	fa93 f3a3 	rbit	r3, r3
 80020ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	095b      	lsrs	r3, r3, #5
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d102      	bne.n	8002108 <HAL_RCC_ClockConfig+0x128>
 8002102:	4b4f      	ldr	r3, [pc, #316]	; (8002240 <HAL_RCC_ClockConfig+0x260>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	e00f      	b.n	8002128 <HAL_RCC_ClockConfig+0x148>
 8002108:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800210c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	647b      	str	r3, [r7, #68]	; 0x44
 8002116:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800211a:	643b      	str	r3, [r7, #64]	; 0x40
 800211c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002124:	4b46      	ldr	r3, [pc, #280]	; (8002240 <HAL_RCC_ClockConfig+0x260>)
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800212c:	63ba      	str	r2, [r7, #56]	; 0x38
 800212e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002130:	fa92 f2a2 	rbit	r2, r2
 8002134:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002138:	fab2 f282 	clz	r2, r2
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	f042 0220 	orr.w	r2, r2, #32
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	f002 021f 	and.w	r2, r2, #31
 8002148:	2101      	movs	r1, #1
 800214a:	fa01 f202 	lsl.w	r2, r1, r2
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d13a      	bne.n	80021ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0b2      	b.n	80022be <HAL_RCC_ClockConfig+0x2de>
 8002158:	2302      	movs	r3, #2
 800215a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b01      	cmp	r3, #1
 8002178:	d102      	bne.n	8002180 <HAL_RCC_ClockConfig+0x1a0>
 800217a:	4b31      	ldr	r3, [pc, #196]	; (8002240 <HAL_RCC_ClockConfig+0x260>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	e00d      	b.n	800219c <HAL_RCC_ClockConfig+0x1bc>
 8002180:	2302      	movs	r3, #2
 8002182:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
 800218c:	2302      	movs	r3, #2
 800218e:	623b      	str	r3, [r7, #32]
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	61fb      	str	r3, [r7, #28]
 8002198:	4b29      	ldr	r3, [pc, #164]	; (8002240 <HAL_RCC_ClockConfig+0x260>)
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	2202      	movs	r2, #2
 800219e:	61ba      	str	r2, [r7, #24]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	fa92 f2a2 	rbit	r2, r2
 80021a6:	617a      	str	r2, [r7, #20]
  return result;
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	fab2 f282 	clz	r2, r2
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	f042 0220 	orr.w	r2, r2, #32
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	f002 021f 	and.w	r2, r2, #31
 80021ba:	2101      	movs	r1, #1
 80021bc:	fa01 f202 	lsl.w	r2, r1, r2
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e079      	b.n	80022be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ca:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_RCC_ClockConfig+0x260>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	491a      	ldr	r1, [pc, #104]	; (8002240 <HAL_RCC_ClockConfig+0x260>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021dc:	f7fe fb38 	bl	8000850 <HAL_GetTick>
 80021e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7fe fb34 	bl	8000850 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e061      	b.n	80022be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	4b11      	ldr	r3, [pc, #68]	; (8002240 <HAL_RCC_ClockConfig+0x260>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 020c 	and.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	429a      	cmp	r2, r3
 800220a:	d1eb      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <HAL_RCC_ClockConfig+0x25c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d214      	bcs.n	8002244 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b08      	ldr	r3, [pc, #32]	; (800223c <HAL_RCC_ClockConfig+0x25c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 0207 	bic.w	r2, r3, #7
 8002222:	4906      	ldr	r1, [pc, #24]	; (800223c <HAL_RCC_ClockConfig+0x25c>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <HAL_RCC_ClockConfig+0x25c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d005      	beq.n	8002244 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e040      	b.n	80022be <HAL_RCC_ClockConfig+0x2de>
 800223c:	40022000 	.word	0x40022000
 8002240:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_RCC_ClockConfig+0x2e8>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	491a      	ldr	r1, [pc, #104]	; (80022c8 <HAL_RCC_ClockConfig+0x2e8>)
 800225e:	4313      	orrs	r3, r2
 8002260:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d009      	beq.n	8002282 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800226e:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <HAL_RCC_ClockConfig+0x2e8>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4912      	ldr	r1, [pc, #72]	; (80022c8 <HAL_RCC_ClockConfig+0x2e8>)
 800227e:	4313      	orrs	r3, r2
 8002280:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002282:	f000 f829 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8002286:	4601      	mov	r1, r0
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <HAL_RCC_ClockConfig+0x2e8>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002290:	22f0      	movs	r2, #240	; 0xf0
 8002292:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	fa92 f2a2 	rbit	r2, r2
 800229a:	60fa      	str	r2, [r7, #12]
  return result;
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	fab2 f282 	clz	r2, r2
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	40d3      	lsrs	r3, r2
 80022a6:	4a09      	ldr	r2, [pc, #36]	; (80022cc <HAL_RCC_ClockConfig+0x2ec>)
 80022a8:	5cd3      	ldrb	r3, [r2, r3]
 80022aa:	fa21 f303 	lsr.w	r3, r1, r3
 80022ae:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <HAL_RCC_ClockConfig+0x2f0>)
 80022b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80022b2:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_RCC_ClockConfig+0x2f4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fa86 	bl	80007c8 <HAL_InitTick>
  
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3778      	adds	r7, #120	; 0x78
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000
 80022cc:	080037f4 	.word	0x080037f4
 80022d0:	20000000 	.word	0x20000000
 80022d4:	20000004 	.word	0x20000004

080022d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	b08b      	sub	sp, #44	; 0x2c
 80022dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	2300      	movs	r3, #0
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80022f2:	4b2a      	ldr	r3, [pc, #168]	; (800239c <HAL_RCC_GetSysClockFreq+0xc4>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d002      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x30>
 8002302:	2b08      	cmp	r3, #8
 8002304:	d003      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0x36>
 8002306:	e03f      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002308:	4b25      	ldr	r3, [pc, #148]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800230a:	623b      	str	r3, [r7, #32]
      break;
 800230c:	e03f      	b.n	800238e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002314:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002318:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	fa92 f2a2 	rbit	r2, r2
 8002320:	607a      	str	r2, [r7, #4]
  return result;
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	fab2 f282 	clz	r2, r2
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	40d3      	lsrs	r3, r2
 800232c:	4a1d      	ldr	r2, [pc, #116]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800232e:	5cd3      	ldrb	r3, [r2, r3]
 8002330:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002332:	4b1a      	ldr	r3, [pc, #104]	; (800239c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	220f      	movs	r2, #15
 800233c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	fa92 f2a2 	rbit	r2, r2
 8002344:	60fa      	str	r2, [r7, #12]
  return result;
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	fab2 f282 	clz	r2, r2
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	40d3      	lsrs	r3, r2
 8002350:	4a15      	ldr	r2, [pc, #84]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002352:	5cd3      	ldrb	r3, [r2, r3]
 8002354:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002360:	4a0f      	ldr	r2, [pc, #60]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	fbb2 f2f3 	udiv	r2, r2, r3
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	fb02 f303 	mul.w	r3, r2, r3
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
 8002370:	e007      	b.n	8002382 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002372:	4a0b      	ldr	r2, [pc, #44]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	fbb2 f2f3 	udiv	r2, r2, r3
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	fb02 f303 	mul.w	r3, r2, r3
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	623b      	str	r3, [r7, #32]
      break;
 8002386:	e002      	b.n	800238e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800238a:	623b      	str	r3, [r7, #32]
      break;
 800238c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800238e:	6a3b      	ldr	r3, [r7, #32]
}
 8002390:	4618      	mov	r0, r3
 8002392:	372c      	adds	r7, #44	; 0x2c
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	40021000 	.word	0x40021000
 80023a0:	007a1200 	.word	0x007a1200
 80023a4:	0800380c 	.word	0x0800380c
 80023a8:	0800381c 	.word	0x0800381c

080023ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000000 	.word	0x20000000

080023c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80023ca:	f7ff ffef 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023ce:	4601      	mov	r1, r0
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	fa92 f2a2 	rbit	r2, r2
 80023e4:	603a      	str	r2, [r7, #0]
  return result;
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	fab2 f282 	clz	r2, r2
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	40d3      	lsrs	r3, r2
 80023f0:	4a04      	ldr	r2, [pc, #16]	; (8002404 <HAL_RCC_GetPCLK1Freq+0x40>)
 80023f2:	5cd3      	ldrb	r3, [r2, r3]
 80023f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40021000 	.word	0x40021000
 8002404:	08003804 	.word	0x08003804

08002408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800240e:	f7ff ffcd 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 8002412:	4601      	mov	r1, r0
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800241c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002420:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	fa92 f2a2 	rbit	r2, r2
 8002428:	603a      	str	r2, [r7, #0]
  return result;
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	fab2 f282 	clz	r2, r2
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	40d3      	lsrs	r3, r2
 8002434:	4a04      	ldr	r2, [pc, #16]	; (8002448 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002436:	5cd3      	ldrb	r3, [r2, r3]
 8002438:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40021000 	.word	0x40021000
 8002448:	08003804 	.word	0x08003804

0800244c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b092      	sub	sp, #72	; 0x48
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800245c:	2300      	movs	r3, #0
 800245e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 80d4 	beq.w	8002618 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002470:	4b4e      	ldr	r3, [pc, #312]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10e      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247c:	4b4b      	ldr	r3, [pc, #300]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	4a4a      	ldr	r2, [pc, #296]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002486:	61d3      	str	r3, [r2, #28]
 8002488:	4b48      	ldr	r3, [pc, #288]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002494:	2301      	movs	r3, #1
 8002496:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249a:	4b45      	ldr	r3, [pc, #276]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d118      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a6:	4b42      	ldr	r3, [pc, #264]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a41      	ldr	r2, [pc, #260]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b2:	f7fe f9cd 	bl	8000850 <HAL_GetTick>
 80024b6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b8:	e008      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ba:	f7fe f9c9 	bl	8000850 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b64      	cmp	r3, #100	; 0x64
 80024c6:	d901      	bls.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e1d6      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024cc:	4b38      	ldr	r3, [pc, #224]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0f0      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024d8:	4b34      	ldr	r3, [pc, #208]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8084 	beq.w	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d07c      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024f8:	4b2c      	ldr	r3, [pc, #176]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002500:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002502:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002506:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	461a      	mov	r2, r3
 8002522:	2301      	movs	r3, #1
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800252a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	461a      	mov	r2, r3
 8002546:	2300      	movs	r3, #0
 8002548:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800254a:	4a18      	ldr	r2, [pc, #96]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800254c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800254e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d04b      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7fe f979 	bl	8000850 <HAL_GetTick>
 800255e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002560:	e00a      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002562:	f7fe f975 	bl	8000850 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002570:	4293      	cmp	r3, r2
 8002572:	d901      	bls.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e180      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002578:	2302      	movs	r3, #2
 800257a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
 8002584:	2302      	movs	r3, #2
 8002586:	623b      	str	r3, [r7, #32]
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	61fb      	str	r3, [r7, #28]
  return result;
 8002590:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002592:	fab3 f383 	clz	r3, r3
 8002596:	b2db      	uxtb	r3, r3
 8002598:	095b      	lsrs	r3, r3, #5
 800259a:	b2db      	uxtb	r3, r3
 800259c:	f043 0302 	orr.w	r3, r3, #2
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d108      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80025a6:	4b01      	ldr	r3, [pc, #4]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	e00d      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40007000 	.word	0x40007000
 80025b4:	10908100 	.word	0x10908100
 80025b8:	2302      	movs	r3, #2
 80025ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	4b9a      	ldr	r3, [pc, #616]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	2202      	movs	r2, #2
 80025ca:	613a      	str	r2, [r7, #16]
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	fa92 f2a2 	rbit	r2, r2
 80025d2:	60fa      	str	r2, [r7, #12]
  return result;
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	fab2 f282 	clz	r2, r2
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	f002 021f 	and.w	r2, r2, #31
 80025e6:	2101      	movs	r1, #1
 80025e8:	fa01 f202 	lsl.w	r2, r1, r2
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0b7      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80025f2:	4b8f      	ldr	r3, [pc, #572]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	498c      	ldr	r1, [pc, #560]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002600:	4313      	orrs	r3, r2
 8002602:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002604:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002608:	2b01      	cmp	r3, #1
 800260a:	d105      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800260c:	4b88      	ldr	r3, [pc, #544]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	4a87      	ldr	r2, [pc, #540]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002616:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002624:	4b82      	ldr	r3, [pc, #520]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	f023 0203 	bic.w	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	497f      	ldr	r1, [pc, #508]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002632:	4313      	orrs	r3, r2
 8002634:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d008      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002642:	4b7b      	ldr	r3, [pc, #492]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	4978      	ldr	r1, [pc, #480]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002650:	4313      	orrs	r3, r2
 8002652:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002660:	4b73      	ldr	r3, [pc, #460]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	4970      	ldr	r1, [pc, #448]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800266e:	4313      	orrs	r3, r2
 8002670:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	2b00      	cmp	r3, #0
 800267c:	d008      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800267e:	4b6c      	ldr	r3, [pc, #432]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	f023 0210 	bic.w	r2, r3, #16
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	4969      	ldr	r1, [pc, #420]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800268c:	4313      	orrs	r3, r2
 800268e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800269c:	4b64      	ldr	r3, [pc, #400]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a8:	4961      	ldr	r1, [pc, #388]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d008      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026ba:	4b5d      	ldr	r3, [pc, #372]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	f023 0220 	bic.w	r2, r3, #32
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	495a      	ldr	r1, [pc, #360]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026d8:	4b55      	ldr	r3, [pc, #340]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	4952      	ldr	r1, [pc, #328]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d008      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026f6:	4b4e      	ldr	r3, [pc, #312]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	494b      	ldr	r1, [pc, #300]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002704:	4313      	orrs	r3, r2
 8002706:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002714:	4b46      	ldr	r3, [pc, #280]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	4943      	ldr	r1, [pc, #268]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002722:	4313      	orrs	r3, r2
 8002724:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800272e:	2b00      	cmp	r3, #0
 8002730:	d008      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002732:	4b3f      	ldr	r3, [pc, #252]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	493c      	ldr	r1, [pc, #240]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002750:	4b37      	ldr	r3, [pc, #220]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	4934      	ldr	r1, [pc, #208]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800275e:	4313      	orrs	r3, r2
 8002760:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d008      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800276e:	4b30      	ldr	r3, [pc, #192]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002772:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277a:	492d      	ldr	r1, [pc, #180]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800277c:	4313      	orrs	r3, r2
 800277e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800278c:	4b28      	ldr	r3, [pc, #160]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002798:	4925      	ldr	r1, [pc, #148]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800279a:	4313      	orrs	r3, r2
 800279c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d008      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80027aa:	4b21      	ldr	r3, [pc, #132]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	491e      	ldr	r1, [pc, #120]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80027c8:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d4:	4916      	ldr	r1, [pc, #88]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f2:	490f      	ldr	r1, [pc, #60]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002804:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	4907      	ldr	r1, [pc, #28]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002812:	4313      	orrs	r3, r2
 8002814:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00c      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002822:	4b03      	ldr	r3, [pc, #12]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	e002      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000
 8002834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002836:	4913      	ldr	r1, [pc, #76]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002838:	4313      	orrs	r3, r2
 800283a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002848:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002854:	490b      	ldr	r1, [pc, #44]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002856:	4313      	orrs	r3, r2
 8002858:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d008      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002872:	4904      	ldr	r1, [pc, #16]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002874:	4313      	orrs	r3, r2
 8002876:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3748      	adds	r7, #72	; 0x48
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000

08002888 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e040      	b.n	800291c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fd fe86 	bl	80005bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2224      	movs	r2, #36	; 0x24
 80028b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0201 	bic.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fb2a 	bl	8002f20 <UART_SetConfig>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e022      	b.n	800291c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fcf4 	bl	80032cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002902:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 fd7b 	bl	8003410 <UART_CheckIdleState>
 800291a:	4603      	mov	r3, r0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b0ba      	sub	sp, #232	; 0xe8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800294a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800294e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002952:	4013      	ands	r3, r2
 8002954:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002958:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d115      	bne.n	800298c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00f      	beq.n	800298c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800296c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002970:	f003 0320 	and.w	r3, r3, #32
 8002974:	2b00      	cmp	r3, #0
 8002976:	d009      	beq.n	800298c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 82a3 	beq.w	8002ec8 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	4798      	blx	r3
      }
      return;
 800298a:	e29d      	b.n	8002ec8 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800298c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8117 	beq.w	8002bc4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80029a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80029a6:	4b85      	ldr	r3, [pc, #532]	; (8002bbc <HAL_UART_IRQHandler+0x298>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 810a 	beq.w	8002bc4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d011      	beq.n	80029e0 <HAL_UART_IRQHandler+0xbc>
 80029bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00b      	beq.n	80029e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2201      	movs	r2, #1
 80029ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029d6:	f043 0201 	orr.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d011      	beq.n	8002a10 <HAL_UART_IRQHandler+0xec>
 80029ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00b      	beq.n	8002a10 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2202      	movs	r2, #2
 80029fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a06:	f043 0204 	orr.w	r2, r3, #4
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d011      	beq.n	8002a40 <HAL_UART_IRQHandler+0x11c>
 8002a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00b      	beq.n	8002a40 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a36:	f043 0202 	orr.w	r2, r3, #2
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d017      	beq.n	8002a7c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d105      	bne.n	8002a64 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a5c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00b      	beq.n	8002a7c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2208      	movs	r2, #8
 8002a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a72:	f043 0208 	orr.w	r2, r3, #8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d012      	beq.n	8002aae <HAL_UART_IRQHandler+0x18a>
 8002a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00c      	beq.n	8002aae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aa4:	f043 0220 	orr.w	r2, r3, #32
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 8209 	beq.w	8002ecc <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00d      	beq.n	8002ae2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aca:	f003 0320 	and.w	r3, r3, #32
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d007      	beq.n	8002ae2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ae8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af6:	2b40      	cmp	r3, #64	; 0x40
 8002af8:	d005      	beq.n	8002b06 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002afa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002afe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d04f      	beq.n	8002ba6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 fd8f 	bl	800362a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b16:	2b40      	cmp	r3, #64	; 0x40
 8002b18:	d141      	bne.n	8002b9e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3308      	adds	r3, #8
 8002b20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b28:	e853 3f00 	ldrex	r3, [r3]
 8002b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3308      	adds	r3, #8
 8002b42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b56:	e841 2300 	strex	r3, r2, [r1]
 8002b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1d9      	bne.n	8002b1a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d013      	beq.n	8002b96 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <HAL_UART_IRQHandler+0x29c>)
 8002b74:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fd ffe2 	bl	8000b44 <HAL_DMA_Abort_IT>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d017      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002b90:	4610      	mov	r0, r2
 8002b92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b94:	e00f      	b.n	8002bb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f9ac 	bl	8002ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b9c:	e00b      	b.n	8002bb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f9a8 	bl	8002ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba4:	e007      	b.n	8002bb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f9a4 	bl	8002ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002bb4:	e18a      	b.n	8002ecc <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb6:	bf00      	nop
    return;
 8002bb8:	e188      	b.n	8002ecc <HAL_UART_IRQHandler+0x5a8>
 8002bba:	bf00      	nop
 8002bbc:	04000120 	.word	0x04000120
 8002bc0:	080036f1 	.word	0x080036f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	f040 8143 	bne.w	8002e54 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd2:	f003 0310 	and.w	r3, r3, #16
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 813c 	beq.w	8002e54 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 8135 	beq.w	8002e54 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2210      	movs	r2, #16
 8002bf0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfc:	2b40      	cmp	r3, #64	; 0x40
 8002bfe:	f040 80b1 	bne.w	8002d64 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c0e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 815c 	beq.w	8002ed0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002c1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c22:	429a      	cmp	r2, r3
 8002c24:	f080 8154 	bcs.w	8002ed0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	2b20      	cmp	r3, #32
 8002c3a:	f000 8085 	beq.w	8002d48 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c4a:	e853 3f00 	ldrex	r3, [r3]
 8002c4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c6c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c70:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c74:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c78:	e841 2300 	strex	r3, r2, [r1]
 8002c7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1da      	bne.n	8002c3e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	3308      	adds	r3, #8
 8002c8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c92:	e853 3f00 	ldrex	r3, [r3]
 8002c96:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c9a:	f023 0301 	bic.w	r3, r3, #1
 8002c9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cb0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cb8:	e841 2300 	strex	r3, r2, [r1]
 8002cbc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002cbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1e1      	bne.n	8002c88 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3308      	adds	r3, #8
 8002cca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ccc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cce:	e853 3f00 	ldrex	r3, [r3]
 8002cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3308      	adds	r3, #8
 8002ce4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ce8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cf0:	e841 2300 	strex	r3, r2, [r1]
 8002cf4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002cf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1e3      	bne.n	8002cc4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d10:	e853 3f00 	ldrex	r3, [r3]
 8002d14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d18:	f023 0310 	bic.w	r3, r3, #16
 8002d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d2c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d32:	e841 2300 	strex	r3, r2, [r1]
 8002d36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1e4      	bne.n	8002d08 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fd fec5 	bl	8000ad2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f8d3 	bl	8002f08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d62:	e0b5      	b.n	8002ed0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80a7 	beq.w	8002ed4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8002d86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 80a2 	beq.w	8002ed4 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d98:	e853 3f00 	ldrex	r3, [r3]
 8002d9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002da4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002db2:	647b      	str	r3, [r7, #68]	; 0x44
 8002db4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dba:	e841 2300 	strex	r3, r2, [r1]
 8002dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1e4      	bne.n	8002d90 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3308      	adds	r3, #8
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	e853 3f00 	ldrex	r3, [r3]
 8002dd4:	623b      	str	r3, [r7, #32]
   return(result);
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	f023 0301 	bic.w	r3, r3, #1
 8002ddc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	3308      	adds	r3, #8
 8002de6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002dea:	633a      	str	r2, [r7, #48]	; 0x30
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df2:	e841 2300 	strex	r3, r2, [r1]
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1e3      	bne.n	8002dc6 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2220      	movs	r2, #32
 8002e02:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	e853 3f00 	ldrex	r3, [r3]
 8002e1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f023 0310 	bic.w	r3, r3, #16
 8002e24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e32:	61fb      	str	r3, [r7, #28]
 8002e34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e36:	69b9      	ldr	r1, [r7, #24]
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	e841 2300 	strex	r3, r2, [r1]
 8002e3e:	617b      	str	r3, [r7, #20]
   return(result);
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1e4      	bne.n	8002e10 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f85b 	bl	8002f08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e52:	e03f      	b.n	8002ed4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00e      	beq.n	8002e7e <HAL_UART_IRQHandler+0x55a>
 8002e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fc7a 	bl	8003770 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e7c:	e02d      	b.n	8002eda <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00e      	beq.n	8002ea8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d008      	beq.n	8002ea8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d01c      	beq.n	8002ed8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	4798      	blx	r3
    }
    return;
 8002ea6:	e017      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d012      	beq.n	8002eda <HAL_UART_IRQHandler+0x5b6>
 8002eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00c      	beq.n	8002eda <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fc2b 	bl	800371c <UART_EndTransmit_IT>
    return;
 8002ec6:	e008      	b.n	8002eda <HAL_UART_IRQHandler+0x5b6>
      return;
 8002ec8:	bf00      	nop
 8002eca:	e006      	b.n	8002eda <HAL_UART_IRQHandler+0x5b6>
    return;
 8002ecc:	bf00      	nop
 8002ece:	e004      	b.n	8002eda <HAL_UART_IRQHandler+0x5b6>
      return;
 8002ed0:	bf00      	nop
 8002ed2:	e002      	b.n	8002eda <HAL_UART_IRQHandler+0x5b6>
      return;
 8002ed4:	bf00      	nop
 8002ed6:	e000      	b.n	8002eda <HAL_UART_IRQHandler+0x5b6>
    return;
 8002ed8:	bf00      	nop
  }

}
 8002eda:	37e8      	adds	r7, #232	; 0xe8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	4b92      	ldr	r3, [pc, #584]	; (8003194 <UART_SetConfig+0x274>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	6979      	ldr	r1, [r7, #20]
 8002f54:	430b      	orrs	r3, r1
 8002f56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a80      	ldr	r2, [pc, #512]	; (8003198 <UART_SetConfig+0x278>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d120      	bne.n	8002fde <UART_SetConfig+0xbe>
 8002f9c:	4b7f      	ldr	r3, [pc, #508]	; (800319c <UART_SetConfig+0x27c>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d817      	bhi.n	8002fd8 <UART_SetConfig+0xb8>
 8002fa8:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <UART_SetConfig+0x90>)
 8002faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fae:	bf00      	nop
 8002fb0:	08002fc1 	.word	0x08002fc1
 8002fb4:	08002fcd 	.word	0x08002fcd
 8002fb8:	08002fd3 	.word	0x08002fd3
 8002fbc:	08002fc7 	.word	0x08002fc7
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	77fb      	strb	r3, [r7, #31]
 8002fc4:	e0b5      	b.n	8003132 <UART_SetConfig+0x212>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	77fb      	strb	r3, [r7, #31]
 8002fca:	e0b2      	b.n	8003132 <UART_SetConfig+0x212>
 8002fcc:	2304      	movs	r3, #4
 8002fce:	77fb      	strb	r3, [r7, #31]
 8002fd0:	e0af      	b.n	8003132 <UART_SetConfig+0x212>
 8002fd2:	2308      	movs	r3, #8
 8002fd4:	77fb      	strb	r3, [r7, #31]
 8002fd6:	e0ac      	b.n	8003132 <UART_SetConfig+0x212>
 8002fd8:	2310      	movs	r3, #16
 8002fda:	77fb      	strb	r3, [r7, #31]
 8002fdc:	e0a9      	b.n	8003132 <UART_SetConfig+0x212>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a6f      	ldr	r2, [pc, #444]	; (80031a0 <UART_SetConfig+0x280>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d124      	bne.n	8003032 <UART_SetConfig+0x112>
 8002fe8:	4b6c      	ldr	r3, [pc, #432]	; (800319c <UART_SetConfig+0x27c>)
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ff0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ff4:	d011      	beq.n	800301a <UART_SetConfig+0xfa>
 8002ff6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ffa:	d817      	bhi.n	800302c <UART_SetConfig+0x10c>
 8002ffc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003000:	d011      	beq.n	8003026 <UART_SetConfig+0x106>
 8003002:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003006:	d811      	bhi.n	800302c <UART_SetConfig+0x10c>
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <UART_SetConfig+0xf4>
 800300c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003010:	d006      	beq.n	8003020 <UART_SetConfig+0x100>
 8003012:	e00b      	b.n	800302c <UART_SetConfig+0x10c>
 8003014:	2300      	movs	r3, #0
 8003016:	77fb      	strb	r3, [r7, #31]
 8003018:	e08b      	b.n	8003132 <UART_SetConfig+0x212>
 800301a:	2302      	movs	r3, #2
 800301c:	77fb      	strb	r3, [r7, #31]
 800301e:	e088      	b.n	8003132 <UART_SetConfig+0x212>
 8003020:	2304      	movs	r3, #4
 8003022:	77fb      	strb	r3, [r7, #31]
 8003024:	e085      	b.n	8003132 <UART_SetConfig+0x212>
 8003026:	2308      	movs	r3, #8
 8003028:	77fb      	strb	r3, [r7, #31]
 800302a:	e082      	b.n	8003132 <UART_SetConfig+0x212>
 800302c:	2310      	movs	r3, #16
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	e07f      	b.n	8003132 <UART_SetConfig+0x212>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a5b      	ldr	r2, [pc, #364]	; (80031a4 <UART_SetConfig+0x284>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d124      	bne.n	8003086 <UART_SetConfig+0x166>
 800303c:	4b57      	ldr	r3, [pc, #348]	; (800319c <UART_SetConfig+0x27c>)
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003044:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003048:	d011      	beq.n	800306e <UART_SetConfig+0x14e>
 800304a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800304e:	d817      	bhi.n	8003080 <UART_SetConfig+0x160>
 8003050:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003054:	d011      	beq.n	800307a <UART_SetConfig+0x15a>
 8003056:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800305a:	d811      	bhi.n	8003080 <UART_SetConfig+0x160>
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <UART_SetConfig+0x148>
 8003060:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003064:	d006      	beq.n	8003074 <UART_SetConfig+0x154>
 8003066:	e00b      	b.n	8003080 <UART_SetConfig+0x160>
 8003068:	2300      	movs	r3, #0
 800306a:	77fb      	strb	r3, [r7, #31]
 800306c:	e061      	b.n	8003132 <UART_SetConfig+0x212>
 800306e:	2302      	movs	r3, #2
 8003070:	77fb      	strb	r3, [r7, #31]
 8003072:	e05e      	b.n	8003132 <UART_SetConfig+0x212>
 8003074:	2304      	movs	r3, #4
 8003076:	77fb      	strb	r3, [r7, #31]
 8003078:	e05b      	b.n	8003132 <UART_SetConfig+0x212>
 800307a:	2308      	movs	r3, #8
 800307c:	77fb      	strb	r3, [r7, #31]
 800307e:	e058      	b.n	8003132 <UART_SetConfig+0x212>
 8003080:	2310      	movs	r3, #16
 8003082:	77fb      	strb	r3, [r7, #31]
 8003084:	e055      	b.n	8003132 <UART_SetConfig+0x212>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a47      	ldr	r2, [pc, #284]	; (80031a8 <UART_SetConfig+0x288>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d124      	bne.n	80030da <UART_SetConfig+0x1ba>
 8003090:	4b42      	ldr	r3, [pc, #264]	; (800319c <UART_SetConfig+0x27c>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003098:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800309c:	d011      	beq.n	80030c2 <UART_SetConfig+0x1a2>
 800309e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030a2:	d817      	bhi.n	80030d4 <UART_SetConfig+0x1b4>
 80030a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030a8:	d011      	beq.n	80030ce <UART_SetConfig+0x1ae>
 80030aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030ae:	d811      	bhi.n	80030d4 <UART_SetConfig+0x1b4>
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <UART_SetConfig+0x19c>
 80030b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b8:	d006      	beq.n	80030c8 <UART_SetConfig+0x1a8>
 80030ba:	e00b      	b.n	80030d4 <UART_SetConfig+0x1b4>
 80030bc:	2300      	movs	r3, #0
 80030be:	77fb      	strb	r3, [r7, #31]
 80030c0:	e037      	b.n	8003132 <UART_SetConfig+0x212>
 80030c2:	2302      	movs	r3, #2
 80030c4:	77fb      	strb	r3, [r7, #31]
 80030c6:	e034      	b.n	8003132 <UART_SetConfig+0x212>
 80030c8:	2304      	movs	r3, #4
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e031      	b.n	8003132 <UART_SetConfig+0x212>
 80030ce:	2308      	movs	r3, #8
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e02e      	b.n	8003132 <UART_SetConfig+0x212>
 80030d4:	2310      	movs	r3, #16
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e02b      	b.n	8003132 <UART_SetConfig+0x212>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a33      	ldr	r2, [pc, #204]	; (80031ac <UART_SetConfig+0x28c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d124      	bne.n	800312e <UART_SetConfig+0x20e>
 80030e4:	4b2d      	ldr	r3, [pc, #180]	; (800319c <UART_SetConfig+0x27c>)
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80030ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030f0:	d011      	beq.n	8003116 <UART_SetConfig+0x1f6>
 80030f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030f6:	d817      	bhi.n	8003128 <UART_SetConfig+0x208>
 80030f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030fc:	d011      	beq.n	8003122 <UART_SetConfig+0x202>
 80030fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003102:	d811      	bhi.n	8003128 <UART_SetConfig+0x208>
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <UART_SetConfig+0x1f0>
 8003108:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800310c:	d006      	beq.n	800311c <UART_SetConfig+0x1fc>
 800310e:	e00b      	b.n	8003128 <UART_SetConfig+0x208>
 8003110:	2300      	movs	r3, #0
 8003112:	77fb      	strb	r3, [r7, #31]
 8003114:	e00d      	b.n	8003132 <UART_SetConfig+0x212>
 8003116:	2302      	movs	r3, #2
 8003118:	77fb      	strb	r3, [r7, #31]
 800311a:	e00a      	b.n	8003132 <UART_SetConfig+0x212>
 800311c:	2304      	movs	r3, #4
 800311e:	77fb      	strb	r3, [r7, #31]
 8003120:	e007      	b.n	8003132 <UART_SetConfig+0x212>
 8003122:	2308      	movs	r3, #8
 8003124:	77fb      	strb	r3, [r7, #31]
 8003126:	e004      	b.n	8003132 <UART_SetConfig+0x212>
 8003128:	2310      	movs	r3, #16
 800312a:	77fb      	strb	r3, [r7, #31]
 800312c:	e001      	b.n	8003132 <UART_SetConfig+0x212>
 800312e:	2310      	movs	r3, #16
 8003130:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800313a:	d16c      	bne.n	8003216 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 800313c:	7ffb      	ldrb	r3, [r7, #31]
 800313e:	2b08      	cmp	r3, #8
 8003140:	d838      	bhi.n	80031b4 <UART_SetConfig+0x294>
 8003142:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <UART_SetConfig+0x228>)
 8003144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003148:	0800316d 	.word	0x0800316d
 800314c:	08003175 	.word	0x08003175
 8003150:	0800317d 	.word	0x0800317d
 8003154:	080031b5 	.word	0x080031b5
 8003158:	08003183 	.word	0x08003183
 800315c:	080031b5 	.word	0x080031b5
 8003160:	080031b5 	.word	0x080031b5
 8003164:	080031b5 	.word	0x080031b5
 8003168:	0800318b 	.word	0x0800318b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800316c:	f7ff f92a 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 8003170:	61b8      	str	r0, [r7, #24]
        break;
 8003172:	e024      	b.n	80031be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003174:	f7ff f948 	bl	8002408 <HAL_RCC_GetPCLK2Freq>
 8003178:	61b8      	str	r0, [r7, #24]
        break;
 800317a:	e020      	b.n	80031be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <UART_SetConfig+0x290>)
 800317e:	61bb      	str	r3, [r7, #24]
        break;
 8003180:	e01d      	b.n	80031be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003182:	f7ff f8a9 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8003186:	61b8      	str	r0, [r7, #24]
        break;
 8003188:	e019      	b.n	80031be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800318a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800318e:	61bb      	str	r3, [r7, #24]
        break;
 8003190:	e015      	b.n	80031be <UART_SetConfig+0x29e>
 8003192:	bf00      	nop
 8003194:	efff69f3 	.word	0xefff69f3
 8003198:	40013800 	.word	0x40013800
 800319c:	40021000 	.word	0x40021000
 80031a0:	40004400 	.word	0x40004400
 80031a4:	40004800 	.word	0x40004800
 80031a8:	40004c00 	.word	0x40004c00
 80031ac:	40005000 	.word	0x40005000
 80031b0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	77bb      	strb	r3, [r7, #30]
        break;
 80031bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d075      	beq.n	80032b0 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	005a      	lsls	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	441a      	add	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d8:	b29b      	uxth	r3, r3
 80031da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	2b0f      	cmp	r3, #15
 80031e0:	d916      	bls.n	8003210 <UART_SetConfig+0x2f0>
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e8:	d212      	bcs.n	8003210 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	f023 030f 	bic.w	r3, r3, #15
 80031f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	085b      	lsrs	r3, r3, #1
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	b29a      	uxth	r2, r3
 8003200:	89fb      	ldrh	r3, [r7, #14]
 8003202:	4313      	orrs	r3, r2
 8003204:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	89fa      	ldrh	r2, [r7, #14]
 800320c:	60da      	str	r2, [r3, #12]
 800320e:	e04f      	b.n	80032b0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	77bb      	strb	r3, [r7, #30]
 8003214:	e04c      	b.n	80032b0 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003216:	7ffb      	ldrb	r3, [r7, #31]
 8003218:	2b08      	cmp	r3, #8
 800321a:	d828      	bhi.n	800326e <UART_SetConfig+0x34e>
 800321c:	a201      	add	r2, pc, #4	; (adr r2, 8003224 <UART_SetConfig+0x304>)
 800321e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003222:	bf00      	nop
 8003224:	08003249 	.word	0x08003249
 8003228:	08003251 	.word	0x08003251
 800322c:	08003259 	.word	0x08003259
 8003230:	0800326f 	.word	0x0800326f
 8003234:	0800325f 	.word	0x0800325f
 8003238:	0800326f 	.word	0x0800326f
 800323c:	0800326f 	.word	0x0800326f
 8003240:	0800326f 	.word	0x0800326f
 8003244:	08003267 	.word	0x08003267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003248:	f7ff f8bc 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 800324c:	61b8      	str	r0, [r7, #24]
        break;
 800324e:	e013      	b.n	8003278 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003250:	f7ff f8da 	bl	8002408 <HAL_RCC_GetPCLK2Freq>
 8003254:	61b8      	str	r0, [r7, #24]
        break;
 8003256:	e00f      	b.n	8003278 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003258:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <UART_SetConfig+0x3a8>)
 800325a:	61bb      	str	r3, [r7, #24]
        break;
 800325c:	e00c      	b.n	8003278 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800325e:	f7ff f83b 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8003262:	61b8      	str	r0, [r7, #24]
        break;
 8003264:	e008      	b.n	8003278 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800326a:	61bb      	str	r3, [r7, #24]
        break;
 800326c:	e004      	b.n	8003278 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	77bb      	strb	r3, [r7, #30]
        break;
 8003276:	bf00      	nop
    }

    if (pclk != 0U)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d018      	beq.n	80032b0 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	085a      	lsrs	r2, r3, #1
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	441a      	add	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003290:	b29b      	uxth	r3, r3
 8003292:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	2b0f      	cmp	r3, #15
 8003298:	d908      	bls.n	80032ac <UART_SetConfig+0x38c>
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a0:	d204      	bcs.n	80032ac <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	e001      	b.n	80032b0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3720      	adds	r7, #32
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	007a1200 	.word	0x007a1200

080032cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01a      	beq.n	80033e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ca:	d10a      	bne.n	80033e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	605a      	str	r2, [r3, #4]
  }
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af02      	add	r7, sp, #8
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003420:	f7fd fa16 	bl	8000850 <HAL_GetTick>
 8003424:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b08      	cmp	r3, #8
 8003432:	d10e      	bne.n	8003452 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003434:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f82d 	bl	80034a2 <UART_WaitOnFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e023      	b.n	800349a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b04      	cmp	r3, #4
 800345e:	d10e      	bne.n	800347e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003460:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f817 	bl	80034a2 <UART_WaitOnFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00d      	b.n	800349a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b09c      	sub	sp, #112	; 0x70
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	603b      	str	r3, [r7, #0]
 80034ae:	4613      	mov	r3, r2
 80034b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034b2:	e0a5      	b.n	8003600 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ba:	f000 80a1 	beq.w	8003600 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034be:	f7fd f9c7 	bl	8000850 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d302      	bcc.n	80034d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80034ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d13e      	bne.n	8003552 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034dc:	e853 3f00 	ldrex	r3, [r3]
 80034e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80034e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034e8:	667b      	str	r3, [r7, #100]	; 0x64
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034f4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80034f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e6      	bne.n	80034d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3308      	adds	r3, #8
 800350c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003510:	e853 3f00 	ldrex	r3, [r3]
 8003514:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	663b      	str	r3, [r7, #96]	; 0x60
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3308      	adds	r3, #8
 8003524:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003526:	64ba      	str	r2, [r7, #72]	; 0x48
 8003528:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800352c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800352e:	e841 2300 	strex	r3, r2, [r1]
 8003532:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1e5      	bne.n	8003506 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2220      	movs	r2, #32
 800353e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e067      	b.n	8003622 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d04f      	beq.n	8003600 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800356a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800356e:	d147      	bne.n	8003600 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003578:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003582:	e853 3f00 	ldrex	r3, [r3]
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800358e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003598:	637b      	str	r3, [r7, #52]	; 0x34
 800359a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800359e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035a0:	e841 2300 	strex	r3, r2, [r1]
 80035a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1e6      	bne.n	800357a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3308      	adds	r3, #8
 80035b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	e853 3f00 	ldrex	r3, [r3]
 80035ba:	613b      	str	r3, [r7, #16]
   return(result);
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f023 0301 	bic.w	r3, r3, #1
 80035c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3308      	adds	r3, #8
 80035ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035cc:	623a      	str	r2, [r7, #32]
 80035ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d0:	69f9      	ldr	r1, [r7, #28]
 80035d2:	6a3a      	ldr	r2, [r7, #32]
 80035d4:	e841 2300 	strex	r3, r2, [r1]
 80035d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e5      	bne.n	80035ac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2220      	movs	r2, #32
 80035e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e010      	b.n	8003622 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	69da      	ldr	r2, [r3, #28]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4013      	ands	r3, r2
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	429a      	cmp	r2, r3
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	429a      	cmp	r2, r3
 800361c:	f43f af4a 	beq.w	80034b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3770      	adds	r7, #112	; 0x70
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800362a:	b480      	push	{r7}
 800362c:	b095      	sub	sp, #84	; 0x54
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363a:	e853 3f00 	ldrex	r3, [r3]
 800363e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003642:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003650:	643b      	str	r3, [r7, #64]	; 0x40
 8003652:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003654:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003656:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003658:	e841 2300 	strex	r3, r2, [r1]
 800365c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e6      	bne.n	8003632 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3308      	adds	r3, #8
 800366a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	e853 3f00 	ldrex	r3, [r3]
 8003672:	61fb      	str	r3, [r7, #28]
   return(result);
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	64bb      	str	r3, [r7, #72]	; 0x48
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3308      	adds	r3, #8
 8003682:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003684:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800368a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800368c:	e841 2300 	strex	r3, r2, [r1]
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e5      	bne.n	8003664 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369c:	2b01      	cmp	r3, #1
 800369e:	d118      	bne.n	80036d2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	e853 3f00 	ldrex	r3, [r3]
 80036ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f023 0310 	bic.w	r3, r3, #16
 80036b4:	647b      	str	r3, [r7, #68]	; 0x44
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c2:	6979      	ldr	r1, [r7, #20]
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	e841 2300 	strex	r3, r2, [r1]
 80036ca:	613b      	str	r3, [r7, #16]
   return(result);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1e6      	bne.n	80036a0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80036e4:	bf00      	nop
 80036e6:	3754      	adds	r7, #84	; 0x54
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f7ff fbf0 	bl	8002ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003714:	bf00      	nop
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	e853 3f00 	ldrex	r3, [r3]
 8003730:	60bb      	str	r3, [r7, #8]
   return(result);
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003738:	61fb      	str	r3, [r7, #28]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	61bb      	str	r3, [r7, #24]
 8003744:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003746:	6979      	ldr	r1, [r7, #20]
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	e841 2300 	strex	r3, r2, [r1]
 800374e:	613b      	str	r3, [r7, #16]
   return(result);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1e6      	bne.n	8003724 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff fbbc 	bl	8002ee0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003768:	bf00      	nop
 800376a:	3720      	adds	r7, #32
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <__libc_init_array>:
 8003784:	b570      	push	{r4, r5, r6, lr}
 8003786:	4d0d      	ldr	r5, [pc, #52]	; (80037bc <__libc_init_array+0x38>)
 8003788:	4c0d      	ldr	r4, [pc, #52]	; (80037c0 <__libc_init_array+0x3c>)
 800378a:	1b64      	subs	r4, r4, r5
 800378c:	10a4      	asrs	r4, r4, #2
 800378e:	2600      	movs	r6, #0
 8003790:	42a6      	cmp	r6, r4
 8003792:	d109      	bne.n	80037a8 <__libc_init_array+0x24>
 8003794:	4d0b      	ldr	r5, [pc, #44]	; (80037c4 <__libc_init_array+0x40>)
 8003796:	4c0c      	ldr	r4, [pc, #48]	; (80037c8 <__libc_init_array+0x44>)
 8003798:	f000 f820 	bl	80037dc <_init>
 800379c:	1b64      	subs	r4, r4, r5
 800379e:	10a4      	asrs	r4, r4, #2
 80037a0:	2600      	movs	r6, #0
 80037a2:	42a6      	cmp	r6, r4
 80037a4:	d105      	bne.n	80037b2 <__libc_init_array+0x2e>
 80037a6:	bd70      	pop	{r4, r5, r6, pc}
 80037a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ac:	4798      	blx	r3
 80037ae:	3601      	adds	r6, #1
 80037b0:	e7ee      	b.n	8003790 <__libc_init_array+0xc>
 80037b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037b6:	4798      	blx	r3
 80037b8:	3601      	adds	r6, #1
 80037ba:	e7f2      	b.n	80037a2 <__libc_init_array+0x1e>
 80037bc:	0800382c 	.word	0x0800382c
 80037c0:	0800382c 	.word	0x0800382c
 80037c4:	0800382c 	.word	0x0800382c
 80037c8:	08003834 	.word	0x08003834

080037cc <memset>:
 80037cc:	4402      	add	r2, r0
 80037ce:	4603      	mov	r3, r0
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d100      	bne.n	80037d6 <memset+0xa>
 80037d4:	4770      	bx	lr
 80037d6:	f803 1b01 	strb.w	r1, [r3], #1
 80037da:	e7f9      	b.n	80037d0 <memset+0x4>

080037dc <_init>:
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037de:	bf00      	nop
 80037e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e2:	bc08      	pop	{r3}
 80037e4:	469e      	mov	lr, r3
 80037e6:	4770      	bx	lr

080037e8 <_fini>:
 80037e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ea:	bf00      	nop
 80037ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ee:	bc08      	pop	{r3}
 80037f0:	469e      	mov	lr, r3
 80037f2:	4770      	bx	lr
