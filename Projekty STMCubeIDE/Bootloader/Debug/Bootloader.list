
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003edc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004070  08004070  00014070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040a8  080040a8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080040a8  080040a8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040a8  080040a8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080040a8  080040a8  000140a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040b0  080040b0  000140b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080040b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000230  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000240  20000240  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c654  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e46  00000000  00000000  0002c694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000848  00000000  00000000  0002e4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007a0  00000000  00000000  0002ed28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004918  00000000  00000000  0002f4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b9b7  00000000  00000000  00033de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c337f  00000000  00000000  0003f797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00102b16  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002068  00000000  00000000  00102b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004058 	.word	0x08004058

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08004058 	.word	0x08004058

080001d4 <_ZN5M485E4initEP20__UART_HandleTypeDef>:

    
    // --------- KONFIGURACJA ----------------------------

    /// inicjalizacja
    public: void init( UART_HandleTypeDef *aUart ){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	6039      	str	r1, [r7, #0]
      
      mhUart = aUart;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	683a      	ldr	r2, [r7, #0]
 80001e2:	601a      	str	r2, [r3, #0]
      HAL_UART_Receive_IT( mhUart, mRXBuf, 1 );
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	6818      	ldr	r0, [r3, #0]
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	334a      	adds	r3, #74	; 0x4a
 80001ec:	2201      	movs	r2, #1
 80001ee:	4619      	mov	r1, r3
 80001f0:	f003 f862 	bl	80032b8 <HAL_UART_Receive_IT>
      
    }//-------------------------------------------------------------------------
 80001f4:	bf00      	nop
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <_ZN5M485E7Send_ITEv>:
    public: void sendTX_setAddr( uint8_t addr, uint8_t newAddr);
    
    public: void sendTX_EXT( uint8_t cnt, uint8_t *frame );
  
    //--------------------------------------------------------------------------
    public: void Send_IT(){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
      uint8_t *buf;
      int cnt = 0;
 8000204:	2300      	movs	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]
      // sprawdz czy jakiekolwiek dane czekaja
      bool res = bufPrepareTX( &buf, &cnt );
 8000208:	f107 020c 	add.w	r2, r7, #12
 800020c:	f107 0310 	add.w	r3, r7, #16
 8000210:	4619      	mov	r1, r3
 8000212:	6878      	ldr	r0, [r7, #4]
 8000214:	f000 f8b0 	bl	8000378 <_ZN5M485E12bufPrepareTXEPPhPi>
 8000218:	4603      	mov	r3, r0
 800021a:	75fb      	strb	r3, [r7, #23]
      if( res ){
 800021c:	7dfb      	ldrb	r3, [r7, #23]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d01f      	beq.n	8000262 <_ZN5M485E7Send_ITEv+0x66>
        
          //HAL_GPIO_WritePin( GPIOA, GPIO_PIN_12, GPIO_PIN_SET );
     //     ITM_EVENT8( 3, 1 );
          _o485E_EN = 1;
 8000222:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000226:	7d53      	ldrb	r3, [r2, #21]
 8000228:	f043 0310 	orr.w	r3, r3, #16
 800022c:	7553      	strb	r3, [r2, #21]
          HAL_StatusTypeDef uartRes = HAL_UART_Transmit_IT( mhUart, buf,  cnt );
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	6939      	ldr	r1, [r7, #16]
 8000234:	68fa      	ldr	r2, [r7, #12]
 8000236:	b292      	uxth	r2, r2
 8000238:	4618      	mov	r0, r3
 800023a:	f002 ffcf 	bl	80031dc <HAL_UART_Transmit_IT>
 800023e:	4603      	mov	r3, r0
 8000240:	75bb      	strb	r3, [r7, #22]
          // sprawdz czy udalo sie wyslac
          
           mIsEN_to_0 += cnt;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f893 2077 	ldrb.w	r2, [r3, #119]	; 0x77
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	b2db      	uxtb	r3, r3
 800024c:	4413      	add	r3, r2
 800024e:	b2da      	uxtb	r2, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
     //      for( int i=0; i<cnt; i++ )
      //          ITM_EVENT8( 1, buf[i] );
          
          if( uartRes == HAL_OK ){   
 8000256:	7dbb      	ldrb	r3, [r7, #22]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d102      	bne.n	8000262 <_ZN5M485E7Send_ITEv+0x66>
            mSendingTXCnt = cnt;
 800025c:	68fa      	ldr	r2, [r7, #12]
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	63da      	str	r2, [r3, #60]	; 0x3c
          }
      }    
    }//-------------------------------------------------------------------------
 8000262:	bf00      	nop
 8000264:	3718      	adds	r7, #24
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}

0800026a <_ZN5M485E7onIT_RXEv>:
    
    }//-------------------------------------------------------------------------
    
    /// ------------------------------------------------------------------------
    /// w przerwaniu RX
    public: void onIT_RX(){
 800026a:	b580      	push	{r7, lr}
 800026c:	b082      	sub	sp, #8
 800026e:	af00      	add	r7, sp, #0
 8000270:	6078      	str	r0, [r7, #4]

//        #ifndef _USART_PC
//          if( _o485E_EN == 0 ) 
//        #endif
        
          if( _o485E_EN == 0 ){
 8000272:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000276:	7d5b      	ldrb	r3, [r3, #21]
 8000278:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800027c:	b2db      	uxtb	r3, r3
 800027e:	f083 0301 	eor.w	r3, r3, #1
 8000282:	b2db      	uxtb	r3, r3
 8000284:	2b00      	cmp	r3, #0
 8000286:	d006      	beq.n	8000296 <_ZN5M485E7onIT_RXEv+0x2c>
   //         ITM_EVENT8( 4, mRXBuf[0] );
            onReceive( mRXBuf[0] );
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800028e:	4619      	mov	r1, r3
 8000290:	6878      	ldr	r0, [r7, #4]
 8000292:	f000 fa55 	bl	8000740 <_ZN5M485E9onReceiveEh>
          }else{
  //          ITM_EVENT8( 4, mRXBuf[0] );
          }
        
        if( mIsEN_to_0 <= 0 ){
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800029c:	2b00      	cmp	r3, #0
 800029e:	d10c      	bne.n	80002ba <_ZN5M485E7onIT_RXEv+0x50>
          
          if( isEmpty() ){
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f000 f81e 	bl	80002e2 <_ZN5M485E7isEmptyEv>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d00e      	beq.n	80002ca <_ZN5M485E7onIT_RXEv+0x60>
          
            //mIsEN_to_0 = false;
            
    //        ITM_EVENT8( 3, 0 );
            _o485E_EN = 0;
 80002ac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002b0:	7d53      	ldrb	r3, [r2, #21]
 80002b2:	f36f 1304 	bfc	r3, #4, #1
 80002b6:	7553      	strb	r3, [r2, #21]
 80002b8:	e007      	b.n	80002ca <_ZN5M485E7onIT_RXEv+0x60>
          }
          
          
        }else{
          //ITM_EVENT8( 3, mIsEN_to_0 );
          mIsEN_to_0 -= 1;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80002c0:	3b01      	subs	r3, #1
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
//          _o485E_EN = 0;
//      }else{
//        //ITM_EVENT8( 3, mIsEN_to_0 );
//        mIsEN_to_0 -= 1;
//      }
      HAL_UART_Receive_IT(  mhUart, mRXBuf, 1 );
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	6818      	ldr	r0, [r3, #0]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	334a      	adds	r3, #74	; 0x4a
 80002d2:	2201      	movs	r2, #1
 80002d4:	4619      	mov	r1, r3
 80002d6:	f002 ffef 	bl	80032b8 <HAL_UART_Receive_IT>
    }//-------------------------------------------------------------------------
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}

080002e2 <_ZN5M485E7isEmptyEv>:
    // po zakonczeniu wysylania (TX interrupt) bufRemoveN( cnt ) i sprawdza podnownie bufPrepareTx
  
        
    //--------------------------------------------------------------------------
    // czy pusty
    public: inline bool isEmpty(){
 80002e2:	b480      	push	{r7}
 80002e4:	b083      	sub	sp, #12
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	6078      	str	r0, [r7, #4]
      return ( mIndexSTART == mIndexSTOP );
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80002f6:	429a      	cmp	r2, r3
 80002f8:	bf0c      	ite	eq
 80002fa:	2301      	moveq	r3, #1
 80002fc:	2300      	movne	r3, #0
 80002fe:	b2db      	uxtb	r3, r3
    }//-------------------------------------------------------------------------
 8000300:	4618      	mov	r0, r3
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr

0800030c <_ZN5M485E6bufAddEh>:
    
    //--------------------------------------------------------------------------
    // dodaje dana
    public: inline bool bufAdd( uint8_t aData ){
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	460b      	mov	r3, r1
 8000316:	70fb      	strb	r3, [r7, #3]
      
      // sprawdz czy mozna dodac dana
      int stopPrev = mIndexSTOP;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800031e:	60fb      	str	r3, [r7, #12]
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000326:	3301      	adds	r3, #1
 8000328:	4a12      	ldr	r2, [pc, #72]	; (8000374 <_ZN5M485E6bufAddEh+0x68>)
 800032a:	fb82 1203 	smull	r1, r2, r2, r3
 800032e:	1111      	asrs	r1, r2, #4
 8000330:	17da      	asrs	r2, r3, #31
 8000332:	1a8a      	subs	r2, r1, r2
 8000334:	2132      	movs	r1, #50	; 0x32
 8000336:	fb01 f202 	mul.w	r2, r1, r2
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	60bb      	str	r3, [r7, #8]
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000344:	461a      	mov	r2, r3
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	4293      	cmp	r3, r2
 800034a:	d101      	bne.n	8000350 <_ZN5M485E6bufAddEh+0x44>
 800034c:	2300      	movs	r3, #0
 800034e:	e00b      	b.n	8000368 <_ZN5M485E6bufAddEh+0x5c>
      
      // dodaj dana
      mBuf[ stopPrev ] = aData;
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	4413      	add	r3, r2
 8000356:	3305      	adds	r3, #5
 8000358:	78fa      	ldrb	r2, [r7, #3]
 800035a:	701a      	strb	r2, [r3, #0]
      mIndexSTOP = stopTmp;
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	b2da      	uxtb	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      return true;
 8000366:	2301      	movs	r3, #1
      
    }//-------------------------------------------------------------------------
 8000368:	4618      	mov	r0, r3
 800036a:	3714      	adds	r7, #20
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr
 8000374:	51eb851f 	.word	0x51eb851f

08000378 <_ZN5M485E12bufPrepareTXEPPhPi>:

    
    //--------------------------------------------------------------------------
    // przygotowuje bufor do nadawania UART
    // zamysl aby przekazac zywy mBuf, a na zawijaniu zatrzymac do nastepnej iteracji
    bool bufPrepareTX( uint8_t **aBuf, int *aCnt ){
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
 800037e:	60f8      	str	r0, [r7, #12]
 8000380:	60b9      	str	r1, [r7, #8]
 8000382:	607a      	str	r2, [r7, #4]
      
      // sprawdz czy bufor nie pusty
      if( mIndexSTART == mIndexSTOP ) return false;
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000390:	429a      	cmp	r2, r3
 8000392:	d101      	bne.n	8000398 <_ZN5M485E12bufPrepareTXEPPhPi+0x20>
 8000394:	2300      	movs	r3, #0
 8000396:	e023      	b.n	80003e0 <_ZN5M485E12bufPrepareTXEPPhPi+0x68>
      
      // liczenie cnt
          // bufor nie przeciety granica
      if( mIndexSTART < mIndexSTOP )  (*aCnt) = mIndexSTOP - mIndexSTART;
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d20a      	bcs.n	80003be <_ZN5M485E12bufPrepareTXEPPhPi+0x46>
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80003ae:	461a      	mov	r2, r3
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80003b6:	1ad2      	subs	r2, r2, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	e006      	b.n	80003cc <_ZN5M485E12bufPrepareTXEPPhPi+0x54>
          // bufor przeciety granica
      else                            (*aCnt) = cBufLength - mIndexSTART;
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80003c4:	f1c3 0232 	rsb	r2, r3, #50	; 0x32
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	601a      	str	r2, [r3, #0]
      
      // wypelnienie bufora
      (*aBuf) = &(mBuf[mIndexSTART]);
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80003d2:	461a      	mov	r2, r3
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	4413      	add	r3, r2
 80003d8:	1d5a      	adds	r2, r3, #5
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	601a      	str	r2, [r3, #0]
      return true;
 80003de:	2301      	movs	r3, #1
      
    }//-------------------------------------------------------------------------
 80003e0:	4618      	mov	r0, r3
 80003e2:	3714      	adds	r7, #20
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <_ZN5M485EC1Ev>:
  class M485E{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2200      	movs	r2, #0
 80003f8:	711a      	strb	r2, [r3, #4]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2200      	movs	r2, #0
 80003fe:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2200      	movs	r2, #0
 8000406:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	2200      	movs	r2, #0
 800040e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2200      	movs	r2, #0
 8000414:	641a      	str	r2, [r3, #64]	; 0x40
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2200      	movs	r2, #0
 800041a:	645a      	str	r2, [r3, #68]	; 0x44
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2200      	movs	r2, #0
 8000420:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2200      	movs	r2, #0
 8000428:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	2200      	movs	r2, #0
 8000430:	671a      	str	r2, [r3, #112]	; 0x70
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2200      	movs	r2, #0
 8000436:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2201      	movs	r2, #1
 800043e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	2201      	movs	r2, #1
 8000446:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2200      	movs	r2, #0
 800044e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4618      	mov	r0, r3
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <_ZN6MFlash6read16Ett>:
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
      uint8_t res = *(__IO uint8_t*)(addr);
      return res;
    };//------------------------------------------------------------------ 
    //--------------------------------------------------------------------  
    public: static  uint16_t read16( uint16_t aPage, uint16_t aOffset ){
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	460a      	mov	r2, r1
 800046a:	80fb      	strh	r3, [r7, #6]
 800046c:	4613      	mov	r3, r2
 800046e:	80bb      	strh	r3, [r7, #4]
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 8000470:	88fb      	ldrh	r3, [r7, #6]
 8000472:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000476:	02da      	lsls	r2, r3, #11
 8000478:	88bb      	ldrh	r3, [r7, #4]
 800047a:	4413      	add	r3, r2
 800047c:	60fb      	str	r3, [r7, #12]
      uint16_t res = *(__IO uint16_t*)(addr);
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	881b      	ldrh	r3, [r3, #0]
 8000482:	817b      	strh	r3, [r7, #10]
      return res;
 8000484:	897b      	ldrh	r3, [r7, #10]
    };//------------------------------------------------------------------
 8000486:	4618      	mov	r0, r3
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr

08000492 <_ZN6MFlash4lockEv>:
    };//------------------------------------------------------------------
    
    
    /// LOCK .............................................................
    //--------------------------------------------------------------------
    public: static HAL_StatusTypeDef lock(){
 8000492:	b580      	push	{r7, lr}
 8000494:	b082      	sub	sp, #8
 8000496:	af00      	add	r7, sp, #0
      HAL_StatusTypeDef res = HAL_FLASH_Lock();
 8000498:	f000 feac 	bl	80011f4 <HAL_FLASH_Lock>
 800049c:	4603      	mov	r3, r0
 800049e:	71fb      	strb	r3, [r7, #7]
      return res;
 80004a0:	79fb      	ldrb	r3, [r7, #7]
    };//------------------------------------------------------------------
 80004a2:	4618      	mov	r0, r3
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <_ZN6MFlash6unlockEv>:
    //--------------------------------------------------------------------
    public: static HAL_StatusTypeDef unlock(){
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b082      	sub	sp, #8
 80004ae:	af00      	add	r7, sp, #0
      HAL_StatusTypeDef res = HAL_FLASH_Unlock();
 80004b0:	f000 fe7a 	bl	80011a8 <HAL_FLASH_Unlock>
 80004b4:	4603      	mov	r3, r0
 80004b6:	71fb      	strb	r3, [r7, #7]
      return res;
 80004b8:	79fb      	ldrb	r3, [r7, #7]
    };//------------------------------------------------------------------
 80004ba:	4618      	mov	r0, r3
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <_ZN6MFlash7write16Ettt>:

    
    
    /// WRITE ............................................................
    //--------------------------------------------------------------------  
    public: static HAL_StatusTypeDef write16( uint16_t aPage, uint16_t aOffset, uint16_t aData ){
 80004c2:	b5b0      	push	{r4, r5, r7, lr}
 80004c4:	b084      	sub	sp, #16
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	4603      	mov	r3, r0
 80004ca:	80fb      	strh	r3, [r7, #6]
 80004cc:	460b      	mov	r3, r1
 80004ce:	80bb      	strh	r3, [r7, #4]
 80004d0:	4613      	mov	r3, r2
 80004d2:	807b      	strh	r3, [r7, #2]
       uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 80004d4:	88fb      	ldrh	r3, [r7, #6]
 80004d6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80004da:	02da      	lsls	r2, r3, #11
 80004dc:	88bb      	ldrh	r3, [r7, #4]
 80004de:	4413      	add	r3, r2
 80004e0:	60fb      	str	r3, [r7, #12]
       HAL_StatusTypeDef res = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD , addr, aData );
 80004e2:	887b      	ldrh	r3, [r7, #2]
 80004e4:	2200      	movs	r2, #0
 80004e6:	461c      	mov	r4, r3
 80004e8:	4615      	mov	r5, r2
 80004ea:	4622      	mov	r2, r4
 80004ec:	462b      	mov	r3, r5
 80004ee:	68f9      	ldr	r1, [r7, #12]
 80004f0:	2001      	movs	r0, #1
 80004f2:	f000 fde9 	bl	80010c8 <HAL_FLASH_Program>
 80004f6:	4603      	mov	r3, r0
 80004f8:	72fb      	strb	r3, [r7, #11]
       return res;
 80004fa:	7afb      	ldrb	r3, [r7, #11]
    };//------------------------------------------------------------------
 80004fc:	4618      	mov	r0, r3
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bdb0      	pop	{r4, r5, r7, pc}

08000504 <_ZN6MFlash9erasePageEt>:
    
    
    
    /// ERASE ............................................................
    //--------------------------------------------------------------------  
    public: static HAL_StatusTypeDef erasePage( uint16_t aPage ){
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	80fb      	strh	r3, [r7, #6]
      
       uint32_t addr = 0x08000000 + (aPage * 0x800);
 800050e:	88fb      	ldrh	r3, [r7, #6]
 8000510:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000514:	02db      	lsls	r3, r3, #11
 8000516:	61fb      	str	r3, [r7, #28]
      
       FLASH_EraseInitTypeDef f;
       f.TypeErase = FLASH_TYPEERASE_PAGES;
 8000518:	2300      	movs	r3, #0
 800051a:	60fb      	str	r3, [r7, #12]
       f.PageAddress = addr;
 800051c:	69fb      	ldr	r3, [r7, #28]
 800051e:	613b      	str	r3, [r7, #16]
       f.NbPages = 1;
 8000520:	2301      	movs	r3, #1
 8000522:	617b      	str	r3, [r7, #20]
      
       uint32_t PageError = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
       HAL_StatusTypeDef res = HAL_FLASHEx_Erase(&f, &PageError);
 8000528:	f107 0208 	add.w	r2, r7, #8
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	4611      	mov	r1, r2
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fefc 	bl	8001330 <HAL_FLASHEx_Erase>
 8000538:	4603      	mov	r3, r0
 800053a:	76fb      	strb	r3, [r7, #27]
       return res;
 800053c:	7efb      	ldrb	r3, [r7, #27]
    };//------------------------------------------------------------------
 800053e:	4618      	mov	r0, r3
 8000540:	3720      	adds	r7, #32
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <_ZN6MFlash8calcAddrEtt>:
    
    

    /// ADDR itp. ........................................................
    //-------------------------------------------------------------------- 
    public: static uint32_t calcAddr( uint16_t aPage, uint16_t aOffset ){
 8000546:	b480      	push	{r7}
 8000548:	b085      	sub	sp, #20
 800054a:	af00      	add	r7, sp, #0
 800054c:	4603      	mov	r3, r0
 800054e:	460a      	mov	r2, r1
 8000550:	80fb      	strh	r3, [r7, #6]
 8000552:	4613      	mov	r3, r2
 8000554:	80bb      	strh	r3, [r7, #4]
        uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 8000556:	88fb      	ldrh	r3, [r7, #6]
 8000558:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800055c:	02da      	lsls	r2, r3, #11
 800055e:	88bb      	ldrh	r3, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	60fb      	str	r3, [r7, #12]
        return addr;
 8000564:	68fb      	ldr	r3, [r7, #12]
    };//------------------------------------------------------------------
 8000566:	4618      	mov	r0, r3
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <_ZN6MFlash8calcPageEmt>:

    //--------------------------------------------------------------------
    public: static uint16_t calcPage( uint32_t addr, uint16_t aOffset ){
 8000572:	b480      	push	{r7}
 8000574:	b085      	sub	sp, #20
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
 800057a:	460b      	mov	r3, r1
 800057c:	807b      	strh	r3, [r7, #2]
        uint16_t page = (addr - 0x08000000 - aOffset)/0x800;
 800057e:	887b      	ldrh	r3, [r7, #2]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	1ad3      	subs	r3, r2, r3
 8000584:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000588:	0adb      	lsrs	r3, r3, #11
 800058a:	81fb      	strh	r3, [r7, #14]
        return page;
 800058c:	89fb      	ldrh	r3, [r7, #14]
    };//------------------------------------------------------------------
 800058e:	4618      	mov	r0, r3
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
	...

0800059c <HAL_UART_RxCpltCallback>:
  //if( huart == gST7580.mhUart )  gST7580.onIT_TX();
 // __enable_irq();
 }//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart ) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 // __disable_irq();
  if( huart == g485E.mhUart   )  g485E.onIT_RX();
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <HAL_UART_RxCpltCallback+0x20>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d102      	bne.n	80005b4 <HAL_UART_RxCpltCallback+0x18>
 80005ae:	4803      	ldr	r0, [pc, #12]	; (80005bc <HAL_UART_RxCpltCallback+0x20>)
 80005b0:	f7ff fe5b 	bl	800026a <_ZN5M485E7onIT_RXEv>
  //if( huart == gST7580.mhUart )  gST7580.onIT_RX();
//  __enable_irq();
 }//----------------------------------------------------------------------------
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000002c 	.word	0x2000002c

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fc0f 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f849 	bl	8000660 <_Z18SystemClock_Configv>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  MX_USART2_UART_Init();
 80005ce:	f000 fba9 	bl	8000d24 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005d2:	f000 fb6f 	bl	8000cb4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  g485E.init( &huart1 );
 80005d6:	491f      	ldr	r1, [pc, #124]	; (8000654 <main+0x94>)
 80005d8:	481f      	ldr	r0, [pc, #124]	; (8000658 <main+0x98>)
 80005da:	f7ff fdfb 	bl	80001d4 <_ZN5M485E4initEP20__UART_HandleTypeDef>

  MFlash::unlock();
 80005de:	f7ff ff64 	bl	80004aa <_ZN6MFlash6unlockEv>
  MFlash::erasePage(PAGE);
 80005e2:	20fd      	movs	r0, #253	; 0xfd
 80005e4:	f7ff ff8e 	bl	8000504 <_ZN6MFlash9erasePageEt>
  MFlash::lock();
 80005e8:	f7ff ff53 	bl	8000492 <_ZN6MFlash4lockEv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t address = MFlash::calcAddr(PAGE,0);
 80005ec:	2100      	movs	r1, #0
 80005ee:	20fd      	movs	r0, #253	; 0xfd
 80005f0:	f7ff ffa9 	bl	8000546 <_ZN6MFlash8calcAddrEtt>
 80005f4:	60f8      	str	r0, [r7, #12]
	  uint16_t retPage = MFlash::calcPage(address,0);
 80005f6:	2100      	movs	r1, #0
 80005f8:	68f8      	ldr	r0, [r7, #12]
 80005fa:	f7ff ffba 	bl	8000572 <_ZN6MFlash8calcPageEmt>
 80005fe:	4603      	mov	r3, r0
 8000600:	817b      	strh	r3, [r7, #10]
	  uint16_t var = MFlash::read16(PAGE,0);
 8000602:	2100      	movs	r1, #0
 8000604:	20fd      	movs	r0, #253	; 0xfd
 8000606:	f7ff ff2b 	bl	8000460 <_ZN6MFlash6read16Ett>
 800060a:	4603      	mov	r3, r0
 800060c:	813b      	strh	r3, [r7, #8]
	  bool buttonVal = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800060e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000612:	4812      	ldr	r0, [pc, #72]	; (800065c <main+0x9c>)
 8000614:	f001 f8ba 	bl	800178c <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	bf14      	ite	ne
 800061e:	2301      	movne	r3, #1
 8000620:	2300      	moveq	r3, #0
 8000622:	71fb      	strb	r3, [r7, #7]
	  if( buttonVal ){
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d00e      	beq.n	8000648 <main+0x88>
		  if(var == 0xFFFF){
 800062a:	893b      	ldrh	r3, [r7, #8]
 800062c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000630:	4293      	cmp	r3, r2
 8000632:	d109      	bne.n	8000648 <main+0x88>
			  MFlash::unlock();
 8000634:	f7ff ff39 	bl	80004aa <_ZN6MFlash6unlockEv>
			  MFlash::write16(PAGE,0,0xABCD);
 8000638:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 800063c:	2100      	movs	r1, #0
 800063e:	20fd      	movs	r0, #253	; 0xfd
 8000640:	f7ff ff3f 	bl	80004c2 <_ZN6MFlash7write16Ettt>
			  MFlash::lock();
 8000644:	f7ff ff25 	bl	8000492 <_ZN6MFlash4lockEv>
//		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//		  HAL_Delay(500);
//	  }


	  HAL_Delay(1000);
 8000648:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064c:	f000 fc32 	bl	8000eb4 <HAL_Delay>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000650:	e7cc      	b.n	80005ec <main+0x2c>
 8000652:	bf00      	nop
 8000654:	20000110 	.word	0x20000110
 8000658:	2000002c 	.word	0x2000002c
 800065c:	48000800 	.word	0x48000800

08000660 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b0a6      	sub	sp, #152	; 0x98
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800066a:	2228      	movs	r2, #40	; 0x28
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f003 fcea 	bl	8004048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2258      	movs	r2, #88	; 0x58
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f003 fcdc 	bl	8004048 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 f896 	bl	80017f0 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	bf14      	ite	ne
 80006ca:	2301      	movne	r3, #1
 80006cc:	2300      	moveq	r3, #0
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 80006d4:	f000 fa25 	bl	8000b22 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006f2:	2102      	movs	r1, #2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 f8cf 	bl	8002898 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	bf14      	ite	ne
 8000700:	2301      	movne	r3, #1
 8000702:	2300      	moveq	r3, #0
 8000704:	b2db      	uxtb	r3, r3
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 800070a:	f000 fa0a 	bl	8000b22 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800070e:	2303      	movs	r3, #3
 8000710:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4618      	mov	r0, r3
 800071e:	f002 faf1 	bl	8002d04 <HAL_RCCEx_PeriphCLKConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	bf14      	ite	ne
 8000728:	2301      	movne	r3, #1
 800072a:	2300      	moveq	r3, #0
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8000732:	f000 f9f6 	bl	8000b22 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3798      	adds	r7, #152	; 0x98
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <_ZN5M485E9onReceiveEh>:
int tabIndex = 0;
uint8_t tab[100];
uint16_t cnt = 0, nr = 3;


void M485E::onReceive( uint8_t aCh ){
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	460b      	mov	r3, r1
 800074a:	70fb      	strb	r3, [r7, #3]
  
//  ITM_EVENT8( 1, mRXBuf[0] );

	//DEBUG
	tab[tabIndex] = aCh;
 800074c:	4bb4      	ldr	r3, [pc, #720]	; (8000a20 <_ZN5M485E9onReceiveEh+0x2e0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	49b4      	ldr	r1, [pc, #720]	; (8000a24 <_ZN5M485E9onReceiveEh+0x2e4>)
 8000752:	78fa      	ldrb	r2, [r7, #3]
 8000754:	54ca      	strb	r2, [r1, r3]
	tabIndex += 1;
 8000756:	4bb2      	ldr	r3, [pc, #712]	; (8000a20 <_ZN5M485E9onReceiveEh+0x2e0>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	3301      	adds	r3, #1
 800075c:	4ab0      	ldr	r2, [pc, #704]	; (8000a20 <_ZN5M485E9onReceiveEh+0x2e0>)
 800075e:	6013      	str	r3, [r2, #0]
	if( tabIndex >= 100 ) tabIndex = 0;
 8000760:	4baf      	ldr	r3, [pc, #700]	; (8000a20 <_ZN5M485E9onReceiveEh+0x2e0>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b63      	cmp	r3, #99	; 0x63
 8000766:	dd03      	ble.n	8000770 <_ZN5M485E9onReceiveEh+0x30>
 8000768:	4bad      	ldr	r3, [pc, #692]	; (8000a20 <_ZN5M485E9onReceiveEh+0x2e0>)
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	e000      	b.n	8000772 <_ZN5M485E9onReceiveEh+0x32>




      
INTTOPC_PROC_LABEL:
 8000770:	bf00      	nop
    switch( mRecState ){
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	2b3c      	cmp	r3, #60	; 0x3c
 8000778:	f200 81a8 	bhi.w	8000acc <_ZN5M485E9onReceiveEh+0x38c>
 800077c:	a201      	add	r2, pc, #4	; (adr r2, 8000784 <_ZN5M485E9onReceiveEh+0x44>)
 800077e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000782:	bf00      	nop
 8000784:	08000879 	.word	0x08000879
 8000788:	0800092f 	.word	0x0800092f
 800078c:	08000acd 	.word	0x08000acd
 8000790:	08000acd 	.word	0x08000acd
 8000794:	08000acd 	.word	0x08000acd
 8000798:	08000acd 	.word	0x08000acd
 800079c:	08000acd 	.word	0x08000acd
 80007a0:	08000acd 	.word	0x08000acd
 80007a4:	08000acd 	.word	0x08000acd
 80007a8:	08000acd 	.word	0x08000acd
 80007ac:	0800098d 	.word	0x0800098d
 80007b0:	080009a1 	.word	0x080009a1
 80007b4:	080009c7 	.word	0x080009c7
 80007b8:	08000a09 	.word	0x08000a09
 80007bc:	08000acd 	.word	0x08000acd
 80007c0:	08000acd 	.word	0x08000acd
 80007c4:	08000acd 	.word	0x08000acd
 80007c8:	08000acd 	.word	0x08000acd
 80007cc:	08000acd 	.word	0x08000acd
 80007d0:	08000acd 	.word	0x08000acd
 80007d4:	08000a17 	.word	0x08000a17
 80007d8:	08000acd 	.word	0x08000acd
 80007dc:	08000acd 	.word	0x08000acd
 80007e0:	08000acd 	.word	0x08000acd
 80007e4:	08000acd 	.word	0x08000acd
 80007e8:	08000acd 	.word	0x08000acd
 80007ec:	08000acd 	.word	0x08000acd
 80007f0:	08000acd 	.word	0x08000acd
 80007f4:	08000acd 	.word	0x08000acd
 80007f8:	08000acd 	.word	0x08000acd
 80007fc:	08000a31 	.word	0x08000a31
 8000800:	08000a45 	.word	0x08000a45
 8000804:	08000a65 	.word	0x08000a65
 8000808:	08000aa7 	.word	0x08000aa7
 800080c:	08000acd 	.word	0x08000acd
 8000810:	08000acd 	.word	0x08000acd
 8000814:	08000acd 	.word	0x08000acd
 8000818:	08000acd 	.word	0x08000acd
 800081c:	08000acd 	.word	0x08000acd
 8000820:	08000acd 	.word	0x08000acd
 8000824:	08000ab5 	.word	0x08000ab5
 8000828:	08000acd 	.word	0x08000acd
 800082c:	08000acd 	.word	0x08000acd
 8000830:	08000acd 	.word	0x08000acd
 8000834:	08000acd 	.word	0x08000acd
 8000838:	08000acd 	.word	0x08000acd
 800083c:	08000acd 	.word	0x08000acd
 8000840:	08000acd 	.word	0x08000acd
 8000844:	08000acd 	.word	0x08000acd
 8000848:	08000acd 	.word	0x08000acd
 800084c:	08000abd 	.word	0x08000abd
 8000850:	08000acd 	.word	0x08000acd
 8000854:	08000acd 	.word	0x08000acd
 8000858:	08000acd 	.word	0x08000acd
 800085c:	08000acd 	.word	0x08000acd
 8000860:	08000acd 	.word	0x08000acd
 8000864:	08000acd 	.word	0x08000acd
 8000868:	08000acd 	.word	0x08000acd
 800086c:	08000acd 	.word	0x08000acd
 8000870:	08000acd 	.word	0x08000acd
 8000874:	08000ac5 	.word	0x08000ac5
      // ------------------------------------------------

    case 0:
    	if( aCh == 0xA5 ){
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	2ba5      	cmp	r3, #165	; 0xa5
 800087c:	d105      	bne.n	800088a <_ZN5M485E9onReceiveEh+0x14a>
			mRecState += 1;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	641a      	str	r2, [r3, #64]	; 0x40
			break;}
 8000888:	e12d      	b.n	8000ae6 <_ZN5M485E9onReceiveEh+0x3a6>
		if( aCh == 0xFA){//Test: Wpisz wartość do pamięci
 800088a:	78fb      	ldrb	r3, [r7, #3]
 800088c:	2bfa      	cmp	r3, #250	; 0xfa
 800088e:	d118      	bne.n	80008c2 <_ZN5M485E9onReceiveEh+0x182>
			MFlash::write16(0,0,0xFAFA);
 8000890:	f64f 22fa 	movw	r2, #64250	; 0xfafa
 8000894:	2100      	movs	r1, #0
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff fe13 	bl	80004c2 <_ZN6MFlash7write16Ettt>
			for (int i = 0; i < 6; i++) {
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	2b05      	cmp	r3, #5
 80008a4:	f300 8116 	bgt.w	8000ad4 <_ZN5M485E9onReceiveEh+0x394>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008a8:	2120      	movs	r1, #32
 80008aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ae:	f000 ff85 	bl	80017bc <HAL_GPIO_TogglePin>
			  HAL_Delay(500);
 80008b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008b6:	f000 fafd 	bl	8000eb4 <HAL_Delay>
			for (int i = 0; i < 6; i++) {
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	3301      	adds	r3, #1
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	e7ee      	b.n	80008a0 <_ZN5M485E9onReceiveEh+0x160>
			}
			break;}
		if( aCh == 0xFB){//Test: Skasuj wartość z pamięci (skasuj stronę)
 80008c2:	78fb      	ldrb	r3, [r7, #3]
 80008c4:	2bfb      	cmp	r3, #251	; 0xfb
 80008c6:	d115      	bne.n	80008f4 <_ZN5M485E9onReceiveEh+0x1b4>
			MFlash::erasePage(0);
 80008c8:	2000      	movs	r0, #0
 80008ca:	f7ff fe1b 	bl	8000504 <_ZN6MFlash9erasePageEt>
			for (int i = 0; i < 6; i++) {
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	2b05      	cmp	r3, #5
 80008d6:	f300 80ff 	bgt.w	8000ad8 <_ZN5M485E9onReceiveEh+0x398>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008da:	2120      	movs	r1, #32
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e0:	f000 ff6c 	bl	80017bc <HAL_GPIO_TogglePin>
			  HAL_Delay(500);
 80008e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008e8:	f000 fae4 	bl	8000eb4 <HAL_Delay>
			for (int i = 0; i < 6; i++) {
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	3301      	adds	r3, #1
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	e7ee      	b.n	80008d2 <_ZN5M485E9onReceiveEh+0x192>
			}
			break;}
		if( aCh == 0xFC){//Test: Odczytaj wartość z pamięci
 80008f4:	78fb      	ldrb	r3, [r7, #3]
 80008f6:	2bfc      	cmp	r3, #252	; 0xfc
 80008f8:	d119      	bne.n	800092e <_ZN5M485E9onReceiveEh+0x1ee>
			MFlash::read16(0,0);
 80008fa:	2100      	movs	r1, #0
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff fdaf 	bl	8000460 <_ZN6MFlash6read16Ett>
			for (int i = 0; i < 6; i++) {
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	2b05      	cmp	r3, #5
 800090a:	dc0c      	bgt.n	8000926 <_ZN5M485E9onReceiveEh+0x1e6>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800090c:	2120      	movs	r1, #32
 800090e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000912:	f000 ff53 	bl	80017bc <HAL_GPIO_TogglePin>
			  HAL_Delay(500);
 8000916:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800091a:	f000 facb 	bl	8000eb4 <HAL_Delay>
			for (int i = 0; i < 6; i++) {
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	3301      	adds	r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	e7ef      	b.n	8000906 <_ZN5M485E9onReceiveEh+0x1c6>
			}
			sendTX_testAnswer();
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f000 f8ec 	bl	8000b04 <_ZN5M485E17sendTX_testAnswerEv>
			break;}
 800092c:	e0db      	b.n	8000ae6 <_ZN5M485E9onReceiveEh+0x3a6>

    case 1:
    	mRXFrameBuf[0] = aCh;  // addr
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	78fa      	ldrb	r2, [r7, #3]
 8000932:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    	if(aCh == 0xB0)
 8000936:	78fb      	ldrb	r3, [r7, #3]
 8000938:	2bb0      	cmp	r3, #176	; 0xb0
 800093a:	d103      	bne.n	8000944 <_ZN5M485E9onReceiveEh+0x204>
    		mRecState = 10;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	220a      	movs	r2, #10
 8000940:	641a      	str	r2, [r3, #64]	; 0x40
    		mRecState = 40;
    	else if(aCh == 0xB4)
    		mRecState = 50;
    	else if(aCh == 0xB5)
    		mRecState = 60;
    	break;
 8000942:	e0cb      	b.n	8000adc <_ZN5M485E9onReceiveEh+0x39c>
    	else if(aCh == 0xB1)
 8000944:	78fb      	ldrb	r3, [r7, #3]
 8000946:	2bb1      	cmp	r3, #177	; 0xb1
 8000948:	d103      	bne.n	8000952 <_ZN5M485E9onReceiveEh+0x212>
    		mRecState = 20;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2214      	movs	r2, #20
 800094e:	641a      	str	r2, [r3, #64]	; 0x40
    	break;
 8000950:	e0c4      	b.n	8000adc <_ZN5M485E9onReceiveEh+0x39c>
    	else if(aCh == 0xB2)
 8000952:	78fb      	ldrb	r3, [r7, #3]
 8000954:	2bb2      	cmp	r3, #178	; 0xb2
 8000956:	d103      	bne.n	8000960 <_ZN5M485E9onReceiveEh+0x220>
    		mRecState = 30;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	221e      	movs	r2, #30
 800095c:	641a      	str	r2, [r3, #64]	; 0x40
    	break;
 800095e:	e0bd      	b.n	8000adc <_ZN5M485E9onReceiveEh+0x39c>
    	else if(aCh == 0xB3)
 8000960:	78fb      	ldrb	r3, [r7, #3]
 8000962:	2bb3      	cmp	r3, #179	; 0xb3
 8000964:	d103      	bne.n	800096e <_ZN5M485E9onReceiveEh+0x22e>
    		mRecState = 40;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2228      	movs	r2, #40	; 0x28
 800096a:	641a      	str	r2, [r3, #64]	; 0x40
    	break;
 800096c:	e0b6      	b.n	8000adc <_ZN5M485E9onReceiveEh+0x39c>
    	else if(aCh == 0xB4)
 800096e:	78fb      	ldrb	r3, [r7, #3]
 8000970:	2bb4      	cmp	r3, #180	; 0xb4
 8000972:	d103      	bne.n	800097c <_ZN5M485E9onReceiveEh+0x23c>
    		mRecState = 50;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2232      	movs	r2, #50	; 0x32
 8000978:	641a      	str	r2, [r3, #64]	; 0x40
    	break;
 800097a:	e0af      	b.n	8000adc <_ZN5M485E9onReceiveEh+0x39c>
    	else if(aCh == 0xB5)
 800097c:	78fb      	ldrb	r3, [r7, #3]
 800097e:	2bb5      	cmp	r3, #181	; 0xb5
 8000980:	f040 80ac 	bne.w	8000adc <_ZN5M485E9onReceiveEh+0x39c>
    		mRecState = 60;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	223c      	movs	r2, #60	; 0x3c
 8000988:	641a      	str	r2, [r3, #64]	; 0x40
    	break;
 800098a:	e0a7      	b.n	8000adc <_ZN5M485E9onReceiveEh+0x39c>

    //Bootloader start:
    case 10:
    	mRXFrameBuf[1] = aCh; mRecState+=1; break;//addr
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	78fa      	ldrb	r2, [r7, #3]
 8000990:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	1c5a      	adds	r2, r3, #1
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	641a      	str	r2, [r3, #64]	; 0x40
 800099e:	e0a2      	b.n	8000ae6 <_ZN5M485E9onReceiveEh+0x3a6>
    case 11:
    	mRXFrameBuf[2] = aCh; cnt = mRXFrameBuf[2]; nr = 3; mRecState+=1; break;//data size
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	78fa      	ldrb	r2, [r7, #3]
 80009a4:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <_ZN5M485E9onReceiveEh+0x2e8>)
 80009b2:	801a      	strh	r2, [r3, #0]
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <_ZN5M485E9onReceiveEh+0x2ec>)
 80009b6:	2203      	movs	r2, #3
 80009b8:	801a      	strh	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	641a      	str	r2, [r3, #64]	; 0x40
 80009c4:	e08f      	b.n	8000ae6 <_ZN5M485E9onReceiveEh+0x3a6>
    case 12:
    	mRXFrameBuf[nr] = aCh;
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <_ZN5M485E9onReceiveEh+0x2ec>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4413      	add	r3, r2
 80009d0:	78fa      	ldrb	r2, [r7, #3]
 80009d2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    	nr++;
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <_ZN5M485E9onReceiveEh+0x2ec>)
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	3301      	adds	r3, #1
 80009dc:	b29a      	uxth	r2, r3
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <_ZN5M485E9onReceiveEh+0x2ec>)
 80009e0:	801a      	strh	r2, [r3, #0]
    	cnt--;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <_ZN5M485E9onReceiveEh+0x2e8>)
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <_ZN5M485E9onReceiveEh+0x2e8>)
 80009ec:	801a      	strh	r2, [r3, #0]
    	if(cnt == 0)
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <_ZN5M485E9onReceiveEh+0x2e8>)
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d104      	bne.n	8000a00 <_ZN5M485E9onReceiveEh+0x2c0>
    		 mRecState+=1; nr=3; break;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	1c5a      	adds	r2, r3, #1
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	641a      	str	r2, [r3, #64]	; 0x40
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <_ZN5M485E9onReceiveEh+0x2ec>)
 8000a02:	2203      	movs	r2, #3
 8000a04:	801a      	strh	r2, [r3, #0]
 8000a06:	e06e      	b.n	8000ae6 <_ZN5M485E9onReceiveEh+0x3a6>
    case 13:
    	if(aCh == 0xFF)
 8000a08:	78fb      	ldrb	r3, [r7, #3]
 8000a0a:	2bff      	cmp	r3, #255	; 0xff
 8000a0c:	d168      	bne.n	8000ae0 <_ZN5M485E9onReceiveEh+0x3a0>
    		//TODO FUNKCJA
    	mRecState = 0;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	641a      	str	r2, [r3, #64]	; 0x40
    	break;
 8000a14:	e064      	b.n	8000ae0 <_ZN5M485E9onReceiveEh+0x3a0>

	//Write Flash:
	case 20:
		//TODO
		mRecState = 0;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000a1c:	e063      	b.n	8000ae6 <_ZN5M485E9onReceiveEh+0x3a6>
 8000a1e:	bf00      	nop
 8000a20:	200000a4 	.word	0x200000a4
 8000a24:	200000a8 	.word	0x200000a8
 8000a28:	2000010c 	.word	0x2000010c
 8000a2c:	20000000 	.word	0x20000000

	//Read Flash:
    case 30:
    	mRXFrameBuf[1] = aCh; mRecState+=1; break;//addr
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	78fa      	ldrb	r2, [r7, #3]
 8000a34:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	1c5a      	adds	r2, r3, #1
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	641a      	str	r2, [r3, #64]	; 0x40
 8000a42:	e050      	b.n	8000ae6 <_ZN5M485E9onReceiveEh+0x3a6>
    case 31:
    	mRXFrameBuf[2] = aCh; cnt = mRXFrameBuf[2]; mRecState+=1; break;//data size
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	78fa      	ldrb	r2, [r7, #3]
 8000a48:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	4b29      	ldr	r3, [pc, #164]	; (8000afc <_ZN5M485E9onReceiveEh+0x3bc>)
 8000a56:	801a      	strh	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	1c5a      	adds	r2, r3, #1
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	641a      	str	r2, [r3, #64]	; 0x40
 8000a62:	e040      	b.n	8000ae6 <_ZN5M485E9onReceiveEh+0x3a6>
    case 32:
    	mRXFrameBuf[nr] = aCh;
 8000a64:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <_ZN5M485E9onReceiveEh+0x3c0>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	78fa      	ldrb	r2, [r7, #3]
 8000a70:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    	nr++;
 8000a74:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <_ZN5M485E9onReceiveEh+0x3c0>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <_ZN5M485E9onReceiveEh+0x3c0>)
 8000a7e:	801a      	strh	r2, [r3, #0]
    	cnt--;
 8000a80:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <_ZN5M485E9onReceiveEh+0x3bc>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <_ZN5M485E9onReceiveEh+0x3bc>)
 8000a8a:	801a      	strh	r2, [r3, #0]
    	if(cnt == 0)
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <_ZN5M485E9onReceiveEh+0x3bc>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d104      	bne.n	8000a9e <_ZN5M485E9onReceiveEh+0x35e>
    		 mRecState+=1; nr=3; break;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	1c5a      	adds	r2, r3, #1
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	641a      	str	r2, [r3, #64]	; 0x40
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <_ZN5M485E9onReceiveEh+0x3c0>)
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	801a      	strh	r2, [r3, #0]
 8000aa4:	e01f      	b.n	8000ae6 <_ZN5M485E9onReceiveEh+0x3a6>
    case 33:
    	if(aCh == 0xFF)
 8000aa6:	78fb      	ldrb	r3, [r7, #3]
 8000aa8:	2bff      	cmp	r3, #255	; 0xff
 8000aaa:	d11b      	bne.n	8000ae4 <_ZN5M485E9onReceiveEh+0x3a4>
    		//frameRX_readFlash();


    		//MFlash::read16( mPage, mOffset );

    	mRecState = 0;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	641a      	str	r2, [r3, #64]	; 0x40
    	break;
 8000ab2:	e017      	b.n	8000ae4 <_ZN5M485E9onReceiveEh+0x3a4>

	//Bootloader prog ok:
	case 40:
		//TODO
		mRecState = 0;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000aba:	e014      	b.n	8000ae6 <_ZN5M485E9onReceiveEh+0x3a6>

	//Bootloader stop:
	case 50:
		//TODO
		mRecState = 0;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000ac2:	e010      	b.n	8000ae6 <_ZN5M485E9onReceiveEh+0x3a6>

	//Bootloader app start:
	case 60:
		//TODO
		mRecState = 0;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000aca:	e00c      	b.n	8000ae6 <_ZN5M485E9onReceiveEh+0x3a6>


      // -------------------------------	
     default: {  
        mRecState = 0;	
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	641a      	str	r2, [r3, #64]	; 0x40
        goto INTTOPC_PROC_LABEL; }; 
 8000ad2:	e64e      	b.n	8000772 <_ZN5M485E9onReceiveEh+0x32>
			break;}
 8000ad4:	bf00      	nop
 8000ad6:	e006      	b.n	8000ae6 <_ZN5M485E9onReceiveEh+0x3a6>
			break;}
 8000ad8:	bf00      	nop
 8000ada:	e004      	b.n	8000ae6 <_ZN5M485E9onReceiveEh+0x3a6>
    	break;
 8000adc:	bf00      	nop
 8000ade:	e002      	b.n	8000ae6 <_ZN5M485E9onReceiveEh+0x3a6>
    	break;
 8000ae0:	bf00      	nop
 8000ae2:	e000      	b.n	8000ae6 <_ZN5M485E9onReceiveEh+0x3a6>
    	break;
 8000ae4:	bf00      	nop
        break;
    };      
    
    // --- RESET WDT ---------------------
    if( mRecState == 0 )
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d102      	bne.n	8000af4 <_ZN5M485E9onReceiveEh+0x3b4>
       mFrameTimeOutCnt = 20; // 100 = 1s
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2214      	movs	r2, #20
 8000af2:	645a      	str	r2, [r3, #68]	; 0x44
    
 /*   uint16_t wrt = (mRecState<<8) | (aCh<<0);*/



}//-------------------------------------------------------------------------
 8000af4:	bf00      	nop
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2000010c 	.word	0x2000010c
 8000b00:	20000000 	.word	0x20000000

08000b04 <_ZN5M485E17sendTX_testAnswerEv>:

/*########################################################################################*/


/// FRAME ID
void M485E::sendTX_testAnswer(){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

    // --- zmienne --------------------------------------

    // --- wysylanie ------------------------------------
    this->bufAdd( 0xFD );
 8000b0c:	21fd      	movs	r1, #253	; 0xfd
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff fbfc 	bl	800030c <_ZN5M485E6bufAddEh>
    this->Send_IT();
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff fb71 	bl	80001fc <_ZN5M485E7Send_ITEv>

}//
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b26:	b672      	cpsid	i
}
 8000b28:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <Error_Handler+0x8>

08000b2c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d107      	bne.n	8000b4c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d102      	bne.n	8000b4c <_Z41__static_initialization_and_destruction_0ii+0x20>
    
    };//************************************************************************************



    M485E  g485E;
 8000b46:	4803      	ldr	r0, [pc, #12]	; (8000b54 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000b48:	f7ff fc50 	bl	80003ec <_ZN5M485EC1Ev>
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2000002c 	.word	0x2000002c

08000b58 <_GLOBAL__sub_I_g485E>:
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff ffe3 	bl	8000b2c <_Z41__static_initialization_and_destruction_0ii>
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_MspInit+0x44>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <HAL_MspInit+0x44>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6193      	str	r3, [r2, #24]
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <HAL_MspInit+0x44>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_MspInit+0x44>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_MspInit+0x44>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	61d3      	str	r3, [r2, #28]
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_MspInit+0x44>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b9e:	2007      	movs	r0, #7
 8000ba0:	f000 fa5e 	bl	8001060 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <HAL_UART_MspInit+0x7c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d128      	bne.n	8000c24 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd2:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <HAL_UART_MspInit+0x80>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	4a16      	ldr	r2, [pc, #88]	; (8000c30 <HAL_UART_MspInit+0x80>)
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bdc:	61d3      	str	r3, [r2, #28]
 8000bde:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_UART_MspInit+0x80>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <HAL_UART_MspInit+0x80>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	4a10      	ldr	r2, [pc, #64]	; (8000c30 <HAL_UART_MspInit+0x80>)
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf4:	6153      	str	r3, [r2, #20]
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <HAL_UART_MspInit+0x80>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c02:	230c      	movs	r3, #12
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c12:	2307      	movs	r3, #7
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c20:	f000 fc2a 	bl	8001478 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	; 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40004400 	.word	0x40004400
 8000c30:	40021000 	.word	0x40021000

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <NMI_Handler+0x4>

08000c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <MemManage_Handler+0x4>

08000c46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c80:	f000 f8f8 	bl	8000e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <SystemInit+0x28>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c92:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <SystemInit+0x28>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <SystemInit+0x28>)
 8000c9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ca2:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_USART1_UART_Init+0x68>)
 8000cba:	4a19      	ldr	r2, [pc, #100]	; (8000d20 <MX_USART1_UART_Init+0x6c>)
 8000cbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <MX_USART1_UART_Init+0x68>)
 8000cc0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000cc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MX_USART1_UART_Init+0x68>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_USART1_UART_Init+0x68>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_USART1_UART_Init+0x68>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <MX_USART1_UART_Init+0x68>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_USART1_UART_Init+0x68>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <MX_USART1_UART_Init+0x68>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_USART1_UART_Init+0x68>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <MX_USART1_UART_Init+0x68>)
 8000cf2:	2230      	movs	r2, #48	; 0x30
 8000cf4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_USART1_UART_Init+0x68>)
 8000cf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cfc:	639a      	str	r2, [r3, #56]	; 0x38
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <MX_USART1_UART_Init+0x68>)
 8000d00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d04:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_USART1_UART_Init+0x68>)
 8000d08:	f002 fa1a 	bl	8003140 <HAL_UART_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 8000d12:	f7ff ff06 	bl	8000b22 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000110 	.word	0x20000110
 8000d20:	40013800 	.word	0x40013800

08000d24 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d28:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <MX_USART2_UART_Init+0x68>)
 8000d2a:	4a19      	ldr	r2, [pc, #100]	; (8000d90 <MX_USART2_UART_Init+0x6c>)
 8000d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <MX_USART2_UART_Init+0x68>)
 8000d30:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000d34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <MX_USART2_UART_Init+0x68>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <MX_USART2_UART_Init+0x68>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <MX_USART2_UART_Init+0x68>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d48:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <MX_USART2_UART_Init+0x68>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MX_USART2_UART_Init+0x68>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d54:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <MX_USART2_UART_Init+0x68>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <MX_USART2_UART_Init+0x68>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <MX_USART2_UART_Init+0x68>)
 8000d62:	2230      	movs	r2, #48	; 0x30
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <MX_USART2_UART_Init+0x68>)
 8000d68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d6c:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <MX_USART2_UART_Init+0x68>)
 8000d70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d74:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_USART2_UART_Init+0x68>)
 8000d78:	f002 f9e2 	bl	8003140 <HAL_UART_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART2_UART_Init+0x62>
  {
    Error_Handler();
 8000d82:	f7ff fece 	bl	8000b22 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000194 	.word	0x20000194
 8000d90:	40004400 	.word	0x40004400

08000d94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d98:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d9a:	490e      	ldr	r1, [pc, #56]	; (8000dd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <LoopForever+0xe>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000db0:	4c0b      	ldr	r4, [pc, #44]	; (8000de0 <LoopForever+0x16>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dbe:	f7ff ff63 	bl	8000c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f003 f91d 	bl	8004000 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dc6:	f7ff fbfb 	bl	80005c0 <main>

08000dca <LoopForever>:

LoopForever:
    b LoopForever
 8000dca:	e7fe      	b.n	8000dca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dcc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000dd8:	080040b4 	.word	0x080040b4
  ldr r2, =_sbss
 8000ddc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000de0:	20000240 	.word	0x20000240

08000de4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC1_2_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_Init+0x28>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <HAL_Init+0x28>)
 8000df2:	f043 0310 	orr.w	r3, r3, #16
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 f931 	bl	8001060 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f000 f808 	bl	8000e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e04:	f7ff feb0 	bl	8000b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40022000 	.word	0x40022000

08000e14 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_InitTick+0x54>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_InitTick+0x58>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f93b 	bl	80010ae <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00e      	b.n	8000e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d80a      	bhi.n	8000e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f000 f911 	bl	8001076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e54:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <HAL_InitTick+0x5c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e000      	b.n	8000e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	2000000c 	.word	0x2000000c
 8000e70:	20000008 	.word	0x20000008

08000e74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	2000000c 	.word	0x2000000c
 8000e98:	20000218 	.word	0x20000218

08000e9c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000218 	.word	0x20000218

08000eb4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ebc:	f7ff ffee 	bl	8000e9c <HAL_GetTick>
 8000ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ecc:	d005      	beq.n	8000eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_Delay+0x44>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000eda:	bf00      	nop
 8000edc:	f7ff ffde 	bl	8000e9c <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d8f7      	bhi.n	8000edc <HAL_Delay+0x28>
  {
  }
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2000000c 	.word	0x2000000c

08000efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	; (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	; (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	; 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800102c:	d301      	bcc.n	8001032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102e:	2301      	movs	r3, #1
 8001030:	e00f      	b.n	8001052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <SysTick_Config+0x40>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103a:	210f      	movs	r1, #15
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f7ff ff8e 	bl	8000f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <SysTick_Config+0x40>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <SysTick_Config+0x40>)
 800104c:	2207      	movs	r2, #7
 800104e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	e000e010 	.word	0xe000e010

08001060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff47 	bl	8000efc <__NVIC_SetPriorityGrouping>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001088:	f7ff ff5c 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 800108c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	6978      	ldr	r0, [r7, #20]
 8001094:	f7ff ff8e 	bl	8000fb4 <NVIC_EncodePriority>
 8001098:	4602      	mov	r2, r0
 800109a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff5d 	bl	8000f60 <__NVIC_SetPriority>
}
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ffb0 	bl	800101c <SysTick_Config>
 80010bc:	4603      	mov	r3, r0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80010c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80010da:	2300      	movs	r3, #0
 80010dc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80010de:	2300      	movs	r3, #0
 80010e0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80010e2:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <HAL_FLASH_Program+0xd8>)
 80010e4:	7e1b      	ldrb	r3, [r3, #24]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d101      	bne.n	80010ee <HAL_FLASH_Program+0x26>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e054      	b.n	8001198 <HAL_FLASH_Program+0xd0>
 80010ee:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <HAL_FLASH_Program+0xd8>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80010f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010f8:	f000 f8a8 	bl	800124c <FLASH_WaitForLastOperation>
 80010fc:	4603      	mov	r3, r0
 80010fe:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d144      	bne.n	8001190 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d102      	bne.n	8001112 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800110c:	2301      	movs	r3, #1
 800110e:	757b      	strb	r3, [r7, #21]
 8001110:	e007      	b.n	8001122 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d102      	bne.n	800111e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001118:	2302      	movs	r3, #2
 800111a:	757b      	strb	r3, [r7, #21]
 800111c:	e001      	b.n	8001122 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800111e:	2304      	movs	r3, #4
 8001120:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001122:	2300      	movs	r3, #0
 8001124:	75bb      	strb	r3, [r7, #22]
 8001126:	e02d      	b.n	8001184 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001128:	7dbb      	ldrb	r3, [r7, #22]
 800112a:	005a      	lsls	r2, r3, #1
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	eb02 0c03 	add.w	ip, r2, r3
 8001132:	7dbb      	ldrb	r3, [r7, #22]
 8001134:	0119      	lsls	r1, r3, #4
 8001136:	e9d7 2300 	ldrd	r2, r3, [r7]
 800113a:	f1c1 0620 	rsb	r6, r1, #32
 800113e:	f1a1 0020 	sub.w	r0, r1, #32
 8001142:	fa22 f401 	lsr.w	r4, r2, r1
 8001146:	fa03 f606 	lsl.w	r6, r3, r6
 800114a:	4334      	orrs	r4, r6
 800114c:	fa23 f000 	lsr.w	r0, r3, r0
 8001150:	4304      	orrs	r4, r0
 8001152:	fa23 f501 	lsr.w	r5, r3, r1
 8001156:	b2a3      	uxth	r3, r4
 8001158:	4619      	mov	r1, r3
 800115a:	4660      	mov	r0, ip
 800115c:	f000 f85a 	bl	8001214 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001160:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001164:	f000 f872 	bl	800124c <FLASH_WaitForLastOperation>
 8001168:	4603      	mov	r3, r0
 800116a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800116c:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <HAL_FLASH_Program+0xdc>)
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	4a0c      	ldr	r2, [pc, #48]	; (80011a4 <HAL_FLASH_Program+0xdc>)
 8001172:	f023 0301 	bic.w	r3, r3, #1
 8001176:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8001178:	7dfb      	ldrb	r3, [r7, #23]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d107      	bne.n	800118e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800117e:	7dbb      	ldrb	r3, [r7, #22]
 8001180:	3301      	adds	r3, #1
 8001182:	75bb      	strb	r3, [r7, #22]
 8001184:	7dba      	ldrb	r2, [r7, #22]
 8001186:	7d7b      	ldrb	r3, [r7, #21]
 8001188:	429a      	cmp	r2, r3
 800118a:	d3cd      	bcc.n	8001128 <HAL_FLASH_Program+0x60>
 800118c:	e000      	b.n	8001190 <HAL_FLASH_Program+0xc8>
      {
        break;
 800118e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <HAL_FLASH_Program+0xd8>)
 8001192:	2200      	movs	r2, #0
 8001194:	761a      	strb	r2, [r3, #24]

  return status;
 8001196:	7dfb      	ldrb	r3, [r7, #23]
}
 8001198:	4618      	mov	r0, r3
 800119a:	371c      	adds	r7, #28
 800119c:	46bd      	mov	sp, r7
 800119e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a0:	20000220 	.word	0x20000220
 80011a4:	40022000 	.word	0x40022000

080011a8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <HAL_FLASH_Unlock+0x40>)
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00d      	beq.n	80011da <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_FLASH_Unlock+0x40>)
 80011c0:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <HAL_FLASH_Unlock+0x44>)
 80011c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_FLASH_Unlock+0x40>)
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <HAL_FLASH_Unlock+0x48>)
 80011c8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <HAL_FLASH_Unlock+0x40>)
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80011da:	79fb      	ldrb	r3, [r7, #7]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	40022000 	.word	0x40022000
 80011ec:	45670123 	.word	0x45670123
 80011f0:	cdef89ab 	.word	0xcdef89ab

080011f4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_FLASH_Lock+0x1c>)
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <HAL_FLASH_Lock+0x1c>)
 80011fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001202:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	40022000 	.word	0x40022000

08001214 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <FLASH_Program_HalfWord+0x30>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <FLASH_Program_HalfWord+0x34>)
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	4a07      	ldr	r2, [pc, #28]	; (8001248 <FLASH_Program_HalfWord+0x34>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	887a      	ldrh	r2, [r7, #2]
 8001236:	801a      	strh	r2, [r3, #0]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	20000220 	.word	0x20000220
 8001248:	40022000 	.word	0x40022000

0800124c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001254:	f7ff fe22 	bl	8000e9c <HAL_GetTick>
 8001258:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800125a:	e010      	b.n	800127e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001262:	d00c      	beq.n	800127e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <FLASH_WaitForLastOperation+0x2e>
 800126a:	f7ff fe17 	bl	8000e9c <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	429a      	cmp	r2, r3
 8001278:	d201      	bcs.n	800127e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e01f      	b.n	80012be <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <FLASH_WaitForLastOperation+0x7c>)
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b01      	cmp	r3, #1
 8001288:	d0e8      	beq.n	800125c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <FLASH_WaitForLastOperation+0x7c>)
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	f003 0320 	and.w	r3, r3, #32
 8001292:	2b20      	cmp	r3, #32
 8001294:	d102      	bne.n	800129c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <FLASH_WaitForLastOperation+0x7c>)
 8001298:	2220      	movs	r2, #32
 800129a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <FLASH_WaitForLastOperation+0x7c>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	f003 0310 	and.w	r3, r3, #16
 80012a4:	2b10      	cmp	r3, #16
 80012a6:	d005      	beq.n	80012b4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <FLASH_WaitForLastOperation+0x7c>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80012b0:	2b04      	cmp	r3, #4
 80012b2:	d103      	bne.n	80012bc <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80012b4:	f000 f80a 	bl	80012cc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e000      	b.n	80012be <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40022000 	.word	0x40022000

080012cc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <FLASH_SetErrorCode+0x5c>)
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f003 0310 	and.w	r3, r3, #16
 80012de:	2b10      	cmp	r3, #16
 80012e0:	d109      	bne.n	80012f6 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <FLASH_SetErrorCode+0x60>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	f043 0302 	orr.w	r3, r3, #2
 80012ea:	4a10      	ldr	r2, [pc, #64]	; (800132c <FLASH_SetErrorCode+0x60>)
 80012ec:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f043 0310 	orr.w	r3, r3, #16
 80012f4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <FLASH_SetErrorCode+0x5c>)
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d109      	bne.n	8001316 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <FLASH_SetErrorCode+0x60>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <FLASH_SetErrorCode+0x60>)
 800130c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001316:	4a04      	ldr	r2, [pc, #16]	; (8001328 <FLASH_SetErrorCode+0x5c>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	60d3      	str	r3, [r2, #12]
}  
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	40022000 	.word	0x40022000
 800132c:	20000220 	.word	0x20000220

08001330 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001342:	4b2e      	ldr	r3, [pc, #184]	; (80013fc <HAL_FLASHEx_Erase+0xcc>)
 8001344:	7e1b      	ldrb	r3, [r3, #24]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <HAL_FLASHEx_Erase+0x1e>
 800134a:	2302      	movs	r3, #2
 800134c:	e052      	b.n	80013f4 <HAL_FLASHEx_Erase+0xc4>
 800134e:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <HAL_FLASHEx_Erase+0xcc>)
 8001350:	2201      	movs	r2, #1
 8001352:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d115      	bne.n	8001388 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800135c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001360:	f7ff ff74 	bl	800124c <FLASH_WaitForLastOperation>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d140      	bne.n	80013ec <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 800136a:	f000 f84b 	bl	8001404 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800136e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001372:	f7ff ff6b 	bl	800124c <FLASH_WaitForLastOperation>
 8001376:	4603      	mov	r3, r0
 8001378:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800137a:	4b21      	ldr	r3, [pc, #132]	; (8001400 <HAL_FLASHEx_Erase+0xd0>)
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	4a20      	ldr	r2, [pc, #128]	; (8001400 <HAL_FLASHEx_Erase+0xd0>)
 8001380:	f023 0304 	bic.w	r3, r3, #4
 8001384:	6113      	str	r3, [r2, #16]
 8001386:	e031      	b.n	80013ec <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001388:	f24c 3050 	movw	r0, #50000	; 0xc350
 800138c:	f7ff ff5e 	bl	800124c <FLASH_WaitForLastOperation>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d12a      	bne.n	80013ec <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	e019      	b.n	80013da <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80013a6:	68b8      	ldr	r0, [r7, #8]
 80013a8:	f000 f846 	bl	8001438 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013b0:	f7ff ff4c 	bl	800124c <FLASH_WaitForLastOperation>
 80013b4:	4603      	mov	r3, r0
 80013b6:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <HAL_FLASHEx_Erase+0xd0>)
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	4a10      	ldr	r2, [pc, #64]	; (8001400 <HAL_FLASHEx_Erase+0xd0>)
 80013be:	f023 0302 	bic.w	r3, r3, #2
 80013c2:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	601a      	str	r2, [r3, #0]
            break;
 80013d0:	e00c      	b.n	80013ec <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013d8:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	02da      	lsls	r2, r3, #11
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d3dc      	bcc.n	80013a6 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80013ec:	4b03      	ldr	r3, [pc, #12]	; (80013fc <HAL_FLASHEx_Erase+0xcc>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	761a      	strb	r2, [r3, #24]

  return status;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000220 	.word	0x20000220
 8001400:	40022000 	.word	0x40022000

08001404 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <FLASH_MassErase+0x2c>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <FLASH_MassErase+0x30>)
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	4a08      	ldr	r2, [pc, #32]	; (8001434 <FLASH_MassErase+0x30>)
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <FLASH_MassErase+0x30>)
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	4a05      	ldr	r2, [pc, #20]	; (8001434 <FLASH_MassErase+0x30>)
 8001420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001424:	6113      	str	r3, [r2, #16]
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	20000220 	.word	0x20000220
 8001434:	40022000 	.word	0x40022000

08001438 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <FLASH_PageErase+0x38>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <FLASH_PageErase+0x3c>)
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <FLASH_PageErase+0x3c>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <FLASH_PageErase+0x3c>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <FLASH_PageErase+0x3c>)
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	4a05      	ldr	r2, [pc, #20]	; (8001474 <FLASH_PageErase+0x3c>)
 800145e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001462:	6113      	str	r3, [r2, #16]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	20000220 	.word	0x20000220
 8001474:	40022000 	.word	0x40022000

08001478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001486:	e160      	b.n	800174a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	2101      	movs	r1, #1
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	4013      	ands	r3, r2
 8001496:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 8152 	beq.w	8001744 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d005      	beq.n	80014b8 <HAL_GPIO_Init+0x40>
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d130      	bne.n	800151a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ee:	2201      	movs	r2, #1
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	091b      	lsrs	r3, r3, #4
 8001504:	f003 0201 	and.w	r2, r3, #1
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	2b03      	cmp	r3, #3
 8001524:	d017      	beq.n	8001556 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	2203      	movs	r2, #3
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d123      	bne.n	80015aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	08da      	lsrs	r2, r3, #3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3208      	adds	r2, #8
 800156a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	220f      	movs	r2, #15
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	08da      	lsrs	r2, r3, #3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3208      	adds	r2, #8
 80015a4:	6939      	ldr	r1, [r7, #16]
 80015a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 0203 	and.w	r2, r3, #3
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80ac 	beq.w	8001744 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ec:	4b5e      	ldr	r3, [pc, #376]	; (8001768 <HAL_GPIO_Init+0x2f0>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	4a5d      	ldr	r2, [pc, #372]	; (8001768 <HAL_GPIO_Init+0x2f0>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6193      	str	r3, [r2, #24]
 80015f8:	4b5b      	ldr	r3, [pc, #364]	; (8001768 <HAL_GPIO_Init+0x2f0>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001604:	4a59      	ldr	r2, [pc, #356]	; (800176c <HAL_GPIO_Init+0x2f4>)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	3302      	adds	r3, #2
 800160c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	220f      	movs	r2, #15
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800162e:	d025      	beq.n	800167c <HAL_GPIO_Init+0x204>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a4f      	ldr	r2, [pc, #316]	; (8001770 <HAL_GPIO_Init+0x2f8>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d01f      	beq.n	8001678 <HAL_GPIO_Init+0x200>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a4e      	ldr	r2, [pc, #312]	; (8001774 <HAL_GPIO_Init+0x2fc>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d019      	beq.n	8001674 <HAL_GPIO_Init+0x1fc>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a4d      	ldr	r2, [pc, #308]	; (8001778 <HAL_GPIO_Init+0x300>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d013      	beq.n	8001670 <HAL_GPIO_Init+0x1f8>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a4c      	ldr	r2, [pc, #304]	; (800177c <HAL_GPIO_Init+0x304>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d00d      	beq.n	800166c <HAL_GPIO_Init+0x1f4>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a4b      	ldr	r2, [pc, #300]	; (8001780 <HAL_GPIO_Init+0x308>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d007      	beq.n	8001668 <HAL_GPIO_Init+0x1f0>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a4a      	ldr	r2, [pc, #296]	; (8001784 <HAL_GPIO_Init+0x30c>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d101      	bne.n	8001664 <HAL_GPIO_Init+0x1ec>
 8001660:	2306      	movs	r3, #6
 8001662:	e00c      	b.n	800167e <HAL_GPIO_Init+0x206>
 8001664:	2307      	movs	r3, #7
 8001666:	e00a      	b.n	800167e <HAL_GPIO_Init+0x206>
 8001668:	2305      	movs	r3, #5
 800166a:	e008      	b.n	800167e <HAL_GPIO_Init+0x206>
 800166c:	2304      	movs	r3, #4
 800166e:	e006      	b.n	800167e <HAL_GPIO_Init+0x206>
 8001670:	2303      	movs	r3, #3
 8001672:	e004      	b.n	800167e <HAL_GPIO_Init+0x206>
 8001674:	2302      	movs	r3, #2
 8001676:	e002      	b.n	800167e <HAL_GPIO_Init+0x206>
 8001678:	2301      	movs	r3, #1
 800167a:	e000      	b.n	800167e <HAL_GPIO_Init+0x206>
 800167c:	2300      	movs	r3, #0
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	f002 0203 	and.w	r2, r2, #3
 8001684:	0092      	lsls	r2, r2, #2
 8001686:	4093      	lsls	r3, r2
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800168e:	4937      	ldr	r1, [pc, #220]	; (800176c <HAL_GPIO_Init+0x2f4>)
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	089b      	lsrs	r3, r3, #2
 8001694:	3302      	adds	r3, #2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800169c:	4b3a      	ldr	r3, [pc, #232]	; (8001788 <HAL_GPIO_Init+0x310>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016c0:	4a31      	ldr	r2, [pc, #196]	; (8001788 <HAL_GPIO_Init+0x310>)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016c6:	4b30      	ldr	r3, [pc, #192]	; (8001788 <HAL_GPIO_Init+0x310>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016ea:	4a27      	ldr	r2, [pc, #156]	; (8001788 <HAL_GPIO_Init+0x310>)
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016f0:	4b25      	ldr	r3, [pc, #148]	; (8001788 <HAL_GPIO_Init+0x310>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001714:	4a1c      	ldr	r2, [pc, #112]	; (8001788 <HAL_GPIO_Init+0x310>)
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800171a:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <HAL_GPIO_Init+0x310>)
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	43db      	mvns	r3, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <HAL_GPIO_Init+0x310>)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3301      	adds	r3, #1
 8001748:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	fa22 f303 	lsr.w	r3, r2, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	f47f ae97 	bne.w	8001488 <HAL_GPIO_Init+0x10>
  }
}
 800175a:	bf00      	nop
 800175c:	bf00      	nop
 800175e:	371c      	adds	r7, #28
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	40021000 	.word	0x40021000
 800176c:	40010000 	.word	0x40010000
 8001770:	48000400 	.word	0x48000400
 8001774:	48000800 	.word	0x48000800
 8001778:	48000c00 	.word	0x48000c00
 800177c:	48001000 	.word	0x48001000
 8001780:	48001400 	.word	0x48001400
 8001784:	48001800 	.word	0x48001800
 8001788:	40010400 	.word	0x40010400

0800178c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691a      	ldr	r2, [r3, #16]
 800179c:	887b      	ldrh	r3, [r7, #2]
 800179e:	4013      	ands	r3, r2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d002      	beq.n	80017aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	e001      	b.n	80017ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017ce:	887a      	ldrh	r2, [r7, #2]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4013      	ands	r3, r2
 80017d4:	041a      	lsls	r2, r3, #16
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	43d9      	mvns	r1, r3
 80017da:	887b      	ldrh	r3, [r7, #2]
 80017dc:	400b      	ands	r3, r1
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	619a      	str	r2, [r3, #24]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001800:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001802:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001806:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	f001 b83a 	b.w	800288a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001816:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800181a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 816f 	beq.w	8001b0a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800182c:	4bb5      	ldr	r3, [pc, #724]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b04      	cmp	r3, #4
 8001836:	d00c      	beq.n	8001852 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001838:	4bb2      	ldr	r3, [pc, #712]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 030c 	and.w	r3, r3, #12
 8001840:	2b08      	cmp	r3, #8
 8001842:	d15c      	bne.n	80018fe <HAL_RCC_OscConfig+0x10e>
 8001844:	4baf      	ldr	r3, [pc, #700]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800184c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001850:	d155      	bne.n	80018fe <HAL_RCC_OscConfig+0x10e>
 8001852:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001856:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800185e:	fa93 f3a3 	rbit	r3, r3
 8001862:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001866:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186a:	fab3 f383 	clz	r3, r3
 800186e:	b2db      	uxtb	r3, r3
 8001870:	095b      	lsrs	r3, r3, #5
 8001872:	b2db      	uxtb	r3, r3
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b01      	cmp	r3, #1
 800187c:	d102      	bne.n	8001884 <HAL_RCC_OscConfig+0x94>
 800187e:	4ba1      	ldr	r3, [pc, #644]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	e015      	b.n	80018b0 <HAL_RCC_OscConfig+0xc0>
 8001884:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001888:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001890:	fa93 f3a3 	rbit	r3, r3
 8001894:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001898:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800189c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80018a0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80018a4:	fa93 f3a3 	rbit	r3, r3
 80018a8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80018ac:	4b95      	ldr	r3, [pc, #596]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018b4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80018b8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80018bc:	fa92 f2a2 	rbit	r2, r2
 80018c0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80018c4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80018c8:	fab2 f282 	clz	r2, r2
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	f042 0220 	orr.w	r2, r2, #32
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	f002 021f 	and.w	r2, r2, #31
 80018d8:	2101      	movs	r1, #1
 80018da:	fa01 f202 	lsl.w	r2, r1, r2
 80018de:	4013      	ands	r3, r2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 8111 	beq.w	8001b08 <HAL_RCC_OscConfig+0x318>
 80018e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 8108 	bne.w	8001b08 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	f000 bfc6 	b.w	800288a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001902:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800190e:	d106      	bne.n	800191e <HAL_RCC_OscConfig+0x12e>
 8001910:	4b7c      	ldr	r3, [pc, #496]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a7b      	ldr	r2, [pc, #492]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 8001916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	e036      	b.n	800198c <HAL_RCC_OscConfig+0x19c>
 800191e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001922:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10c      	bne.n	8001948 <HAL_RCC_OscConfig+0x158>
 800192e:	4b75      	ldr	r3, [pc, #468]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a74      	ldr	r2, [pc, #464]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 8001934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	4b72      	ldr	r3, [pc, #456]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a71      	ldr	r2, [pc, #452]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 8001940:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e021      	b.n	800198c <HAL_RCC_OscConfig+0x19c>
 8001948:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800194c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0x184>
 800195a:	4b6a      	ldr	r3, [pc, #424]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a69      	ldr	r2, [pc, #420]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 8001960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	4b67      	ldr	r3, [pc, #412]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a66      	ldr	r2, [pc, #408]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 800196c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e00b      	b.n	800198c <HAL_RCC_OscConfig+0x19c>
 8001974:	4b63      	ldr	r3, [pc, #396]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a62      	ldr	r2, [pc, #392]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 800197a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	4b60      	ldr	r3, [pc, #384]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a5f      	ldr	r2, [pc, #380]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 8001986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800198c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001990:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d059      	beq.n	8001a50 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff fa7e 	bl	8000e9c <HAL_GetTick>
 80019a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a4:	e00a      	b.n	80019bc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a6:	f7ff fa79 	bl	8000e9c <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b64      	cmp	r3, #100	; 0x64
 80019b4:	d902      	bls.n	80019bc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	f000 bf67 	b.w	800288a <HAL_RCC_OscConfig+0x109a>
 80019bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019c0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80019c8:	fa93 f3a3 	rbit	r3, r3
 80019cc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80019d0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d102      	bne.n	80019ee <HAL_RCC_OscConfig+0x1fe>
 80019e8:	4b46      	ldr	r3, [pc, #280]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	e015      	b.n	8001a1a <HAL_RCC_OscConfig+0x22a>
 80019ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019f2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80019fa:	fa93 f3a3 	rbit	r3, r3
 80019fe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001a02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a06:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001a0a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a16:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a1e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001a22:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001a26:	fa92 f2a2 	rbit	r2, r2
 8001a2a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001a2e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a32:	fab2 f282 	clz	r2, r2
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	f042 0220 	orr.w	r2, r2, #32
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	f002 021f 	and.w	r2, r2, #31
 8001a42:	2101      	movs	r1, #1
 8001a44:	fa01 f202 	lsl.w	r2, r1, r2
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0ab      	beq.n	80019a6 <HAL_RCC_OscConfig+0x1b6>
 8001a4e:	e05c      	b.n	8001b0a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7ff fa24 	bl	8000e9c <HAL_GetTick>
 8001a54:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a58:	e00a      	b.n	8001a70 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a5a:	f7ff fa1f 	bl	8000e9c <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	; 0x64
 8001a68:	d902      	bls.n	8001a70 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	f000 bf0d 	b.w	800288a <HAL_RCC_OscConfig+0x109a>
 8001a70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a74:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001a7c:	fa93 f3a3 	rbit	r3, r3
 8001a80:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001a84:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a88:	fab3 f383 	clz	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d102      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x2b2>
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	e015      	b.n	8001ace <HAL_RCC_OscConfig+0x2de>
 8001aa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aaa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001aae:	fa93 f3a3 	rbit	r3, r3
 8001ab2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001ab6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001abe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001aca:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <HAL_RCC_OscConfig+0x314>)
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ad2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001ad6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001ada:	fa92 f2a2 	rbit	r2, r2
 8001ade:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001ae2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001ae6:	fab2 f282 	clz	r2, r2
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	f042 0220 	orr.w	r2, r2, #32
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	f002 021f 	and.w	r2, r2, #31
 8001af6:	2101      	movs	r1, #1
 8001af8:	fa01 f202 	lsl.w	r2, r1, r2
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1ab      	bne.n	8001a5a <HAL_RCC_OscConfig+0x26a>
 8001b02:	e002      	b.n	8001b0a <HAL_RCC_OscConfig+0x31a>
 8001b04:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 817f 	beq.w	8001e1e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b20:	4ba7      	ldr	r3, [pc, #668]	; (8001dc0 <HAL_RCC_OscConfig+0x5d0>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00c      	beq.n	8001b46 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b2c:	4ba4      	ldr	r3, [pc, #656]	; (8001dc0 <HAL_RCC_OscConfig+0x5d0>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d173      	bne.n	8001c20 <HAL_RCC_OscConfig+0x430>
 8001b38:	4ba1      	ldr	r3, [pc, #644]	; (8001dc0 <HAL_RCC_OscConfig+0x5d0>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b44:	d16c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x430>
 8001b46:	2302      	movs	r3, #2
 8001b48:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001b58:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5c:	fab3 f383 	clz	r3, r3
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	095b      	lsrs	r3, r3, #5
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d102      	bne.n	8001b76 <HAL_RCC_OscConfig+0x386>
 8001b70:	4b93      	ldr	r3, [pc, #588]	; (8001dc0 <HAL_RCC_OscConfig+0x5d0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	e013      	b.n	8001b9e <HAL_RCC_OscConfig+0x3ae>
 8001b76:	2302      	movs	r3, #2
 8001b78:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001b80:	fa93 f3a3 	rbit	r3, r3
 8001b84:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001b88:	2302      	movs	r3, #2
 8001b8a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001b8e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001b92:	fa93 f3a3 	rbit	r3, r3
 8001b96:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b9a:	4b89      	ldr	r3, [pc, #548]	; (8001dc0 <HAL_RCC_OscConfig+0x5d0>)
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001ba4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001ba8:	fa92 f2a2 	rbit	r2, r2
 8001bac:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001bb0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001bb4:	fab2 f282 	clz	r2, r2
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	f042 0220 	orr.w	r2, r2, #32
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	f002 021f 	and.w	r2, r2, #31
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00a      	beq.n	8001be6 <HAL_RCC_OscConfig+0x3f6>
 8001bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d002      	beq.n	8001be6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	f000 be52 	b.w	800288a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be6:	4b76      	ldr	r3, [pc, #472]	; (8001dc0 <HAL_RCC_OscConfig+0x5d0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	21f8      	movs	r1, #248	; 0xf8
 8001bfc:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c00:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001c04:	fa91 f1a1 	rbit	r1, r1
 8001c08:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001c0c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001c10:	fab1 f181 	clz	r1, r1
 8001c14:	b2c9      	uxtb	r1, r1
 8001c16:	408b      	lsls	r3, r1
 8001c18:	4969      	ldr	r1, [pc, #420]	; (8001dc0 <HAL_RCC_OscConfig+0x5d0>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1e:	e0fe      	b.n	8001e1e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 8088 	beq.w	8001d42 <HAL_RCC_OscConfig+0x552>
 8001c32:	2301      	movs	r3, #1
 8001c34:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001c3c:	fa93 f3a3 	rbit	r3, r3
 8001c40:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001c44:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c48:	fab3 f383 	clz	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	461a      	mov	r2, r3
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff f91d 	bl	8000e9c <HAL_GetTick>
 8001c62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c68:	f7ff f918 	bl	8000e9c <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d902      	bls.n	8001c7e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	f000 be06 	b.w	800288a <HAL_RCC_OscConfig+0x109a>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001c90:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	095b      	lsrs	r3, r3, #5
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d102      	bne.n	8001cae <HAL_RCC_OscConfig+0x4be>
 8001ca8:	4b45      	ldr	r3, [pc, #276]	; (8001dc0 <HAL_RCC_OscConfig+0x5d0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	e013      	b.n	8001cd6 <HAL_RCC_OscConfig+0x4e6>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001cb8:	fa93 f3a3 	rbit	r3, r3
 8001cbc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001cc6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	; (8001dc0 <HAL_RCC_OscConfig+0x5d0>)
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001cdc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001ce0:	fa92 f2a2 	rbit	r2, r2
 8001ce4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001ce8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001cec:	fab2 f282 	clz	r2, r2
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	f042 0220 	orr.w	r2, r2, #32
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	f002 021f 	and.w	r2, r2, #31
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0af      	beq.n	8001c68 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d08:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <HAL_RCC_OscConfig+0x5d0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	21f8      	movs	r1, #248	; 0xf8
 8001d1e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001d26:	fa91 f1a1 	rbit	r1, r1
 8001d2a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001d2e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001d32:	fab1 f181 	clz	r1, r1
 8001d36:	b2c9      	uxtb	r1, r1
 8001d38:	408b      	lsls	r3, r1
 8001d3a:	4921      	ldr	r1, [pc, #132]	; (8001dc0 <HAL_RCC_OscConfig+0x5d0>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]
 8001d40:	e06d      	b.n	8001e1e <HAL_RCC_OscConfig+0x62e>
 8001d42:	2301      	movs	r3, #1
 8001d44:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d4c:	fa93 f3a3 	rbit	r3, r3
 8001d50:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001d54:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d58:	fab3 f383 	clz	r3, r3
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d62:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	461a      	mov	r2, r3
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7ff f895 	bl	8000e9c <HAL_GetTick>
 8001d72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d76:	e00a      	b.n	8001d8e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d78:	f7ff f890 	bl	8000e9c <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d902      	bls.n	8001d8e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	f000 bd7e 	b.w	800288a <HAL_RCC_OscConfig+0x109a>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001da0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d105      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x5d4>
 8001db8:	4b01      	ldr	r3, [pc, #4]	; (8001dc0 <HAL_RCC_OscConfig+0x5d0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	e016      	b.n	8001dec <HAL_RCC_OscConfig+0x5fc>
 8001dbe:	bf00      	nop
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ddc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001de0:	fa93 f3a3 	rbit	r3, r3
 8001de4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001de8:	4bbf      	ldr	r3, [pc, #764]	; (80020e8 <HAL_RCC_OscConfig+0x8f8>)
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	2202      	movs	r2, #2
 8001dee:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001df2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001df6:	fa92 f2a2 	rbit	r2, r2
 8001dfa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001dfe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e02:	fab2 f282 	clz	r2, r2
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	f042 0220 	orr.w	r2, r2, #32
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	f002 021f 	and.w	r2, r2, #31
 8001e12:	2101      	movs	r1, #1
 8001e14:	fa01 f202 	lsl.w	r2, r1, r2
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1ac      	bne.n	8001d78 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e22:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 8113 	beq.w	800205a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e38:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d07c      	beq.n	8001f3e <HAL_RCC_OscConfig+0x74e>
 8001e44:	2301      	movs	r3, #1
 8001e46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001e56:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	4ba2      	ldr	r3, [pc, #648]	; (80020ec <HAL_RCC_OscConfig+0x8fc>)
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	461a      	mov	r2, r3
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff f815 	bl	8000e9c <HAL_GetTick>
 8001e72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e78:	f7ff f810 	bl	8000e9c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d902      	bls.n	8001e8e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	f000 bcfe 	b.w	800288a <HAL_RCC_OscConfig+0x109a>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001e98:	fa93 f2a3 	rbit	r2, r3
 8001e9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001eae:	2202      	movs	r2, #2
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	fa93 f2a3 	rbit	r2, r3
 8001ec0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ece:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eda:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	fa93 f2a3 	rbit	r2, r3
 8001ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001eec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eee:	4b7e      	ldr	r3, [pc, #504]	; (80020e8 <HAL_RCC_OscConfig+0x8f8>)
 8001ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ef2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001efa:	2102      	movs	r1, #2
 8001efc:	6019      	str	r1, [r3, #0]
 8001efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f02:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	fa93 f1a3 	rbit	r1, r3
 8001f0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f10:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f14:	6019      	str	r1, [r3, #0]
  return result;
 8001f16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f1a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	fab3 f383 	clz	r3, r3
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	2101      	movs	r1, #1
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d09d      	beq.n	8001e78 <HAL_RCC_OscConfig+0x688>
 8001f3c:	e08d      	b.n	800205a <HAL_RCC_OscConfig+0x86a>
 8001f3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f42:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001f46:	2201      	movs	r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	fa93 f2a3 	rbit	r2, r3
 8001f58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f60:	601a      	str	r2, [r3, #0]
  return result;
 8001f62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f66:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f6a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f6c:	fab3 f383 	clz	r3, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	461a      	mov	r2, r3
 8001f74:	4b5d      	ldr	r3, [pc, #372]	; (80020ec <HAL_RCC_OscConfig+0x8fc>)
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f80:	f7fe ff8c 	bl	8000e9c <HAL_GetTick>
 8001f84:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f8a:	f7fe ff87 	bl	8000e9c <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d902      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	f000 bc75 	b.w	800288a <HAL_RCC_OscConfig+0x109a>
 8001fa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001fa8:	2202      	movs	r2, #2
 8001faa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	fa93 f2a3 	rbit	r2, r3
 8001fba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fbe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001fcc:	2202      	movs	r2, #2
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	fa93 f2a3 	rbit	r2, r3
 8001fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	fa93 f2a3 	rbit	r2, r3
 8002002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002006:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800200a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200c:	4b36      	ldr	r3, [pc, #216]	; (80020e8 <HAL_RCC_OscConfig+0x8f8>)
 800200e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002010:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002014:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002018:	2102      	movs	r1, #2
 800201a:	6019      	str	r1, [r3, #0]
 800201c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002020:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	fa93 f1a3 	rbit	r1, r3
 800202a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002032:	6019      	str	r1, [r3, #0]
  return result;
 8002034:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002038:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002048:	b2db      	uxtb	r3, r3
 800204a:	f003 031f 	and.w	r3, r3, #31
 800204e:	2101      	movs	r1, #1
 8002050:	fa01 f303 	lsl.w	r3, r1, r3
 8002054:	4013      	ands	r3, r2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d197      	bne.n	8001f8a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800205a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800205e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 81a5 	beq.w	80023ba <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002070:	2300      	movs	r3, #0
 8002072:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002076:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <HAL_RCC_OscConfig+0x8f8>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d116      	bne.n	80020b0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_RCC_OscConfig+0x8f8>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4a18      	ldr	r2, [pc, #96]	; (80020e8 <HAL_RCC_OscConfig+0x8f8>)
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208c:	61d3      	str	r3, [r2, #28]
 800208e:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <HAL_RCC_OscConfig+0x8f8>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002096:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800209a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020a8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80020aa:	2301      	movs	r3, #1
 80020ac:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <HAL_RCC_OscConfig+0x900>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d121      	bne.n	8002100 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <HAL_RCC_OscConfig+0x900>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <HAL_RCC_OscConfig+0x900>)
 80020c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c8:	f7fe fee8 	bl	8000e9c <HAL_GetTick>
 80020cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d0:	e010      	b.n	80020f4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d2:	f7fe fee3 	bl	8000e9c <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	; 0x64
 80020e0:	d908      	bls.n	80020f4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e3d1      	b.n	800288a <HAL_RCC_OscConfig+0x109a>
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000
 80020ec:	10908120 	.word	0x10908120
 80020f0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f4:	4b8d      	ldr	r3, [pc, #564]	; (800232c <HAL_RCC_OscConfig+0xb3c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0e8      	beq.n	80020d2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002104:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d106      	bne.n	800211e <HAL_RCC_OscConfig+0x92e>
 8002110:	4b87      	ldr	r3, [pc, #540]	; (8002330 <HAL_RCC_OscConfig+0xb40>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4a86      	ldr	r2, [pc, #536]	; (8002330 <HAL_RCC_OscConfig+0xb40>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	6213      	str	r3, [r2, #32]
 800211c:	e035      	b.n	800218a <HAL_RCC_OscConfig+0x99a>
 800211e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002122:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x958>
 800212e:	4b80      	ldr	r3, [pc, #512]	; (8002330 <HAL_RCC_OscConfig+0xb40>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	4a7f      	ldr	r2, [pc, #508]	; (8002330 <HAL_RCC_OscConfig+0xb40>)
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	6213      	str	r3, [r2, #32]
 800213a:	4b7d      	ldr	r3, [pc, #500]	; (8002330 <HAL_RCC_OscConfig+0xb40>)
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	4a7c      	ldr	r2, [pc, #496]	; (8002330 <HAL_RCC_OscConfig+0xb40>)
 8002140:	f023 0304 	bic.w	r3, r3, #4
 8002144:	6213      	str	r3, [r2, #32]
 8002146:	e020      	b.n	800218a <HAL_RCC_OscConfig+0x99a>
 8002148:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800214c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2b05      	cmp	r3, #5
 8002156:	d10c      	bne.n	8002172 <HAL_RCC_OscConfig+0x982>
 8002158:	4b75      	ldr	r3, [pc, #468]	; (8002330 <HAL_RCC_OscConfig+0xb40>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	4a74      	ldr	r2, [pc, #464]	; (8002330 <HAL_RCC_OscConfig+0xb40>)
 800215e:	f043 0304 	orr.w	r3, r3, #4
 8002162:	6213      	str	r3, [r2, #32]
 8002164:	4b72      	ldr	r3, [pc, #456]	; (8002330 <HAL_RCC_OscConfig+0xb40>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4a71      	ldr	r2, [pc, #452]	; (8002330 <HAL_RCC_OscConfig+0xb40>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6213      	str	r3, [r2, #32]
 8002170:	e00b      	b.n	800218a <HAL_RCC_OscConfig+0x99a>
 8002172:	4b6f      	ldr	r3, [pc, #444]	; (8002330 <HAL_RCC_OscConfig+0xb40>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4a6e      	ldr	r2, [pc, #440]	; (8002330 <HAL_RCC_OscConfig+0xb40>)
 8002178:	f023 0301 	bic.w	r3, r3, #1
 800217c:	6213      	str	r3, [r2, #32]
 800217e:	4b6c      	ldr	r3, [pc, #432]	; (8002330 <HAL_RCC_OscConfig+0xb40>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4a6b      	ldr	r2, [pc, #428]	; (8002330 <HAL_RCC_OscConfig+0xb40>)
 8002184:	f023 0304 	bic.w	r3, r3, #4
 8002188:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800218a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800218e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8081 	beq.w	800229e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219c:	f7fe fe7e 	bl	8000e9c <HAL_GetTick>
 80021a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a4:	e00b      	b.n	80021be <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a6:	f7fe fe79 	bl	8000e9c <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e365      	b.n	800288a <HAL_RCC_OscConfig+0x109a>
 80021be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80021c6:	2202      	movs	r2, #2
 80021c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	fa93 f2a3 	rbit	r2, r3
 80021d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80021ea:	2202      	movs	r2, #2
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	fa93 f2a3 	rbit	r2, r3
 80021fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002200:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002204:	601a      	str	r2, [r3, #0]
  return result;
 8002206:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800220a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800220e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002210:	fab3 f383 	clz	r3, r3
 8002214:	b2db      	uxtb	r3, r3
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	b2db      	uxtb	r3, r3
 800221a:	f043 0302 	orr.w	r3, r3, #2
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d102      	bne.n	800222a <HAL_RCC_OscConfig+0xa3a>
 8002224:	4b42      	ldr	r3, [pc, #264]	; (8002330 <HAL_RCC_OscConfig+0xb40>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	e013      	b.n	8002252 <HAL_RCC_OscConfig+0xa62>
 800222a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800222e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002232:	2202      	movs	r2, #2
 8002234:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800223a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fa93 f2a3 	rbit	r2, r3
 8002244:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002248:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	4b38      	ldr	r3, [pc, #224]	; (8002330 <HAL_RCC_OscConfig+0xb40>)
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002256:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800225a:	2102      	movs	r1, #2
 800225c:	6011      	str	r1, [r2, #0]
 800225e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002262:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	fa92 f1a2 	rbit	r1, r2
 800226c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002270:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002274:	6011      	str	r1, [r2, #0]
  return result;
 8002276:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800227a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	fab2 f282 	clz	r2, r2
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	f002 021f 	and.w	r2, r2, #31
 8002290:	2101      	movs	r1, #1
 8002292:	fa01 f202 	lsl.w	r2, r1, r2
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d084      	beq.n	80021a6 <HAL_RCC_OscConfig+0x9b6>
 800229c:	e083      	b.n	80023a6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229e:	f7fe fdfd 	bl	8000e9c <HAL_GetTick>
 80022a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a6:	e00b      	b.n	80022c0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a8:	f7fe fdf8 	bl	8000e9c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e2e4      	b.n	800288a <HAL_RCC_OscConfig+0x109a>
 80022c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80022c8:	2202      	movs	r2, #2
 80022ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	fa93 f2a3 	rbit	r2, r3
 80022da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80022ec:	2202      	movs	r2, #2
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	fa93 f2a3 	rbit	r2, r3
 80022fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002302:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002306:	601a      	str	r2, [r3, #0]
  return result;
 8002308:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800230c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002310:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	095b      	lsrs	r3, r3, #5
 800231a:	b2db      	uxtb	r3, r3
 800231c:	f043 0302 	orr.w	r3, r3, #2
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d106      	bne.n	8002334 <HAL_RCC_OscConfig+0xb44>
 8002326:	4b02      	ldr	r3, [pc, #8]	; (8002330 <HAL_RCC_OscConfig+0xb40>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	e017      	b.n	800235c <HAL_RCC_OscConfig+0xb6c>
 800232c:	40007000 	.word	0x40007000
 8002330:	40021000 	.word	0x40021000
 8002334:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002338:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800233c:	2202      	movs	r2, #2
 800233e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002344:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	fa93 f2a3 	rbit	r2, r3
 800234e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002352:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	4bb3      	ldr	r3, [pc, #716]	; (8002628 <HAL_RCC_OscConfig+0xe38>)
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002360:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002364:	2102      	movs	r1, #2
 8002366:	6011      	str	r1, [r2, #0]
 8002368:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800236c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	fa92 f1a2 	rbit	r1, r2
 8002376:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800237a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800237e:	6011      	str	r1, [r2, #0]
  return result;
 8002380:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002384:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	fab2 f282 	clz	r2, r2
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	f002 021f 	and.w	r2, r2, #31
 800239a:	2101      	movs	r1, #1
 800239c:	fa01 f202 	lsl.w	r2, r1, r2
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d180      	bne.n	80022a8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023a6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d105      	bne.n	80023ba <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ae:	4b9e      	ldr	r3, [pc, #632]	; (8002628 <HAL_RCC_OscConfig+0xe38>)
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	4a9d      	ldr	r2, [pc, #628]	; (8002628 <HAL_RCC_OscConfig+0xe38>)
 80023b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 825e 	beq.w	8002888 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023cc:	4b96      	ldr	r3, [pc, #600]	; (8002628 <HAL_RCC_OscConfig+0xe38>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 030c 	and.w	r3, r3, #12
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	f000 821f 	beq.w	8002818 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	f040 8170 	bne.w	80026cc <HAL_RCC_OscConfig+0xedc>
 80023ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80023f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023fe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	fa93 f2a3 	rbit	r2, r3
 8002408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002410:	601a      	str	r2, [r3, #0]
  return result;
 8002412:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002416:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800241a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241c:	fab3 f383 	clz	r3, r3
 8002420:	b2db      	uxtb	r3, r3
 8002422:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002426:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	461a      	mov	r2, r3
 800242e:	2300      	movs	r3, #0
 8002430:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7fe fd33 	bl	8000e9c <HAL_GetTick>
 8002436:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243a:	e009      	b.n	8002450 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800243c:	f7fe fd2e 	bl	8000e9c <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e21c      	b.n	800288a <HAL_RCC_OscConfig+0x109a>
 8002450:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002454:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002458:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800245c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002462:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	fa93 f2a3 	rbit	r2, r3
 800246c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002470:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002474:	601a      	str	r2, [r3, #0]
  return result;
 8002476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800247a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800247e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002480:	fab3 f383 	clz	r3, r3
 8002484:	b2db      	uxtb	r3, r3
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b01      	cmp	r3, #1
 8002492:	d102      	bne.n	800249a <HAL_RCC_OscConfig+0xcaa>
 8002494:	4b64      	ldr	r3, [pc, #400]	; (8002628 <HAL_RCC_OscConfig+0xe38>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	e027      	b.n	80024ea <HAL_RCC_OscConfig+0xcfa>
 800249a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800249e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80024a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ac:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	fa93 f2a3 	rbit	r2, r3
 80024b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ba:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80024c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	fa93 f2a3 	rbit	r2, r3
 80024dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	4b50      	ldr	r3, [pc, #320]	; (8002628 <HAL_RCC_OscConfig+0xe38>)
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024ee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80024f2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024f6:	6011      	str	r1, [r2, #0]
 80024f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024fc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	fa92 f1a2 	rbit	r1, r2
 8002506:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800250a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800250e:	6011      	str	r1, [r2, #0]
  return result;
 8002510:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002514:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	fab2 f282 	clz	r2, r2
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	f042 0220 	orr.w	r2, r2, #32
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	f002 021f 	and.w	r2, r2, #31
 800252a:	2101      	movs	r1, #1
 800252c:	fa01 f202 	lsl.w	r2, r1, r2
 8002530:	4013      	ands	r3, r2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d182      	bne.n	800243c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002536:	4b3c      	ldr	r3, [pc, #240]	; (8002628 <HAL_RCC_OscConfig+0xe38>)
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	f023 020f 	bic.w	r2, r3, #15
 800253e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002542:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	4937      	ldr	r1, [pc, #220]	; (8002628 <HAL_RCC_OscConfig+0xe38>)
 800254c:	4313      	orrs	r3, r2
 800254e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002550:	4b35      	ldr	r3, [pc, #212]	; (8002628 <HAL_RCC_OscConfig+0xe38>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002558:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800255c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6a19      	ldr	r1, [r3, #32]
 8002564:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002568:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	430b      	orrs	r3, r1
 8002572:	492d      	ldr	r1, [pc, #180]	; (8002628 <HAL_RCC_OscConfig+0xe38>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
 8002578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800257c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002580:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800258a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	fa93 f2a3 	rbit	r2, r3
 8002594:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002598:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800259c:	601a      	str	r2, [r3, #0]
  return result;
 800259e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80025a6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a8:	fab3 f383 	clz	r3, r3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	461a      	mov	r2, r3
 80025ba:	2301      	movs	r3, #1
 80025bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7fe fc6d 	bl	8000e9c <HAL_GetTick>
 80025c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c6:	e009      	b.n	80025dc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fe fc68 	bl	8000e9c <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e156      	b.n	800288a <HAL_RCC_OscConfig+0x109a>
 80025dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80025e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ee:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	fa93 f2a3 	rbit	r2, r3
 80025f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025fc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002600:	601a      	str	r2, [r3, #0]
  return result;
 8002602:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002606:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800260a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800260c:	fab3 f383 	clz	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	b2db      	uxtb	r3, r3
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d105      	bne.n	800262c <HAL_RCC_OscConfig+0xe3c>
 8002620:	4b01      	ldr	r3, [pc, #4]	; (8002628 <HAL_RCC_OscConfig+0xe38>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	e02a      	b.n	800267c <HAL_RCC_OscConfig+0xe8c>
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002630:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002634:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002638:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800263e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	fa93 f2a3 	rbit	r2, r3
 8002648:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800264c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002656:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800265a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002664:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	fa93 f2a3 	rbit	r2, r3
 800266e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002672:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	4b86      	ldr	r3, [pc, #536]	; (8002894 <HAL_RCC_OscConfig+0x10a4>)
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002680:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002684:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002688:	6011      	str	r1, [r2, #0]
 800268a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800268e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	fa92 f1a2 	rbit	r1, r2
 8002698:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800269c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80026a0:	6011      	str	r1, [r2, #0]
  return result;
 80026a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026a6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	fab2 f282 	clz	r2, r2
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	f042 0220 	orr.w	r2, r2, #32
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	f002 021f 	and.w	r2, r2, #31
 80026bc:	2101      	movs	r1, #1
 80026be:	fa01 f202 	lsl.w	r2, r1, r2
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f43f af7f 	beq.w	80025c8 <HAL_RCC_OscConfig+0xdd8>
 80026ca:	e0dd      	b.n	8002888 <HAL_RCC_OscConfig+0x1098>
 80026cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80026d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026de:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	fa93 f2a3 	rbit	r2, r3
 80026e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ec:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80026f0:	601a      	str	r2, [r3, #0]
  return result;
 80026f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80026fa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002706:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	461a      	mov	r2, r3
 800270e:	2300      	movs	r3, #0
 8002710:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002712:	f7fe fbc3 	bl	8000e9c <HAL_GetTick>
 8002716:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271a:	e009      	b.n	8002730 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800271c:	f7fe fbbe 	bl	8000e9c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e0ac      	b.n	800288a <HAL_RCC_OscConfig+0x109a>
 8002730:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002734:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002738:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800273c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002742:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	fa93 f2a3 	rbit	r2, r3
 800274c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002750:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002754:	601a      	str	r2, [r3, #0]
  return result;
 8002756:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800275a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800275e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002760:	fab3 f383 	clz	r3, r3
 8002764:	b2db      	uxtb	r3, r3
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	b2db      	uxtb	r3, r3
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b01      	cmp	r3, #1
 8002772:	d102      	bne.n	800277a <HAL_RCC_OscConfig+0xf8a>
 8002774:	4b47      	ldr	r3, [pc, #284]	; (8002894 <HAL_RCC_OscConfig+0x10a4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	e027      	b.n	80027ca <HAL_RCC_OscConfig+0xfda>
 800277a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800277e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002782:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002786:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800278c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	fa93 f2a3 	rbit	r2, r3
 8002796:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800279a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027a4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80027a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027b2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	fa93 f2a3 	rbit	r2, r3
 80027bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027c0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	4b33      	ldr	r3, [pc, #204]	; (8002894 <HAL_RCC_OscConfig+0x10a4>)
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027ce:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80027d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027d6:	6011      	str	r1, [r2, #0]
 80027d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027dc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	fa92 f1a2 	rbit	r1, r2
 80027e6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027ea:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80027ee:	6011      	str	r1, [r2, #0]
  return result;
 80027f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027f4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80027f8:	6812      	ldr	r2, [r2, #0]
 80027fa:	fab2 f282 	clz	r2, r2
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	f042 0220 	orr.w	r2, r2, #32
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	f002 021f 	and.w	r2, r2, #31
 800280a:	2101      	movs	r1, #1
 800280c:	fa01 f202 	lsl.w	r2, r1, r2
 8002810:	4013      	ands	r3, r2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d182      	bne.n	800271c <HAL_RCC_OscConfig+0xf2c>
 8002816:	e037      	b.n	8002888 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002818:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800281c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e02e      	b.n	800288a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <HAL_RCC_OscConfig+0x10a4>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002834:	4b17      	ldr	r3, [pc, #92]	; (8002894 <HAL_RCC_OscConfig+0x10a4>)
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800283c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002840:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002844:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002848:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	429a      	cmp	r2, r3
 8002852:	d117      	bne.n	8002884 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002854:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002858:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800285c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002860:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002868:	429a      	cmp	r2, r3
 800286a:	d10b      	bne.n	8002884 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800286c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002870:	f003 020f 	and.w	r2, r3, #15
 8002874:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002878:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000

08002898 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b09e      	sub	sp, #120	; 0x78
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e162      	b.n	8002b76 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028b0:	4b90      	ldr	r3, [pc, #576]	; (8002af4 <HAL_RCC_ClockConfig+0x25c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d910      	bls.n	80028e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028be:	4b8d      	ldr	r3, [pc, #564]	; (8002af4 <HAL_RCC_ClockConfig+0x25c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 0207 	bic.w	r2, r3, #7
 80028c6:	498b      	ldr	r1, [pc, #556]	; (8002af4 <HAL_RCC_ClockConfig+0x25c>)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ce:	4b89      	ldr	r3, [pc, #548]	; (8002af4 <HAL_RCC_ClockConfig+0x25c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d001      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e14a      	b.n	8002b76 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d008      	beq.n	80028fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ec:	4b82      	ldr	r3, [pc, #520]	; (8002af8 <HAL_RCC_ClockConfig+0x260>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	497f      	ldr	r1, [pc, #508]	; (8002af8 <HAL_RCC_ClockConfig+0x260>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 80dc 	beq.w	8002ac4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d13c      	bne.n	800298e <HAL_RCC_ClockConfig+0xf6>
 8002914:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002918:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800291c:	fa93 f3a3 	rbit	r3, r3
 8002920:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	b2db      	uxtb	r3, r3
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d102      	bne.n	800293e <HAL_RCC_ClockConfig+0xa6>
 8002938:	4b6f      	ldr	r3, [pc, #444]	; (8002af8 <HAL_RCC_ClockConfig+0x260>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	e00f      	b.n	800295e <HAL_RCC_ClockConfig+0xc6>
 800293e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002942:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002944:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	667b      	str	r3, [r7, #100]	; 0x64
 800294c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002950:	663b      	str	r3, [r7, #96]	; 0x60
 8002952:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002954:	fa93 f3a3 	rbit	r3, r3
 8002958:	65fb      	str	r3, [r7, #92]	; 0x5c
 800295a:	4b67      	ldr	r3, [pc, #412]	; (8002af8 <HAL_RCC_ClockConfig+0x260>)
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002962:	65ba      	str	r2, [r7, #88]	; 0x58
 8002964:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002966:	fa92 f2a2 	rbit	r2, r2
 800296a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800296c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800296e:	fab2 f282 	clz	r2, r2
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	f042 0220 	orr.w	r2, r2, #32
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	f002 021f 	and.w	r2, r2, #31
 800297e:	2101      	movs	r1, #1
 8002980:	fa01 f202 	lsl.w	r2, r1, r2
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d17b      	bne.n	8002a82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e0f3      	b.n	8002b76 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d13c      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x178>
 8002996:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800299a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800299e:	fa93 f3a3 	rbit	r3, r3
 80029a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	095b      	lsrs	r3, r3, #5
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d102      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x128>
 80029ba:	4b4f      	ldr	r3, [pc, #316]	; (8002af8 <HAL_RCC_ClockConfig+0x260>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	e00f      	b.n	80029e0 <HAL_RCC_ClockConfig+0x148>
 80029c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c8:	fa93 f3a3 	rbit	r3, r3
 80029cc:	647b      	str	r3, [r7, #68]	; 0x44
 80029ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d2:	643b      	str	r3, [r7, #64]	; 0x40
 80029d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029dc:	4b46      	ldr	r3, [pc, #280]	; (8002af8 <HAL_RCC_ClockConfig+0x260>)
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e4:	63ba      	str	r2, [r7, #56]	; 0x38
 80029e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029e8:	fa92 f2a2 	rbit	r2, r2
 80029ec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80029ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029f0:	fab2 f282 	clz	r2, r2
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	f042 0220 	orr.w	r2, r2, #32
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	f002 021f 	and.w	r2, r2, #31
 8002a00:	2101      	movs	r1, #1
 8002a02:	fa01 f202 	lsl.w	r2, r1, r2
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d13a      	bne.n	8002a82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0b2      	b.n	8002b76 <HAL_RCC_ClockConfig+0x2de>
 8002a10:	2302      	movs	r3, #2
 8002a12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d102      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x1a0>
 8002a32:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <HAL_RCC_ClockConfig+0x260>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	e00d      	b.n	8002a54 <HAL_RCC_ClockConfig+0x1bc>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3e:	fa93 f3a3 	rbit	r3, r3
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
 8002a44:	2302      	movs	r3, #2
 8002a46:	623b      	str	r3, [r7, #32]
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	61fb      	str	r3, [r7, #28]
 8002a50:	4b29      	ldr	r3, [pc, #164]	; (8002af8 <HAL_RCC_ClockConfig+0x260>)
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	2202      	movs	r2, #2
 8002a56:	61ba      	str	r2, [r7, #24]
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	fa92 f2a2 	rbit	r2, r2
 8002a5e:	617a      	str	r2, [r7, #20]
  return result;
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	fab2 f282 	clz	r2, r2
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	f042 0220 	orr.w	r2, r2, #32
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	f002 021f 	and.w	r2, r2, #31
 8002a72:	2101      	movs	r1, #1
 8002a74:	fa01 f202 	lsl.w	r2, r1, r2
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e079      	b.n	8002b76 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a82:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <HAL_RCC_ClockConfig+0x260>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f023 0203 	bic.w	r2, r3, #3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	491a      	ldr	r1, [pc, #104]	; (8002af8 <HAL_RCC_ClockConfig+0x260>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a94:	f7fe fa02 	bl	8000e9c <HAL_GetTick>
 8002a98:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9a:	e00a      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a9c:	f7fe f9fe 	bl	8000e9c <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e061      	b.n	8002b76 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab2:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <HAL_RCC_ClockConfig+0x260>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 020c 	and.w	r2, r3, #12
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d1eb      	bne.n	8002a9c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_RCC_ClockConfig+0x25c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d214      	bcs.n	8002afc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <HAL_RCC_ClockConfig+0x25c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 0207 	bic.w	r2, r3, #7
 8002ada:	4906      	ldr	r1, [pc, #24]	; (8002af4 <HAL_RCC_ClockConfig+0x25c>)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae2:	4b04      	ldr	r3, [pc, #16]	; (8002af4 <HAL_RCC_ClockConfig+0x25c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d005      	beq.n	8002afc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e040      	b.n	8002b76 <HAL_RCC_ClockConfig+0x2de>
 8002af4:	40022000 	.word	0x40022000
 8002af8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b08:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <HAL_RCC_ClockConfig+0x2e8>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	491a      	ldr	r1, [pc, #104]	; (8002b80 <HAL_RCC_ClockConfig+0x2e8>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b26:	4b16      	ldr	r3, [pc, #88]	; (8002b80 <HAL_RCC_ClockConfig+0x2e8>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4912      	ldr	r1, [pc, #72]	; (8002b80 <HAL_RCC_ClockConfig+0x2e8>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b3a:	f000 f829 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 8002b3e:	4601      	mov	r1, r0
 8002b40:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <HAL_RCC_ClockConfig+0x2e8>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b48:	22f0      	movs	r2, #240	; 0xf0
 8002b4a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	fa92 f2a2 	rbit	r2, r2
 8002b52:	60fa      	str	r2, [r7, #12]
  return result;
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	fab2 f282 	clz	r2, r2
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	40d3      	lsrs	r3, r2
 8002b5e:	4a09      	ldr	r2, [pc, #36]	; (8002b84 <HAL_RCC_ClockConfig+0x2ec>)
 8002b60:	5cd3      	ldrb	r3, [r2, r3]
 8002b62:	fa21 f303 	lsr.w	r3, r1, r3
 8002b66:	4a08      	ldr	r2, [pc, #32]	; (8002b88 <HAL_RCC_ClockConfig+0x2f0>)
 8002b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b6a:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <HAL_RCC_ClockConfig+0x2f4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe f950 	bl	8000e14 <HAL_InitTick>
  
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3778      	adds	r7, #120	; 0x78
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000
 8002b84:	08004070 	.word	0x08004070
 8002b88:	20000004 	.word	0x20000004
 8002b8c:	20000008 	.word	0x20000008

08002b90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b08b      	sub	sp, #44	; 0x2c
 8002b94:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002baa:	4b2a      	ldr	r3, [pc, #168]	; (8002c54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d002      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x30>
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x36>
 8002bbe:	e03f      	b.n	8002c40 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bc0:	4b25      	ldr	r3, [pc, #148]	; (8002c58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bc2:	623b      	str	r3, [r7, #32]
      break;
 8002bc4:	e03f      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002bcc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002bd0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	fa92 f2a2 	rbit	r2, r2
 8002bd8:	607a      	str	r2, [r7, #4]
  return result;
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	fab2 f282 	clz	r2, r2
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	40d3      	lsrs	r3, r2
 8002be4:	4a1d      	ldr	r2, [pc, #116]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002be6:	5cd3      	ldrb	r3, [r2, r3]
 8002be8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002bea:	4b1a      	ldr	r3, [pc, #104]	; (8002c54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	220f      	movs	r2, #15
 8002bf4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	fa92 f2a2 	rbit	r2, r2
 8002bfc:	60fa      	str	r2, [r7, #12]
  return result;
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	fab2 f282 	clz	r2, r2
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	40d3      	lsrs	r3, r2
 8002c08:	4a15      	ldr	r2, [pc, #84]	; (8002c60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c0a:	5cd3      	ldrb	r3, [r2, r3]
 8002c0c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c18:	4a0f      	ldr	r2, [pc, #60]	; (8002c58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	fb02 f303 	mul.w	r3, r2, r3
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
 8002c28:	e007      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c2a:	4a0b      	ldr	r2, [pc, #44]	; (8002c58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	fb02 f303 	mul.w	r3, r2, r3
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	623b      	str	r3, [r7, #32]
      break;
 8002c3e:	e002      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c42:	623b      	str	r3, [r7, #32]
      break;
 8002c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c46:	6a3b      	ldr	r3, [r7, #32]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	372c      	adds	r7, #44	; 0x2c
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	40021000 	.word	0x40021000
 8002c58:	007a1200 	.word	0x007a1200
 8002c5c:	08004088 	.word	0x08004088
 8002c60:	08004098 	.word	0x08004098

08002c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20000004 	.word	0x20000004

08002c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c82:	f7ff ffef 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002c86:	4601      	mov	r1, r0
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c90:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	fa92 f2a2 	rbit	r2, r2
 8002c9c:	603a      	str	r2, [r7, #0]
  return result;
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	fab2 f282 	clz	r2, r2
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	40d3      	lsrs	r3, r2
 8002ca8:	4a04      	ldr	r2, [pc, #16]	; (8002cbc <HAL_RCC_GetPCLK1Freq+0x40>)
 8002caa:	5cd3      	ldrb	r3, [r2, r3]
 8002cac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	08004080 	.word	0x08004080

08002cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002cc6:	f7ff ffcd 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002cca:	4601      	mov	r1, r0
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002cd4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002cd8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	fa92 f2a2 	rbit	r2, r2
 8002ce0:	603a      	str	r2, [r7, #0]
  return result;
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	fab2 f282 	clz	r2, r2
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	40d3      	lsrs	r3, r2
 8002cec:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002cee:	5cd3      	ldrb	r3, [r2, r3]
 8002cf0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	08004080 	.word	0x08004080

08002d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b092      	sub	sp, #72	; 0x48
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 80d4 	beq.w	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d28:	4b4e      	ldr	r3, [pc, #312]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10e      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d34:	4b4b      	ldr	r3, [pc, #300]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	4a4a      	ldr	r2, [pc, #296]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	61d3      	str	r3, [r2, #28]
 8002d40:	4b48      	ldr	r3, [pc, #288]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d52:	4b45      	ldr	r3, [pc, #276]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d118      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d5e:	4b42      	ldr	r3, [pc, #264]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a41      	ldr	r2, [pc, #260]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6a:	f7fe f897 	bl	8000e9c <HAL_GetTick>
 8002d6e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d70:	e008      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d72:	f7fe f893 	bl	8000e9c <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b64      	cmp	r3, #100	; 0x64
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e1d6      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d84:	4b38      	ldr	r3, [pc, #224]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d90:	4b34      	ldr	r3, [pc, #208]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d98:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 8084 	beq.w	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002daa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d07c      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002db0:	4b2c      	ldr	r3, [pc, #176]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dbe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc2:	fa93 f3a3 	rbit	r3, r3
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dca:	fab3 f383 	clz	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b26      	ldr	r3, [pc, #152]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	461a      	mov	r2, r3
 8002dda:	2301      	movs	r3, #1
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002de2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	2300      	movs	r3, #0
 8002e00:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e02:	4a18      	ldr	r2, [pc, #96]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e06:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d04b      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e12:	f7fe f843 	bl	8000e9c <HAL_GetTick>
 8002e16:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e18:	e00a      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1a:	f7fe f83f 	bl	8000e9c <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e180      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002e30:	2302      	movs	r3, #2
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e36:	fa93 f3a3 	rbit	r3, r3
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	623b      	str	r3, [r7, #32]
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	fa93 f3a3 	rbit	r3, r3
 8002e46:	61fb      	str	r3, [r7, #28]
  return result;
 8002e48:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4a:	fab3 f383 	clz	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f043 0302 	orr.w	r3, r3, #2
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d108      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e5e:	4b01      	ldr	r3, [pc, #4]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	e00d      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40007000 	.word	0x40007000
 8002e6c:	10908100 	.word	0x10908100
 8002e70:	2302      	movs	r3, #2
 8002e72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	4b9a      	ldr	r3, [pc, #616]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	2202      	movs	r2, #2
 8002e82:	613a      	str	r2, [r7, #16]
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	fa92 f2a2 	rbit	r2, r2
 8002e8a:	60fa      	str	r2, [r7, #12]
  return result;
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	fab2 f282 	clz	r2, r2
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	f002 021f 	and.w	r2, r2, #31
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0b7      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002eaa:	4b8f      	ldr	r3, [pc, #572]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	498c      	ldr	r1, [pc, #560]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ebc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d105      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec4:	4b88      	ldr	r3, [pc, #544]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	4a87      	ldr	r2, [pc, #540]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ece:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002edc:	4b82      	ldr	r3, [pc, #520]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	f023 0203 	bic.w	r2, r3, #3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	497f      	ldr	r1, [pc, #508]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d008      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002efa:	4b7b      	ldr	r3, [pc, #492]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	4978      	ldr	r1, [pc, #480]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f18:	4b73      	ldr	r3, [pc, #460]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	4970      	ldr	r1, [pc, #448]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f36:	4b6c      	ldr	r3, [pc, #432]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f023 0210 	bic.w	r2, r3, #16
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	4969      	ldr	r1, [pc, #420]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002f54:	4b64      	ldr	r3, [pc, #400]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f60:	4961      	ldr	r1, [pc, #388]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f72:	4b5d      	ldr	r3, [pc, #372]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f023 0220 	bic.w	r2, r3, #32
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	495a      	ldr	r1, [pc, #360]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f90:	4b55      	ldr	r3, [pc, #340]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	4952      	ldr	r1, [pc, #328]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d008      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fae:	4b4e      	ldr	r3, [pc, #312]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	494b      	ldr	r1, [pc, #300]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d008      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fcc:	4b46      	ldr	r3, [pc, #280]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	4943      	ldr	r1, [pc, #268]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d008      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fea:	4b3f      	ldr	r3, [pc, #252]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	493c      	ldr	r1, [pc, #240]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003008:	4b37      	ldr	r3, [pc, #220]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003014:	4934      	ldr	r1, [pc, #208]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003016:	4313      	orrs	r3, r2
 8003018:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d008      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003026:	4b30      	ldr	r3, [pc, #192]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	492d      	ldr	r1, [pc, #180]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003034:	4313      	orrs	r3, r2
 8003036:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003044:	4b28      	ldr	r3, [pc, #160]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003048:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003050:	4925      	ldr	r1, [pc, #148]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003052:	4313      	orrs	r3, r2
 8003054:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d008      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003062:	4b21      	ldr	r3, [pc, #132]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	491e      	ldr	r1, [pc, #120]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003070:	4313      	orrs	r3, r2
 8003072:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003080:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308c:	4916      	ldr	r1, [pc, #88]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800308e:	4313      	orrs	r3, r2
 8003090:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800309e:	4b12      	ldr	r3, [pc, #72]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030aa:	490f      	ldr	r1, [pc, #60]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80030bc:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c8:	4907      	ldr	r1, [pc, #28]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00c      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80030da:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	e002      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000
 80030ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ee:	4913      	ldr	r1, [pc, #76]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003100:	4b0e      	ldr	r3, [pc, #56]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310c:	490b      	ldr	r1, [pc, #44]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800310e:	4313      	orrs	r3, r2
 8003110:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800311e:	4b07      	ldr	r3, [pc, #28]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312a:	4904      	ldr	r1, [pc, #16]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800312c:	4313      	orrs	r3, r2
 800312e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3748      	adds	r7, #72	; 0x48
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000

08003140 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e040      	b.n	80031d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fd fd24 	bl	8000bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2224      	movs	r2, #36	; 0x24
 800316c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0201 	bic.w	r2, r2, #1
 800317c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f8f4 	bl	800336c <UART_SetConfig>
 8003184:	4603      	mov	r3, r0
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e022      	b.n	80031d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fabe 	bl	8003718 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0201 	orr.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 fb45 	bl	800385c <UART_CheckIdleState>
 80031d2:	4603      	mov	r3, r0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031dc:	b480      	push	{r7}
 80031de:	b08b      	sub	sp, #44	; 0x2c
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	4613      	mov	r3, r2
 80031e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	d156      	bne.n	80032a0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <HAL_UART_Transmit_IT+0x22>
 80031f8:	88fb      	ldrh	r3, [r7, #6]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e04f      	b.n	80032a2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_UART_Transmit_IT+0x34>
 800320c:	2302      	movs	r3, #2
 800320e:	e048      	b.n	80032a2 <HAL_UART_Transmit_IT+0xc6>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	88fa      	ldrh	r2, [r7, #6]
 8003222:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	88fa      	ldrh	r2, [r7, #6]
 800322a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2221      	movs	r2, #33	; 0x21
 8003240:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324a:	d107      	bne.n	800325c <HAL_UART_Transmit_IT+0x80>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d103      	bne.n	800325c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4a16      	ldr	r2, [pc, #88]	; (80032b0 <HAL_UART_Transmit_IT+0xd4>)
 8003258:	669a      	str	r2, [r3, #104]	; 0x68
 800325a:	e002      	b.n	8003262 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4a15      	ldr	r2, [pc, #84]	; (80032b4 <HAL_UART_Transmit_IT+0xd8>)
 8003260:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	e853 3f00 	ldrex	r3, [r3]
 8003276:	613b      	str	r3, [r7, #16]
   return(result);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	623b      	str	r3, [r7, #32]
 800328a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328c:	69f9      	ldr	r1, [r7, #28]
 800328e:	6a3a      	ldr	r2, [r7, #32]
 8003290:	e841 2300 	strex	r3, r2, [r1]
 8003294:	61bb      	str	r3, [r7, #24]
   return(result);
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e6      	bne.n	800326a <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	e000      	b.n	80032a2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80032a0:	2302      	movs	r3, #2
  }
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	372c      	adds	r7, #44	; 0x2c
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	08003c89 	.word	0x08003c89
 80032b4:	08003bd1 	.word	0x08003bd1

080032b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08a      	sub	sp, #40	; 0x28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	4613      	mov	r3, r2
 80032c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ca:	2b20      	cmp	r3, #32
 80032cc:	d13d      	bne.n	800334a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <HAL_UART_Receive_IT+0x22>
 80032d4:	88fb      	ldrh	r3, [r7, #6]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e036      	b.n	800334c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_UART_Receive_IT+0x34>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e02f      	b.n	800334c <HAL_UART_Receive_IT+0x94>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d018      	beq.n	800333a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	e853 3f00 	ldrex	r3, [r3]
 8003314:	613b      	str	r3, [r7, #16]
   return(result);
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	623b      	str	r3, [r7, #32]
 8003328:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332a:	69f9      	ldr	r1, [r7, #28]
 800332c:	6a3a      	ldr	r2, [r7, #32]
 800332e:	e841 2300 	strex	r3, r2, [r1]
 8003332:	61bb      	str	r3, [r7, #24]
   return(result);
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1e6      	bne.n	8003308 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800333a:	88fb      	ldrh	r3, [r7, #6]
 800333c:	461a      	mov	r2, r3
 800333e:	68b9      	ldr	r1, [r7, #8]
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 fb99 	bl	8003a78 <UART_Start_Receive_IT>
 8003346:	4603      	mov	r3, r0
 8003348:	e000      	b.n	800334c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800334a:	2302      	movs	r3, #2
  }
}
 800334c:	4618      	mov	r0, r3
 800334e:	3728      	adds	r7, #40	; 0x28
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	4b92      	ldr	r3, [pc, #584]	; (80035e0 <UART_SetConfig+0x274>)
 8003398:	4013      	ands	r3, r2
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	6979      	ldr	r1, [r7, #20]
 80033a0:	430b      	orrs	r3, r1
 80033a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	430a      	orrs	r2, r1
 80033dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a80      	ldr	r2, [pc, #512]	; (80035e4 <UART_SetConfig+0x278>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d120      	bne.n	800342a <UART_SetConfig+0xbe>
 80033e8:	4b7f      	ldr	r3, [pc, #508]	; (80035e8 <UART_SetConfig+0x27c>)
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d817      	bhi.n	8003424 <UART_SetConfig+0xb8>
 80033f4:	a201      	add	r2, pc, #4	; (adr r2, 80033fc <UART_SetConfig+0x90>)
 80033f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fa:	bf00      	nop
 80033fc:	0800340d 	.word	0x0800340d
 8003400:	08003419 	.word	0x08003419
 8003404:	0800341f 	.word	0x0800341f
 8003408:	08003413 	.word	0x08003413
 800340c:	2301      	movs	r3, #1
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e0b5      	b.n	800357e <UART_SetConfig+0x212>
 8003412:	2302      	movs	r3, #2
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	e0b2      	b.n	800357e <UART_SetConfig+0x212>
 8003418:	2304      	movs	r3, #4
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e0af      	b.n	800357e <UART_SetConfig+0x212>
 800341e:	2308      	movs	r3, #8
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e0ac      	b.n	800357e <UART_SetConfig+0x212>
 8003424:	2310      	movs	r3, #16
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e0a9      	b.n	800357e <UART_SetConfig+0x212>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a6f      	ldr	r2, [pc, #444]	; (80035ec <UART_SetConfig+0x280>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d124      	bne.n	800347e <UART_SetConfig+0x112>
 8003434:	4b6c      	ldr	r3, [pc, #432]	; (80035e8 <UART_SetConfig+0x27c>)
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800343c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003440:	d011      	beq.n	8003466 <UART_SetConfig+0xfa>
 8003442:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003446:	d817      	bhi.n	8003478 <UART_SetConfig+0x10c>
 8003448:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800344c:	d011      	beq.n	8003472 <UART_SetConfig+0x106>
 800344e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003452:	d811      	bhi.n	8003478 <UART_SetConfig+0x10c>
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <UART_SetConfig+0xf4>
 8003458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345c:	d006      	beq.n	800346c <UART_SetConfig+0x100>
 800345e:	e00b      	b.n	8003478 <UART_SetConfig+0x10c>
 8003460:	2300      	movs	r3, #0
 8003462:	77fb      	strb	r3, [r7, #31]
 8003464:	e08b      	b.n	800357e <UART_SetConfig+0x212>
 8003466:	2302      	movs	r3, #2
 8003468:	77fb      	strb	r3, [r7, #31]
 800346a:	e088      	b.n	800357e <UART_SetConfig+0x212>
 800346c:	2304      	movs	r3, #4
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	e085      	b.n	800357e <UART_SetConfig+0x212>
 8003472:	2308      	movs	r3, #8
 8003474:	77fb      	strb	r3, [r7, #31]
 8003476:	e082      	b.n	800357e <UART_SetConfig+0x212>
 8003478:	2310      	movs	r3, #16
 800347a:	77fb      	strb	r3, [r7, #31]
 800347c:	e07f      	b.n	800357e <UART_SetConfig+0x212>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a5b      	ldr	r2, [pc, #364]	; (80035f0 <UART_SetConfig+0x284>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d124      	bne.n	80034d2 <UART_SetConfig+0x166>
 8003488:	4b57      	ldr	r3, [pc, #348]	; (80035e8 <UART_SetConfig+0x27c>)
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003490:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003494:	d011      	beq.n	80034ba <UART_SetConfig+0x14e>
 8003496:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800349a:	d817      	bhi.n	80034cc <UART_SetConfig+0x160>
 800349c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034a0:	d011      	beq.n	80034c6 <UART_SetConfig+0x15a>
 80034a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034a6:	d811      	bhi.n	80034cc <UART_SetConfig+0x160>
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <UART_SetConfig+0x148>
 80034ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034b0:	d006      	beq.n	80034c0 <UART_SetConfig+0x154>
 80034b2:	e00b      	b.n	80034cc <UART_SetConfig+0x160>
 80034b4:	2300      	movs	r3, #0
 80034b6:	77fb      	strb	r3, [r7, #31]
 80034b8:	e061      	b.n	800357e <UART_SetConfig+0x212>
 80034ba:	2302      	movs	r3, #2
 80034bc:	77fb      	strb	r3, [r7, #31]
 80034be:	e05e      	b.n	800357e <UART_SetConfig+0x212>
 80034c0:	2304      	movs	r3, #4
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e05b      	b.n	800357e <UART_SetConfig+0x212>
 80034c6:	2308      	movs	r3, #8
 80034c8:	77fb      	strb	r3, [r7, #31]
 80034ca:	e058      	b.n	800357e <UART_SetConfig+0x212>
 80034cc:	2310      	movs	r3, #16
 80034ce:	77fb      	strb	r3, [r7, #31]
 80034d0:	e055      	b.n	800357e <UART_SetConfig+0x212>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a47      	ldr	r2, [pc, #284]	; (80035f4 <UART_SetConfig+0x288>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d124      	bne.n	8003526 <UART_SetConfig+0x1ba>
 80034dc:	4b42      	ldr	r3, [pc, #264]	; (80035e8 <UART_SetConfig+0x27c>)
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80034e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034e8:	d011      	beq.n	800350e <UART_SetConfig+0x1a2>
 80034ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034ee:	d817      	bhi.n	8003520 <UART_SetConfig+0x1b4>
 80034f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034f4:	d011      	beq.n	800351a <UART_SetConfig+0x1ae>
 80034f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034fa:	d811      	bhi.n	8003520 <UART_SetConfig+0x1b4>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <UART_SetConfig+0x19c>
 8003500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003504:	d006      	beq.n	8003514 <UART_SetConfig+0x1a8>
 8003506:	e00b      	b.n	8003520 <UART_SetConfig+0x1b4>
 8003508:	2300      	movs	r3, #0
 800350a:	77fb      	strb	r3, [r7, #31]
 800350c:	e037      	b.n	800357e <UART_SetConfig+0x212>
 800350e:	2302      	movs	r3, #2
 8003510:	77fb      	strb	r3, [r7, #31]
 8003512:	e034      	b.n	800357e <UART_SetConfig+0x212>
 8003514:	2304      	movs	r3, #4
 8003516:	77fb      	strb	r3, [r7, #31]
 8003518:	e031      	b.n	800357e <UART_SetConfig+0x212>
 800351a:	2308      	movs	r3, #8
 800351c:	77fb      	strb	r3, [r7, #31]
 800351e:	e02e      	b.n	800357e <UART_SetConfig+0x212>
 8003520:	2310      	movs	r3, #16
 8003522:	77fb      	strb	r3, [r7, #31]
 8003524:	e02b      	b.n	800357e <UART_SetConfig+0x212>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a33      	ldr	r2, [pc, #204]	; (80035f8 <UART_SetConfig+0x28c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d124      	bne.n	800357a <UART_SetConfig+0x20e>
 8003530:	4b2d      	ldr	r3, [pc, #180]	; (80035e8 <UART_SetConfig+0x27c>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003538:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800353c:	d011      	beq.n	8003562 <UART_SetConfig+0x1f6>
 800353e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003542:	d817      	bhi.n	8003574 <UART_SetConfig+0x208>
 8003544:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003548:	d011      	beq.n	800356e <UART_SetConfig+0x202>
 800354a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800354e:	d811      	bhi.n	8003574 <UART_SetConfig+0x208>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <UART_SetConfig+0x1f0>
 8003554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003558:	d006      	beq.n	8003568 <UART_SetConfig+0x1fc>
 800355a:	e00b      	b.n	8003574 <UART_SetConfig+0x208>
 800355c:	2300      	movs	r3, #0
 800355e:	77fb      	strb	r3, [r7, #31]
 8003560:	e00d      	b.n	800357e <UART_SetConfig+0x212>
 8003562:	2302      	movs	r3, #2
 8003564:	77fb      	strb	r3, [r7, #31]
 8003566:	e00a      	b.n	800357e <UART_SetConfig+0x212>
 8003568:	2304      	movs	r3, #4
 800356a:	77fb      	strb	r3, [r7, #31]
 800356c:	e007      	b.n	800357e <UART_SetConfig+0x212>
 800356e:	2308      	movs	r3, #8
 8003570:	77fb      	strb	r3, [r7, #31]
 8003572:	e004      	b.n	800357e <UART_SetConfig+0x212>
 8003574:	2310      	movs	r3, #16
 8003576:	77fb      	strb	r3, [r7, #31]
 8003578:	e001      	b.n	800357e <UART_SetConfig+0x212>
 800357a:	2310      	movs	r3, #16
 800357c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003586:	d16c      	bne.n	8003662 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8003588:	7ffb      	ldrb	r3, [r7, #31]
 800358a:	2b08      	cmp	r3, #8
 800358c:	d838      	bhi.n	8003600 <UART_SetConfig+0x294>
 800358e:	a201      	add	r2, pc, #4	; (adr r2, 8003594 <UART_SetConfig+0x228>)
 8003590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003594:	080035b9 	.word	0x080035b9
 8003598:	080035c1 	.word	0x080035c1
 800359c:	080035c9 	.word	0x080035c9
 80035a0:	08003601 	.word	0x08003601
 80035a4:	080035cf 	.word	0x080035cf
 80035a8:	08003601 	.word	0x08003601
 80035ac:	08003601 	.word	0x08003601
 80035b0:	08003601 	.word	0x08003601
 80035b4:	080035d7 	.word	0x080035d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b8:	f7ff fb60 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 80035bc:	61b8      	str	r0, [r7, #24]
        break;
 80035be:	e024      	b.n	800360a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035c0:	f7ff fb7e 	bl	8002cc0 <HAL_RCC_GetPCLK2Freq>
 80035c4:	61b8      	str	r0, [r7, #24]
        break;
 80035c6:	e020      	b.n	800360a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035c8:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <UART_SetConfig+0x290>)
 80035ca:	61bb      	str	r3, [r7, #24]
        break;
 80035cc:	e01d      	b.n	800360a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ce:	f7ff fadf 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 80035d2:	61b8      	str	r0, [r7, #24]
        break;
 80035d4:	e019      	b.n	800360a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035da:	61bb      	str	r3, [r7, #24]
        break;
 80035dc:	e015      	b.n	800360a <UART_SetConfig+0x29e>
 80035de:	bf00      	nop
 80035e0:	efff69f3 	.word	0xefff69f3
 80035e4:	40013800 	.word	0x40013800
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40004400 	.word	0x40004400
 80035f0:	40004800 	.word	0x40004800
 80035f4:	40004c00 	.word	0x40004c00
 80035f8:	40005000 	.word	0x40005000
 80035fc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	77bb      	strb	r3, [r7, #30]
        break;
 8003608:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d075      	beq.n	80036fc <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	005a      	lsls	r2, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	085b      	lsrs	r3, r3, #1
 800361a:	441a      	add	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	fbb2 f3f3 	udiv	r3, r2, r3
 8003624:	b29b      	uxth	r3, r3
 8003626:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	2b0f      	cmp	r3, #15
 800362c:	d916      	bls.n	800365c <UART_SetConfig+0x2f0>
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003634:	d212      	bcs.n	800365c <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	b29b      	uxth	r3, r3
 800363a:	f023 030f 	bic.w	r3, r3, #15
 800363e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	085b      	lsrs	r3, r3, #1
 8003644:	b29b      	uxth	r3, r3
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	b29a      	uxth	r2, r3
 800364c:	89fb      	ldrh	r3, [r7, #14]
 800364e:	4313      	orrs	r3, r2
 8003650:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	89fa      	ldrh	r2, [r7, #14]
 8003658:	60da      	str	r2, [r3, #12]
 800365a:	e04f      	b.n	80036fc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	77bb      	strb	r3, [r7, #30]
 8003660:	e04c      	b.n	80036fc <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003662:	7ffb      	ldrb	r3, [r7, #31]
 8003664:	2b08      	cmp	r3, #8
 8003666:	d828      	bhi.n	80036ba <UART_SetConfig+0x34e>
 8003668:	a201      	add	r2, pc, #4	; (adr r2, 8003670 <UART_SetConfig+0x304>)
 800366a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366e:	bf00      	nop
 8003670:	08003695 	.word	0x08003695
 8003674:	0800369d 	.word	0x0800369d
 8003678:	080036a5 	.word	0x080036a5
 800367c:	080036bb 	.word	0x080036bb
 8003680:	080036ab 	.word	0x080036ab
 8003684:	080036bb 	.word	0x080036bb
 8003688:	080036bb 	.word	0x080036bb
 800368c:	080036bb 	.word	0x080036bb
 8003690:	080036b3 	.word	0x080036b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003694:	f7ff faf2 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 8003698:	61b8      	str	r0, [r7, #24]
        break;
 800369a:	e013      	b.n	80036c4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800369c:	f7ff fb10 	bl	8002cc0 <HAL_RCC_GetPCLK2Freq>
 80036a0:	61b8      	str	r0, [r7, #24]
        break;
 80036a2:	e00f      	b.n	80036c4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036a4:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <UART_SetConfig+0x3a8>)
 80036a6:	61bb      	str	r3, [r7, #24]
        break;
 80036a8:	e00c      	b.n	80036c4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036aa:	f7ff fa71 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 80036ae:	61b8      	str	r0, [r7, #24]
        break;
 80036b0:	e008      	b.n	80036c4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036b6:	61bb      	str	r3, [r7, #24]
        break;
 80036b8:	e004      	b.n	80036c4 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	77bb      	strb	r3, [r7, #30]
        break;
 80036c2:	bf00      	nop
    }

    if (pclk != 0U)
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d018      	beq.n	80036fc <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	085a      	lsrs	r2, r3, #1
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	441a      	add	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036dc:	b29b      	uxth	r3, r3
 80036de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	2b0f      	cmp	r3, #15
 80036e4:	d908      	bls.n	80036f8 <UART_SetConfig+0x38c>
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ec:	d204      	bcs.n	80036f8 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	60da      	str	r2, [r3, #12]
 80036f6:	e001      	b.n	80036fc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003708:	7fbb      	ldrb	r3, [r7, #30]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3720      	adds	r7, #32
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	007a1200 	.word	0x007a1200

08003718 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00a      	beq.n	80037ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01a      	beq.n	800382e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003816:	d10a      	bne.n	800382e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	605a      	str	r2, [r3, #4]
  }
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af02      	add	r7, sp, #8
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800386c:	f7fd fb16 	bl	8000e9c <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b08      	cmp	r3, #8
 800387e:	d10e      	bne.n	800389e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003880:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f82d 	bl	80038ee <UART_WaitOnFlagUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e023      	b.n	80038e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d10e      	bne.n	80038ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f817 	bl	80038ee <UART_WaitOnFlagUntilTimeout>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e00d      	b.n	80038e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2220      	movs	r2, #32
 80038ce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b09c      	sub	sp, #112	; 0x70
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	603b      	str	r3, [r7, #0]
 80038fa:	4613      	mov	r3, r2
 80038fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038fe:	e0a5      	b.n	8003a4c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003906:	f000 80a1 	beq.w	8003a4c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800390a:	f7fd fac7 	bl	8000e9c <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003916:	429a      	cmp	r2, r3
 8003918:	d302      	bcc.n	8003920 <UART_WaitOnFlagUntilTimeout+0x32>
 800391a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800391c:	2b00      	cmp	r3, #0
 800391e:	d13e      	bne.n	800399e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003928:	e853 3f00 	ldrex	r3, [r3]
 800392c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800392e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003930:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003934:	667b      	str	r3, [r7, #100]	; 0x64
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800393e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003940:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003944:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800394c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e6      	bne.n	8003920 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3308      	adds	r3, #8
 8003958:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003964:	f023 0301 	bic.w	r3, r3, #1
 8003968:	663b      	str	r3, [r7, #96]	; 0x60
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3308      	adds	r3, #8
 8003970:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003972:	64ba      	str	r2, [r7, #72]	; 0x48
 8003974:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003976:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003978:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1e5      	bne.n	8003952 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2220      	movs	r2, #32
 800398a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e067      	b.n	8003a6e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d04f      	beq.n	8003a4c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ba:	d147      	bne.n	8003a4c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e4:	637b      	str	r3, [r7, #52]	; 0x34
 80039e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e6      	bne.n	80039c6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3308      	adds	r3, #8
 80039fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	e853 3f00 	ldrex	r3, [r3]
 8003a06:	613b      	str	r3, [r7, #16]
   return(result);
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f023 0301 	bic.w	r3, r3, #1
 8003a0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3308      	adds	r3, #8
 8003a16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a18:	623a      	str	r2, [r7, #32]
 8003a1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1c:	69f9      	ldr	r1, [r7, #28]
 8003a1e:	6a3a      	ldr	r2, [r7, #32]
 8003a20:	e841 2300 	strex	r3, r2, [r1]
 8003a24:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e5      	bne.n	80039f8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2220      	movs	r2, #32
 8003a36:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e010      	b.n	8003a6e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69da      	ldr	r2, [r3, #28]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	4013      	ands	r3, r2
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2301      	moveq	r3, #1
 8003a5e:	2300      	movne	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	f43f af4a 	beq.w	8003900 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3770      	adds	r7, #112	; 0x70
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b091      	sub	sp, #68	; 0x44
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	4613      	mov	r3, r2
 8003a84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	88fa      	ldrh	r2, [r7, #6]
 8003a90:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	88fa      	ldrh	r2, [r7, #6]
 8003a98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aaa:	d10e      	bne.n	8003aca <UART_Start_Receive_IT+0x52>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d105      	bne.n	8003ac0 <UART_Start_Receive_IT+0x48>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003aba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003abe:	e02d      	b.n	8003b1c <UART_Start_Receive_IT+0xa4>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	22ff      	movs	r2, #255	; 0xff
 8003ac4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ac8:	e028      	b.n	8003b1c <UART_Start_Receive_IT+0xa4>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10d      	bne.n	8003aee <UART_Start_Receive_IT+0x76>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d104      	bne.n	8003ae4 <UART_Start_Receive_IT+0x6c>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	22ff      	movs	r2, #255	; 0xff
 8003ade:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ae2:	e01b      	b.n	8003b1c <UART_Start_Receive_IT+0xa4>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	227f      	movs	r2, #127	; 0x7f
 8003ae8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003aec:	e016      	b.n	8003b1c <UART_Start_Receive_IT+0xa4>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003af6:	d10d      	bne.n	8003b14 <UART_Start_Receive_IT+0x9c>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d104      	bne.n	8003b0a <UART_Start_Receive_IT+0x92>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	227f      	movs	r2, #127	; 0x7f
 8003b04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b08:	e008      	b.n	8003b1c <UART_Start_Receive_IT+0xa4>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	223f      	movs	r2, #63	; 0x3f
 8003b0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b12:	e003      	b.n	8003b1c <UART_Start_Receive_IT+0xa4>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2222      	movs	r2, #34	; 0x22
 8003b28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3308      	adds	r3, #8
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	e853 3f00 	ldrex	r3, [r3]
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3308      	adds	r3, #8
 8003b48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b4a:	637a      	str	r2, [r7, #52]	; 0x34
 8003b4c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e5      	bne.n	8003b2a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b66:	d107      	bne.n	8003b78 <UART_Start_Receive_IT+0x100>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d103      	bne.n	8003b78 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4a15      	ldr	r2, [pc, #84]	; (8003bc8 <UART_Start_Receive_IT+0x150>)
 8003b74:	665a      	str	r2, [r3, #100]	; 0x64
 8003b76:	e002      	b.n	8003b7e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4a14      	ldr	r2, [pc, #80]	; (8003bcc <UART_Start_Receive_IT+0x154>)
 8003b7c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	e853 3f00 	ldrex	r3, [r3]
 8003b92:	613b      	str	r3, [r7, #16]
   return(result);
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba4:	623b      	str	r3, [r7, #32]
 8003ba6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba8:	69f9      	ldr	r1, [r7, #28]
 8003baa:	6a3a      	ldr	r2, [r7, #32]
 8003bac:	e841 2300 	strex	r3, r2, [r1]
 8003bb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e6      	bne.n	8003b86 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3744      	adds	r7, #68	; 0x44
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	08003ea5 	.word	0x08003ea5
 8003bcc:	08003d49 	.word	0x08003d49

08003bd0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b08f      	sub	sp, #60	; 0x3c
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bdc:	2b21      	cmp	r3, #33	; 0x21
 8003bde:	d14d      	bne.n	8003c7c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d132      	bne.n	8003c52 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	e853 3f00 	ldrex	r3, [r3]
 8003bf8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c00:	637b      	str	r3, [r7, #52]	; 0x34
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c0c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c12:	e841 2300 	strex	r3, r2, [r1]
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1e6      	bne.n	8003bec <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	e853 3f00 	ldrex	r3, [r3]
 8003c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c32:	633b      	str	r3, [r7, #48]	; 0x30
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3c:	61bb      	str	r3, [r7, #24]
 8003c3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c40:	6979      	ldr	r1, [r7, #20]
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	e841 2300 	strex	r3, r2, [r1]
 8003c48:	613b      	str	r3, [r7, #16]
   return(result);
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e6      	bne.n	8003c1e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003c50:	e014      	b.n	8003c7c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c56:	781a      	ldrb	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	b292      	uxth	r2, r2
 8003c5e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003c7c:	bf00      	nop
 8003c7e:	373c      	adds	r7, #60	; 0x3c
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b091      	sub	sp, #68	; 0x44
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c94:	2b21      	cmp	r3, #33	; 0x21
 8003c96:	d151      	bne.n	8003d3c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d132      	bne.n	8003d0a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	e853 3f00 	ldrex	r3, [r3]
 8003cb0:	623b      	str	r3, [r7, #32]
   return(result);
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc2:	633b      	str	r3, [r7, #48]	; 0x30
 8003cc4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e6      	bne.n	8003ca4 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	e853 3f00 	ldrex	r3, [r3]
 8003ce2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cea:	637b      	str	r3, [r7, #52]	; 0x34
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf4:	61fb      	str	r3, [r7, #28]
 8003cf6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf8:	69b9      	ldr	r1, [r7, #24]
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	e841 2300 	strex	r3, r2, [r1]
 8003d00:	617b      	str	r3, [r7, #20]
   return(result);
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e6      	bne.n	8003cd6 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003d08:	e018      	b.n	8003d3c <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d12:	881a      	ldrh	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d1c:	b292      	uxth	r2, r2
 8003d1e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d24:	1c9a      	adds	r2, r3, #2
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003d3c:	bf00      	nop
 8003d3e:	3744      	adds	r7, #68	; 0x44
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b096      	sub	sp, #88	; 0x58
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d56:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d5e:	2b22      	cmp	r3, #34	; 0x22
 8003d60:	f040 8094 	bne.w	8003e8c <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d6a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d6e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003d72:	b2d9      	uxtb	r1, r3
 8003d74:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7e:	400a      	ands	r2, r1
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d177      	bne.n	8003e9c <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dc0:	653b      	str	r3, [r7, #80]	; 0x50
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dca:	647b      	str	r3, [r7, #68]	; 0x44
 8003dcc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e6      	bne.n	8003dac <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3308      	adds	r3, #8
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	e853 3f00 	ldrex	r3, [r3]
 8003dec:	623b      	str	r3, [r7, #32]
   return(result);
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	f023 0301 	bic.w	r3, r3, #1
 8003df4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dfe:	633a      	str	r2, [r7, #48]	; 0x30
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e06:	e841 2300 	strex	r3, r2, [r1]
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e5      	bne.n	8003dde <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d12e      	bne.n	8003e84 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	e853 3f00 	ldrex	r3, [r3]
 8003e38:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f023 0310 	bic.w	r3, r3, #16
 8003e40:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e4a:	61fb      	str	r3, [r7, #28]
 8003e4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	69b9      	ldr	r1, [r7, #24]
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	617b      	str	r3, [r7, #20]
   return(result);
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e6      	bne.n	8003e2c <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	f003 0310 	and.w	r3, r3, #16
 8003e68:	2b10      	cmp	r3, #16
 8003e6a:	d103      	bne.n	8003e74 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2210      	movs	r2, #16
 8003e72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff fa69 	bl	8003354 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e82:	e00b      	b.n	8003e9c <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7fc fb89 	bl	800059c <HAL_UART_RxCpltCallback>
}
 8003e8a:	e007      	b.n	8003e9c <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0208 	orr.w	r2, r2, #8
 8003e9a:	619a      	str	r2, [r3, #24]
}
 8003e9c:	bf00      	nop
 8003e9e:	3758      	adds	r7, #88	; 0x58
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b096      	sub	sp, #88	; 0x58
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003eb2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eba:	2b22      	cmp	r3, #34	; 0x22
 8003ebc:	f040 8094 	bne.w	8003fe8 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003ec6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ece:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003ed0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003ed4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003ed8:	4013      	ands	r3, r2
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ede:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee4:	1c9a      	adds	r2, r3, #2
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d177      	bne.n	8003ff8 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f26:	643b      	str	r3, [r7, #64]	; 0x40
 8003f28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e6      	bne.n	8003f08 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3308      	adds	r3, #8
 8003f40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	f023 0301 	bic.w	r3, r3, #1
 8003f50:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3308      	adds	r3, #8
 8003f58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e5      	bne.n	8003f3a <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2220      	movs	r2, #32
 8003f72:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d12e      	bne.n	8003fe0 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f023 0310 	bic.w	r3, r3, #16
 8003f9c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fa6:	61bb      	str	r3, [r7, #24]
 8003fa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	6979      	ldr	r1, [r7, #20]
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e6      	bne.n	8003f88 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b10      	cmp	r3, #16
 8003fc6:	d103      	bne.n	8003fd0 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2210      	movs	r2, #16
 8003fce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff f9bb 	bl	8003354 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fde:	e00b      	b.n	8003ff8 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7fc fadb 	bl	800059c <HAL_UART_RxCpltCallback>
}
 8003fe6:	e007      	b.n	8003ff8 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0208 	orr.w	r2, r2, #8
 8003ff6:	619a      	str	r2, [r3, #24]
}
 8003ff8:	bf00      	nop
 8003ffa:	3758      	adds	r7, #88	; 0x58
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <__libc_init_array>:
 8004000:	b570      	push	{r4, r5, r6, lr}
 8004002:	4d0d      	ldr	r5, [pc, #52]	; (8004038 <__libc_init_array+0x38>)
 8004004:	4c0d      	ldr	r4, [pc, #52]	; (800403c <__libc_init_array+0x3c>)
 8004006:	1b64      	subs	r4, r4, r5
 8004008:	10a4      	asrs	r4, r4, #2
 800400a:	2600      	movs	r6, #0
 800400c:	42a6      	cmp	r6, r4
 800400e:	d109      	bne.n	8004024 <__libc_init_array+0x24>
 8004010:	4d0b      	ldr	r5, [pc, #44]	; (8004040 <__libc_init_array+0x40>)
 8004012:	4c0c      	ldr	r4, [pc, #48]	; (8004044 <__libc_init_array+0x44>)
 8004014:	f000 f820 	bl	8004058 <_init>
 8004018:	1b64      	subs	r4, r4, r5
 800401a:	10a4      	asrs	r4, r4, #2
 800401c:	2600      	movs	r6, #0
 800401e:	42a6      	cmp	r6, r4
 8004020:	d105      	bne.n	800402e <__libc_init_array+0x2e>
 8004022:	bd70      	pop	{r4, r5, r6, pc}
 8004024:	f855 3b04 	ldr.w	r3, [r5], #4
 8004028:	4798      	blx	r3
 800402a:	3601      	adds	r6, #1
 800402c:	e7ee      	b.n	800400c <__libc_init_array+0xc>
 800402e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004032:	4798      	blx	r3
 8004034:	3601      	adds	r6, #1
 8004036:	e7f2      	b.n	800401e <__libc_init_array+0x1e>
 8004038:	080040a8 	.word	0x080040a8
 800403c:	080040a8 	.word	0x080040a8
 8004040:	080040a8 	.word	0x080040a8
 8004044:	080040b0 	.word	0x080040b0

08004048 <memset>:
 8004048:	4402      	add	r2, r0
 800404a:	4603      	mov	r3, r0
 800404c:	4293      	cmp	r3, r2
 800404e:	d100      	bne.n	8004052 <memset+0xa>
 8004050:	4770      	bx	lr
 8004052:	f803 1b01 	strb.w	r1, [r3], #1
 8004056:	e7f9      	b.n	800404c <memset+0x4>

08004058 <_init>:
 8004058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405a:	bf00      	nop
 800405c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405e:	bc08      	pop	{r3}
 8004060:	469e      	mov	lr, r3
 8004062:	4770      	bx	lr

08004064 <_fini>:
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	bf00      	nop
 8004068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406a:	bc08      	pop	{r3}
 800406c:	469e      	mov	lr, r3
 800406e:	4770      	bx	lr
