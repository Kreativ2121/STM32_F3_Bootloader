
Bootloaderv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c88  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004e1c  08004e1c  00014e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e54  08004e54  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004e54  08004e54  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e54  08004e54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004e54  08004e54  00014e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e5c  08004e5c  00014e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001b0  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e228  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002528  00000000  00000000  0002e264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000970  00000000  00000000  00030790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000898  00000000  00000000  00031100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022881  00000000  00000000  00031998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ea04  00000000  00000000  00054219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3733  00000000  00000000  00062c1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00126350  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024b0  00000000  00000000  001263a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004e04 	.word	0x08004e04

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08004e04 	.word	0x08004e04

080001d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08a      	sub	sp, #40	; 0x28
 80001d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001da:	f107 0314 	add.w	r3, r7, #20
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ea:	4b2b      	ldr	r3, [pc, #172]	; (8000298 <MX_GPIO_Init+0xc4>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a2a      	ldr	r2, [pc, #168]	; (8000298 <MX_GPIO_Init+0xc4>)
 80001f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001f4:	6153      	str	r3, [r2, #20]
 80001f6:	4b28      	ldr	r3, [pc, #160]	; (8000298 <MX_GPIO_Init+0xc4>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80001fe:	613b      	str	r3, [r7, #16]
 8000200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000202:	4b25      	ldr	r3, [pc, #148]	; (8000298 <MX_GPIO_Init+0xc4>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	4a24      	ldr	r2, [pc, #144]	; (8000298 <MX_GPIO_Init+0xc4>)
 8000208:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800020c:	6153      	str	r3, [r2, #20]
 800020e:	4b22      	ldr	r3, [pc, #136]	; (8000298 <MX_GPIO_Init+0xc4>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021a:	4b1f      	ldr	r3, [pc, #124]	; (8000298 <MX_GPIO_Init+0xc4>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	4a1e      	ldr	r2, [pc, #120]	; (8000298 <MX_GPIO_Init+0xc4>)
 8000220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000224:	6153      	str	r3, [r2, #20]
 8000226:	4b1c      	ldr	r3, [pc, #112]	; (8000298 <MX_GPIO_Init+0xc4>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800022e:	60bb      	str	r3, [r7, #8]
 8000230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000232:	4b19      	ldr	r3, [pc, #100]	; (8000298 <MX_GPIO_Init+0xc4>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	4a18      	ldr	r2, [pc, #96]	; (8000298 <MX_GPIO_Init+0xc4>)
 8000238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800023c:	6153      	str	r3, [r2, #20]
 800023e:	4b16      	ldr	r3, [pc, #88]	; (8000298 <MX_GPIO_Init+0xc4>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	2120      	movs	r1, #32
 800024e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000252:	f001 fd51 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000256:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800025a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800025c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000262:	2300      	movs	r3, #0
 8000264:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000266:	f107 0314 	add.w	r3, r7, #20
 800026a:	4619      	mov	r1, r3
 800026c:	480b      	ldr	r0, [pc, #44]	; (800029c <MX_GPIO_Init+0xc8>)
 800026e:	f001 fbb9 	bl	80019e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000272:	2320      	movs	r3, #32
 8000274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000276:	2301      	movs	r3, #1
 8000278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027a:	2300      	movs	r3, #0
 800027c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800027e:	2300      	movs	r3, #0
 8000280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000282:	f107 0314 	add.w	r3, r7, #20
 8000286:	4619      	mov	r1, r3
 8000288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028c:	f001 fbaa 	bl	80019e4 <HAL_GPIO_Init>

}
 8000290:	bf00      	nop
 8000292:	3728      	adds	r7, #40	; 0x28
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	40021000 	.word	0x40021000
 800029c:	48000800 	.word	0x48000800

080002a0 <_ZN5M485E4initEP20__UART_HandleTypeDef>:

    
    // --------- KONFIGURACJA ----------------------------

    /// inicjalizacja
    public: void init( UART_HandleTypeDef *aUart ){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
      
      mhUart = aUart;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	683a      	ldr	r2, [r7, #0]
 80002ae:	601a      	str	r2, [r3, #0]
      HAL_UART_Receive_IT( mhUart, mRXBuf, 1 );
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	6818      	ldr	r0, [r3, #0]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	334a      	adds	r3, #74	; 0x4a
 80002b8:	2201      	movs	r2, #1
 80002ba:	4619      	mov	r1, r3
 80002bc:	f003 fb3c 	bl	8003938 <HAL_UART_Receive_IT>
      
    }//-------------------------------------------------------------------------
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <_ZN5M485E7Send_ITEv>:

    
    public: void sendTX_EXT( uint8_t cnt, uint8_t *frame );
  
    //--------------------------------------------------------------------------
    public: void Send_IT(){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
      uint8_t *buf;
      int cnt = 0;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
      // sprawdz czy jakiekolwiek dane czekaja
      bool res = bufPrepareTX( &buf, &cnt );
 80002d4:	f107 020c 	add.w	r2, r7, #12
 80002d8:	f107 0310 	add.w	r3, r7, #16
 80002dc:	4619      	mov	r1, r3
 80002de:	6878      	ldr	r0, [r7, #4]
 80002e0:	f000 f90a 	bl	80004f8 <_ZN5M485E12bufPrepareTXEPPhPi>
 80002e4:	4603      	mov	r3, r0
 80002e6:	75fb      	strb	r3, [r7, #23]
      if( res ){
 80002e8:	7dfb      	ldrb	r3, [r7, #23]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d01f      	beq.n	800032e <_ZN5M485E7Send_ITEv+0x66>
        
          //HAL_GPIO_WritePin( GPIOA, GPIO_PIN_12, GPIO_PIN_SET );
     //     ITM_EVENT8( 3, 1 );
          _o485E_EN = 1;
 80002ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002f2:	7d53      	ldrb	r3, [r2, #21]
 80002f4:	f043 0310 	orr.w	r3, r3, #16
 80002f8:	7553      	strb	r3, [r2, #21]
          HAL_StatusTypeDef uartRes = HAL_UART_Transmit_IT( mhUart, buf,  cnt );
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	6939      	ldr	r1, [r7, #16]
 8000300:	68fa      	ldr	r2, [r7, #12]
 8000302:	b292      	uxth	r2, r2
 8000304:	4618      	mov	r0, r3
 8000306:	f003 faa9 	bl	800385c <HAL_UART_Transmit_IT>
 800030a:	4603      	mov	r3, r0
 800030c:	75bb      	strb	r3, [r7, #22]
          // sprawdz czy udalo sie wyslac
          
           mIsEN_to_0 += cnt;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	f893 2077 	ldrb.w	r2, [r3, #119]	; 0x77
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	b2db      	uxtb	r3, r3
 8000318:	4413      	add	r3, r2
 800031a:	b2da      	uxtb	r2, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
     //      for( int i=0; i<cnt; i++ )
      //          ITM_EVENT8( 1, buf[i] );
          
          if( uartRes == HAL_OK ){   
 8000322:	7dbb      	ldrb	r3, [r7, #22]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d102      	bne.n	800032e <_ZN5M485E7Send_ITEv+0x66>
            mSendingTXCnt = cnt;
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	63da      	str	r2, [r3, #60]	; 0x3c
          }
      }    
    }//-------------------------------------------------------------------------
 800032e:	bf00      	nop
 8000330:	3718      	adds	r7, #24
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}

08000336 <_ZN5M485E7onIT_TXEv>:
 //   public: void onTimer_Frame();
           
    uint8_t mIsEN_to_0 = 0;
    /// ------------------------------------------------------------------------
    /// w przerwaniu TX
    public: void onIT_TX(){
 8000336:	b580      	push	{r7, lr}
 8000338:	b086      	sub	sp, #24
 800033a:	af00      	add	r7, sp, #0
 800033c:	6078      	str	r0, [r7, #4]
      // wyczysc bufor
      
      
      //ITM_EVENT8( 2, mIsEN_to_0 );
      if( mIsEN_to_0 != 0 ){
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8000344:	2b00      	cmp	r3, #0
 8000346:	d003      	beq.n	8000350 <_ZN5M485E7onIT_TXEv+0x1a>
        // ITM_EVENT8( 2, mIsEN_to_0 );
        mIsEN_to_0 = 0;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2200      	movs	r2, #0
 800034c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
      }
      
      
      bufRemoveN(  mhUart->TxXferSize );
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000358:	4619      	mov	r1, r3
 800035a:	6878      	ldr	r0, [r7, #4]
 800035c:	f000 f906 	bl	800056c <_ZN5M485E10bufRemoveNEi>

        
      //send_IT - skopiowane
      {
         uint8_t *buf;
         int cnt = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	60fb      	str	r3, [r7, #12]
         // sprawdz czy jakiekolwiek dane czekaja
         bool res = bufPrepareTX( &buf, &cnt );
 8000364:	f107 020c 	add.w	r2, r7, #12
 8000368:	f107 0310 	add.w	r3, r7, #16
 800036c:	4619      	mov	r1, r3
 800036e:	6878      	ldr	r0, [r7, #4]
 8000370:	f000 f8c2 	bl	80004f8 <_ZN5M485E12bufPrepareTXEPPhPi>
 8000374:	4603      	mov	r3, r0
 8000376:	75fb      	strb	r3, [r7, #23]
         if( res ){
 8000378:	7dfb      	ldrb	r3, [r7, #23]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d01f      	beq.n	80003be <_ZN5M485E7onIT_TXEv+0x88>
             // HAL_GPIO_WritePin( GPIOA, GPIO_PIN_12, GPIO_PIN_SET );
           //  ITM_EVENT8( 3, 2 );
             _o485E_EN = 1;
 800037e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000382:	7d53      	ldrb	r3, [r2, #21]
 8000384:	f043 0310 	orr.w	r3, r3, #16
 8000388:	7553      	strb	r3, [r2, #21]
             HAL_StatusTypeDef uartRes = HAL_UART_Transmit_IT( mhUart, buf,  cnt );
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	6939      	ldr	r1, [r7, #16]
 8000390:	68fa      	ldr	r2, [r7, #12]
 8000392:	b292      	uxth	r2, r2
 8000394:	4618      	mov	r0, r3
 8000396:	f003 fa61 	bl	800385c <HAL_UART_Transmit_IT>
 800039a:	4603      	mov	r3, r0
 800039c:	75bb      	strb	r3, [r7, #22]
             mIsEN_to_0 += cnt;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	f893 2077 	ldrb.w	r2, [r3, #119]	; 0x77
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	4413      	add	r3, r2
 80003aa:	b2da      	uxtb	r2, r3
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77

             
          //   for( int i=0; i<cnt; i++ )
          //      ITM_EVENT8( 1, buf[i] );
             // sprawdz czy udalo sie wyslac
             if( uartRes == HAL_OK ){   
 80003b2:	7dbb      	ldrb	r3, [r7, #22]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d102      	bne.n	80003be <_ZN5M485E7onIT_TXEv+0x88>
               mSendingTXCnt = cnt;
 80003b8:	68fa      	ldr	r2, [r7, #12]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	63da      	str	r2, [r3, #60]	; 0x3c
             //mIsEN_to_0 = 4;
                       
          }
      }    
      
       if( mIsEN_to_0 <= 0 ){
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d10b      	bne.n	80003e0 <_ZN5M485E7onIT_TXEv+0xaa>
          
          if( isEmpty() ){
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f000 f849 	bl	8000460 <_ZN5M485E7isEmptyEv>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d005      	beq.n	80003e0 <_ZN5M485E7onIT_TXEv+0xaa>
          
            //mIsEN_to_0 = false;
            
         //   ITM_EVENT8( 3, 0 );
            _o485E_EN = 0;
 80003d4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003d8:	7d53      	ldrb	r3, [r2, #21]
 80003da:	f36f 1304 	bfc	r3, #4, #1
 80003de:	7553      	strb	r3, [r2, #21]
          }
       }
          
      //ITM_EVENT8( 2, mIsEN_to_0 );
    
    }//-------------------------------------------------------------------------
 80003e0:	bf00      	nop
 80003e2:	3718      	adds	r7, #24
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <_ZN5M485E7onIT_RXEv>:
    
    /// ------------------------------------------------------------------------
    /// w przerwaniu RX
    public: void onIT_RX(){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]

//        #ifndef _USART_PC
//          if( _o485E_EN == 0 ) 
//        #endif
        
          if( _o485E_EN == 0 ){
 80003f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003f4:	7d5b      	ldrb	r3, [r3, #21]
 80003f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	f083 0301 	eor.w	r3, r3, #1
 8000400:	b2db      	uxtb	r3, r3
 8000402:	2b00      	cmp	r3, #0
 8000404:	d006      	beq.n	8000414 <_ZN5M485E7onIT_RXEv+0x2c>
   //         ITM_EVENT8( 4, mRXBuf[0] );
            onReceive( mRXBuf[0] );
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800040c:	4619      	mov	r1, r3
 800040e:	6878      	ldr	r0, [r7, #4]
 8000410:	f000 fa78 	bl	8000904 <_ZN5M485E9onReceiveEh>
          }else{
  //          ITM_EVENT8( 4, mRXBuf[0] );
          }
        
        if( mIsEN_to_0 <= 0 ){
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800041a:	2b00      	cmp	r3, #0
 800041c:	d10c      	bne.n	8000438 <_ZN5M485E7onIT_RXEv+0x50>
          
          if( isEmpty() ){
 800041e:	6878      	ldr	r0, [r7, #4]
 8000420:	f000 f81e 	bl	8000460 <_ZN5M485E7isEmptyEv>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d00e      	beq.n	8000448 <_ZN5M485E7onIT_RXEv+0x60>
          
            //mIsEN_to_0 = false;
            
    //        ITM_EVENT8( 3, 0 );
            _o485E_EN = 0;
 800042a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800042e:	7d53      	ldrb	r3, [r2, #21]
 8000430:	f36f 1304 	bfc	r3, #4, #1
 8000434:	7553      	strb	r3, [r2, #21]
 8000436:	e007      	b.n	8000448 <_ZN5M485E7onIT_RXEv+0x60>
          }
          
          
        }else{
          //ITM_EVENT8( 3, mIsEN_to_0 );
          mIsEN_to_0 -= 1;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800043e:	3b01      	subs	r3, #1
 8000440:	b2da      	uxtb	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
//          _o485E_EN = 0;
//      }else{
//        //ITM_EVENT8( 3, mIsEN_to_0 );
//        mIsEN_to_0 -= 1;
//      }
      HAL_UART_Receive_IT(  mhUart, mRXBuf, 1 );
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	334a      	adds	r3, #74	; 0x4a
 8000450:	2201      	movs	r2, #1
 8000452:	4619      	mov	r1, r3
 8000454:	f003 fa70 	bl	8003938 <HAL_UART_Receive_IT>
    }//-------------------------------------------------------------------------
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <_ZN5M485E7isEmptyEv>:
    // po zakonczeniu wysylania (TX interrupt) bufRemoveN( cnt ) i sprawdza podnownie bufPrepareTx
  
        
    //--------------------------------------------------------------------------
    // czy pusty
    public: inline bool isEmpty(){
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
      return ( mIndexSTART == mIndexSTOP );
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000474:	429a      	cmp	r2, r3
 8000476:	bf0c      	ite	eq
 8000478:	2301      	moveq	r3, #1
 800047a:	2300      	movne	r3, #0
 800047c:	b2db      	uxtb	r3, r3
    }//-------------------------------------------------------------------------
 800047e:	4618      	mov	r0, r3
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
	...

0800048c <_ZN5M485E6bufAddEh>:
    
    //--------------------------------------------------------------------------
    // dodaje dana
    public: inline bool bufAdd( uint8_t aData ){
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	460b      	mov	r3, r1
 8000496:	70fb      	strb	r3, [r7, #3]
      
      // sprawdz czy mozna dodac dana
      int stopPrev = mIndexSTOP;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800049e:	60fb      	str	r3, [r7, #12]
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80004a6:	3301      	adds	r3, #1
 80004a8:	4a12      	ldr	r2, [pc, #72]	; (80004f4 <_ZN5M485E6bufAddEh+0x68>)
 80004aa:	fb82 1203 	smull	r1, r2, r2, r3
 80004ae:	1111      	asrs	r1, r2, #4
 80004b0:	17da      	asrs	r2, r3, #31
 80004b2:	1a8a      	subs	r2, r1, r2
 80004b4:	2132      	movs	r1, #50	; 0x32
 80004b6:	fb01 f202 	mul.w	r2, r1, r2
 80004ba:	1a9b      	subs	r3, r3, r2
 80004bc:	60bb      	str	r3, [r7, #8]
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80004c4:	461a      	mov	r2, r3
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d101      	bne.n	80004d0 <_ZN5M485E6bufAddEh+0x44>
 80004cc:	2300      	movs	r3, #0
 80004ce:	e00b      	b.n	80004e8 <_ZN5M485E6bufAddEh+0x5c>
      
      // dodaj dana
      mBuf[ stopPrev ] = aData;
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	4413      	add	r3, r2
 80004d6:	3305      	adds	r3, #5
 80004d8:	78fa      	ldrb	r2, [r7, #3]
 80004da:	701a      	strb	r2, [r3, #0]
      mIndexSTOP = stopTmp;
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	b2da      	uxtb	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      return true;
 80004e6:	2301      	movs	r3, #1
      
    }//-------------------------------------------------------------------------
 80004e8:	4618      	mov	r0, r3
 80004ea:	3714      	adds	r7, #20
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	51eb851f 	.word	0x51eb851f

080004f8 <_ZN5M485E12bufPrepareTXEPPhPi>:

    
    //--------------------------------------------------------------------------
    // przygotowuje bufor do nadawania UART
    // zamysl aby przekazac zywy mBuf, a na zawijaniu zatrzymac do nastepnej iteracji
    bool bufPrepareTX( uint8_t **aBuf, int *aCnt ){
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
      
      // sprawdz czy bufor nie pusty
      if( mIndexSTART == mIndexSTOP ) return false;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000510:	429a      	cmp	r2, r3
 8000512:	d101      	bne.n	8000518 <_ZN5M485E12bufPrepareTXEPPhPi+0x20>
 8000514:	2300      	movs	r3, #0
 8000516:	e023      	b.n	8000560 <_ZN5M485E12bufPrepareTXEPPhPi+0x68>
      
      // liczenie cnt
          // bufor nie przeciety granica
      if( mIndexSTART < mIndexSTOP )  (*aCnt) = mIndexSTOP - mIndexSTART;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000524:	429a      	cmp	r2, r3
 8000526:	d20a      	bcs.n	800053e <_ZN5M485E12bufPrepareTXEPPhPi+0x46>
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800052e:	461a      	mov	r2, r3
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000536:	1ad2      	subs	r2, r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	e006      	b.n	800054c <_ZN5M485E12bufPrepareTXEPPhPi+0x54>
          // bufor przeciety granica
      else                            (*aCnt) = cBufLength - mIndexSTART;
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000544:	f1c3 0232 	rsb	r2, r3, #50	; 0x32
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	601a      	str	r2, [r3, #0]
      
      // wypelnienie bufora
      (*aBuf) = &(mBuf[mIndexSTART]);
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000552:	461a      	mov	r2, r3
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	4413      	add	r3, r2
 8000558:	1d5a      	adds	r2, r3, #5
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	601a      	str	r2, [r3, #0]
      return true;
 800055e:	2301      	movs	r3, #1
      
    }//-------------------------------------------------------------------------
 8000560:	4618      	mov	r0, r3
 8000562:	3714      	adds	r7, #20
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <_ZN5M485E10bufRemoveNEi>:
    

    //--------------------------------------------------------------------------
    // kasuje N elementow (po nadaniu po UART)
    // zwraca liczbe skasowanych elementow
    int bufRemoveN( int aN ){
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]

      for( int i=0; i<aN; i++ ){
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	429a      	cmp	r2, r3
 8000580:	da21      	bge.n	80005c6 <_ZN5M485E10bufRemoveNEi+0x5a>
        // sprawdz czy mozna usunac
        if( mIndexSTART == mIndexSTOP ) return i;       // bufor pusty
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800058e:	429a      	cmp	r2, r3
 8000590:	d101      	bne.n	8000596 <_ZN5M485E10bufRemoveNEi+0x2a>
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	e018      	b.n	80005c8 <_ZN5M485E10bufRemoveNEi+0x5c>
        int startTmp = (mIndexSTART+1) % cBufLength;    // probne kasowanie
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800059c:	3301      	adds	r3, #1
 800059e:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <_ZN5M485E10bufRemoveNEi+0x68>)
 80005a0:	fb82 1203 	smull	r1, r2, r2, r3
 80005a4:	1111      	asrs	r1, r2, #4
 80005a6:	17da      	asrs	r2, r3, #31
 80005a8:	1a8a      	subs	r2, r1, r2
 80005aa:	2132      	movs	r1, #50	; 0x32
 80005ac:	fb01 f202 	mul.w	r2, r1, r2
 80005b0:	1a9b      	subs	r3, r3, r2
 80005b2:	60bb      	str	r3, [r7, #8]
        
        // kasuj element
        mIndexSTART = startTmp;                         // kasuj element
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
      for( int i=0; i<aN; i++ ){
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	e7d9      	b.n	800057a <_ZN5M485E10bufRemoveNEi+0xe>
      }
      
      return aN;      
 80005c6:	683b      	ldr	r3, [r7, #0]
        
    }//-------------------------------------------------------------------------
 80005c8:	4618      	mov	r0, r3
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	51eb851f 	.word	0x51eb851f

080005d8 <_ZN5M485EC1Ev>:
  class M485E{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2200      	movs	r2, #0
 80005e4:	711a      	strb	r2, [r3, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2200      	movs	r2, #0
 8000600:	641a      	str	r2, [r3, #64]	; 0x40
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2200      	movs	r2, #0
 8000606:	645a      	str	r2, [r3, #68]	; 0x44
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2200      	movs	r2, #0
 8000614:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	671a      	str	r2, [r3, #112]	; 0x70
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2201      	movs	r2, #1
 800062a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2201      	movs	r2, #1
 8000632:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <_ZN6MFlash6read32Ett>:
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
      uint16_t res = *(__IO uint16_t*)(addr);
      return res;
    };//------------------------------------------------------------------
    //--------------------------------------------------------------------  
    public: static uint32_t read32( uint16_t aPage, uint16_t aOffset ){
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	460a      	mov	r2, r1
 8000656:	80fb      	strh	r3, [r7, #6]
 8000658:	4613      	mov	r3, r2
 800065a:	80bb      	strh	r3, [r7, #4]
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000662:	02da      	lsls	r2, r3, #11
 8000664:	88bb      	ldrh	r3, [r7, #4]
 8000666:	4413      	add	r3, r2
 8000668:	60fb      	str	r3, [r7, #12]
      uint32_t res = *(__IO uint32_t*)(addr);
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	60bb      	str	r3, [r7, #8]
      return res;
 8000670:	68bb      	ldr	r3, [r7, #8]
    };//------------------------------------------------------------------
 8000672:	4618      	mov	r0, r3
 8000674:	3714      	adds	r7, #20
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <_ZN6MFlash4lockEv>:
    };//------------------------------------------------------------------
    
    
    /// LOCK .............................................................
    //--------------------------------------------------------------------
    public: static HAL_StatusTypeDef lock(){
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
      HAL_StatusTypeDef res = HAL_FLASH_Lock();
 8000684:	f001 f86c 	bl	8001760 <HAL_FLASH_Lock>
 8000688:	4603      	mov	r3, r0
 800068a:	71fb      	strb	r3, [r7, #7]
      return res;
 800068c:	79fb      	ldrb	r3, [r7, #7]
    };//------------------------------------------------------------------
 800068e:	4618      	mov	r0, r3
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <_ZN6MFlash6unlockEv>:
    //--------------------------------------------------------------------
    public: static HAL_StatusTypeDef unlock(){
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
      HAL_StatusTypeDef res = HAL_FLASH_Unlock();
 800069c:	f001 f83a 	bl	8001714 <HAL_FLASH_Unlock>
 80006a0:	4603      	mov	r3, r0
 80006a2:	71fb      	strb	r3, [r7, #7]
      return res;
 80006a4:	79fb      	ldrb	r3, [r7, #7]
    };//------------------------------------------------------------------
 80006a6:	4618      	mov	r0, r3
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <_ZN6MFlash7write32Ettm>:
       uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
       HAL_StatusTypeDef res = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD , addr, aData );
       return res;
    };//------------------------------------------------------------------
    //--------------------------------------------------------------------  
    public: static HAL_StatusTypeDef write32( uint16_t aPage, uint16_t aOffset, uint32_t aData ){
 80006ae:	b5b0      	push	{r4, r5, r7, lr}
 80006b0:	b084      	sub	sp, #16
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	4603      	mov	r3, r0
 80006b6:	603a      	str	r2, [r7, #0]
 80006b8:	80fb      	strh	r3, [r7, #6]
 80006ba:	460b      	mov	r3, r1
 80006bc:	80bb      	strh	r3, [r7, #4]
       uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80006c4:	02da      	lsls	r2, r3, #11
 80006c6:	88bb      	ldrh	r3, [r7, #4]
 80006c8:	4413      	add	r3, r2
 80006ca:	60fb      	str	r3, [r7, #12]
       HAL_StatusTypeDef res = HAL_FLASH_Program( FLASH_TYPEPROGRAM_WORD , addr, aData );
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	2200      	movs	r2, #0
 80006d0:	461c      	mov	r4, r3
 80006d2:	4615      	mov	r5, r2
 80006d4:	4622      	mov	r2, r4
 80006d6:	462b      	mov	r3, r5
 80006d8:	68f9      	ldr	r1, [r7, #12]
 80006da:	2002      	movs	r0, #2
 80006dc:	f000 ffaa 	bl	8001634 <HAL_FLASH_Program>
 80006e0:	4603      	mov	r3, r0
 80006e2:	72fb      	strb	r3, [r7, #11]
       return res;
 80006e4:	7afb      	ldrb	r3, [r7, #11]
    };//------------------------------------------------------------------
 80006e6:	4618      	mov	r0, r3
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bdb0      	pop	{r4, r5, r7, pc}

080006ee <_ZN6MFlash9erasePageEt>:
    
    
    
    /// ERASE ............................................................
    //--------------------------------------------------------------------  
    public: static HAL_StatusTypeDef erasePage( uint16_t aPage ){
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b088      	sub	sp, #32
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	4603      	mov	r3, r0
 80006f6:	80fb      	strh	r3, [r7, #6]
      
       uint32_t addr = 0x08000000 + (aPage * 0x800);
 80006f8:	88fb      	ldrh	r3, [r7, #6]
 80006fa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80006fe:	02db      	lsls	r3, r3, #11
 8000700:	61fb      	str	r3, [r7, #28]
      
       FLASH_EraseInitTypeDef f;
       f.TypeErase = FLASH_TYPEERASE_PAGES;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
       f.PageAddress = addr;
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	613b      	str	r3, [r7, #16]
       f.NbPages = 1;
 800070a:	2301      	movs	r3, #1
 800070c:	617b      	str	r3, [r7, #20]
      
       uint32_t PageError = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
       HAL_StatusTypeDef res = HAL_FLASHEx_Erase(&f, &PageError);
 8000712:	f107 0208 	add.w	r2, r7, #8
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	4611      	mov	r1, r2
 800071c:	4618      	mov	r0, r3
 800071e:	f001 f8bd 	bl	800189c <HAL_FLASHEx_Erase>
 8000722:	4603      	mov	r3, r0
 8000724:	76fb      	strb	r3, [r7, #27]
       return res;
 8000726:	7efb      	ldrb	r3, [r7, #27]
    };//------------------------------------------------------------------
 8000728:	4618      	mov	r0, r3
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <_Z13JumpToAddressm>:

#define APP_ADDRESS (uint32_t)0x08010000
typedef void (*pFunction)(void);

//Funkcja do przeskoczenia z bootloadera do aplikacji użytkownika
void JumpToAddress(uint32_t addr) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
    //uint32_t JumpAddress = *(uint32_t *) (addr + 0x0004); //Definitions for jump
    //pFunction Jump = (pFunction) JumpAddress; //Definitions for jump
	pFunction Jump = (pFunction) addr; //Definitions for jump
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	60fb      	str	r3, [r7, #12]

    HAL_RCC_DeInit(); //Peripherials deinitialization
 800073c:	f001 faf4 	bl	8001d28 <HAL_RCC_DeInit>
    HAL_DeInit();
 8000740:	f000 fd7a 	bl	8001238 <HAL_DeInit>
    SysTick->CTRL = 0;	//SysTick Reset
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <_Z13JumpToAddressm+0x48>)
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;	//SysTick Reset
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <_Z13JumpToAddressm+0x48>)
 800074c:	2200      	movs	r2, #0
 800074e:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0; 	//SysTick Reset
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <_Z13JumpToAddressm+0x48>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]

    /* Ustawić offset tablicy wektorów przerwań (SCB→VTOR). */
    SCB->VTOR = addr;
 8000756:	4a09      	ldr	r2, [pc, #36]	; (800077c <_Z13JumpToAddressm+0x4c>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6093      	str	r3, [r2, #8]
    /*Ustawić wskaźnik stosu (odczytany z tablicy przerwań
    z adresu 0x0000 [względnego do początku programu aplikacji
     użytkownika]).*/
    __set_MSP(*(uint32_t *) addr);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	f383 8808 	msr	MSP, r3
}
 8000768:	bf00      	nop

    Jump(); //Jump to begin of the program -> start_of_program + 0x0004
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	4798      	blx	r3
}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	e000e010 	.word	0xe000e010
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <HAL_UART_TxCpltCallback>:
    JumpToAddress(APP_ADDRESS);
}


//----------------------------------------------------------------------------
void HAL_UART_TxCpltCallback( UART_HandleTypeDef *huart ){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  //__disable_irq();
  if( huart == g485E.mhUart   )  g485E.onIT_TX();
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_UART_TxCpltCallback+0x20>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	429a      	cmp	r2, r3
 8000790:	d102      	bne.n	8000798 <HAL_UART_TxCpltCallback+0x18>
 8000792:	4803      	ldr	r0, [pc, #12]	; (80007a0 <HAL_UART_TxCpltCallback+0x20>)
 8000794:	f7ff fdcf 	bl	8000336 <_ZN5M485E7onIT_TXEv>
  //if( huart == gST7580.mhUart )  gST7580.onIT_TX();
 // __enable_irq();
 }//----------------------------------------------------------------------------
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	2000002c 	.word	0x2000002c

080007a4 <HAL_UART_RxCpltCallback>:

//----------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart ) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 // __disable_irq();
	//HAL_UART_Receive_IT( &huart2, mRXBuf, 1 );
  if( huart == g485E.mhUart   )  g485E.onIT_RX();
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_UART_RxCpltCallback+0x20>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d102      	bne.n	80007bc <HAL_UART_RxCpltCallback+0x18>
 80007b6:	4803      	ldr	r0, [pc, #12]	; (80007c4 <HAL_UART_RxCpltCallback+0x20>)
 80007b8:	f7ff fe16 	bl	80003e8 <_ZN5M485E7onIT_RXEv>
  //if( huart == gST7580.mhUart )  gST7580.onIT_RX();
//  __enable_irq();
 }//----------------------------------------------------------------------------
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	2000002c 	.word	0x2000002c

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007cc:	f000 fd1e 	bl	800120c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d0:	f000 f82a 	bl	8000828 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d4:	f7ff fcfe 	bl	80001d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007d8:	f000 fc74 	bl	80010c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  g485E.init( &huart2 );
 80007dc:	490d      	ldr	r1, [pc, #52]	; (8000814 <main+0x4c>)
 80007de:	480e      	ldr	r0, [pc, #56]	; (8000818 <main+0x50>)
 80007e0:	f7ff fd5e 	bl	80002a0 <_ZN5M485E4initEP20__UART_HandleTypeDef>
  __ASM volatile ("cpsie i" : : : "memory");
 80007e4:	b662      	cpsie	i
}
 80007e6:	bf00      	nop
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __enable_irq();
  mTXBuf[0]=6;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <main+0x54>)
 80007ea:	2206      	movs	r2, #6
 80007ec:	701a      	strb	r2, [r3, #0]
  mTXBuf[1]=6;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <main+0x54>)
 80007f0:	2206      	movs	r2, #6
 80007f2:	705a      	strb	r2, [r3, #1]
  //HAL_UART_Receive_IT( &huart2, mRXBuf, 1 );
  while (1)
  {
//	  if(HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_13)==0){
	  if(gIsToJump!=0){
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <main+0x58>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	bf14      	ite	ne
 80007fc:	2301      	movne	r3, #1
 80007fe:	2300      	moveq	r3, #0
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b00      	cmp	r3, #0
 8000804:	d0f6      	beq.n	80007f4 <main+0x2c>
		  //JumpToApplication();
		  JumpToAddress(gJumpAddress);
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <main+0x5c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ff90 	bl	8000730 <_Z13JumpToAddressm>
	  if(gIsToJump!=0){
 8000810:	e7f0      	b.n	80007f4 <main+0x2c>
 8000812:	bf00      	nop
 8000814:	20000118 	.word	0x20000118
 8000818:	2000002c 	.word	0x2000002c
 800081c:	200000a4 	.word	0x200000a4
 8000820:	200000a8 	.word	0x200000a8
 8000824:	200000ac 	.word	0x200000ac

08000828 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b0a6      	sub	sp, #152	; 0x98
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000832:	2228      	movs	r2, #40	; 0x28
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f004 fadc 	bl	8004df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2258      	movs	r2, #88	; 0x58
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f004 face 	bl	8004df4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000858:	2302      	movs	r3, #2
 800085a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085c:	2301      	movs	r3, #1
 800085e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000860:	2310      	movs	r3, #16
 8000862:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800086c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000870:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000874:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000878:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000882:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000886:	4618      	mov	r0, r3
 8000888:	f001 faf2 	bl	8001e70 <HAL_RCC_OscConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	bf14      	ite	ne
 8000892:	2301      	movne	r3, #1
 8000894:	2300      	moveq	r3, #0
 8000896:	b2db      	uxtb	r3, r3
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 800089c:	f000 fb84 	bl	8000fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a0:	230f      	movs	r3, #15
 80008a2:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a4:	2302      	movs	r3, #2
 80008a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008ba:	2102      	movs	r1, #2
 80008bc:	4618      	mov	r0, r3
 80008be:	f002 fb2b 	bl	8002f18 <HAL_RCC_ClockConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	bf14      	ite	ne
 80008c8:	2301      	movne	r3, #1
 80008ca:	2300      	moveq	r3, #0
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 80008d2:	f000 fb69 	bl	8000fa8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	4618      	mov	r0, r3
 80008e2:	f002 fd4f 	bl	8003384 <HAL_RCCEx_PeriphCLKConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	bf14      	ite	ne
 80008ec:	2301      	movne	r3, #1
 80008ee:	2300      	moveq	r3, #0
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 80008f6:	f000 fb57 	bl	8000fa8 <Error_Handler>
  }
}
 80008fa:	bf00      	nop
 80008fc:	3798      	adds	r7, #152	; 0x98
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <_ZN5M485E9onReceiveEh>:
int tabIndex = 0;
uint8_t tab[100];
uint16_t cnt = 0, nr = 3;


void M485E::onReceive( uint8_t aCh ){
 8000904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000906:	b087      	sub	sp, #28
 8000908:	af04      	add	r7, sp, #16
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]
  
//  ITM_EVENT8( 1, mRXBuf[0] );

	//DEBUG
	tab[tabIndex] = aCh;
 8000910:	4bad      	ldr	r3, [pc, #692]	; (8000bc8 <_ZN5M485E9onReceiveEh+0x2c4>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	49ad      	ldr	r1, [pc, #692]	; (8000bcc <_ZN5M485E9onReceiveEh+0x2c8>)
 8000916:	78fa      	ldrb	r2, [r7, #3]
 8000918:	54ca      	strb	r2, [r1, r3]
	tabIndex += 1;
 800091a:	4bab      	ldr	r3, [pc, #684]	; (8000bc8 <_ZN5M485E9onReceiveEh+0x2c4>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	3301      	adds	r3, #1
 8000920:	4aa9      	ldr	r2, [pc, #676]	; (8000bc8 <_ZN5M485E9onReceiveEh+0x2c4>)
 8000922:	6013      	str	r3, [r2, #0]
	if( tabIndex >= 100 ) tabIndex = 0;
 8000924:	4ba8      	ldr	r3, [pc, #672]	; (8000bc8 <_ZN5M485E9onReceiveEh+0x2c4>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b63      	cmp	r3, #99	; 0x63
 800092a:	dd03      	ble.n	8000934 <_ZN5M485E9onReceiveEh+0x30>
 800092c:	4ba6      	ldr	r3, [pc, #664]	; (8000bc8 <_ZN5M485E9onReceiveEh+0x2c4>)
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	e000      	b.n	8000936 <_ZN5M485E9onReceiveEh+0x32>


      
INTTOPC_PROC_LABEL:
 8000934:	bf00      	nop
    switch( mRecState ){
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	2b39      	cmp	r3, #57	; 0x39
 800093c:	f200 822d 	bhi.w	8000d9a <_ZN5M485E9onReceiveEh+0x496>
 8000940:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <_ZN5M485E9onReceiveEh+0x44>)
 8000942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000946:	bf00      	nop
 8000948:	08000a31 	.word	0x08000a31
 800094c:	08000a4b 	.word	0x08000a4b
 8000950:	08000a65 	.word	0x08000a65
 8000954:	08000d9b 	.word	0x08000d9b
 8000958:	08000d9b 	.word	0x08000d9b
 800095c:	08000d9b 	.word	0x08000d9b
 8000960:	08000d9b 	.word	0x08000d9b
 8000964:	08000d9b 	.word	0x08000d9b
 8000968:	08000d9b 	.word	0x08000d9b
 800096c:	08000d9b 	.word	0x08000d9b
 8000970:	08000a9d 	.word	0x08000a9d
 8000974:	08000ab1 	.word	0x08000ab1
 8000978:	08000ac5 	.word	0x08000ac5
 800097c:	08000ad9 	.word	0x08000ad9
 8000980:	08000aed 	.word	0x08000aed
 8000984:	08000b01 	.word	0x08000b01
 8000988:	08000b15 	.word	0x08000b15
 800098c:	08000b29 	.word	0x08000b29
 8000990:	08000d9b 	.word	0x08000d9b
 8000994:	08000d9b 	.word	0x08000d9b
 8000998:	08000b51 	.word	0x08000b51
 800099c:	08000b65 	.word	0x08000b65
 80009a0:	08000b79 	.word	0x08000b79
 80009a4:	08000b8d 	.word	0x08000b8d
 80009a8:	08000ba1 	.word	0x08000ba1
 80009ac:	08000bb5 	.word	0x08000bb5
 80009b0:	08000bd1 	.word	0x08000bd1
 80009b4:	08000be5 	.word	0x08000be5
 80009b8:	08000d9b 	.word	0x08000d9b
 80009bc:	08000d9b 	.word	0x08000d9b
 80009c0:	08000c33 	.word	0x08000c33
 80009c4:	08000c47 	.word	0x08000c47
 80009c8:	08000c5b 	.word	0x08000c5b
 80009cc:	08000c6f 	.word	0x08000c6f
 80009d0:	08000c83 	.word	0x08000c83
 80009d4:	08000c97 	.word	0x08000c97
 80009d8:	08000cab 	.word	0x08000cab
 80009dc:	08000cbf 	.word	0x08000cbf
 80009e0:	08000d9b 	.word	0x08000d9b
 80009e4:	08000d9b 	.word	0x08000d9b
 80009e8:	08000d9b 	.word	0x08000d9b
 80009ec:	08000d9b 	.word	0x08000d9b
 80009f0:	08000d9b 	.word	0x08000d9b
 80009f4:	08000d9b 	.word	0x08000d9b
 80009f8:	08000d9b 	.word	0x08000d9b
 80009fc:	08000d9b 	.word	0x08000d9b
 8000a00:	08000d9b 	.word	0x08000d9b
 8000a04:	08000d9b 	.word	0x08000d9b
 8000a08:	08000d9b 	.word	0x08000d9b
 8000a0c:	08000d9b 	.word	0x08000d9b
 8000a10:	08000cdd 	.word	0x08000cdd
 8000a14:	08000cf1 	.word	0x08000cf1
 8000a18:	08000d05 	.word	0x08000d05
 8000a1c:	08000d19 	.word	0x08000d19
 8000a20:	08000d2d 	.word	0x08000d2d
 8000a24:	08000d41 	.word	0x08000d41
 8000a28:	08000d55 	.word	0x08000d55
 8000a2c:	08000d69 	.word	0x08000d69
      // ------------------------------------------------

    case 0:
    	if( aCh == 0x55 ){
 8000a30:	78fb      	ldrb	r3, [r7, #3]
 8000a32:	2b55      	cmp	r3, #85	; 0x55
 8000a34:	d109      	bne.n	8000a4a <_ZN5M485E9onReceiveEh+0x146>
    		mRXFrameBuf[0] = aCh;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	78fa      	ldrb	r2, [r7, #3]
 8000a3a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			mRecState += 1;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	641a      	str	r2, [r3, #64]	; 0x40
			break;}
 8000a48:	e1ab      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
//			uint8_t hi=(data>>8) & 0xff;
//			sendTX_React(lo,hi);
//			break;}
//	  // -------------------------------
    case 1:
    	if( aCh == 0x04 ){
 8000a4a:	78fb      	ldrb	r3, [r7, #3]
 8000a4c:	2b04      	cmp	r3, #4
 8000a4e:	d109      	bne.n	8000a64 <_ZN5M485E9onReceiveEh+0x160>
    		mRXFrameBuf[1] = aCh;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	78fa      	ldrb	r2, [r7, #3]
 8000a54:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
			mRecState += 1;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	1c5a      	adds	r2, r3, #1
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	641a      	str	r2, [r3, #64]	; 0x40
			break;}
 8000a62:	e19e      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
    case 2:
    	if( aCh == 0x00 ){
 8000a64:	78fb      	ldrb	r3, [r7, #3]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d103      	bne.n	8000a72 <_ZN5M485E9onReceiveEh+0x16e>
			mRecState = 10;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	220a      	movs	r2, #10
 8000a6e:	641a      	str	r2, [r3, #64]	; 0x40
			break;}
 8000a70:	e197      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
    	if( aCh == 0x01 ){
 8000a72:	78fb      	ldrb	r3, [r7, #3]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d103      	bne.n	8000a80 <_ZN5M485E9onReceiveEh+0x17c>
			mRecState = 20;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2214      	movs	r2, #20
 8000a7c:	641a      	str	r2, [r3, #64]	; 0x40
			break;}
 8000a7e:	e190      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
    	if( aCh == 0x02 ){
 8000a80:	78fb      	ldrb	r3, [r7, #3]
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d103      	bne.n	8000a8e <_ZN5M485E9onReceiveEh+0x18a>
			mRecState = 30;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	221e      	movs	r2, #30
 8000a8a:	641a      	str	r2, [r3, #64]	; 0x40
			break;}
 8000a8c:	e189      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
    	if( aCh == 0x0E ){
 8000a8e:	78fb      	ldrb	r3, [r7, #3]
 8000a90:	2b0e      	cmp	r3, #14
 8000a92:	d103      	bne.n	8000a9c <_ZN5M485E9onReceiveEh+0x198>
    		mRecState = 50;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2232      	movs	r2, #50	; 0x32
 8000a98:	641a      	str	r2, [r3, #64]	; 0x40
    		break;
 8000a9a:	e182      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
//    		mRecState = 40;
//    		break;
//    	}

    //ReadPage
    case 10: mRXFrameBuf[2] = aCh; mRecState += 1; break; //page
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	78fa      	ldrb	r2, [r7, #3]
 8000aa0:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	1c5a      	adds	r2, r3, #1
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	641a      	str	r2, [r3, #64]	; 0x40
 8000aae:	e178      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
    case 11: mRXFrameBuf[3] = aCh; mRecState += 1; break; //OH
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	78fa      	ldrb	r2, [r7, #3]
 8000ab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	1c5a      	adds	r2, r3, #1
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ac2:	e16e      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
    case 12: mRXFrameBuf[4] = aCh; mRecState += 1; break; //OL
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	78fa      	ldrb	r2, [r7, #3]
 8000ac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	1c5a      	adds	r2, r3, #1
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ad6:	e164      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
    case 13: mRXFrameBuf[5] = aCh; mRecState += 1; break; //HH
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	78fa      	ldrb	r2, [r7, #3]
 8000adc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	1c5a      	adds	r2, r3, #1
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	641a      	str	r2, [r3, #64]	; 0x40
 8000aea:	e15a      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
    case 14: mRXFrameBuf[6] = aCh; mRecState += 1; break; //HL
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	78fa      	ldrb	r2, [r7, #3]
 8000af0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	1c5a      	adds	r2, r3, #1
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	641a      	str	r2, [r3, #64]	; 0x40
 8000afe:	e150      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
    case 15: mRXFrameBuf[7] = aCh; mRecState += 1; break; //LH
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	78fa      	ldrb	r2, [r7, #3]
 8000b04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	1c5a      	adds	r2, r3, #1
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	641a      	str	r2, [r3, #64]	; 0x40
 8000b12:	e146      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
    case 16: mRXFrameBuf[8] = aCh; mRecState += 1; break; //LL
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	78fa      	ldrb	r2, [r7, #3]
 8000b18:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	1c5a      	adds	r2, r3, #1
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	641a      	str	r2, [r3, #64]	; 0x40
 8000b26:	e13c      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
    case 17: mRXFrameBuf[9] = aCh; sendTX_ReadPage( mRXFrameBuf[2], mRXFrameBuf[3], mRXFrameBuf[4] ); mRecState = 0; break;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	78fa      	ldrb	r2, [r7, #3]
 8000b2c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f893 104f 	ldrb.w	r1, [r3, #79]	; 0x4f
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f000 f9d6 	bl	8000ef4 <_ZN5M485E15sendTX_ReadPageEhhh>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	641a      	str	r2, [r3, #64]	; 0x40
 8000b4e:	e128      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>

    //WritePage
	case 20: mRXFrameBuf[2] = aCh; mRecState += 1; break; //page
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	78fa      	ldrb	r2, [r7, #3]
 8000b54:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	1c5a      	adds	r2, r3, #1
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	641a      	str	r2, [r3, #64]	; 0x40
 8000b62:	e11e      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
	case 21: mRXFrameBuf[3] = aCh; mRecState += 1; break; //OH
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	78fa      	ldrb	r2, [r7, #3]
 8000b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	1c5a      	adds	r2, r3, #1
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	641a      	str	r2, [r3, #64]	; 0x40
 8000b76:	e114      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
	case 22: mRXFrameBuf[4] = aCh; mRecState += 1; break; //OL
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	78fa      	ldrb	r2, [r7, #3]
 8000b7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	1c5a      	adds	r2, r3, #1
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	641a      	str	r2, [r3, #64]	; 0x40
 8000b8a:	e10a      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
	case 23: mRXFrameBuf[5] = aCh; mRecState += 1; break; //HH
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	78fa      	ldrb	r2, [r7, #3]
 8000b90:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	1c5a      	adds	r2, r3, #1
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	641a      	str	r2, [r3, #64]	; 0x40
 8000b9e:	e100      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
	case 24: mRXFrameBuf[6] = aCh; mRecState += 1; break; //HL
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	78fa      	ldrb	r2, [r7, #3]
 8000ba4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	1c5a      	adds	r2, r3, #1
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	641a      	str	r2, [r3, #64]	; 0x40
 8000bb2:	e0f6      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
	case 25: mRXFrameBuf[7] = aCh; mRecState += 1; break; //LH
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	78fa      	ldrb	r2, [r7, #3]
 8000bb8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	1c5a      	adds	r2, r3, #1
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	641a      	str	r2, [r3, #64]	; 0x40
 8000bc6:	e0ec      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
 8000bc8:	200000b0 	.word	0x200000b0
 8000bcc:	200000b4 	.word	0x200000b4
	case 26: mRXFrameBuf[8] = aCh; mRecState += 1; break; //LL
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	78fa      	ldrb	r2, [r7, #3]
 8000bd4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	1c5a      	adds	r2, r3, #1
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	641a      	str	r2, [r3, #64]	; 0x40
 8000be2:	e0de      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
	case 27: mRXFrameBuf[9] = aCh; frameRX_WritePage( mRXFrameBuf[2], mRXFrameBuf[3], mRXFrameBuf[4], mRXFrameBuf[5], mRXFrameBuf[6], mRXFrameBuf[7], mRXFrameBuf[8]); mRecState = 0; break;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	78fa      	ldrb	r2, [r7, #3]
 8000be8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f893 404f 	ldrb.w	r4, [r3, #79]	; 0x4f
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f893 5050 	ldrb.w	r5, [r3, #80]	; 0x50
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	f892 2053 	ldrb.w	r2, [r2, #83]	; 0x53
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f891 1054 	ldrb.w	r1, [r1, #84]	; 0x54
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f890 0055 	ldrb.w	r0, [r0, #85]	; 0x55
 8000c16:	9003      	str	r0, [sp, #12]
 8000c18:	9102      	str	r1, [sp, #8]
 8000c1a:	9201      	str	r2, [sp, #4]
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	4633      	mov	r3, r6
 8000c20:	462a      	mov	r2, r5
 8000c22:	4621      	mov	r1, r4
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f000 f8c7 	bl	8000db8 <_ZN5M485E17frameRX_WritePageEhhhhhhh>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	641a      	str	r2, [r3, #64]	; 0x40
 8000c30:	e0b7      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>

    //ErasePage
	case 30: mRXFrameBuf[2] = aCh; mRecState += 1; break;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	78fa      	ldrb	r2, [r7, #3]
 8000c36:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	1c5a      	adds	r2, r3, #1
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	641a      	str	r2, [r3, #64]	; 0x40
 8000c44:	e0ad      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
	case 31: mRXFrameBuf[3] = aCh; mRecState += 1; break;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	78fa      	ldrb	r2, [r7, #3]
 8000c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	641a      	str	r2, [r3, #64]	; 0x40
 8000c58:	e0a3      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
	case 32: mRXFrameBuf[4] = aCh; mRecState += 1; break;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	78fa      	ldrb	r2, [r7, #3]
 8000c5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	641a      	str	r2, [r3, #64]	; 0x40
 8000c6c:	e099      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
	case 33: mRXFrameBuf[5] = aCh; mRecState += 1; break;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	78fa      	ldrb	r2, [r7, #3]
 8000c72:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	1c5a      	adds	r2, r3, #1
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	641a      	str	r2, [r3, #64]	; 0x40
 8000c80:	e08f      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
	case 34: mRXFrameBuf[6] = aCh; mRecState += 1; break;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	78fa      	ldrb	r2, [r7, #3]
 8000c86:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	1c5a      	adds	r2, r3, #1
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	641a      	str	r2, [r3, #64]	; 0x40
 8000c94:	e085      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
	case 35: mRXFrameBuf[7] = aCh; mRecState += 1; break;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	78fa      	ldrb	r2, [r7, #3]
 8000c9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ca8:	e07b      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
	case 36: mRXFrameBuf[8] = aCh; mRecState += 1; break;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	78fa      	ldrb	r2, [r7, #3]
 8000cae:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	1c5a      	adds	r2, r3, #1
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	641a      	str	r2, [r3, #64]	; 0x40
 8000cbc:	e071      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
	case 37: mRXFrameBuf[9] = aCh; frameRX_ErasePage( mRXFrameBuf[2] ); mRecState = 0; break;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	78fa      	ldrb	r2, [r7, #3]
 8000cc2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8000ccc:	4619      	mov	r1, r3
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f000 f8bc 	bl	8000e4c <_ZN5M485E17frameRX_ErasePageEh>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	641a      	str	r2, [r3, #64]	; 0x40
 8000cda:	e062      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
//	case 45: mRXFrameBuf[7] = aCh; mRecState += 1; break;
//	case 46: mRXFrameBuf[8] = aCh; mRecState += 1; break;
//	case 47: mRXFrameBuf[9] = aCh; frameRX_Jump(); mRecState = 0; break;

	//JumpToAddress
	case 50: mRXFrameBuf[2] = aCh; mRecState += 1; break;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	78fa      	ldrb	r2, [r7, #3]
 8000ce0:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	1c5a      	adds	r2, r3, #1
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	641a      	str	r2, [r3, #64]	; 0x40
 8000cee:	e058      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
	case 51: mRXFrameBuf[3] = aCh; mRecState += 1; break;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	78fa      	ldrb	r2, [r7, #3]
 8000cf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	1c5a      	adds	r2, r3, #1
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	641a      	str	r2, [r3, #64]	; 0x40
 8000d02:	e04e      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
	case 52: mRXFrameBuf[4] = aCh; mRecState += 1; break;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	78fa      	ldrb	r2, [r7, #3]
 8000d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	1c5a      	adds	r2, r3, #1
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	641a      	str	r2, [r3, #64]	; 0x40
 8000d16:	e044      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
	case 53: mRXFrameBuf[5] = aCh; mRecState += 1; break;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	78fa      	ldrb	r2, [r7, #3]
 8000d1c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	641a      	str	r2, [r3, #64]	; 0x40
 8000d2a:	e03a      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
	case 54: mRXFrameBuf[6] = aCh; mRecState += 1; break;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	78fa      	ldrb	r2, [r7, #3]
 8000d30:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	1c5a      	adds	r2, r3, #1
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d3e:	e030      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
	case 55: mRXFrameBuf[7] = aCh; mRecState += 1; break;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	78fa      	ldrb	r2, [r7, #3]
 8000d44:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	1c5a      	adds	r2, r3, #1
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	641a      	str	r2, [r3, #64]	; 0x40
 8000d52:	e026      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
	case 56: mRXFrameBuf[8] = aCh; mRecState += 1; break;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	78fa      	ldrb	r2, [r7, #3]
 8000d58:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	1c5a      	adds	r2, r3, #1
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	641a      	str	r2, [r3, #64]	; 0x40
 8000d66:	e01c      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>
	case 57: mRXFrameBuf[9] = aCh; frameRX_JumpToAddress( mRXFrameBuf[5], mRXFrameBuf[6], mRXFrameBuf[7], mRXFrameBuf[8] ); mRecState = 0; break;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	78fa      	ldrb	r2, [r7, #3]
 8000d6c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f893 1052 	ldrb.w	r1, [r3, #82]	; 0x52
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f000 f889 	bl	8000ea4 <_ZN5M485E21frameRX_JumpToAddressEhhhh>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	641a      	str	r2, [r3, #64]	; 0x40
 8000d98:	e003      	b.n	8000da2 <_ZN5M485E9onReceiveEh+0x49e>


      // -------------------------------	
     default: {  
        mRecState = 0;	
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	641a      	str	r2, [r3, #64]	; 0x40
        goto INTTOPC_PROC_LABEL; }; 
 8000da0:	e5c9      	b.n	8000936 <_ZN5M485E9onReceiveEh+0x32>
        break;
    };      
    
    // --- RESET WDT ---------------------
    if( mRecState == 0 )
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d102      	bne.n	8000db0 <_ZN5M485E9onReceiveEh+0x4ac>
       mFrameTimeOutCnt = 20; // 100 = 1s
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2214      	movs	r2, #20
 8000dae:	645a      	str	r2, [r3, #68]	; 0x44
    
 /*   uint16_t wrt = (mRecState<<8) | (aCh<<0);*/



}//-------------------------------------------------------------------------
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000db8 <_ZN5M485E17frameRX_WritePageEhhhhhhh>:

/*########################################################################################*/

// ----------------------------------------------------------
/// WritePage
void M485E::frameRX_WritePage( uint8_t pg, uint8_t OH, uint8_t OL, uint8_t HH, uint8_t HL, uint8_t LH, uint8_t LL ){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	70fb      	strb	r3, [r7, #3]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	70bb      	strb	r3, [r7, #2]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	707b      	strb	r3, [r7, #1]
	uint16_t offset = OH << 8 | OL;
 8000dd2:	78bb      	ldrb	r3, [r7, #2]
 8000dd4:	021b      	lsls	r3, r3, #8
 8000dd6:	b21a      	sxth	r2, r3
 8000dd8:	787b      	ldrb	r3, [r7, #1]
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b21b      	sxth	r3, r3
 8000de0:	81fb      	strh	r3, [r7, #14]
	uint32_t val = HH << 24 | HL << 16 | LH << 8 | LL;
 8000de2:	7e3b      	ldrb	r3, [r7, #24]
 8000de4:	061a      	lsls	r2, r3, #24
 8000de6:	7f3b      	ldrb	r3, [r7, #28]
 8000de8:	041b      	lsls	r3, r3, #16
 8000dea:	431a      	orrs	r2, r3
 8000dec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	431a      	orrs	r2, r3
 8000df4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	60bb      	str	r3, [r7, #8]

	MFlash::unlock();
 8000dfc:	f7ff fc4b 	bl	8000696 <_ZN6MFlash6unlockEv>
	MFlash::write32(pg,offset,val);
 8000e00:	78fb      	ldrb	r3, [r7, #3]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	89f9      	ldrh	r1, [r7, #14]
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fc50 	bl	80006ae <_ZN6MFlash7write32Ettm>
	MFlash::lock();
 8000e0e:	f7ff fc36 	bl	800067e <_ZN6MFlash4lockEv>

	g485E.bufAdd( 0x5A );
 8000e12:	215a      	movs	r1, #90	; 0x5a
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x90>)
 8000e16:	f7ff fb39 	bl	800048c <_ZN5M485E6bufAddEh>
	g485E.bufAdd( 0x01 );
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	480a      	ldr	r0, [pc, #40]	; (8000e48 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x90>)
 8000e1e:	f7ff fb35 	bl	800048c <_ZN5M485E6bufAddEh>
	g485E.bufAdd( 0xE0 );          // CRC.H
 8000e22:	21e0      	movs	r1, #224	; 0xe0
 8000e24:	4808      	ldr	r0, [pc, #32]	; (8000e48 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x90>)
 8000e26:	f7ff fb31 	bl	800048c <_ZN5M485E6bufAddEh>
	g485E.bufAdd( 0xE1 );          // CRC.L
 8000e2a:	21e1      	movs	r1, #225	; 0xe1
 8000e2c:	4806      	ldr	r0, [pc, #24]	; (8000e48 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x90>)
 8000e2e:	f7ff fb2d 	bl	800048c <_ZN5M485E6bufAddEh>
	g485E.bufAdd( 0xFF );
 8000e32:	21ff      	movs	r1, #255	; 0xff
 8000e34:	4804      	ldr	r0, [pc, #16]	; (8000e48 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x90>)
 8000e36:	f7ff fb29 	bl	800048c <_ZN5M485E6bufAddEh>

	this->Send_IT();
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff fa44 	bl	80002c8 <_ZN5M485E7Send_ITEv>

}// -----------------------------------------------------------
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000002c 	.word	0x2000002c

08000e4c <_ZN5M485E17frameRX_ErasePageEh>:

// ----------------------------------------------------------
/// ReadPage
void M485E::frameRX_ErasePage( uint8_t pg ){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]
	MFlash::unlock();
 8000e58:	f7ff fc1d 	bl	8000696 <_ZN6MFlash6unlockEv>
	MFlash::erasePage(pg);
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fc44 	bl	80006ee <_ZN6MFlash9erasePageEt>
	MFlash::lock();
 8000e66:	f7ff fc0a 	bl	800067e <_ZN6MFlash4lockEv>

	g485E.bufAdd( 0x5A );
 8000e6a:	215a      	movs	r1, #90	; 0x5a
 8000e6c:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <_ZN5M485E17frameRX_ErasePageEh+0x54>)
 8000e6e:	f7ff fb0d 	bl	800048c <_ZN5M485E6bufAddEh>
	g485E.bufAdd( 0x02 );
 8000e72:	2102      	movs	r1, #2
 8000e74:	480a      	ldr	r0, [pc, #40]	; (8000ea0 <_ZN5M485E17frameRX_ErasePageEh+0x54>)
 8000e76:	f7ff fb09 	bl	800048c <_ZN5M485E6bufAddEh>
	g485E.bufAdd( 0xE0 );          // CRC.H
 8000e7a:	21e0      	movs	r1, #224	; 0xe0
 8000e7c:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <_ZN5M485E17frameRX_ErasePageEh+0x54>)
 8000e7e:	f7ff fb05 	bl	800048c <_ZN5M485E6bufAddEh>
	g485E.bufAdd( 0xE1 );          // CRC.L
 8000e82:	21e1      	movs	r1, #225	; 0xe1
 8000e84:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <_ZN5M485E17frameRX_ErasePageEh+0x54>)
 8000e86:	f7ff fb01 	bl	800048c <_ZN5M485E6bufAddEh>
	g485E.bufAdd( 0xFF );
 8000e8a:	21ff      	movs	r1, #255	; 0xff
 8000e8c:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <_ZN5M485E17frameRX_ErasePageEh+0x54>)
 8000e8e:	f7ff fafd 	bl	800048c <_ZN5M485E6bufAddEh>

	this->Send_IT();
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff fa18 	bl	80002c8 <_ZN5M485E7Send_ITEv>
}// -----------------------------------------------------------
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	2000002c 	.word	0x2000002c

08000ea4 <_ZN5M485E21frameRX_JumpToAddressEhhhh>:
//	gIsToJump = 1;
//}// -----------------------------------------------------------

// ----------------------------------------------------------
/// JumpToApplication
void M485E::frameRX_JumpToAddress( uint8_t HH, uint8_t HL, uint8_t LH, uint8_t LL ){
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	4608      	mov	r0, r1
 8000eae:	4611      	mov	r1, r2
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	70fb      	strb	r3, [r7, #3]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	70bb      	strb	r3, [r7, #2]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	707b      	strb	r3, [r7, #1]
	gJumpAddress = HH << 24 | HL << 16 | LH << 8 | LL;
 8000ebe:	78fb      	ldrb	r3, [r7, #3]
 8000ec0:	061a      	lsls	r2, r3, #24
 8000ec2:	78bb      	ldrb	r3, [r7, #2]
 8000ec4:	041b      	lsls	r3, r3, #16
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	787b      	ldrb	r3, [r7, #1]
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	7c3b      	ldrb	r3, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <_ZN5M485E21frameRX_JumpToAddressEhhhh+0x48>)
 8000ed6:	601a      	str	r2, [r3, #0]

	gIsToJump = 1;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <_ZN5M485E21frameRX_JumpToAddressEhhhh+0x4c>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	601a      	str	r2, [r3, #0]
}// -----------------------------------------------------------
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	200000ac 	.word	0x200000ac
 8000ef0:	200000a8 	.word	0x200000a8

08000ef4 <_ZN5M485E15sendTX_ReadPageEhhh>:
//
//}// -----------------------------------------------------------

/// ----------------------------------------------------------
// FRAME ReadPage
void M485E::sendTX_ReadPage( uint8_t pg, uint8_t OH, uint8_t OL){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	4608      	mov	r0, r1
 8000efe:	4611      	mov	r1, r2
 8000f00:	461a      	mov	r2, r3
 8000f02:	4603      	mov	r3, r0
 8000f04:	70fb      	strb	r3, [r7, #3]
 8000f06:	460b      	mov	r3, r1
 8000f08:	70bb      	strb	r3, [r7, #2]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	707b      	strb	r3, [r7, #1]
	uint16_t offset = OH << 8 | OL;
 8000f0e:	78bb      	ldrb	r3, [r7, #2]
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	b21a      	sxth	r2, r3
 8000f14:	787b      	ldrb	r3, [r7, #1]
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	82fb      	strh	r3, [r7, #22]
	uint32_t pageData = MFlash::read32(pg,offset);
 8000f1e:	78fb      	ldrb	r3, [r7, #3]
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	8afa      	ldrh	r2, [r7, #22]
 8000f24:	4611      	mov	r1, r2
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fb90 	bl	800064c <_ZN6MFlash6read32Ett>
 8000f2c:	6138      	str	r0, [r7, #16]
	uint8_t ll=pageData&(0xff);
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	73fb      	strb	r3, [r7, #15]
	uint8_t lh=(pageData>>8) & 0xff;
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	73bb      	strb	r3, [r7, #14]
	uint8_t hl=(pageData>>16) & 0xff;
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	0c1b      	lsrs	r3, r3, #16
 8000f3c:	737b      	strb	r3, [r7, #13]
	uint8_t hh=(pageData>>24) & 0xff;
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	0e1b      	lsrs	r3, r3, #24
 8000f42:	733b      	strb	r3, [r7, #12]


	g485E.bufAdd( 0x5A );
 8000f44:	215a      	movs	r1, #90	; 0x5a
 8000f46:	4817      	ldr	r0, [pc, #92]	; (8000fa4 <_ZN5M485E15sendTX_ReadPageEhhh+0xb0>)
 8000f48:	f7ff faa0 	bl	800048c <_ZN5M485E6bufAddEh>
	g485E.bufAdd( 0x00 );
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4815      	ldr	r0, [pc, #84]	; (8000fa4 <_ZN5M485E15sendTX_ReadPageEhhh+0xb0>)
 8000f50:	f7ff fa9c 	bl	800048c <_ZN5M485E6bufAddEh>
	g485E.bufAdd( hh );
 8000f54:	7b3b      	ldrb	r3, [r7, #12]
 8000f56:	4619      	mov	r1, r3
 8000f58:	4812      	ldr	r0, [pc, #72]	; (8000fa4 <_ZN5M485E15sendTX_ReadPageEhhh+0xb0>)
 8000f5a:	f7ff fa97 	bl	800048c <_ZN5M485E6bufAddEh>
	g485E.bufAdd( hl );
 8000f5e:	7b7b      	ldrb	r3, [r7, #13]
 8000f60:	4619      	mov	r1, r3
 8000f62:	4810      	ldr	r0, [pc, #64]	; (8000fa4 <_ZN5M485E15sendTX_ReadPageEhhh+0xb0>)
 8000f64:	f7ff fa92 	bl	800048c <_ZN5M485E6bufAddEh>
	g485E.bufAdd( lh );
 8000f68:	7bbb      	ldrb	r3, [r7, #14]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <_ZN5M485E15sendTX_ReadPageEhhh+0xb0>)
 8000f6e:	f7ff fa8d 	bl	800048c <_ZN5M485E6bufAddEh>
	g485E.bufAdd( ll );
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	4619      	mov	r1, r3
 8000f76:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <_ZN5M485E15sendTX_ReadPageEhhh+0xb0>)
 8000f78:	f7ff fa88 	bl	800048c <_ZN5M485E6bufAddEh>
	g485E.bufAdd( 0xE0 );          // CRC.H
 8000f7c:	21e0      	movs	r1, #224	; 0xe0
 8000f7e:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <_ZN5M485E15sendTX_ReadPageEhhh+0xb0>)
 8000f80:	f7ff fa84 	bl	800048c <_ZN5M485E6bufAddEh>
	g485E.bufAdd( 0xE1 );          // CRC.L
 8000f84:	21e1      	movs	r1, #225	; 0xe1
 8000f86:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <_ZN5M485E15sendTX_ReadPageEhhh+0xb0>)
 8000f88:	f7ff fa80 	bl	800048c <_ZN5M485E6bufAddEh>
	g485E.bufAdd( 0xFF );
 8000f8c:	21ff      	movs	r1, #255	; 0xff
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <_ZN5M485E15sendTX_ReadPageEhhh+0xb0>)
 8000f90:	f7ff fa7c 	bl	800048c <_ZN5M485E6bufAddEh>
	this->Send_IT();
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff f997 	bl	80002c8 <_ZN5M485E7Send_ITEv>

}// -----------------------------------------------------------
 8000f9a:	bf00      	nop
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000002c 	.word	0x2000002c

08000fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fac:	b672      	cpsid	i
}
 8000fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <Error_Handler+0x8>
	...

08000fb4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d107      	bne.n	8000fd4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d102      	bne.n	8000fd4 <_Z41__static_initialization_and_destruction_0ii+0x20>
    
    };//************************************************************************************



    M485E  g485E;
 8000fce:	4803      	ldr	r0, [pc, #12]	; (8000fdc <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000fd0:	f7ff fb02 	bl	80005d8 <_ZN5M485EC1Ev>
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	2000002c 	.word	0x2000002c

08000fe0 <_GLOBAL__sub_I_g485E>:
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f7ff ffe3 	bl	8000fb4 <_Z41__static_initialization_and_destruction_0ii>
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <HAL_MspInit+0x44>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <HAL_MspInit+0x44>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6193      	str	r3, [r2, #24]
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <HAL_MspInit+0x44>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_MspInit+0x44>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a08      	ldr	r2, [pc, #32]	; (8001034 <HAL_MspInit+0x44>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001018:	61d3      	str	r3, [r2, #28]
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_MspInit+0x44>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001026:	2007      	movs	r0, #7
 8001028:	f000 fa4c 	bl	80014c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40021000 	.word	0x40021000

08001038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800103c:	e7fe      	b.n	800103c <NMI_Handler+0x4>

0800103e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <MemManage_Handler+0x4>

0800104a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <BusFault_Handler+0x4>

08001050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <UsageFault_Handler+0x4>

08001056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001084:	f000 f92e 	bl	80012e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <USART2_IRQHandler+0x10>)
 8001092:	f002 fc9f 	bl	80039d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000118 	.word	0x20000118

080010a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <SystemInit+0x20>)
 80010a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <SystemInit+0x20>)
 80010ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_USART2_UART_Init+0x58>)
 80010ca:	4a15      	ldr	r2, [pc, #84]	; (8001120 <MX_USART2_UART_Init+0x5c>)
 80010cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <MX_USART2_UART_Init+0x58>)
 80010d0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80010d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_USART2_UART_Init+0x58>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_USART2_UART_Init+0x58>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_USART2_UART_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_USART2_UART_Init+0x58>)
 80010ea:	220c      	movs	r2, #12
 80010ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <MX_USART2_UART_Init+0x58>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_USART2_UART_Init+0x58>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <MX_USART2_UART_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_USART2_UART_Init+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_USART2_UART_Init+0x58>)
 8001108:	f002 fb5a 	bl	80037c0 <HAL_UART_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001112:	f7ff ff49 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000118 	.word	0x20000118
 8001120:	40004400 	.word	0x40004400

08001124 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a1b      	ldr	r2, [pc, #108]	; (80011b0 <HAL_UART_MspInit+0x8c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d130      	bne.n	80011a8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001146:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <HAL_UART_MspInit+0x90>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	4a1a      	ldr	r2, [pc, #104]	; (80011b4 <HAL_UART_MspInit+0x90>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	61d3      	str	r3, [r2, #28]
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <HAL_UART_MspInit+0x90>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <HAL_UART_MspInit+0x90>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <HAL_UART_MspInit+0x90>)
 8001164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001168:	6153      	str	r3, [r2, #20]
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_UART_MspInit+0x90>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001176:	230c      	movs	r3, #12
 8001178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001186:	2307      	movs	r3, #7
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f000 fc26 	bl	80019e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	2026      	movs	r0, #38	; 0x26
 800119e:	f000 f99c 	bl	80014da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011a2:	2026      	movs	r0, #38	; 0x26
 80011a4:	f000 f9b5 	bl	8001512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011a8:	bf00      	nop
 80011aa:	3728      	adds	r7, #40	; 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40004400 	.word	0x40004400
 80011b4:	40021000 	.word	0x40021000

080011b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011bc:	480d      	ldr	r0, [pc, #52]	; (80011f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80011be:	490e      	ldr	r1, [pc, #56]	; (80011f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c0:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <LoopForever+0xe>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011d4:	4c0b      	ldr	r4, [pc, #44]	; (8001204 <LoopForever+0x16>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011e2:	f7ff ff5d 	bl	80010a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011e6:	f003 fde1 	bl	8004dac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ea:	f7ff faed 	bl	80007c8 <main>

080011ee <LoopForever>:

LoopForever:
    b LoopForever
 80011ee:	e7fe      	b.n	80011ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80011f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011fc:	08004e60 	.word	0x08004e60
  ldr r2, =_sbss
 8001200:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001204:	200001c0 	.word	0x200001c0

08001208 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC1_2_IRQHandler>
	...

0800120c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_Init+0x28>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <HAL_Init+0x28>)
 8001216:	f043 0310 	orr.w	r3, r3, #16
 800121a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121c:	2003      	movs	r0, #3
 800121e:	f000 f951 	bl	80014c4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001222:	2000      	movs	r0, #0
 8001224:	f000 f82e 	bl	8001284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001228:	f7ff fee2 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40022000 	.word	0x40022000

08001238 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <HAL_DeInit+0x38>)
 800123e:	f04f 32ff 	mov.w	r2, #4294967295
 8001242:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_DeInit+0x38>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_DeInit+0x38>)
 800124c:	f04f 32ff 	mov.w	r2, #4294967295
 8001250:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <HAL_DeInit+0x38>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]

  __HAL_RCC_AHB_FORCE_RESET();
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_DeInit+0x38>)
 800125a:	f04f 32ff 	mov.w	r2, #4294967295
 800125e:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <HAL_DeInit+0x38>)
 8001262:	2200      	movs	r2, #0
 8001264:	629a      	str	r2, [r3, #40]	; 0x28

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001266:	f000 f805 	bl	8001274 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40021000 	.word	0x40021000

08001274 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_InitTick+0x54>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_InitTick+0x58>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129a:	fbb3 f3f1 	udiv	r3, r3, r1
 800129e:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f943 	bl	800152e <HAL_SYSTICK_Config>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00e      	b.n	80012d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b0f      	cmp	r3, #15
 80012b6:	d80a      	bhi.n	80012ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b8:	2200      	movs	r2, #0
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f000 f90b 	bl	80014da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c4:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <HAL_InitTick+0x5c>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e000      	b.n	80012d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20000008 	.word	0x20000008
 80012e0:	20000004 	.word	0x20000004

080012e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_IncTick+0x20>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_IncTick+0x24>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <HAL_IncTick+0x24>)
 80012f6:	6013      	str	r3, [r2, #0]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000008 	.word	0x20000008
 8001308:	2000019c 	.word	0x2000019c

0800130c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <HAL_GetTick+0x14>)
 8001312:	681b      	ldr	r3, [r3, #0]
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	2000019c 	.word	0x2000019c

08001324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800134c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <__NVIC_GetPriorityGrouping+0x18>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f003 0307 	and.w	r3, r3, #7
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	2b00      	cmp	r3, #0
 8001398:	db0b      	blt.n	80013b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f003 021f 	and.w	r2, r3, #31
 80013a0:	4907      	ldr	r1, [pc, #28]	; (80013c0 <__NVIC_EnableIRQ+0x38>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	095b      	lsrs	r3, r3, #5
 80013a8:	2001      	movs	r0, #1
 80013aa:	fa00 f202 	lsl.w	r2, r0, r2
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000e100 	.word	0xe000e100

080013c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db0a      	blt.n	80013ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <__NVIC_SetPriority+0x4c>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ec:	e00a      	b.n	8001404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <__NVIC_SetPriority+0x50>)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3b04      	subs	r3, #4
 80013fc:	0112      	lsls	r2, r2, #4
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	440b      	add	r3, r1
 8001402:	761a      	strb	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000e100 	.word	0xe000e100
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f1c3 0307 	rsb	r3, r3, #7
 8001432:	2b04      	cmp	r3, #4
 8001434:	bf28      	it	cs
 8001436:	2304      	movcs	r3, #4
 8001438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3304      	adds	r3, #4
 800143e:	2b06      	cmp	r3, #6
 8001440:	d902      	bls.n	8001448 <NVIC_EncodePriority+0x30>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3b03      	subs	r3, #3
 8001446:	e000      	b.n	800144a <NVIC_EncodePriority+0x32>
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	f04f 32ff 	mov.w	r2, #4294967295
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	401a      	ands	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001460:	f04f 31ff 	mov.w	r1, #4294967295
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43d9      	mvns	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	4313      	orrs	r3, r2
         );
}
 8001472:	4618      	mov	r0, r3
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001490:	d301      	bcc.n	8001496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001492:	2301      	movs	r3, #1
 8001494:	e00f      	b.n	80014b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <SysTick_Config+0x40>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149e:	210f      	movs	r1, #15
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f7ff ff8e 	bl	80013c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <SysTick_Config+0x40>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SysTick_Config+0x40>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	e000e010 	.word	0xe000e010

080014c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff29 	bl	8001324 <__NVIC_SetPriorityGrouping>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ec:	f7ff ff3e 	bl	800136c <__NVIC_GetPriorityGrouping>
 80014f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	6978      	ldr	r0, [r7, #20]
 80014f8:	f7ff ff8e 	bl	8001418 <NVIC_EncodePriority>
 80014fc:	4602      	mov	r2, r0
 80014fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001502:	4611      	mov	r1, r2
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff5d 	bl	80013c4 <__NVIC_SetPriority>
}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff31 	bl	8001388 <__NVIC_EnableIRQ>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ffa2 	bl	8001480 <SysTick_Config>
 800153c:	4603      	mov	r3, r0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001554:	2b02      	cmp	r3, #2
 8001556:	d008      	beq.n	800156a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2204      	movs	r2, #4
 800155c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e020      	b.n	80015ac <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 020e 	bic.w	r2, r2, #14
 8001578:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0201 	bic.w	r2, r2, #1
 8001588:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001592:	2101      	movs	r1, #1
 8001594:	fa01 f202 	lsl.w	r2, r1, r2
 8001598:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d005      	beq.n	80015da <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2204      	movs	r2, #4
 80015d2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	e027      	b.n	800162a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 020e 	bic.w	r2, r2, #14
 80015e8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0201 	bic.w	r2, r2, #1
 80015f8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001602:	2101      	movs	r1, #1
 8001604:	fa01 f202 	lsl.w	r2, r1, r2
 8001608:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	4798      	blx	r3
    } 
  }
  return status;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 800164a:	2300      	movs	r3, #0
 800164c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800164e:	4b2f      	ldr	r3, [pc, #188]	; (800170c <HAL_FLASH_Program+0xd8>)
 8001650:	7e1b      	ldrb	r3, [r3, #24]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <HAL_FLASH_Program+0x26>
 8001656:	2302      	movs	r3, #2
 8001658:	e054      	b.n	8001704 <HAL_FLASH_Program+0xd0>
 800165a:	4b2c      	ldr	r3, [pc, #176]	; (800170c <HAL_FLASH_Program+0xd8>)
 800165c:	2201      	movs	r2, #1
 800165e:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001660:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001664:	f000 f8a8 	bl	80017b8 <FLASH_WaitForLastOperation>
 8001668:	4603      	mov	r3, r0
 800166a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800166c:	7dfb      	ldrb	r3, [r7, #23]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d144      	bne.n	80016fc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d102      	bne.n	800167e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001678:	2301      	movs	r3, #1
 800167a:	757b      	strb	r3, [r7, #21]
 800167c:	e007      	b.n	800168e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d102      	bne.n	800168a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001684:	2302      	movs	r3, #2
 8001686:	757b      	strb	r3, [r7, #21]
 8001688:	e001      	b.n	800168e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800168a:	2304      	movs	r3, #4
 800168c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800168e:	2300      	movs	r3, #0
 8001690:	75bb      	strb	r3, [r7, #22]
 8001692:	e02d      	b.n	80016f0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001694:	7dbb      	ldrb	r3, [r7, #22]
 8001696:	005a      	lsls	r2, r3, #1
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	eb02 0c03 	add.w	ip, r2, r3
 800169e:	7dbb      	ldrb	r3, [r7, #22]
 80016a0:	0119      	lsls	r1, r3, #4
 80016a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016a6:	f1c1 0620 	rsb	r6, r1, #32
 80016aa:	f1a1 0020 	sub.w	r0, r1, #32
 80016ae:	fa22 f401 	lsr.w	r4, r2, r1
 80016b2:	fa03 f606 	lsl.w	r6, r3, r6
 80016b6:	4334      	orrs	r4, r6
 80016b8:	fa23 f000 	lsr.w	r0, r3, r0
 80016bc:	4304      	orrs	r4, r0
 80016be:	fa23 f501 	lsr.w	r5, r3, r1
 80016c2:	b2a3      	uxth	r3, r4
 80016c4:	4619      	mov	r1, r3
 80016c6:	4660      	mov	r0, ip
 80016c8:	f000 f85a 	bl	8001780 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80016cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016d0:	f000 f872 	bl	80017b8 <FLASH_WaitForLastOperation>
 80016d4:	4603      	mov	r3, r0
 80016d6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <HAL_FLASH_Program+0xdc>)
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	4a0c      	ldr	r2, [pc, #48]	; (8001710 <HAL_FLASH_Program+0xdc>)
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 80016e4:	7dfb      	ldrb	r3, [r7, #23]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d107      	bne.n	80016fa <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80016ea:	7dbb      	ldrb	r3, [r7, #22]
 80016ec:	3301      	adds	r3, #1
 80016ee:	75bb      	strb	r3, [r7, #22]
 80016f0:	7dba      	ldrb	r2, [r7, #22]
 80016f2:	7d7b      	ldrb	r3, [r7, #21]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d3cd      	bcc.n	8001694 <HAL_FLASH_Program+0x60>
 80016f8:	e000      	b.n	80016fc <HAL_FLASH_Program+0xc8>
      {
        break;
 80016fa:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <HAL_FLASH_Program+0xd8>)
 80016fe:	2200      	movs	r2, #0
 8001700:	761a      	strb	r2, [r3, #24]

  return status;
 8001702:	7dfb      	ldrb	r3, [r7, #23]
}
 8001704:	4618      	mov	r0, r3
 8001706:	371c      	adds	r7, #28
 8001708:	46bd      	mov	sp, r7
 800170a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170c:	200001a0 	.word	0x200001a0
 8001710:	40022000 	.word	0x40022000

08001714 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <HAL_FLASH_Unlock+0x40>)
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00d      	beq.n	8001746 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_FLASH_Unlock+0x40>)
 800172c:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_FLASH_Unlock+0x44>)
 800172e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <HAL_FLASH_Unlock+0x40>)
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <HAL_FLASH_Unlock+0x48>)
 8001734:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <HAL_FLASH_Unlock+0x40>)
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001746:	79fb      	ldrb	r3, [r7, #7]
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	40022000 	.word	0x40022000
 8001758:	45670123 	.word	0x45670123
 800175c:	cdef89ab 	.word	0xcdef89ab

08001760 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <HAL_FLASH_Lock+0x1c>)
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	4a04      	ldr	r2, [pc, #16]	; (800177c <HAL_FLASH_Lock+0x1c>)
 800176a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800176e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40022000 	.word	0x40022000

08001780 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <FLASH_Program_HalfWord+0x30>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <FLASH_Program_HalfWord+0x34>)
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <FLASH_Program_HalfWord+0x34>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	887a      	ldrh	r2, [r7, #2]
 80017a2:	801a      	strh	r2, [r3, #0]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	200001a0 	.word	0x200001a0
 80017b4:	40022000 	.word	0x40022000

080017b8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80017c0:	f7ff fda4 	bl	800130c <HAL_GetTick>
 80017c4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80017c6:	e010      	b.n	80017ea <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ce:	d00c      	beq.n	80017ea <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d007      	beq.n	80017e6 <FLASH_WaitForLastOperation+0x2e>
 80017d6:	f7ff fd99 	bl	800130c <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d201      	bcs.n	80017ea <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e01f      	b.n	800182a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <FLASH_WaitForLastOperation+0x7c>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d0e8      	beq.n	80017c8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <FLASH_WaitForLastOperation+0x7c>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	f003 0320 	and.w	r3, r3, #32
 80017fe:	2b20      	cmp	r3, #32
 8001800:	d102      	bne.n	8001808 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <FLASH_WaitForLastOperation+0x7c>)
 8001804:	2220      	movs	r2, #32
 8001806:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <FLASH_WaitForLastOperation+0x7c>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2b10      	cmp	r3, #16
 8001812:	d005      	beq.n	8001820 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <FLASH_WaitForLastOperation+0x7c>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800181c:	2b04      	cmp	r3, #4
 800181e:	d103      	bne.n	8001828 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001820:	f000 f80a 	bl	8001838 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40022000 	.word	0x40022000

08001838 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <FLASH_SetErrorCode+0x5c>)
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	2b10      	cmp	r3, #16
 800184c:	d109      	bne.n	8001862 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <FLASH_SetErrorCode+0x60>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	f043 0302 	orr.w	r3, r3, #2
 8001856:	4a10      	ldr	r2, [pc, #64]	; (8001898 <FLASH_SetErrorCode+0x60>)
 8001858:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f043 0310 	orr.w	r3, r3, #16
 8001860:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <FLASH_SetErrorCode+0x5c>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	2b04      	cmp	r3, #4
 800186c:	d109      	bne.n	8001882 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <FLASH_SetErrorCode+0x60>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	4a08      	ldr	r2, [pc, #32]	; (8001898 <FLASH_SetErrorCode+0x60>)
 8001878:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001882:	4a04      	ldr	r2, [pc, #16]	; (8001894 <FLASH_SetErrorCode+0x5c>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	60d3      	str	r3, [r2, #12]
}  
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	40022000 	.word	0x40022000
 8001898:	200001a0 	.word	0x200001a0

0800189c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80018ae:	4b2e      	ldr	r3, [pc, #184]	; (8001968 <HAL_FLASHEx_Erase+0xcc>)
 80018b0:	7e1b      	ldrb	r3, [r3, #24]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d101      	bne.n	80018ba <HAL_FLASHEx_Erase+0x1e>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e052      	b.n	8001960 <HAL_FLASHEx_Erase+0xc4>
 80018ba:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <HAL_FLASHEx_Erase+0xcc>)
 80018bc:	2201      	movs	r2, #1
 80018be:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d115      	bne.n	80018f4 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80018c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018cc:	f7ff ff74 	bl	80017b8 <FLASH_WaitForLastOperation>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d140      	bne.n	8001958 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 80018d6:	f000 f84b 	bl	8001970 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018de:	f7ff ff6b 	bl	80017b8 <FLASH_WaitForLastOperation>
 80018e2:	4603      	mov	r3, r0
 80018e4:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80018e6:	4b21      	ldr	r3, [pc, #132]	; (800196c <HAL_FLASHEx_Erase+0xd0>)
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	4a20      	ldr	r2, [pc, #128]	; (800196c <HAL_FLASHEx_Erase+0xd0>)
 80018ec:	f023 0304 	bic.w	r3, r3, #4
 80018f0:	6113      	str	r3, [r2, #16]
 80018f2:	e031      	b.n	8001958 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80018f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018f8:	f7ff ff5e 	bl	80017b8 <FLASH_WaitForLastOperation>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d12a      	bne.n	8001958 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	e019      	b.n	8001946 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001912:	68b8      	ldr	r0, [r7, #8]
 8001914:	f000 f846 	bl	80019a4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001918:	f24c 3050 	movw	r0, #50000	; 0xc350
 800191c:	f7ff ff4c 	bl	80017b8 <FLASH_WaitForLastOperation>
 8001920:	4603      	mov	r3, r0
 8001922:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <HAL_FLASHEx_Erase+0xd0>)
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	4a10      	ldr	r2, [pc, #64]	; (800196c <HAL_FLASHEx_Erase+0xd0>)
 800192a:	f023 0302 	bic.w	r3, r3, #2
 800192e:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	601a      	str	r2, [r3, #0]
            break;
 800193c:	e00c      	b.n	8001958 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001944:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	02da      	lsls	r2, r3, #11
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	429a      	cmp	r2, r3
 8001956:	d3dc      	bcc.n	8001912 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <HAL_FLASHEx_Erase+0xcc>)
 800195a:	2200      	movs	r2, #0
 800195c:	761a      	strb	r2, [r3, #24]

  return status;
 800195e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	200001a0 	.word	0x200001a0
 800196c:	40022000 	.word	0x40022000

08001970 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <FLASH_MassErase+0x2c>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <FLASH_MassErase+0x30>)
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <FLASH_MassErase+0x30>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <FLASH_MassErase+0x30>)
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <FLASH_MassErase+0x30>)
 800198c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001990:	6113      	str	r3, [r2, #16]
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	200001a0 	.word	0x200001a0
 80019a0:	40022000 	.word	0x40022000

080019a4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <FLASH_PageErase+0x38>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <FLASH_PageErase+0x3c>)
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <FLASH_PageErase+0x3c>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80019be:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <FLASH_PageErase+0x3c>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <FLASH_PageErase+0x3c>)
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <FLASH_PageErase+0x3c>)
 80019ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ce:	6113      	str	r3, [r2, #16]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	200001a0 	.word	0x200001a0
 80019e0:	40022000 	.word	0x40022000

080019e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b087      	sub	sp, #28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f2:	e160      	b.n	8001cb6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2101      	movs	r1, #1
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001a00:	4013      	ands	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 8152 	beq.w	8001cb0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d005      	beq.n	8001a24 <HAL_GPIO_Init+0x40>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d130      	bne.n	8001a86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	091b      	lsrs	r3, r3, #4
 8001a70:	f003 0201 	and.w	r2, r3, #1
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d017      	beq.n	8001ac2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d123      	bne.n	8001b16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	08da      	lsrs	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3208      	adds	r2, #8
 8001ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4013      	ands	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	08da      	lsrs	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3208      	adds	r2, #8
 8001b10:	6939      	ldr	r1, [r7, #16]
 8001b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	2203      	movs	r2, #3
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 0203 	and.w	r2, r3, #3
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 80ac 	beq.w	8001cb0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b58:	4b5e      	ldr	r3, [pc, #376]	; (8001cd4 <HAL_GPIO_Init+0x2f0>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4a5d      	ldr	r2, [pc, #372]	; (8001cd4 <HAL_GPIO_Init+0x2f0>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6193      	str	r3, [r2, #24]
 8001b64:	4b5b      	ldr	r3, [pc, #364]	; (8001cd4 <HAL_GPIO_Init+0x2f0>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b70:	4a59      	ldr	r2, [pc, #356]	; (8001cd8 <HAL_GPIO_Init+0x2f4>)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	089b      	lsrs	r3, r3, #2
 8001b76:	3302      	adds	r3, #2
 8001b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	220f      	movs	r2, #15
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b9a:	d025      	beq.n	8001be8 <HAL_GPIO_Init+0x204>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a4f      	ldr	r2, [pc, #316]	; (8001cdc <HAL_GPIO_Init+0x2f8>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d01f      	beq.n	8001be4 <HAL_GPIO_Init+0x200>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a4e      	ldr	r2, [pc, #312]	; (8001ce0 <HAL_GPIO_Init+0x2fc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d019      	beq.n	8001be0 <HAL_GPIO_Init+0x1fc>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a4d      	ldr	r2, [pc, #308]	; (8001ce4 <HAL_GPIO_Init+0x300>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d013      	beq.n	8001bdc <HAL_GPIO_Init+0x1f8>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a4c      	ldr	r2, [pc, #304]	; (8001ce8 <HAL_GPIO_Init+0x304>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d00d      	beq.n	8001bd8 <HAL_GPIO_Init+0x1f4>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a4b      	ldr	r2, [pc, #300]	; (8001cec <HAL_GPIO_Init+0x308>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d007      	beq.n	8001bd4 <HAL_GPIO_Init+0x1f0>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a4a      	ldr	r2, [pc, #296]	; (8001cf0 <HAL_GPIO_Init+0x30c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d101      	bne.n	8001bd0 <HAL_GPIO_Init+0x1ec>
 8001bcc:	2306      	movs	r3, #6
 8001bce:	e00c      	b.n	8001bea <HAL_GPIO_Init+0x206>
 8001bd0:	2307      	movs	r3, #7
 8001bd2:	e00a      	b.n	8001bea <HAL_GPIO_Init+0x206>
 8001bd4:	2305      	movs	r3, #5
 8001bd6:	e008      	b.n	8001bea <HAL_GPIO_Init+0x206>
 8001bd8:	2304      	movs	r3, #4
 8001bda:	e006      	b.n	8001bea <HAL_GPIO_Init+0x206>
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e004      	b.n	8001bea <HAL_GPIO_Init+0x206>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e002      	b.n	8001bea <HAL_GPIO_Init+0x206>
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <HAL_GPIO_Init+0x206>
 8001be8:	2300      	movs	r3, #0
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	f002 0203 	and.w	r2, r2, #3
 8001bf0:	0092      	lsls	r2, r2, #2
 8001bf2:	4093      	lsls	r3, r2
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bfa:	4937      	ldr	r1, [pc, #220]	; (8001cd8 <HAL_GPIO_Init+0x2f4>)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	3302      	adds	r3, #2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c08:	4b3a      	ldr	r3, [pc, #232]	; (8001cf4 <HAL_GPIO_Init+0x310>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c2c:	4a31      	ldr	r2, [pc, #196]	; (8001cf4 <HAL_GPIO_Init+0x310>)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c32:	4b30      	ldr	r3, [pc, #192]	; (8001cf4 <HAL_GPIO_Init+0x310>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c56:	4a27      	ldr	r2, [pc, #156]	; (8001cf4 <HAL_GPIO_Init+0x310>)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c5c:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <HAL_GPIO_Init+0x310>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c80:	4a1c      	ldr	r2, [pc, #112]	; (8001cf4 <HAL_GPIO_Init+0x310>)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c86:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <HAL_GPIO_Init+0x310>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001caa:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <HAL_GPIO_Init+0x310>)
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f47f ae97 	bne.w	80019f4 <HAL_GPIO_Init+0x10>
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	bf00      	nop
 8001cca:	371c      	adds	r7, #28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010000 	.word	0x40010000
 8001cdc:	48000400 	.word	0x48000400
 8001ce0:	48000800 	.word	0x48000800
 8001ce4:	48000c00 	.word	0x48000c00
 8001ce8:	48001000 	.word	0x48001000
 8001cec:	48001400 	.word	0x48001400
 8001cf0:	48001800 	.word	0x48001800
 8001cf4:	40010400 	.word	0x40010400

08001cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]
 8001d04:	4613      	mov	r3, r2
 8001d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d08:	787b      	ldrb	r3, [r7, #1]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d0e:	887a      	ldrh	r2, [r7, #2]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d14:	e002      	b.n	8001d1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001d32:	4b49      	ldr	r3, [pc, #292]	; (8001e58 <HAL_RCC_DeInit+0x130>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a48      	ldr	r2, [pc, #288]	; (8001e58 <HAL_RCC_DeInit+0x130>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6013      	str	r3, [r2, #0]

  /* Insure HSIRDY bit is set before writing default HSITRIM value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8001d3e:	f7ff fae5 	bl	800130c <HAL_GetTick>
 8001d42:	60f8      	str	r0, [r7, #12]

  /* Wait till HSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_DeInit+0x30>
  {
    if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d46:	f7ff fae1 	bl	800130c <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e07b      	b.n	8001e50 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001d58:	4b3f      	ldr	r3, [pc, #252]	; (8001e58 <HAL_RCC_DeInit+0x130>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Set HSITRIM default value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, RCC_CR_HSITRIM_4);
 8001d64:	4b3c      	ldr	r3, [pc, #240]	; (8001e58 <HAL_RCC_DeInit+0x130>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d6c:	4a3a      	ldr	r2, [pc, #232]	; (8001e58 <HAL_RCC_DeInit+0x130>)
 8001d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d72:	6013      	str	r3, [r2, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0] and MCOSEL[2:0] bits */
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2 | RCC_CFGR_MCO);
 8001d74:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <HAL_RCC_DeInit+0x130>)
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	4937      	ldr	r1, [pc, #220]	; (8001e58 <HAL_RCC_DeInit+0x130>)
 8001d7a:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <HAL_RCC_DeInit+0x134>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	604b      	str	r3, [r1, #4]

  /* Insure HSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8001d80:	f7ff fac4 	bl	800130c <HAL_GetTick>
 8001d84:	60f8      	str	r0, [r7, #12]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001d86:	e00a      	b.n	8001d9e <HAL_RCC_DeInit+0x76>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d88:	f7ff fac0 	bl	800130c <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_DeInit+0x76>
    {
      return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e058      	b.n	8001e50 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001d9e:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <HAL_RCC_DeInit+0x130>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1ee      	bne.n	8001d88 <HAL_RCC_DeInit+0x60>
    }
  }

  /* Update the SystemCoreClock global variable for HSI as system clock source */
  SystemCoreClock = HSI_VALUE;
 8001daa:	4b2d      	ldr	r3, [pc, #180]	; (8001e60 <HAL_RCC_DeInit+0x138>)
 8001dac:	4a2d      	ldr	r2, [pc, #180]	; (8001e64 <HAL_RCC_DeInit+0x13c>)
 8001dae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8001db0:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <HAL_RCC_DeInit+0x140>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fa65 	bl	8001284 <HAL_InitTick>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_DeInit+0x9c>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e045      	b.n	8001e50 <HAL_RCC_DeInit+0x128>
  }

  /* Reset HSEON, CSSON, PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
 8001dc4:	4b24      	ldr	r3, [pc, #144]	; (8001e58 <HAL_RCC_DeInit+0x130>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <HAL_RCC_DeInit+0x130>)
 8001dca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001dd4:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <HAL_RCC_DeInit+0x130>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1f      	ldr	r2, [pc, #124]	; (8001e58 <HAL_RCC_DeInit+0x130>)
 8001dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dde:	6013      	str	r3, [r2, #0]

  /* Insure PLLRDY is reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8001de0:	f7ff fa94 	bl	800130c <HAL_GetTick>
 8001de4:	60f8      	str	r0, [r7, #12]
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_DeInit+0xd2>
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de8:	f7ff fa90 	bl	800130c <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_DeInit+0xd2>
    {
      return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e02a      	b.n	8001e50 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <HAL_RCC_DeInit+0x130>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_DeInit+0xc0>
    }
  }

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001e06:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_RCC_DeInit+0x130>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_RCC_DeInit+0x130>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset CFGR3 register */
  CLEAR_REG(RCC->CFGR3);
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_RCC_DeInit+0x130>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <HAL_RCC_DeInit+0x130>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	4a0e      	ldr	r2, [pc, #56]	; (8001e58 <HAL_RCC_DeInit+0x130>)
 8001e1e:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8001e22:	6093      	str	r3, [r2, #8]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <HAL_RCC_DeInit+0x130>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e2e:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	fa93 f3a3 	rbit	r3, r3
 8001e36:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e38:	687b      	ldr	r3, [r7, #4]

  /* Reset all CSR flags */
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <HAL_RCC_DeInit+0x144>)
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	f8ffc00c 	.word	0xf8ffc00c
 8001e60:	20000000 	.word	0x20000000
 8001e64:	007a1200 	.word	0x007a1200
 8001e68:	20000004 	.word	0x20000004
 8001e6c:	10908120 	.word	0x10908120

08001e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e80:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e86:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	f001 b83a 	b.w	8002f0a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e9a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 816f 	beq.w	800218a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001eac:	4bb5      	ldr	r3, [pc, #724]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 030c 	and.w	r3, r3, #12
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d00c      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eb8:	4bb2      	ldr	r3, [pc, #712]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 030c 	and.w	r3, r3, #12
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d15c      	bne.n	8001f7e <HAL_RCC_OscConfig+0x10e>
 8001ec4:	4baf      	ldr	r3, [pc, #700]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed0:	d155      	bne.n	8001f7e <HAL_RCC_OscConfig+0x10e>
 8001ed2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ed6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8001ee6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eea:	fab3 f383 	clz	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	095b      	lsrs	r3, r3, #5
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d102      	bne.n	8001f04 <HAL_RCC_OscConfig+0x94>
 8001efe:	4ba1      	ldr	r3, [pc, #644]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	e015      	b.n	8001f30 <HAL_RCC_OscConfig+0xc0>
 8001f04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f08:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001f10:	fa93 f3a3 	rbit	r3, r3
 8001f14:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001f18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f1c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001f20:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001f2c:	4b95      	ldr	r3, [pc, #596]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f34:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001f38:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001f3c:	fa92 f2a2 	rbit	r2, r2
 8001f40:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001f44:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001f48:	fab2 f282 	clz	r2, r2
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	f042 0220 	orr.w	r2, r2, #32
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	f002 021f 	and.w	r2, r2, #31
 8001f58:	2101      	movs	r1, #1
 8001f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 8111 	beq.w	8002188 <HAL_RCC_OscConfig+0x318>
 8001f66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f040 8108 	bne.w	8002188 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	f000 bfc6 	b.w	8002f0a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8e:	d106      	bne.n	8001f9e <HAL_RCC_OscConfig+0x12e>
 8001f90:	4b7c      	ldr	r3, [pc, #496]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a7b      	ldr	r2, [pc, #492]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 8001f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	e036      	b.n	800200c <HAL_RCC_OscConfig+0x19c>
 8001f9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x158>
 8001fae:	4b75      	ldr	r3, [pc, #468]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a74      	ldr	r2, [pc, #464]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 8001fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	4b72      	ldr	r3, [pc, #456]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a71      	ldr	r2, [pc, #452]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 8001fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e021      	b.n	800200c <HAL_RCC_OscConfig+0x19c>
 8001fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fcc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x184>
 8001fda:	4b6a      	ldr	r3, [pc, #424]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a69      	ldr	r2, [pc, #420]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 8001fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b67      	ldr	r3, [pc, #412]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a66      	ldr	r2, [pc, #408]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 8001fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e00b      	b.n	800200c <HAL_RCC_OscConfig+0x19c>
 8001ff4:	4b63      	ldr	r3, [pc, #396]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a62      	ldr	r2, [pc, #392]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 8001ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4b60      	ldr	r3, [pc, #384]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a5f      	ldr	r2, [pc, #380]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 8002006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800200c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002010:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d059      	beq.n	80020d0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7ff f976 	bl	800130c <HAL_GetTick>
 8002020:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002024:	e00a      	b.n	800203c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002026:	f7ff f971 	bl	800130c <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b64      	cmp	r3, #100	; 0x64
 8002034:	d902      	bls.n	800203c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	f000 bf67 	b.w	8002f0a <HAL_RCC_OscConfig+0x109a>
 800203c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002040:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002050:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	b2db      	uxtb	r3, r3
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b01      	cmp	r3, #1
 8002066:	d102      	bne.n	800206e <HAL_RCC_OscConfig+0x1fe>
 8002068:	4b46      	ldr	r3, [pc, #280]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	e015      	b.n	800209a <HAL_RCC_OscConfig+0x22a>
 800206e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002072:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800207a:	fa93 f3a3 	rbit	r3, r3
 800207e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002082:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002086:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800208a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002096:	4b3b      	ldr	r3, [pc, #236]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800209e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80020a2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80020a6:	fa92 f2a2 	rbit	r2, r2
 80020aa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80020ae:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80020b2:	fab2 f282 	clz	r2, r2
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	f042 0220 	orr.w	r2, r2, #32
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	f002 021f 	and.w	r2, r2, #31
 80020c2:	2101      	movs	r1, #1
 80020c4:	fa01 f202 	lsl.w	r2, r1, r2
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0ab      	beq.n	8002026 <HAL_RCC_OscConfig+0x1b6>
 80020ce:	e05c      	b.n	800218a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7ff f91c 	bl	800130c <HAL_GetTick>
 80020d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d8:	e00a      	b.n	80020f0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020da:	f7ff f917 	bl	800130c <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	; 0x64
 80020e8:	d902      	bls.n	80020f0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	f000 bf0d 	b.w	8002f0a <HAL_RCC_OscConfig+0x109a>
 80020f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002104:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002108:	fab3 f383 	clz	r3, r3
 800210c:	b2db      	uxtb	r3, r3
 800210e:	095b      	lsrs	r3, r3, #5
 8002110:	b2db      	uxtb	r3, r3
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b01      	cmp	r3, #1
 800211a:	d102      	bne.n	8002122 <HAL_RCC_OscConfig+0x2b2>
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	e015      	b.n	800214e <HAL_RCC_OscConfig+0x2de>
 8002122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002126:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002136:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800213a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800213e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800214a:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <HAL_RCC_OscConfig+0x314>)
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002152:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002156:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800215a:	fa92 f2a2 	rbit	r2, r2
 800215e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002162:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002166:	fab2 f282 	clz	r2, r2
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	f042 0220 	orr.w	r2, r2, #32
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	f002 021f 	and.w	r2, r2, #31
 8002176:	2101      	movs	r1, #1
 8002178:	fa01 f202 	lsl.w	r2, r1, r2
 800217c:	4013      	ands	r3, r2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1ab      	bne.n	80020da <HAL_RCC_OscConfig+0x26a>
 8002182:	e002      	b.n	800218a <HAL_RCC_OscConfig+0x31a>
 8002184:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800218e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 817f 	beq.w	800249e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021a0:	4ba7      	ldr	r3, [pc, #668]	; (8002440 <HAL_RCC_OscConfig+0x5d0>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00c      	beq.n	80021c6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021ac:	4ba4      	ldr	r3, [pc, #656]	; (8002440 <HAL_RCC_OscConfig+0x5d0>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d173      	bne.n	80022a0 <HAL_RCC_OscConfig+0x430>
 80021b8:	4ba1      	ldr	r3, [pc, #644]	; (8002440 <HAL_RCC_OscConfig+0x5d0>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80021c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021c4:	d16c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x430>
 80021c6:	2302      	movs	r3, #2
 80021c8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80021d0:	fa93 f3a3 	rbit	r3, r3
 80021d4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80021d8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021dc:	fab3 f383 	clz	r3, r3
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d102      	bne.n	80021f6 <HAL_RCC_OscConfig+0x386>
 80021f0:	4b93      	ldr	r3, [pc, #588]	; (8002440 <HAL_RCC_OscConfig+0x5d0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	e013      	b.n	800221e <HAL_RCC_OscConfig+0x3ae>
 80021f6:	2302      	movs	r3, #2
 80021f8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002208:	2302      	movs	r3, #2
 800220a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800220e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800221a:	4b89      	ldr	r3, [pc, #548]	; (8002440 <HAL_RCC_OscConfig+0x5d0>)
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	2202      	movs	r2, #2
 8002220:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002224:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002228:	fa92 f2a2 	rbit	r2, r2
 800222c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002230:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002234:	fab2 f282 	clz	r2, r2
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	f042 0220 	orr.w	r2, r2, #32
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	f002 021f 	and.w	r2, r2, #31
 8002244:	2101      	movs	r1, #1
 8002246:	fa01 f202 	lsl.w	r2, r1, r2
 800224a:	4013      	ands	r3, r2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_RCC_OscConfig+0x3f6>
 8002250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002254:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d002      	beq.n	8002266 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	f000 be52 	b.w	8002f0a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002266:	4b76      	ldr	r3, [pc, #472]	; (8002440 <HAL_RCC_OscConfig+0x5d0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800226e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002272:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	21f8      	movs	r1, #248	; 0xf8
 800227c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002284:	fa91 f1a1 	rbit	r1, r1
 8002288:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800228c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002290:	fab1 f181 	clz	r1, r1
 8002294:	b2c9      	uxtb	r1, r1
 8002296:	408b      	lsls	r3, r1
 8002298:	4969      	ldr	r1, [pc, #420]	; (8002440 <HAL_RCC_OscConfig+0x5d0>)
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229e:	e0fe      	b.n	800249e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 8088 	beq.w	80023c2 <HAL_RCC_OscConfig+0x552>
 80022b2:	2301      	movs	r3, #1
 80022b4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80022bc:	fa93 f3a3 	rbit	r3, r3
 80022c0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80022c4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	461a      	mov	r2, r3
 80022da:	2301      	movs	r3, #1
 80022dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7ff f815 	bl	800130c <HAL_GetTick>
 80022e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e8:	f7ff f810 	bl	800130c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d902      	bls.n	80022fe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	f000 be06 	b.w	8002f0a <HAL_RCC_OscConfig+0x109a>
 80022fe:	2302      	movs	r3, #2
 8002300:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002310:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b2db      	uxtb	r3, r3
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	b2db      	uxtb	r3, r3
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b01      	cmp	r3, #1
 8002326:	d102      	bne.n	800232e <HAL_RCC_OscConfig+0x4be>
 8002328:	4b45      	ldr	r3, [pc, #276]	; (8002440 <HAL_RCC_OscConfig+0x5d0>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	e013      	b.n	8002356 <HAL_RCC_OscConfig+0x4e6>
 800232e:	2302      	movs	r3, #2
 8002330:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002340:	2302      	movs	r3, #2
 8002342:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002346:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002352:	4b3b      	ldr	r3, [pc, #236]	; (8002440 <HAL_RCC_OscConfig+0x5d0>)
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	2202      	movs	r2, #2
 8002358:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800235c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002360:	fa92 f2a2 	rbit	r2, r2
 8002364:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002368:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800236c:	fab2 f282 	clz	r2, r2
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	f042 0220 	orr.w	r2, r2, #32
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	f002 021f 	and.w	r2, r2, #31
 800237c:	2101      	movs	r1, #1
 800237e:	fa01 f202 	lsl.w	r2, r1, r2
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0af      	beq.n	80022e8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002388:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_RCC_OscConfig+0x5d0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002390:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002394:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	21f8      	movs	r1, #248	; 0xf8
 800239e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80023a6:	fa91 f1a1 	rbit	r1, r1
 80023aa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80023ae:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80023b2:	fab1 f181 	clz	r1, r1
 80023b6:	b2c9      	uxtb	r1, r1
 80023b8:	408b      	lsls	r3, r1
 80023ba:	4921      	ldr	r1, [pc, #132]	; (8002440 <HAL_RCC_OscConfig+0x5d0>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	600b      	str	r3, [r1, #0]
 80023c0:	e06d      	b.n	800249e <HAL_RCC_OscConfig+0x62e>
 80023c2:	2301      	movs	r3, #1
 80023c4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80023d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	461a      	mov	r2, r3
 80023ea:	2300      	movs	r3, #0
 80023ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ee:	f7fe ff8d 	bl	800130c <HAL_GetTick>
 80023f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f6:	e00a      	b.n	800240e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023f8:	f7fe ff88 	bl	800130c <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d902      	bls.n	800240e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	f000 bd7e 	b.w	8002f0a <HAL_RCC_OscConfig+0x109a>
 800240e:	2302      	movs	r3, #2
 8002410:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002420:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002424:	fab3 f383 	clz	r3, r3
 8002428:	b2db      	uxtb	r3, r3
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d105      	bne.n	8002444 <HAL_RCC_OscConfig+0x5d4>
 8002438:	4b01      	ldr	r3, [pc, #4]	; (8002440 <HAL_RCC_OscConfig+0x5d0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	e016      	b.n	800246c <HAL_RCC_OscConfig+0x5fc>
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	2302      	movs	r3, #2
 8002446:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002456:	2302      	movs	r3, #2
 8002458:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800245c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002468:	4bbf      	ldr	r3, [pc, #764]	; (8002768 <HAL_RCC_OscConfig+0x8f8>)
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	2202      	movs	r2, #2
 800246e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002472:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002476:	fa92 f2a2 	rbit	r2, r2
 800247a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800247e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002482:	fab2 f282 	clz	r2, r2
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	f042 0220 	orr.w	r2, r2, #32
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	f002 021f 	and.w	r2, r2, #31
 8002492:	2101      	movs	r1, #1
 8002494:	fa01 f202 	lsl.w	r2, r1, r2
 8002498:	4013      	ands	r3, r2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1ac      	bne.n	80023f8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8113 	beq.w	80026da <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d07c      	beq.n	80025be <HAL_RCC_OscConfig+0x74e>
 80024c4:	2301      	movs	r3, #1
 80024c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80024d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	4ba2      	ldr	r3, [pc, #648]	; (800276c <HAL_RCC_OscConfig+0x8fc>)
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	461a      	mov	r2, r3
 80024ea:	2301      	movs	r3, #1
 80024ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ee:	f7fe ff0d 	bl	800130c <HAL_GetTick>
 80024f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f6:	e00a      	b.n	800250e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f8:	f7fe ff08 	bl	800130c <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d902      	bls.n	800250e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	f000 bcfe 	b.w	8002f0a <HAL_RCC_OscConfig+0x109a>
 800250e:	2302      	movs	r3, #2
 8002510:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002518:	fa93 f2a3 	rbit	r2, r3
 800251c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002520:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800252a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800252e:	2202      	movs	r2, #2
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002536:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	fa93 f2a3 	rbit	r2, r3
 8002540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800254e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002552:	2202      	movs	r2, #2
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800255a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002568:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800256c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256e:	4b7e      	ldr	r3, [pc, #504]	; (8002768 <HAL_RCC_OscConfig+0x8f8>)
 8002570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002572:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002576:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800257a:	2102      	movs	r1, #2
 800257c:	6019      	str	r1, [r3, #0]
 800257e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002582:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	fa93 f1a3 	rbit	r1, r3
 800258c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002590:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002594:	6019      	str	r1, [r3, #0]
  return result;
 8002596:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800259a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	fab3 f383 	clz	r3, r3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	2101      	movs	r1, #1
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d09d      	beq.n	80024f8 <HAL_RCC_OscConfig+0x688>
 80025bc:	e08d      	b.n	80026da <HAL_RCC_OscConfig+0x86a>
 80025be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	fa93 f2a3 	rbit	r2, r3
 80025d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025dc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80025e0:	601a      	str	r2, [r3, #0]
  return result;
 80025e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80025ea:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ec:	fab3 f383 	clz	r3, r3
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	4b5d      	ldr	r3, [pc, #372]	; (800276c <HAL_RCC_OscConfig+0x8fc>)
 80025f6:	4413      	add	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	461a      	mov	r2, r3
 80025fc:	2300      	movs	r3, #0
 80025fe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002600:	f7fe fe84 	bl	800130c <HAL_GetTick>
 8002604:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800260a:	f7fe fe7f 	bl	800130c <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d902      	bls.n	8002620 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	f000 bc75 	b.w	8002f0a <HAL_RCC_OscConfig+0x109a>
 8002620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002624:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002628:	2202      	movs	r2, #2
 800262a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002630:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	fa93 f2a3 	rbit	r2, r3
 800263a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800263e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002648:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800264c:	2202      	movs	r2, #2
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002654:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	fa93 f2a3 	rbit	r2, r3
 800265e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800266c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002670:	2202      	movs	r2, #2
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002678:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	fa93 f2a3 	rbit	r2, r3
 8002682:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002686:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800268a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800268c:	4b36      	ldr	r3, [pc, #216]	; (8002768 <HAL_RCC_OscConfig+0x8f8>)
 800268e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002690:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002694:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002698:	2102      	movs	r1, #2
 800269a:	6019      	str	r1, [r3, #0]
 800269c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	fa93 f1a3 	rbit	r1, r3
 80026aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ae:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80026b2:	6019      	str	r1, [r3, #0]
  return result;
 80026b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	2101      	movs	r1, #1
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d197      	bne.n	800260a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 81a5 	beq.w	8002a3a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f6:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <HAL_RCC_OscConfig+0x8f8>)
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d116      	bne.n	8002730 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002702:	4b19      	ldr	r3, [pc, #100]	; (8002768 <HAL_RCC_OscConfig+0x8f8>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	4a18      	ldr	r2, [pc, #96]	; (8002768 <HAL_RCC_OscConfig+0x8f8>)
 8002708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270c:	61d3      	str	r3, [r2, #28]
 800270e:	4b16      	ldr	r3, [pc, #88]	; (8002768 <HAL_RCC_OscConfig+0x8f8>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002716:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800271a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002724:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002728:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800272a:	2301      	movs	r3, #1
 800272c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002730:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <HAL_RCC_OscConfig+0x900>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d121      	bne.n	8002780 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <HAL_RCC_OscConfig+0x900>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a0b      	ldr	r2, [pc, #44]	; (8002770 <HAL_RCC_OscConfig+0x900>)
 8002742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002746:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002748:	f7fe fde0 	bl	800130c <HAL_GetTick>
 800274c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002750:	e010      	b.n	8002774 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002752:	f7fe fddb 	bl	800130c <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b64      	cmp	r3, #100	; 0x64
 8002760:	d908      	bls.n	8002774 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e3d1      	b.n	8002f0a <HAL_RCC_OscConfig+0x109a>
 8002766:	bf00      	nop
 8002768:	40021000 	.word	0x40021000
 800276c:	10908120 	.word	0x10908120
 8002770:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	4b8d      	ldr	r3, [pc, #564]	; (80029ac <HAL_RCC_OscConfig+0xb3c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0e8      	beq.n	8002752 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002780:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002784:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d106      	bne.n	800279e <HAL_RCC_OscConfig+0x92e>
 8002790:	4b87      	ldr	r3, [pc, #540]	; (80029b0 <HAL_RCC_OscConfig+0xb40>)
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4a86      	ldr	r2, [pc, #536]	; (80029b0 <HAL_RCC_OscConfig+0xb40>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6213      	str	r3, [r2, #32]
 800279c:	e035      	b.n	800280a <HAL_RCC_OscConfig+0x99a>
 800279e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10c      	bne.n	80027c8 <HAL_RCC_OscConfig+0x958>
 80027ae:	4b80      	ldr	r3, [pc, #512]	; (80029b0 <HAL_RCC_OscConfig+0xb40>)
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	4a7f      	ldr	r2, [pc, #508]	; (80029b0 <HAL_RCC_OscConfig+0xb40>)
 80027b4:	f023 0301 	bic.w	r3, r3, #1
 80027b8:	6213      	str	r3, [r2, #32]
 80027ba:	4b7d      	ldr	r3, [pc, #500]	; (80029b0 <HAL_RCC_OscConfig+0xb40>)
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	4a7c      	ldr	r2, [pc, #496]	; (80029b0 <HAL_RCC_OscConfig+0xb40>)
 80027c0:	f023 0304 	bic.w	r3, r3, #4
 80027c4:	6213      	str	r3, [r2, #32]
 80027c6:	e020      	b.n	800280a <HAL_RCC_OscConfig+0x99a>
 80027c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b05      	cmp	r3, #5
 80027d6:	d10c      	bne.n	80027f2 <HAL_RCC_OscConfig+0x982>
 80027d8:	4b75      	ldr	r3, [pc, #468]	; (80029b0 <HAL_RCC_OscConfig+0xb40>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4a74      	ldr	r2, [pc, #464]	; (80029b0 <HAL_RCC_OscConfig+0xb40>)
 80027de:	f043 0304 	orr.w	r3, r3, #4
 80027e2:	6213      	str	r3, [r2, #32]
 80027e4:	4b72      	ldr	r3, [pc, #456]	; (80029b0 <HAL_RCC_OscConfig+0xb40>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	4a71      	ldr	r2, [pc, #452]	; (80029b0 <HAL_RCC_OscConfig+0xb40>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6213      	str	r3, [r2, #32]
 80027f0:	e00b      	b.n	800280a <HAL_RCC_OscConfig+0x99a>
 80027f2:	4b6f      	ldr	r3, [pc, #444]	; (80029b0 <HAL_RCC_OscConfig+0xb40>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	4a6e      	ldr	r2, [pc, #440]	; (80029b0 <HAL_RCC_OscConfig+0xb40>)
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	6213      	str	r3, [r2, #32]
 80027fe:	4b6c      	ldr	r3, [pc, #432]	; (80029b0 <HAL_RCC_OscConfig+0xb40>)
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4a6b      	ldr	r2, [pc, #428]	; (80029b0 <HAL_RCC_OscConfig+0xb40>)
 8002804:	f023 0304 	bic.w	r3, r3, #4
 8002808:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800280a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800280e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 8081 	beq.w	800291e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281c:	f7fe fd76 	bl	800130c <HAL_GetTick>
 8002820:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002824:	e00b      	b.n	800283e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002826:	f7fe fd71 	bl	800130c <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	; 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e365      	b.n	8002f0a <HAL_RCC_OscConfig+0x109a>
 800283e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002842:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002846:	2202      	movs	r2, #2
 8002848:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800284e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	fa93 f2a3 	rbit	r2, r3
 8002858:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800285c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002866:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800286a:	2202      	movs	r2, #2
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002872:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	fa93 f2a3 	rbit	r2, r3
 800287c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002880:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002884:	601a      	str	r2, [r3, #0]
  return result;
 8002886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800288a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800288e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002890:	fab3 f383 	clz	r3, r3
 8002894:	b2db      	uxtb	r3, r3
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f043 0302 	orr.w	r3, r3, #2
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d102      	bne.n	80028aa <HAL_RCC_OscConfig+0xa3a>
 80028a4:	4b42      	ldr	r3, [pc, #264]	; (80029b0 <HAL_RCC_OscConfig+0xb40>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	e013      	b.n	80028d2 <HAL_RCC_OscConfig+0xa62>
 80028aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80028b2:	2202      	movs	r2, #2
 80028b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ba:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	fa93 f2a3 	rbit	r2, r3
 80028c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	4b38      	ldr	r3, [pc, #224]	; (80029b0 <HAL_RCC_OscConfig+0xb40>)
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028d6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80028da:	2102      	movs	r1, #2
 80028dc:	6011      	str	r1, [r2, #0]
 80028de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028e2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	fa92 f1a2 	rbit	r1, r2
 80028ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028f0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80028f4:	6011      	str	r1, [r2, #0]
  return result;
 80028f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028fa:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	fab2 f282 	clz	r2, r2
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	f002 021f 	and.w	r2, r2, #31
 8002910:	2101      	movs	r1, #1
 8002912:	fa01 f202 	lsl.w	r2, r1, r2
 8002916:	4013      	ands	r3, r2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d084      	beq.n	8002826 <HAL_RCC_OscConfig+0x9b6>
 800291c:	e083      	b.n	8002a26 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291e:	f7fe fcf5 	bl	800130c <HAL_GetTick>
 8002922:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002926:	e00b      	b.n	8002940 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002928:	f7fe fcf0 	bl	800130c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	; 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e2e4      	b.n	8002f0a <HAL_RCC_OscConfig+0x109a>
 8002940:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002944:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002948:	2202      	movs	r2, #2
 800294a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002950:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	fa93 f2a3 	rbit	r2, r3
 800295a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800295e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002968:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800296c:	2202      	movs	r2, #2
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002974:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	fa93 f2a3 	rbit	r2, r3
 800297e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002982:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002986:	601a      	str	r2, [r3, #0]
  return result;
 8002988:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800298c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002990:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	095b      	lsrs	r3, r3, #5
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f043 0302 	orr.w	r3, r3, #2
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d106      	bne.n	80029b4 <HAL_RCC_OscConfig+0xb44>
 80029a6:	4b02      	ldr	r3, [pc, #8]	; (80029b0 <HAL_RCC_OscConfig+0xb40>)
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	e017      	b.n	80029dc <HAL_RCC_OscConfig+0xb6c>
 80029ac:	40007000 	.word	0x40007000
 80029b0:	40021000 	.word	0x40021000
 80029b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80029bc:	2202      	movs	r2, #2
 80029be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	fa93 f2a3 	rbit	r2, r3
 80029ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029d2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	4bb3      	ldr	r3, [pc, #716]	; (8002ca8 <HAL_RCC_OscConfig+0xe38>)
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029e0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80029e4:	2102      	movs	r1, #2
 80029e6:	6011      	str	r1, [r2, #0]
 80029e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029ec:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	fa92 f1a2 	rbit	r1, r2
 80029f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029fa:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80029fe:	6011      	str	r1, [r2, #0]
  return result;
 8002a00:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a04:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	fab2 f282 	clz	r2, r2
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	f002 021f 	and.w	r2, r2, #31
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d180      	bne.n	8002928 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a26:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d105      	bne.n	8002a3a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2e:	4b9e      	ldr	r3, [pc, #632]	; (8002ca8 <HAL_RCC_OscConfig+0xe38>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	4a9d      	ldr	r2, [pc, #628]	; (8002ca8 <HAL_RCC_OscConfig+0xe38>)
 8002a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a38:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 825e 	beq.w	8002f08 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a4c:	4b96      	ldr	r3, [pc, #600]	; (8002ca8 <HAL_RCC_OscConfig+0xe38>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	f000 821f 	beq.w	8002e98 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	f040 8170 	bne.w	8002d4c <HAL_RCC_OscConfig+0xedc>
 8002a6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a70:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a7e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	fa93 f2a3 	rbit	r2, r3
 8002a88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a8c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002a90:	601a      	str	r2, [r3, #0]
  return result;
 8002a92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a96:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002a9a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9c:	fab3 f383 	clz	r3, r3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002aa6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	461a      	mov	r2, r3
 8002aae:	2300      	movs	r3, #0
 8002ab0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab2:	f7fe fc2b 	bl	800130c <HAL_GetTick>
 8002ab6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aba:	e009      	b.n	8002ad0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002abc:	f7fe fc26 	bl	800130c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e21c      	b.n	8002f0a <HAL_RCC_OscConfig+0x109a>
 8002ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ad4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002ad8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002adc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ae2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	fa93 f2a3 	rbit	r2, r3
 8002aec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002af0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002af4:	601a      	str	r2, [r3, #0]
  return result;
 8002af6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002afa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002afe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b00:	fab3 f383 	clz	r3, r3
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d102      	bne.n	8002b1a <HAL_RCC_OscConfig+0xcaa>
 8002b14:	4b64      	ldr	r3, [pc, #400]	; (8002ca8 <HAL_RCC_OscConfig+0xe38>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	e027      	b.n	8002b6a <HAL_RCC_OscConfig+0xcfa>
 8002b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b1e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002b22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b2c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	fa93 f2a3 	rbit	r2, r3
 8002b36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b3a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b44:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002b48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b52:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	fa93 f2a3 	rbit	r2, r3
 8002b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b60:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	4b50      	ldr	r3, [pc, #320]	; (8002ca8 <HAL_RCC_OscConfig+0xe38>)
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b6e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002b72:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b76:	6011      	str	r1, [r2, #0]
 8002b78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b7c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002b80:	6812      	ldr	r2, [r2, #0]
 8002b82:	fa92 f1a2 	rbit	r1, r2
 8002b86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b8a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002b8e:	6011      	str	r1, [r2, #0]
  return result;
 8002b90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b94:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	fab2 f282 	clz	r2, r2
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	f042 0220 	orr.w	r2, r2, #32
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	f002 021f 	and.w	r2, r2, #31
 8002baa:	2101      	movs	r1, #1
 8002bac:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d182      	bne.n	8002abc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bb6:	4b3c      	ldr	r3, [pc, #240]	; (8002ca8 <HAL_RCC_OscConfig+0xe38>)
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	f023 020f 	bic.w	r2, r3, #15
 8002bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	4937      	ldr	r1, [pc, #220]	; (8002ca8 <HAL_RCC_OscConfig+0xe38>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002bd0:	4b35      	ldr	r3, [pc, #212]	; (8002ca8 <HAL_RCC_OscConfig+0xe38>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002bd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bdc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6a19      	ldr	r1, [r3, #32]
 8002be4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	492d      	ldr	r1, [pc, #180]	; (8002ca8 <HAL_RCC_OscConfig+0xe38>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]
 8002bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bfc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c0a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	fa93 f2a3 	rbit	r2, r3
 8002c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c18:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c1c:	601a      	str	r2, [r3, #0]
  return result;
 8002c1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c22:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c26:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c28:	fab3 f383 	clz	r3, r3
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c32:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7fe fb65 	bl	800130c <HAL_GetTick>
 8002c42:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c46:	e009      	b.n	8002c5c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c48:	f7fe fb60 	bl	800130c <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e156      	b.n	8002f0a <HAL_RCC_OscConfig+0x109a>
 8002c5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c60:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c6e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	fa93 f2a3 	rbit	r2, r3
 8002c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c7c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002c80:	601a      	str	r2, [r3, #0]
  return result;
 8002c82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c86:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002c8a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c8c:	fab3 f383 	clz	r3, r3
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d105      	bne.n	8002cac <HAL_RCC_OscConfig+0xe3c>
 8002ca0:	4b01      	ldr	r3, [pc, #4]	; (8002ca8 <HAL_RCC_OscConfig+0xe38>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	e02a      	b.n	8002cfc <HAL_RCC_OscConfig+0xe8c>
 8002ca6:	bf00      	nop
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cb0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002cb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cbe:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	fa93 f2a3 	rbit	r2, r3
 8002cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ccc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cd6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002cda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ce4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	fa93 f2a3 	rbit	r2, r3
 8002cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cf2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	4b86      	ldr	r3, [pc, #536]	; (8002f14 <HAL_RCC_OscConfig+0x10a4>)
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d00:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d08:	6011      	str	r1, [r2, #0]
 8002d0a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d0e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	fa92 f1a2 	rbit	r1, r2
 8002d18:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d1c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002d20:	6011      	str	r1, [r2, #0]
  return result;
 8002d22:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d26:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	fab2 f282 	clz	r2, r2
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	f042 0220 	orr.w	r2, r2, #32
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	f002 021f 	and.w	r2, r2, #31
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f43f af7f 	beq.w	8002c48 <HAL_RCC_OscConfig+0xdd8>
 8002d4a:	e0dd      	b.n	8002f08 <HAL_RCC_OscConfig+0x1098>
 8002d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d50:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d5e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	fa93 f2a3 	rbit	r2, r3
 8002d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d6c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002d70:	601a      	str	r2, [r3, #0]
  return result;
 8002d72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d76:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002d7a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7c:	fab3 f383 	clz	r3, r3
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2300      	movs	r3, #0
 8002d90:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d92:	f7fe fabb 	bl	800130c <HAL_GetTick>
 8002d96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d9a:	e009      	b.n	8002db0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9c:	f7fe fab6 	bl	800130c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e0ac      	b.n	8002f0a <HAL_RCC_OscConfig+0x109a>
 8002db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002db4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002db8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dc2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	fa93 f2a3 	rbit	r2, r3
 8002dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dd0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002dd4:	601a      	str	r2, [r3, #0]
  return result;
 8002dd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dda:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002dde:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de0:	fab3 f383 	clz	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d102      	bne.n	8002dfa <HAL_RCC_OscConfig+0xf8a>
 8002df4:	4b47      	ldr	r3, [pc, #284]	; (8002f14 <HAL_RCC_OscConfig+0x10a4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	e027      	b.n	8002e4a <HAL_RCC_OscConfig+0xfda>
 8002dfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dfe:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e0c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	fa93 f2a3 	rbit	r2, r3
 8002e16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e1a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e24:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002e28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e32:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	fa93 f2a3 	rbit	r2, r3
 8002e3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e40:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	4b33      	ldr	r3, [pc, #204]	; (8002f14 <HAL_RCC_OscConfig+0x10a4>)
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e4e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e52:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e56:	6011      	str	r1, [r2, #0]
 8002e58:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e5c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e60:	6812      	ldr	r2, [r2, #0]
 8002e62:	fa92 f1a2 	rbit	r1, r2
 8002e66:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e6a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002e6e:	6011      	str	r1, [r2, #0]
  return result;
 8002e70:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e74:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	fab2 f282 	clz	r2, r2
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	f042 0220 	orr.w	r2, r2, #32
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	f002 021f 	and.w	r2, r2, #31
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e90:	4013      	ands	r3, r2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d182      	bne.n	8002d9c <HAL_RCC_OscConfig+0xf2c>
 8002e96:	e037      	b.n	8002f08 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e02e      	b.n	8002f0a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002eac:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <HAL_RCC_OscConfig+0x10a4>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002eb4:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <HAL_RCC_OscConfig+0x10a4>)
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ebc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002ec0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ec8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d117      	bne.n	8002f04 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002ed4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002ed8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002edc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ee0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d10b      	bne.n	8002f04 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002eec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ef0:	f003 020f 	and.w	r2, r3, #15
 8002ef4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ef8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40021000 	.word	0x40021000

08002f18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b09e      	sub	sp, #120	; 0x78
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e162      	b.n	80031f6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f30:	4b90      	ldr	r3, [pc, #576]	; (8003174 <HAL_RCC_ClockConfig+0x25c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d910      	bls.n	8002f60 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3e:	4b8d      	ldr	r3, [pc, #564]	; (8003174 <HAL_RCC_ClockConfig+0x25c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 0207 	bic.w	r2, r3, #7
 8002f46:	498b      	ldr	r1, [pc, #556]	; (8003174 <HAL_RCC_ClockConfig+0x25c>)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4e:	4b89      	ldr	r3, [pc, #548]	; (8003174 <HAL_RCC_ClockConfig+0x25c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e14a      	b.n	80031f6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f6c:	4b82      	ldr	r3, [pc, #520]	; (8003178 <HAL_RCC_ClockConfig+0x260>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	497f      	ldr	r1, [pc, #508]	; (8003178 <HAL_RCC_ClockConfig+0x260>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 80dc 	beq.w	8003144 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d13c      	bne.n	800300e <HAL_RCC_ClockConfig+0xf6>
 8002f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f98:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f9c:	fa93 f3a3 	rbit	r3, r3
 8002fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa4:	fab3 f383 	clz	r3, r3
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d102      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xa6>
 8002fb8:	4b6f      	ldr	r3, [pc, #444]	; (8003178 <HAL_RCC_ClockConfig+0x260>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	e00f      	b.n	8002fde <HAL_RCC_ClockConfig+0xc6>
 8002fbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fc2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fc6:	fa93 f3a3 	rbit	r3, r3
 8002fca:	667b      	str	r3, [r7, #100]	; 0x64
 8002fcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fd0:	663b      	str	r3, [r7, #96]	; 0x60
 8002fd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fd4:	fa93 f3a3 	rbit	r3, r3
 8002fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fda:	4b67      	ldr	r3, [pc, #412]	; (8003178 <HAL_RCC_ClockConfig+0x260>)
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fe2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fe4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fe6:	fa92 f2a2 	rbit	r2, r2
 8002fea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002fec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fee:	fab2 f282 	clz	r2, r2
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	f042 0220 	orr.w	r2, r2, #32
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	f002 021f 	and.w	r2, r2, #31
 8002ffe:	2101      	movs	r1, #1
 8003000:	fa01 f202 	lsl.w	r2, r1, r2
 8003004:	4013      	ands	r3, r2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d17b      	bne.n	8003102 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e0f3      	b.n	80031f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d13c      	bne.n	8003090 <HAL_RCC_ClockConfig+0x178>
 8003016:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800301a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	095b      	lsrs	r3, r3, #5
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b01      	cmp	r3, #1
 8003038:	d102      	bne.n	8003040 <HAL_RCC_ClockConfig+0x128>
 800303a:	4b4f      	ldr	r3, [pc, #316]	; (8003178 <HAL_RCC_ClockConfig+0x260>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	e00f      	b.n	8003060 <HAL_RCC_ClockConfig+0x148>
 8003040:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003044:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003048:	fa93 f3a3 	rbit	r3, r3
 800304c:	647b      	str	r3, [r7, #68]	; 0x44
 800304e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003052:	643b      	str	r3, [r7, #64]	; 0x40
 8003054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003056:	fa93 f3a3 	rbit	r3, r3
 800305a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800305c:	4b46      	ldr	r3, [pc, #280]	; (8003178 <HAL_RCC_ClockConfig+0x260>)
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003064:	63ba      	str	r2, [r7, #56]	; 0x38
 8003066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003068:	fa92 f2a2 	rbit	r2, r2
 800306c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800306e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003070:	fab2 f282 	clz	r2, r2
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	f042 0220 	orr.w	r2, r2, #32
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	f002 021f 	and.w	r2, r2, #31
 8003080:	2101      	movs	r1, #1
 8003082:	fa01 f202 	lsl.w	r2, r1, r2
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d13a      	bne.n	8003102 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0b2      	b.n	80031f6 <HAL_RCC_ClockConfig+0x2de>
 8003090:	2302      	movs	r3, #2
 8003092:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	fa93 f3a3 	rbit	r3, r3
 800309a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800309c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d102      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x1a0>
 80030b2:	4b31      	ldr	r3, [pc, #196]	; (8003178 <HAL_RCC_ClockConfig+0x260>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	e00d      	b.n	80030d4 <HAL_RCC_ClockConfig+0x1bc>
 80030b8:	2302      	movs	r3, #2
 80030ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
 80030c4:	2302      	movs	r3, #2
 80030c6:	623b      	str	r3, [r7, #32]
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	fa93 f3a3 	rbit	r3, r3
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	4b29      	ldr	r3, [pc, #164]	; (8003178 <HAL_RCC_ClockConfig+0x260>)
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	2202      	movs	r2, #2
 80030d6:	61ba      	str	r2, [r7, #24]
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	fa92 f2a2 	rbit	r2, r2
 80030de:	617a      	str	r2, [r7, #20]
  return result;
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	fab2 f282 	clz	r2, r2
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	f042 0220 	orr.w	r2, r2, #32
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	f002 021f 	and.w	r2, r2, #31
 80030f2:	2101      	movs	r1, #1
 80030f4:	fa01 f202 	lsl.w	r2, r1, r2
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e079      	b.n	80031f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003102:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <HAL_RCC_ClockConfig+0x260>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f023 0203 	bic.w	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	491a      	ldr	r1, [pc, #104]	; (8003178 <HAL_RCC_ClockConfig+0x260>)
 8003110:	4313      	orrs	r3, r2
 8003112:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003114:	f7fe f8fa 	bl	800130c <HAL_GetTick>
 8003118:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311a:	e00a      	b.n	8003132 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311c:	f7fe f8f6 	bl	800130c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	; 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e061      	b.n	80031f6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	4b11      	ldr	r3, [pc, #68]	; (8003178 <HAL_RCC_ClockConfig+0x260>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 020c 	and.w	r2, r3, #12
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	429a      	cmp	r2, r3
 8003142:	d1eb      	bne.n	800311c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_RCC_ClockConfig+0x25c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d214      	bcs.n	800317c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <HAL_RCC_ClockConfig+0x25c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 0207 	bic.w	r2, r3, #7
 800315a:	4906      	ldr	r1, [pc, #24]	; (8003174 <HAL_RCC_ClockConfig+0x25c>)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	4313      	orrs	r3, r2
 8003160:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b04      	ldr	r3, [pc, #16]	; (8003174 <HAL_RCC_ClockConfig+0x25c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d005      	beq.n	800317c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e040      	b.n	80031f6 <HAL_RCC_ClockConfig+0x2de>
 8003174:	40022000 	.word	0x40022000
 8003178:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003188:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <HAL_RCC_ClockConfig+0x2e8>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	491a      	ldr	r1, [pc, #104]	; (8003200 <HAL_RCC_ClockConfig+0x2e8>)
 8003196:	4313      	orrs	r3, r2
 8003198:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031a6:	4b16      	ldr	r3, [pc, #88]	; (8003200 <HAL_RCC_ClockConfig+0x2e8>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4912      	ldr	r1, [pc, #72]	; (8003200 <HAL_RCC_ClockConfig+0x2e8>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031ba:	f000 f829 	bl	8003210 <HAL_RCC_GetSysClockFreq>
 80031be:	4601      	mov	r1, r0
 80031c0:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <HAL_RCC_ClockConfig+0x2e8>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c8:	22f0      	movs	r2, #240	; 0xf0
 80031ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	fa92 f2a2 	rbit	r2, r2
 80031d2:	60fa      	str	r2, [r7, #12]
  return result;
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	fab2 f282 	clz	r2, r2
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	40d3      	lsrs	r3, r2
 80031de:	4a09      	ldr	r2, [pc, #36]	; (8003204 <HAL_RCC_ClockConfig+0x2ec>)
 80031e0:	5cd3      	ldrb	r3, [r2, r3]
 80031e2:	fa21 f303 	lsr.w	r3, r1, r3
 80031e6:	4a08      	ldr	r2, [pc, #32]	; (8003208 <HAL_RCC_ClockConfig+0x2f0>)
 80031e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80031ea:	4b08      	ldr	r3, [pc, #32]	; (800320c <HAL_RCC_ClockConfig+0x2f4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fe f848 	bl	8001284 <HAL_InitTick>
  
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3778      	adds	r7, #120	; 0x78
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000
 8003204:	08004e1c 	.word	0x08004e1c
 8003208:	20000000 	.word	0x20000000
 800320c:	20000004 	.word	0x20000004

08003210 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003210:	b480      	push	{r7}
 8003212:	b08b      	sub	sp, #44	; 0x2c
 8003214:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
 800321a:	2300      	movs	r3, #0
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	2300      	movs	r3, #0
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800322a:	4b2a      	ldr	r3, [pc, #168]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f003 030c 	and.w	r3, r3, #12
 8003236:	2b04      	cmp	r3, #4
 8003238:	d002      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0x30>
 800323a:	2b08      	cmp	r3, #8
 800323c:	d003      	beq.n	8003246 <HAL_RCC_GetSysClockFreq+0x36>
 800323e:	e03f      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003240:	4b25      	ldr	r3, [pc, #148]	; (80032d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003242:	623b      	str	r3, [r7, #32]
      break;
 8003244:	e03f      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800324c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003250:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	fa92 f2a2 	rbit	r2, r2
 8003258:	607a      	str	r2, [r7, #4]
  return result;
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	fab2 f282 	clz	r2, r2
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	40d3      	lsrs	r3, r2
 8003264:	4a1d      	ldr	r2, [pc, #116]	; (80032dc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003266:	5cd3      	ldrb	r3, [r2, r3]
 8003268:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800326a:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	220f      	movs	r2, #15
 8003274:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	fa92 f2a2 	rbit	r2, r2
 800327c:	60fa      	str	r2, [r7, #12]
  return result;
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	fab2 f282 	clz	r2, r2
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	40d3      	lsrs	r3, r2
 8003288:	4a15      	ldr	r2, [pc, #84]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800328a:	5cd3      	ldrb	r3, [r2, r3]
 800328c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d008      	beq.n	80032aa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003298:	4a0f      	ldr	r2, [pc, #60]	; (80032d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	fbb2 f2f3 	udiv	r2, r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	fb02 f303 	mul.w	r3, r2, r3
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
 80032a8:	e007      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032aa:	4a0b      	ldr	r2, [pc, #44]	; (80032d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	fb02 f303 	mul.w	r3, r2, r3
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	623b      	str	r3, [r7, #32]
      break;
 80032be:	e002      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80032c2:	623b      	str	r3, [r7, #32]
      break;
 80032c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032c6:	6a3b      	ldr	r3, [r7, #32]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	372c      	adds	r7, #44	; 0x2c
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	40021000 	.word	0x40021000
 80032d8:	007a1200 	.word	0x007a1200
 80032dc:	08004e34 	.word	0x08004e34
 80032e0:	08004e44 	.word	0x08004e44

080032e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e8:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032ea:	681b      	ldr	r3, [r3, #0]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20000000 	.word	0x20000000

080032fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003302:	f7ff ffef 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 8003306:	4601      	mov	r1, r0
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003310:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003314:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	fa92 f2a2 	rbit	r2, r2
 800331c:	603a      	str	r2, [r7, #0]
  return result;
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	fab2 f282 	clz	r2, r2
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	40d3      	lsrs	r3, r2
 8003328:	4a04      	ldr	r2, [pc, #16]	; (800333c <HAL_RCC_GetPCLK1Freq+0x40>)
 800332a:	5cd3      	ldrb	r3, [r2, r3]
 800332c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021000 	.word	0x40021000
 800333c:	08004e2c 	.word	0x08004e2c

08003340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003346:	f7ff ffcd 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 800334a:	4601      	mov	r1, r0
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003354:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003358:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	fa92 f2a2 	rbit	r2, r2
 8003360:	603a      	str	r2, [r7, #0]
  return result;
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	fab2 f282 	clz	r2, r2
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	40d3      	lsrs	r3, r2
 800336c:	4a04      	ldr	r2, [pc, #16]	; (8003380 <HAL_RCC_GetPCLK2Freq+0x40>)
 800336e:	5cd3      	ldrb	r3, [r2, r3]
 8003370:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40021000 	.word	0x40021000
 8003380:	08004e2c 	.word	0x08004e2c

08003384 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b092      	sub	sp, #72	; 0x48
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003394:	2300      	movs	r3, #0
 8003396:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 80d4 	beq.w	8003550 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a8:	4b4e      	ldr	r3, [pc, #312]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10e      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b4:	4b4b      	ldr	r3, [pc, #300]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	4a4a      	ldr	r2, [pc, #296]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033be:	61d3      	str	r3, [r2, #28]
 80033c0:	4b48      	ldr	r3, [pc, #288]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033cc:	2301      	movs	r3, #1
 80033ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d2:	4b45      	ldr	r3, [pc, #276]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d118      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033de:	4b42      	ldr	r3, [pc, #264]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a41      	ldr	r2, [pc, #260]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ea:	f7fd ff8f 	bl	800130c <HAL_GetTick>
 80033ee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f0:	e008      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f2:	f7fd ff8b 	bl	800130c <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b64      	cmp	r3, #100	; 0x64
 80033fe:	d901      	bls.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e1d6      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003404:	4b38      	ldr	r3, [pc, #224]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003410:	4b34      	ldr	r3, [pc, #208]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003418:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800341a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 8084 	beq.w	800352a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800342c:	429a      	cmp	r2, r3
 800342e:	d07c      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003430:	4b2c      	ldr	r3, [pc, #176]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800343a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800343e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	fa93 f3a3 	rbit	r3, r3
 8003446:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	461a      	mov	r2, r3
 8003452:	4b26      	ldr	r3, [pc, #152]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	461a      	mov	r2, r3
 800345a:	2301      	movs	r3, #1
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003462:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800346c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800346e:	fab3 f383 	clz	r3, r3
 8003472:	b2db      	uxtb	r3, r3
 8003474:	461a      	mov	r2, r3
 8003476:	4b1d      	ldr	r3, [pc, #116]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	461a      	mov	r2, r3
 800347e:	2300      	movs	r3, #0
 8003480:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003482:	4a18      	ldr	r2, [pc, #96]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003486:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d04b      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003492:	f7fd ff3b 	bl	800130c <HAL_GetTick>
 8003496:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003498:	e00a      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349a:	f7fd ff37 	bl	800130c <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e180      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80034b0:	2302      	movs	r3, #2
 80034b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24
 80034bc:	2302      	movs	r3, #2
 80034be:	623b      	str	r3, [r7, #32]
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	fa93 f3a3 	rbit	r3, r3
 80034c6:	61fb      	str	r3, [r7, #28]
  return result;
 80034c8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ca:	fab3 f383 	clz	r3, r3
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	f043 0302 	orr.w	r3, r3, #2
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d108      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80034de:	4b01      	ldr	r3, [pc, #4]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	e00d      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40007000 	.word	0x40007000
 80034ec:	10908100 	.word	0x10908100
 80034f0:	2302      	movs	r3, #2
 80034f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	fa93 f3a3 	rbit	r3, r3
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	4b9a      	ldr	r3, [pc, #616]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	2202      	movs	r2, #2
 8003502:	613a      	str	r2, [r7, #16]
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	fa92 f2a2 	rbit	r2, r2
 800350a:	60fa      	str	r2, [r7, #12]
  return result;
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	fab2 f282 	clz	r2, r2
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	f002 021f 	and.w	r2, r2, #31
 800351e:	2101      	movs	r1, #1
 8003520:	fa01 f202 	lsl.w	r2, r1, r2
 8003524:	4013      	ands	r3, r2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0b7      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800352a:	4b8f      	ldr	r3, [pc, #572]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	498c      	ldr	r1, [pc, #560]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003538:	4313      	orrs	r3, r2
 800353a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800353c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003540:	2b01      	cmp	r3, #1
 8003542:	d105      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003544:	4b88      	ldr	r3, [pc, #544]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	4a87      	ldr	r2, [pc, #540]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800354a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800354e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800355c:	4b82      	ldr	r3, [pc, #520]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800355e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003560:	f023 0203 	bic.w	r2, r3, #3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	497f      	ldr	r1, [pc, #508]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800356a:	4313      	orrs	r3, r2
 800356c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d008      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800357a:	4b7b      	ldr	r3, [pc, #492]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	4978      	ldr	r1, [pc, #480]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003588:	4313      	orrs	r3, r2
 800358a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d008      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003598:	4b73      	ldr	r3, [pc, #460]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	4970      	ldr	r1, [pc, #448]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d008      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035b6:	4b6c      	ldr	r3, [pc, #432]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f023 0210 	bic.w	r2, r3, #16
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	4969      	ldr	r1, [pc, #420]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d008      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80035d4:	4b64      	ldr	r3, [pc, #400]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e0:	4961      	ldr	r1, [pc, #388]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d008      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035f2:	4b5d      	ldr	r3, [pc, #372]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	f023 0220 	bic.w	r2, r3, #32
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	495a      	ldr	r1, [pc, #360]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003600:	4313      	orrs	r3, r2
 8003602:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003610:	4b55      	ldr	r3, [pc, #340]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	4952      	ldr	r1, [pc, #328]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800361e:	4313      	orrs	r3, r2
 8003620:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d008      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800362e:	4b4e      	ldr	r3, [pc, #312]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	494b      	ldr	r1, [pc, #300]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800363c:	4313      	orrs	r3, r2
 800363e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800364c:	4b46      	ldr	r3, [pc, #280]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	4943      	ldr	r1, [pc, #268]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800365a:	4313      	orrs	r3, r2
 800365c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003666:	2b00      	cmp	r3, #0
 8003668:	d008      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800366a:	4b3f      	ldr	r3, [pc, #252]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	493c      	ldr	r1, [pc, #240]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003678:	4313      	orrs	r3, r2
 800367a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003684:	2b00      	cmp	r3, #0
 8003686:	d008      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003688:	4b37      	ldr	r3, [pc, #220]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	4934      	ldr	r1, [pc, #208]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003696:	4313      	orrs	r3, r2
 8003698:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d008      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80036a6:	4b30      	ldr	r3, [pc, #192]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	492d      	ldr	r1, [pc, #180]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80036c4:	4b28      	ldr	r3, [pc, #160]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d0:	4925      	ldr	r1, [pc, #148]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d008      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80036e2:	4b21      	ldr	r3, [pc, #132]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	491e      	ldr	r1, [pc, #120]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003700:	4b19      	ldr	r3, [pc, #100]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	4916      	ldr	r1, [pc, #88]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800370e:	4313      	orrs	r3, r2
 8003710:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d008      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800371e:	4b12      	ldr	r3, [pc, #72]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372a:	490f      	ldr	r1, [pc, #60]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800372c:	4313      	orrs	r3, r2
 800372e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800373c:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003748:	4907      	ldr	r1, [pc, #28]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800374a:	4313      	orrs	r3, r2
 800374c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00c      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800375a:	4b03      	ldr	r3, [pc, #12]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	e002      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800376e:	4913      	ldr	r1, [pc, #76]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003770:	4313      	orrs	r3, r2
 8003772:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003780:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378c:	490b      	ldr	r1, [pc, #44]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800378e:	4313      	orrs	r3, r2
 8003790:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d008      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800379e:	4b07      	ldr	r3, [pc, #28]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037aa:	4904      	ldr	r1, [pc, #16]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3748      	adds	r7, #72	; 0x48
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000

080037c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e040      	b.n	8003854 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd fc9e 	bl	8001124 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2224      	movs	r2, #36	; 0x24
 80037ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0201 	bic.w	r2, r2, #1
 80037fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fbdc 	bl	8003fbc <UART_SetConfig>
 8003804:	4603      	mov	r3, r0
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e022      	b.n	8003854 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fda6 	bl	8004368 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800382a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800383a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fe2d 	bl	80044ac <UART_CheckIdleState>
 8003852:	4603      	mov	r3, r0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800385c:	b480      	push	{r7}
 800385e:	b08b      	sub	sp, #44	; 0x2c
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	4613      	mov	r3, r2
 8003868:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800386e:	2b20      	cmp	r3, #32
 8003870:	d156      	bne.n	8003920 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_UART_Transmit_IT+0x22>
 8003878:	88fb      	ldrh	r3, [r7, #6]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e04f      	b.n	8003922 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_UART_Transmit_IT+0x34>
 800388c:	2302      	movs	r3, #2
 800388e:	e048      	b.n	8003922 <HAL_UART_Transmit_IT+0xc6>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	88fa      	ldrh	r2, [r7, #6]
 80038a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	88fa      	ldrh	r2, [r7, #6]
 80038aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2221      	movs	r2, #33	; 0x21
 80038c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ca:	d107      	bne.n	80038dc <HAL_UART_Transmit_IT+0x80>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d103      	bne.n	80038dc <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4a16      	ldr	r2, [pc, #88]	; (8003930 <HAL_UART_Transmit_IT+0xd4>)
 80038d8:	669a      	str	r2, [r3, #104]	; 0x68
 80038da:	e002      	b.n	80038e2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4a15      	ldr	r2, [pc, #84]	; (8003934 <HAL_UART_Transmit_IT+0xd8>)
 80038e0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	e853 3f00 	ldrex	r3, [r3]
 80038f6:	613b      	str	r3, [r7, #16]
   return(result);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	623b      	str	r3, [r7, #32]
 800390a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390c:	69f9      	ldr	r1, [r7, #28]
 800390e:	6a3a      	ldr	r2, [r7, #32]
 8003910:	e841 2300 	strex	r3, r2, [r1]
 8003914:	61bb      	str	r3, [r7, #24]
   return(result);
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e6      	bne.n	80038ea <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	e000      	b.n	8003922 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003920:	2302      	movs	r3, #2
  }
}
 8003922:	4618      	mov	r0, r3
 8003924:	372c      	adds	r7, #44	; 0x2c
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	080049cb 	.word	0x080049cb
 8003934:	08004913 	.word	0x08004913

08003938 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08a      	sub	sp, #40	; 0x28
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800394a:	2b20      	cmp	r3, #32
 800394c:	d13d      	bne.n	80039ca <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_UART_Receive_IT+0x22>
 8003954:	88fb      	ldrh	r3, [r7, #6]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e036      	b.n	80039cc <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_UART_Receive_IT+0x34>
 8003968:	2302      	movs	r3, #2
 800396a:	e02f      	b.n	80039cc <HAL_UART_Receive_IT+0x94>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d018      	beq.n	80039ba <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	e853 3f00 	ldrex	r3, [r3]
 8003994:	613b      	str	r3, [r7, #16]
   return(result);
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	623b      	str	r3, [r7, #32]
 80039a8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	69f9      	ldr	r1, [r7, #28]
 80039ac:	6a3a      	ldr	r2, [r7, #32]
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1e6      	bne.n	8003988 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80039ba:	88fb      	ldrh	r3, [r7, #6]
 80039bc:	461a      	mov	r2, r3
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 fe81 	bl	80046c8 <UART_Start_Receive_IT>
 80039c6:	4603      	mov	r3, r0
 80039c8:	e000      	b.n	80039cc <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039ca:	2302      	movs	r3, #2
  }
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3728      	adds	r7, #40	; 0x28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b0ba      	sub	sp, #232	; 0xe8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80039fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a02:	4013      	ands	r3, r2
 8003a04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003a08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d115      	bne.n	8003a3c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a14:	f003 0320 	and.w	r3, r3, #32
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00f      	beq.n	8003a3c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d009      	beq.n	8003a3c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 82a3 	beq.w	8003f78 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	4798      	blx	r3
      }
      return;
 8003a3a:	e29d      	b.n	8003f78 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8117 	beq.w	8003c74 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003a56:	4b85      	ldr	r3, [pc, #532]	; (8003c6c <HAL_UART_IRQHandler+0x298>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 810a 	beq.w	8003c74 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d011      	beq.n	8003a90 <HAL_UART_IRQHandler+0xbc>
 8003a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00b      	beq.n	8003a90 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a86:	f043 0201 	orr.w	r2, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d011      	beq.n	8003ac0 <HAL_UART_IRQHandler+0xec>
 8003a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00b      	beq.n	8003ac0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2202      	movs	r2, #2
 8003aae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ab6:	f043 0204 	orr.w	r2, r3, #4
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d011      	beq.n	8003af0 <HAL_UART_IRQHandler+0x11c>
 8003acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00b      	beq.n	8003af0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2204      	movs	r2, #4
 8003ade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ae6:	f043 0202 	orr.w	r2, r3, #2
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d017      	beq.n	8003b2c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d105      	bne.n	8003b14 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00b      	beq.n	8003b2c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2208      	movs	r2, #8
 8003b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b22:	f043 0208 	orr.w	r2, r3, #8
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d012      	beq.n	8003b5e <HAL_UART_IRQHandler+0x18a>
 8003b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00c      	beq.n	8003b5e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b54:	f043 0220 	orr.w	r2, r3, #32
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 8209 	beq.w	8003f7c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00d      	beq.n	8003b92 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d007      	beq.n	8003b92 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba6:	2b40      	cmp	r3, #64	; 0x40
 8003ba8:	d005      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d04f      	beq.n	8003c56 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fe32 	bl	8004820 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc6:	2b40      	cmp	r3, #64	; 0x40
 8003bc8:	d141      	bne.n	8003c4e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	3308      	adds	r3, #8
 8003bd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bd8:	e853 3f00 	ldrex	r3, [r3]
 8003bdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003be0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003be8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3308      	adds	r3, #8
 8003bf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bf6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c06:	e841 2300 	strex	r3, r2, [r1]
 8003c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1d9      	bne.n	8003bca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d013      	beq.n	8003c46 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	4a13      	ldr	r2, [pc, #76]	; (8003c70 <HAL_UART_IRQHandler+0x29c>)
 8003c24:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fd fcc4 	bl	80015b8 <HAL_DMA_Abort_IT>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d017      	beq.n	8003c66 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003c40:	4610      	mov	r0, r2
 8003c42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c44:	e00f      	b.n	8003c66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f9a2 	bl	8003f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c4c:	e00b      	b.n	8003c66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f99e 	bl	8003f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c54:	e007      	b.n	8003c66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f99a 	bl	8003f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003c64:	e18a      	b.n	8003f7c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c66:	bf00      	nop
    return;
 8003c68:	e188      	b.n	8003f7c <HAL_UART_IRQHandler+0x5a8>
 8003c6a:	bf00      	nop
 8003c6c:	04000120 	.word	0x04000120
 8003c70:	080048e7 	.word	0x080048e7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	f040 8143 	bne.w	8003f04 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c82:	f003 0310 	and.w	r3, r3, #16
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 813c 	beq.w	8003f04 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c90:	f003 0310 	and.w	r3, r3, #16
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 8135 	beq.w	8003f04 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2210      	movs	r2, #16
 8003ca0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cac:	2b40      	cmp	r3, #64	; 0x40
 8003cae:	f040 80b1 	bne.w	8003e14 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cbe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 815c 	beq.w	8003f80 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003cce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	f080 8154 	bcs.w	8003f80 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	f000 8085 	beq.w	8003df8 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cfa:	e853 3f00 	ldrex	r3, [r3]
 8003cfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	461a      	mov	r2, r3
 8003d14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d1c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d20:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d28:	e841 2300 	strex	r3, r2, [r1]
 8003d2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1da      	bne.n	8003cee <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3308      	adds	r3, #8
 8003d3e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d42:	e853 3f00 	ldrex	r3, [r3]
 8003d46:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3308      	adds	r3, #8
 8003d58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d5c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d60:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d62:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d68:	e841 2300 	strex	r3, r2, [r1]
 8003d6c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1e1      	bne.n	8003d38 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3308      	adds	r3, #8
 8003d7a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3308      	adds	r3, #8
 8003d94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d98:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003da0:	e841 2300 	strex	r3, r2, [r1]
 8003da4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003da6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1e3      	bne.n	8003d74 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc8:	f023 0310 	bic.w	r3, r3, #16
 8003dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dda:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ddc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dde:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003de0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003de2:	e841 2300 	strex	r3, r2, [r1]
 8003de6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1e4      	bne.n	8003db8 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fd fba7 	bl	8001546 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f8c9 	bl	8003fa4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e12:	e0b5      	b.n	8003f80 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80a7 	beq.w	8003f84 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003e36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 80a2 	beq.w	8003f84 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e48:	e853 3f00 	ldrex	r3, [r3]
 8003e4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e62:	647b      	str	r3, [r7, #68]	; 0x44
 8003e64:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e6a:	e841 2300 	strex	r3, r2, [r1]
 8003e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1e4      	bne.n	8003e40 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3308      	adds	r3, #8
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	623b      	str	r3, [r7, #32]
   return(result);
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3308      	adds	r3, #8
 8003e96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e9a:	633a      	str	r2, [r7, #48]	; 0x30
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ea2:	e841 2300 	strex	r3, r2, [r1]
 8003ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e3      	bne.n	8003e76 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f023 0310 	bic.w	r3, r3, #16
 8003ed4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	461a      	mov	r2, r3
 8003ede:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ee2:	61fb      	str	r3, [r7, #28]
 8003ee4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	69b9      	ldr	r1, [r7, #24]
 8003ee8:	69fa      	ldr	r2, [r7, #28]
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	617b      	str	r3, [r7, #20]
   return(result);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e4      	bne.n	8003ec0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ef6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003efa:	4619      	mov	r1, r3
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f851 	bl	8003fa4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f02:	e03f      	b.n	8003f84 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00e      	beq.n	8003f2e <HAL_UART_IRQHandler+0x55a>
 8003f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d008      	beq.n	8003f2e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 ff35 	bl	8004d96 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f2c:	e02d      	b.n	8003f8a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00e      	beq.n	8003f58 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d008      	beq.n	8003f58 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d01c      	beq.n	8003f88 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	4798      	blx	r3
    }
    return;
 8003f56:	e017      	b.n	8003f88 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d012      	beq.n	8003f8a <HAL_UART_IRQHandler+0x5b6>
 8003f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00c      	beq.n	8003f8a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 fd8a 	bl	8004a8a <UART_EndTransmit_IT>
    return;
 8003f76:	e008      	b.n	8003f8a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003f78:	bf00      	nop
 8003f7a:	e006      	b.n	8003f8a <HAL_UART_IRQHandler+0x5b6>
    return;
 8003f7c:	bf00      	nop
 8003f7e:	e004      	b.n	8003f8a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003f80:	bf00      	nop
 8003f82:	e002      	b.n	8003f8a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003f84:	bf00      	nop
 8003f86:	e000      	b.n	8003f8a <HAL_UART_IRQHandler+0x5b6>
    return;
 8003f88:	bf00      	nop
  }

}
 8003f8a:	37e8      	adds	r7, #232	; 0xe8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	4b92      	ldr	r3, [pc, #584]	; (8004230 <UART_SetConfig+0x274>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6812      	ldr	r2, [r2, #0]
 8003fee:	6979      	ldr	r1, [r7, #20]
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	430a      	orrs	r2, r1
 800402c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a80      	ldr	r2, [pc, #512]	; (8004234 <UART_SetConfig+0x278>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d120      	bne.n	800407a <UART_SetConfig+0xbe>
 8004038:	4b7f      	ldr	r3, [pc, #508]	; (8004238 <UART_SetConfig+0x27c>)
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	2b03      	cmp	r3, #3
 8004042:	d817      	bhi.n	8004074 <UART_SetConfig+0xb8>
 8004044:	a201      	add	r2, pc, #4	; (adr r2, 800404c <UART_SetConfig+0x90>)
 8004046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404a:	bf00      	nop
 800404c:	0800405d 	.word	0x0800405d
 8004050:	08004069 	.word	0x08004069
 8004054:	0800406f 	.word	0x0800406f
 8004058:	08004063 	.word	0x08004063
 800405c:	2301      	movs	r3, #1
 800405e:	77fb      	strb	r3, [r7, #31]
 8004060:	e0b5      	b.n	80041ce <UART_SetConfig+0x212>
 8004062:	2302      	movs	r3, #2
 8004064:	77fb      	strb	r3, [r7, #31]
 8004066:	e0b2      	b.n	80041ce <UART_SetConfig+0x212>
 8004068:	2304      	movs	r3, #4
 800406a:	77fb      	strb	r3, [r7, #31]
 800406c:	e0af      	b.n	80041ce <UART_SetConfig+0x212>
 800406e:	2308      	movs	r3, #8
 8004070:	77fb      	strb	r3, [r7, #31]
 8004072:	e0ac      	b.n	80041ce <UART_SetConfig+0x212>
 8004074:	2310      	movs	r3, #16
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e0a9      	b.n	80041ce <UART_SetConfig+0x212>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a6f      	ldr	r2, [pc, #444]	; (800423c <UART_SetConfig+0x280>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d124      	bne.n	80040ce <UART_SetConfig+0x112>
 8004084:	4b6c      	ldr	r3, [pc, #432]	; (8004238 <UART_SetConfig+0x27c>)
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800408c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004090:	d011      	beq.n	80040b6 <UART_SetConfig+0xfa>
 8004092:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004096:	d817      	bhi.n	80040c8 <UART_SetConfig+0x10c>
 8004098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800409c:	d011      	beq.n	80040c2 <UART_SetConfig+0x106>
 800409e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040a2:	d811      	bhi.n	80040c8 <UART_SetConfig+0x10c>
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <UART_SetConfig+0xf4>
 80040a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ac:	d006      	beq.n	80040bc <UART_SetConfig+0x100>
 80040ae:	e00b      	b.n	80040c8 <UART_SetConfig+0x10c>
 80040b0:	2300      	movs	r3, #0
 80040b2:	77fb      	strb	r3, [r7, #31]
 80040b4:	e08b      	b.n	80041ce <UART_SetConfig+0x212>
 80040b6:	2302      	movs	r3, #2
 80040b8:	77fb      	strb	r3, [r7, #31]
 80040ba:	e088      	b.n	80041ce <UART_SetConfig+0x212>
 80040bc:	2304      	movs	r3, #4
 80040be:	77fb      	strb	r3, [r7, #31]
 80040c0:	e085      	b.n	80041ce <UART_SetConfig+0x212>
 80040c2:	2308      	movs	r3, #8
 80040c4:	77fb      	strb	r3, [r7, #31]
 80040c6:	e082      	b.n	80041ce <UART_SetConfig+0x212>
 80040c8:	2310      	movs	r3, #16
 80040ca:	77fb      	strb	r3, [r7, #31]
 80040cc:	e07f      	b.n	80041ce <UART_SetConfig+0x212>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a5b      	ldr	r2, [pc, #364]	; (8004240 <UART_SetConfig+0x284>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d124      	bne.n	8004122 <UART_SetConfig+0x166>
 80040d8:	4b57      	ldr	r3, [pc, #348]	; (8004238 <UART_SetConfig+0x27c>)
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80040e0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040e4:	d011      	beq.n	800410a <UART_SetConfig+0x14e>
 80040e6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040ea:	d817      	bhi.n	800411c <UART_SetConfig+0x160>
 80040ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040f0:	d011      	beq.n	8004116 <UART_SetConfig+0x15a>
 80040f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040f6:	d811      	bhi.n	800411c <UART_SetConfig+0x160>
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <UART_SetConfig+0x148>
 80040fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004100:	d006      	beq.n	8004110 <UART_SetConfig+0x154>
 8004102:	e00b      	b.n	800411c <UART_SetConfig+0x160>
 8004104:	2300      	movs	r3, #0
 8004106:	77fb      	strb	r3, [r7, #31]
 8004108:	e061      	b.n	80041ce <UART_SetConfig+0x212>
 800410a:	2302      	movs	r3, #2
 800410c:	77fb      	strb	r3, [r7, #31]
 800410e:	e05e      	b.n	80041ce <UART_SetConfig+0x212>
 8004110:	2304      	movs	r3, #4
 8004112:	77fb      	strb	r3, [r7, #31]
 8004114:	e05b      	b.n	80041ce <UART_SetConfig+0x212>
 8004116:	2308      	movs	r3, #8
 8004118:	77fb      	strb	r3, [r7, #31]
 800411a:	e058      	b.n	80041ce <UART_SetConfig+0x212>
 800411c:	2310      	movs	r3, #16
 800411e:	77fb      	strb	r3, [r7, #31]
 8004120:	e055      	b.n	80041ce <UART_SetConfig+0x212>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a47      	ldr	r2, [pc, #284]	; (8004244 <UART_SetConfig+0x288>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d124      	bne.n	8004176 <UART_SetConfig+0x1ba>
 800412c:	4b42      	ldr	r3, [pc, #264]	; (8004238 <UART_SetConfig+0x27c>)
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004130:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004134:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004138:	d011      	beq.n	800415e <UART_SetConfig+0x1a2>
 800413a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800413e:	d817      	bhi.n	8004170 <UART_SetConfig+0x1b4>
 8004140:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004144:	d011      	beq.n	800416a <UART_SetConfig+0x1ae>
 8004146:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800414a:	d811      	bhi.n	8004170 <UART_SetConfig+0x1b4>
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <UART_SetConfig+0x19c>
 8004150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004154:	d006      	beq.n	8004164 <UART_SetConfig+0x1a8>
 8004156:	e00b      	b.n	8004170 <UART_SetConfig+0x1b4>
 8004158:	2300      	movs	r3, #0
 800415a:	77fb      	strb	r3, [r7, #31]
 800415c:	e037      	b.n	80041ce <UART_SetConfig+0x212>
 800415e:	2302      	movs	r3, #2
 8004160:	77fb      	strb	r3, [r7, #31]
 8004162:	e034      	b.n	80041ce <UART_SetConfig+0x212>
 8004164:	2304      	movs	r3, #4
 8004166:	77fb      	strb	r3, [r7, #31]
 8004168:	e031      	b.n	80041ce <UART_SetConfig+0x212>
 800416a:	2308      	movs	r3, #8
 800416c:	77fb      	strb	r3, [r7, #31]
 800416e:	e02e      	b.n	80041ce <UART_SetConfig+0x212>
 8004170:	2310      	movs	r3, #16
 8004172:	77fb      	strb	r3, [r7, #31]
 8004174:	e02b      	b.n	80041ce <UART_SetConfig+0x212>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a33      	ldr	r2, [pc, #204]	; (8004248 <UART_SetConfig+0x28c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d124      	bne.n	80041ca <UART_SetConfig+0x20e>
 8004180:	4b2d      	ldr	r3, [pc, #180]	; (8004238 <UART_SetConfig+0x27c>)
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004188:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800418c:	d011      	beq.n	80041b2 <UART_SetConfig+0x1f6>
 800418e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004192:	d817      	bhi.n	80041c4 <UART_SetConfig+0x208>
 8004194:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004198:	d011      	beq.n	80041be <UART_SetConfig+0x202>
 800419a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800419e:	d811      	bhi.n	80041c4 <UART_SetConfig+0x208>
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <UART_SetConfig+0x1f0>
 80041a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041a8:	d006      	beq.n	80041b8 <UART_SetConfig+0x1fc>
 80041aa:	e00b      	b.n	80041c4 <UART_SetConfig+0x208>
 80041ac:	2300      	movs	r3, #0
 80041ae:	77fb      	strb	r3, [r7, #31]
 80041b0:	e00d      	b.n	80041ce <UART_SetConfig+0x212>
 80041b2:	2302      	movs	r3, #2
 80041b4:	77fb      	strb	r3, [r7, #31]
 80041b6:	e00a      	b.n	80041ce <UART_SetConfig+0x212>
 80041b8:	2304      	movs	r3, #4
 80041ba:	77fb      	strb	r3, [r7, #31]
 80041bc:	e007      	b.n	80041ce <UART_SetConfig+0x212>
 80041be:	2308      	movs	r3, #8
 80041c0:	77fb      	strb	r3, [r7, #31]
 80041c2:	e004      	b.n	80041ce <UART_SetConfig+0x212>
 80041c4:	2310      	movs	r3, #16
 80041c6:	77fb      	strb	r3, [r7, #31]
 80041c8:	e001      	b.n	80041ce <UART_SetConfig+0x212>
 80041ca:	2310      	movs	r3, #16
 80041cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d6:	d16c      	bne.n	80042b2 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80041d8:	7ffb      	ldrb	r3, [r7, #31]
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d838      	bhi.n	8004250 <UART_SetConfig+0x294>
 80041de:	a201      	add	r2, pc, #4	; (adr r2, 80041e4 <UART_SetConfig+0x228>)
 80041e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e4:	08004209 	.word	0x08004209
 80041e8:	08004211 	.word	0x08004211
 80041ec:	08004219 	.word	0x08004219
 80041f0:	08004251 	.word	0x08004251
 80041f4:	0800421f 	.word	0x0800421f
 80041f8:	08004251 	.word	0x08004251
 80041fc:	08004251 	.word	0x08004251
 8004200:	08004251 	.word	0x08004251
 8004204:	08004227 	.word	0x08004227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004208:	f7ff f878 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 800420c:	61b8      	str	r0, [r7, #24]
        break;
 800420e:	e024      	b.n	800425a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004210:	f7ff f896 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 8004214:	61b8      	str	r0, [r7, #24]
        break;
 8004216:	e020      	b.n	800425a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004218:	4b0c      	ldr	r3, [pc, #48]	; (800424c <UART_SetConfig+0x290>)
 800421a:	61bb      	str	r3, [r7, #24]
        break;
 800421c:	e01d      	b.n	800425a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800421e:	f7fe fff7 	bl	8003210 <HAL_RCC_GetSysClockFreq>
 8004222:	61b8      	str	r0, [r7, #24]
        break;
 8004224:	e019      	b.n	800425a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800422a:	61bb      	str	r3, [r7, #24]
        break;
 800422c:	e015      	b.n	800425a <UART_SetConfig+0x29e>
 800422e:	bf00      	nop
 8004230:	efff69f3 	.word	0xefff69f3
 8004234:	40013800 	.word	0x40013800
 8004238:	40021000 	.word	0x40021000
 800423c:	40004400 	.word	0x40004400
 8004240:	40004800 	.word	0x40004800
 8004244:	40004c00 	.word	0x40004c00
 8004248:	40005000 	.word	0x40005000
 800424c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	77bb      	strb	r3, [r7, #30]
        break;
 8004258:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d075      	beq.n	800434c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	005a      	lsls	r2, r3, #1
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	441a      	add	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	fbb2 f3f3 	udiv	r3, r2, r3
 8004274:	b29b      	uxth	r3, r3
 8004276:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	2b0f      	cmp	r3, #15
 800427c:	d916      	bls.n	80042ac <UART_SetConfig+0x2f0>
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004284:	d212      	bcs.n	80042ac <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	b29b      	uxth	r3, r3
 800428a:	f023 030f 	bic.w	r3, r3, #15
 800428e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	085b      	lsrs	r3, r3, #1
 8004294:	b29b      	uxth	r3, r3
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	b29a      	uxth	r2, r3
 800429c:	89fb      	ldrh	r3, [r7, #14]
 800429e:	4313      	orrs	r3, r2
 80042a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	89fa      	ldrh	r2, [r7, #14]
 80042a8:	60da      	str	r2, [r3, #12]
 80042aa:	e04f      	b.n	800434c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	77bb      	strb	r3, [r7, #30]
 80042b0:	e04c      	b.n	800434c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042b2:	7ffb      	ldrb	r3, [r7, #31]
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d828      	bhi.n	800430a <UART_SetConfig+0x34e>
 80042b8:	a201      	add	r2, pc, #4	; (adr r2, 80042c0 <UART_SetConfig+0x304>)
 80042ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042be:	bf00      	nop
 80042c0:	080042e5 	.word	0x080042e5
 80042c4:	080042ed 	.word	0x080042ed
 80042c8:	080042f5 	.word	0x080042f5
 80042cc:	0800430b 	.word	0x0800430b
 80042d0:	080042fb 	.word	0x080042fb
 80042d4:	0800430b 	.word	0x0800430b
 80042d8:	0800430b 	.word	0x0800430b
 80042dc:	0800430b 	.word	0x0800430b
 80042e0:	08004303 	.word	0x08004303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042e4:	f7ff f80a 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 80042e8:	61b8      	str	r0, [r7, #24]
        break;
 80042ea:	e013      	b.n	8004314 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042ec:	f7ff f828 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 80042f0:	61b8      	str	r0, [r7, #24]
        break;
 80042f2:	e00f      	b.n	8004314 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042f4:	4b1b      	ldr	r3, [pc, #108]	; (8004364 <UART_SetConfig+0x3a8>)
 80042f6:	61bb      	str	r3, [r7, #24]
        break;
 80042f8:	e00c      	b.n	8004314 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042fa:	f7fe ff89 	bl	8003210 <HAL_RCC_GetSysClockFreq>
 80042fe:	61b8      	str	r0, [r7, #24]
        break;
 8004300:	e008      	b.n	8004314 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004306:	61bb      	str	r3, [r7, #24]
        break;
 8004308:	e004      	b.n	8004314 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	77bb      	strb	r3, [r7, #30]
        break;
 8004312:	bf00      	nop
    }

    if (pclk != 0U)
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d018      	beq.n	800434c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	085a      	lsrs	r2, r3, #1
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	441a      	add	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	fbb2 f3f3 	udiv	r3, r2, r3
 800432c:	b29b      	uxth	r3, r3
 800432e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2b0f      	cmp	r3, #15
 8004334:	d908      	bls.n	8004348 <UART_SetConfig+0x38c>
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433c:	d204      	bcs.n	8004348 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	60da      	str	r2, [r3, #12]
 8004346:	e001      	b.n	800434c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004358:	7fbb      	ldrb	r3, [r7, #30]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3720      	adds	r7, #32
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	007a1200 	.word	0x007a1200

08004368 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00a      	beq.n	8004392 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00a      	beq.n	80043d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00a      	beq.n	800441a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	f003 0320 	and.w	r3, r3, #32
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01a      	beq.n	800447e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004466:	d10a      	bne.n	800447e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	605a      	str	r2, [r3, #4]
  }
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044bc:	f7fc ff26 	bl	800130c <HAL_GetTick>
 80044c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d10e      	bne.n	80044ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f82d 	bl	800453e <UART_WaitOnFlagUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e023      	b.n	8004536 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d10e      	bne.n	800451a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f817 	bl	800453e <UART_WaitOnFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e00d      	b.n	8004536 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2220      	movs	r2, #32
 800451e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b09c      	sub	sp, #112	; 0x70
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	603b      	str	r3, [r7, #0]
 800454a:	4613      	mov	r3, r2
 800454c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800454e:	e0a5      	b.n	800469c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004556:	f000 80a1 	beq.w	800469c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455a:	f7fc fed7 	bl	800130c <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004566:	429a      	cmp	r2, r3
 8004568:	d302      	bcc.n	8004570 <UART_WaitOnFlagUntilTimeout+0x32>
 800456a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800456c:	2b00      	cmp	r3, #0
 800456e:	d13e      	bne.n	80045ee <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800457e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004580:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004584:	667b      	str	r3, [r7, #100]	; 0x64
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800458e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004590:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004594:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800459c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e6      	bne.n	8004570 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3308      	adds	r3, #8
 80045a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b4:	f023 0301 	bic.w	r3, r3, #1
 80045b8:	663b      	str	r3, [r7, #96]	; 0x60
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3308      	adds	r3, #8
 80045c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80045c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045ca:	e841 2300 	strex	r3, r2, [r1]
 80045ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80045d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1e5      	bne.n	80045a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2220      	movs	r2, #32
 80045da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2220      	movs	r2, #32
 80045e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e067      	b.n	80046be <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d04f      	beq.n	800469c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800460a:	d147      	bne.n	800469c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004614:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461e:	e853 3f00 	ldrex	r3, [r3]
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800462a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	461a      	mov	r2, r3
 8004632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004634:	637b      	str	r3, [r7, #52]	; 0x34
 8004636:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800463a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800463c:	e841 2300 	strex	r3, r2, [r1]
 8004640:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e6      	bne.n	8004616 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3308      	adds	r3, #8
 800464e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	e853 3f00 	ldrex	r3, [r3]
 8004656:	613b      	str	r3, [r7, #16]
   return(result);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f023 0301 	bic.w	r3, r3, #1
 800465e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3308      	adds	r3, #8
 8004666:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004668:	623a      	str	r2, [r7, #32]
 800466a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466c:	69f9      	ldr	r1, [r7, #28]
 800466e:	6a3a      	ldr	r2, [r7, #32]
 8004670:	e841 2300 	strex	r3, r2, [r1]
 8004674:	61bb      	str	r3, [r7, #24]
   return(result);
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e5      	bne.n	8004648 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2220      	movs	r2, #32
 8004680:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2220      	movs	r2, #32
 8004686:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e010      	b.n	80046be <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69da      	ldr	r2, [r3, #28]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	4013      	ands	r3, r2
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	bf0c      	ite	eq
 80046ac:	2301      	moveq	r3, #1
 80046ae:	2300      	movne	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	461a      	mov	r2, r3
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	f43f af4a 	beq.w	8004550 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3770      	adds	r7, #112	; 0x70
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b091      	sub	sp, #68	; 0x44
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	4613      	mov	r3, r2
 80046d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	88fa      	ldrh	r2, [r7, #6]
 80046e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046fa:	d10e      	bne.n	800471a <UART_Start_Receive_IT+0x52>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d105      	bne.n	8004710 <UART_Start_Receive_IT+0x48>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f240 12ff 	movw	r2, #511	; 0x1ff
 800470a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800470e:	e02d      	b.n	800476c <UART_Start_Receive_IT+0xa4>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	22ff      	movs	r2, #255	; 0xff
 8004714:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004718:	e028      	b.n	800476c <UART_Start_Receive_IT+0xa4>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10d      	bne.n	800473e <UART_Start_Receive_IT+0x76>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d104      	bne.n	8004734 <UART_Start_Receive_IT+0x6c>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	22ff      	movs	r2, #255	; 0xff
 800472e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004732:	e01b      	b.n	800476c <UART_Start_Receive_IT+0xa4>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	227f      	movs	r2, #127	; 0x7f
 8004738:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800473c:	e016      	b.n	800476c <UART_Start_Receive_IT+0xa4>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004746:	d10d      	bne.n	8004764 <UART_Start_Receive_IT+0x9c>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d104      	bne.n	800475a <UART_Start_Receive_IT+0x92>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	227f      	movs	r2, #127	; 0x7f
 8004754:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004758:	e008      	b.n	800476c <UART_Start_Receive_IT+0xa4>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	223f      	movs	r2, #63	; 0x3f
 800475e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004762:	e003      	b.n	800476c <UART_Start_Receive_IT+0xa4>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2222      	movs	r2, #34	; 0x22
 8004778:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3308      	adds	r3, #8
 8004780:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	e853 3f00 	ldrex	r3, [r3]
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	f043 0301 	orr.w	r3, r3, #1
 8004790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3308      	adds	r3, #8
 8004798:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800479a:	637a      	str	r2, [r7, #52]	; 0x34
 800479c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047a2:	e841 2300 	strex	r3, r2, [r1]
 80047a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1e5      	bne.n	800477a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b6:	d107      	bne.n	80047c8 <UART_Start_Receive_IT+0x100>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d103      	bne.n	80047c8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4a15      	ldr	r2, [pc, #84]	; (8004818 <UART_Start_Receive_IT+0x150>)
 80047c4:	665a      	str	r2, [r3, #100]	; 0x64
 80047c6:	e002      	b.n	80047ce <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4a14      	ldr	r2, [pc, #80]	; (800481c <UART_Start_Receive_IT+0x154>)
 80047cc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	e853 3f00 	ldrex	r3, [r3]
 80047e2:	613b      	str	r3, [r7, #16]
   return(result);
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80047ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f4:	623b      	str	r3, [r7, #32]
 80047f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f8:	69f9      	ldr	r1, [r7, #28]
 80047fa:	6a3a      	ldr	r2, [r7, #32]
 80047fc:	e841 2300 	strex	r3, r2, [r1]
 8004800:	61bb      	str	r3, [r7, #24]
   return(result);
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e6      	bne.n	80047d6 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3744      	adds	r7, #68	; 0x44
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	08004c3b 	.word	0x08004c3b
 800481c:	08004adf 	.word	0x08004adf

08004820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004820:	b480      	push	{r7}
 8004822:	b095      	sub	sp, #84	; 0x54
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004830:	e853 3f00 	ldrex	r3, [r3]
 8004834:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004838:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800483c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004846:	643b      	str	r3, [r7, #64]	; 0x40
 8004848:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800484c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800484e:	e841 2300 	strex	r3, r2, [r1]
 8004852:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1e6      	bne.n	8004828 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3308      	adds	r3, #8
 8004860:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	e853 3f00 	ldrex	r3, [r3]
 8004868:	61fb      	str	r3, [r7, #28]
   return(result);
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	f023 0301 	bic.w	r3, r3, #1
 8004870:	64bb      	str	r3, [r7, #72]	; 0x48
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3308      	adds	r3, #8
 8004878:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800487a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800487c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1e5      	bne.n	800485a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004892:	2b01      	cmp	r3, #1
 8004894:	d118      	bne.n	80048c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	e853 3f00 	ldrex	r3, [r3]
 80048a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f023 0310 	bic.w	r3, r3, #16
 80048aa:	647b      	str	r3, [r7, #68]	; 0x44
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	461a      	mov	r2, r3
 80048b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b4:	61bb      	str	r3, [r7, #24]
 80048b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	6979      	ldr	r1, [r7, #20]
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	e841 2300 	strex	r3, r2, [r1]
 80048c0:	613b      	str	r3, [r7, #16]
   return(result);
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1e6      	bne.n	8004896 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80048da:	bf00      	nop
 80048dc:	3754      	adds	r7, #84	; 0x54
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f7ff fb43 	bl	8003f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800490a:	bf00      	nop
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004912:	b480      	push	{r7}
 8004914:	b08f      	sub	sp, #60	; 0x3c
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800491e:	2b21      	cmp	r3, #33	; 0x21
 8004920:	d14d      	bne.n	80049be <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004928:	b29b      	uxth	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d132      	bne.n	8004994 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	61fb      	str	r3, [r7, #28]
   return(result);
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004942:	637b      	str	r3, [r7, #52]	; 0x34
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	461a      	mov	r2, r3
 800494a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800494e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e6      	bne.n	800492e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	60bb      	str	r3, [r7, #8]
   return(result);
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004974:	633b      	str	r3, [r7, #48]	; 0x30
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	61bb      	str	r3, [r7, #24]
 8004980:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004982:	6979      	ldr	r1, [r7, #20]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	613b      	str	r3, [r7, #16]
   return(result);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1e6      	bne.n	8004960 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004992:	e014      	b.n	80049be <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004998:	781a      	ldrb	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	b292      	uxth	r2, r2
 80049a0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80049be:	bf00      	nop
 80049c0:	373c      	adds	r7, #60	; 0x3c
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b091      	sub	sp, #68	; 0x44
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049d6:	2b21      	cmp	r3, #33	; 0x21
 80049d8:	d151      	bne.n	8004a7e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d132      	bne.n	8004a4c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	e853 3f00 	ldrex	r3, [r3]
 80049f2:	623b      	str	r3, [r7, #32]
   return(result);
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	461a      	mov	r2, r3
 8004a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a04:	633b      	str	r3, [r7, #48]	; 0x30
 8004a06:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a0c:	e841 2300 	strex	r3, r2, [r1]
 8004a10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1e6      	bne.n	80049e6 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	e853 3f00 	ldrex	r3, [r3]
 8004a24:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a36:	61fb      	str	r3, [r7, #28]
 8004a38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3a:	69b9      	ldr	r1, [r7, #24]
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	e841 2300 	strex	r3, r2, [r1]
 8004a42:	617b      	str	r3, [r7, #20]
   return(result);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1e6      	bne.n	8004a18 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004a4a:	e018      	b.n	8004a7e <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a50:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a54:	881a      	ldrh	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a5e:	b292      	uxth	r2, r2
 8004a60:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a66:	1c9a      	adds	r2, r3, #2
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004a7e:	bf00      	nop
 8004a80:	3744      	adds	r7, #68	; 0x44
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b088      	sub	sp, #32
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aa6:	61fb      	str	r3, [r7, #28]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	6979      	ldr	r1, [r7, #20]
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	613b      	str	r3, [r7, #16]
   return(result);
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e6      	bne.n	8004a92 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7fb fe55 	bl	8000780 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ad6:	bf00      	nop
 8004ad8:	3720      	adds	r7, #32
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b096      	sub	sp, #88	; 0x58
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004aec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004af4:	2b22      	cmp	r3, #34	; 0x22
 8004af6:	f040 8094 	bne.w	8004c22 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b00:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004b04:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004b08:	b2d9      	uxtb	r1, r3
 8004b0a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b14:	400a      	ands	r2, r1
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d177      	bne.n	8004c32 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4a:	e853 3f00 	ldrex	r3, [r3]
 8004b4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b56:	653b      	str	r3, [r7, #80]	; 0x50
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b60:	647b      	str	r3, [r7, #68]	; 0x44
 8004b62:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e6      	bne.n	8004b42 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3308      	adds	r3, #8
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	623b      	str	r3, [r7, #32]
   return(result);
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	f023 0301 	bic.w	r3, r3, #1
 8004b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3308      	adds	r3, #8
 8004b92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b94:	633a      	str	r2, [r7, #48]	; 0x30
 8004b96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e5      	bne.n	8004b74 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d12e      	bne.n	8004c1a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	e853 3f00 	ldrex	r3, [r3]
 8004bce:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0310 	bic.w	r3, r3, #16
 8004bd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	461a      	mov	r2, r3
 8004bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004be0:	61fb      	str	r3, [r7, #28]
 8004be2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be4:	69b9      	ldr	r1, [r7, #24]
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	e841 2300 	strex	r3, r2, [r1]
 8004bec:	617b      	str	r3, [r7, #20]
   return(result);
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1e6      	bne.n	8004bc2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f003 0310 	and.w	r3, r3, #16
 8004bfe:	2b10      	cmp	r3, #16
 8004c00:	d103      	bne.n	8004c0a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2210      	movs	r2, #16
 8004c08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c10:	4619      	mov	r1, r3
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff f9c6 	bl	8003fa4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c18:	e00b      	b.n	8004c32 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fb fdc2 	bl	80007a4 <HAL_UART_RxCpltCallback>
}
 8004c20:	e007      	b.n	8004c32 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699a      	ldr	r2, [r3, #24]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0208 	orr.w	r2, r2, #8
 8004c30:	619a      	str	r2, [r3, #24]
}
 8004c32:	bf00      	nop
 8004c34:	3758      	adds	r7, #88	; 0x58
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b096      	sub	sp, #88	; 0x58
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c48:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c50:	2b22      	cmp	r3, #34	; 0x22
 8004c52:	f040 8094 	bne.w	8004d7e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c5c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c64:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004c66:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004c6a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004c6e:	4013      	ands	r3, r2
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c74:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7a:	1c9a      	adds	r2, r3, #2
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d177      	bne.n	8004d8e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca6:	e853 3f00 	ldrex	r3, [r3]
 8004caa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cbc:	643b      	str	r3, [r7, #64]	; 0x40
 8004cbe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cc4:	e841 2300 	strex	r3, r2, [r1]
 8004cc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1e6      	bne.n	8004c9e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	e853 3f00 	ldrex	r3, [r3]
 8004cde:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	f023 0301 	bic.w	r3, r3, #1
 8004ce6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3308      	adds	r3, #8
 8004cee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cf0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cf8:	e841 2300 	strex	r3, r2, [r1]
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1e5      	bne.n	8004cd0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d12e      	bne.n	8004d76 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	e853 3f00 	ldrex	r3, [r3]
 8004d2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f023 0310 	bic.w	r3, r3, #16
 8004d32:	647b      	str	r3, [r7, #68]	; 0x44
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d40:	6979      	ldr	r1, [r7, #20]
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	e841 2300 	strex	r3, r2, [r1]
 8004d48:	613b      	str	r3, [r7, #16]
   return(result);
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1e6      	bne.n	8004d1e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f003 0310 	and.w	r3, r3, #16
 8004d5a:	2b10      	cmp	r3, #16
 8004d5c:	d103      	bne.n	8004d66 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2210      	movs	r2, #16
 8004d64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff f918 	bl	8003fa4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d74:	e00b      	b.n	8004d8e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7fb fd14 	bl	80007a4 <HAL_UART_RxCpltCallback>
}
 8004d7c:	e007      	b.n	8004d8e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699a      	ldr	r2, [r3, #24]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0208 	orr.w	r2, r2, #8
 8004d8c:	619a      	str	r2, [r3, #24]
}
 8004d8e:	bf00      	nop
 8004d90:	3758      	adds	r7, #88	; 0x58
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <__libc_init_array>:
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	4d0d      	ldr	r5, [pc, #52]	; (8004de4 <__libc_init_array+0x38>)
 8004db0:	4c0d      	ldr	r4, [pc, #52]	; (8004de8 <__libc_init_array+0x3c>)
 8004db2:	1b64      	subs	r4, r4, r5
 8004db4:	10a4      	asrs	r4, r4, #2
 8004db6:	2600      	movs	r6, #0
 8004db8:	42a6      	cmp	r6, r4
 8004dba:	d109      	bne.n	8004dd0 <__libc_init_array+0x24>
 8004dbc:	4d0b      	ldr	r5, [pc, #44]	; (8004dec <__libc_init_array+0x40>)
 8004dbe:	4c0c      	ldr	r4, [pc, #48]	; (8004df0 <__libc_init_array+0x44>)
 8004dc0:	f000 f820 	bl	8004e04 <_init>
 8004dc4:	1b64      	subs	r4, r4, r5
 8004dc6:	10a4      	asrs	r4, r4, #2
 8004dc8:	2600      	movs	r6, #0
 8004dca:	42a6      	cmp	r6, r4
 8004dcc:	d105      	bne.n	8004dda <__libc_init_array+0x2e>
 8004dce:	bd70      	pop	{r4, r5, r6, pc}
 8004dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd4:	4798      	blx	r3
 8004dd6:	3601      	adds	r6, #1
 8004dd8:	e7ee      	b.n	8004db8 <__libc_init_array+0xc>
 8004dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dde:	4798      	blx	r3
 8004de0:	3601      	adds	r6, #1
 8004de2:	e7f2      	b.n	8004dca <__libc_init_array+0x1e>
 8004de4:	08004e54 	.word	0x08004e54
 8004de8:	08004e54 	.word	0x08004e54
 8004dec:	08004e54 	.word	0x08004e54
 8004df0:	08004e5c 	.word	0x08004e5c

08004df4 <memset>:
 8004df4:	4402      	add	r2, r0
 8004df6:	4603      	mov	r3, r0
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d100      	bne.n	8004dfe <memset+0xa>
 8004dfc:	4770      	bx	lr
 8004dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8004e02:	e7f9      	b.n	8004df8 <memset+0x4>

08004e04 <_init>:
 8004e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e06:	bf00      	nop
 8004e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0a:	bc08      	pop	{r3}
 8004e0c:	469e      	mov	lr, r3
 8004e0e:	4770      	bx	lr

08004e10 <_fini>:
 8004e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e12:	bf00      	nop
 8004e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e16:	bc08      	pop	{r3}
 8004e18:	469e      	mov	lr, r3
 8004e1a:	4770      	bx	lr
