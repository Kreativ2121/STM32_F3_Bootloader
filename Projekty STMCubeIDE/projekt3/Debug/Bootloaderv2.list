
Bootloaderv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d80  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004f14  08004f14  00014f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f4c  08004f4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004f4c  08004f4c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f4c  08004f4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004f4c  08004f4c  00014f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f54  08004f54  00014f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001b0  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e5c9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002533  00000000  00000000  0002e605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000988  00000000  00000000  00030b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008b0  00000000  00000000  000314c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d3b  00000000  00000000  00031d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eab3  00000000  00000000  00053aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3a90  00000000  00000000  0006255e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00125fee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002528  00000000  00000000  00126040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004efc 	.word	0x08004efc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08004efc 	.word	0x08004efc

080001d4 <MX_GPIO_Init>:
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08a      	sub	sp, #40	; 0x28
 80001d8:	af00      	add	r7, sp, #0
 80001da:	f107 0314 	add.w	r3, r7, #20
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]
 80001ea:	4b2b      	ldr	r3, [pc, #172]	; (8000298 <MX_GPIO_Init+0xc4>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a2a      	ldr	r2, [pc, #168]	; (8000298 <MX_GPIO_Init+0xc4>)
 80001f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001f4:	6153      	str	r3, [r2, #20]
 80001f6:	4b28      	ldr	r3, [pc, #160]	; (8000298 <MX_GPIO_Init+0xc4>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80001fe:	613b      	str	r3, [r7, #16]
 8000200:	693b      	ldr	r3, [r7, #16]
 8000202:	4b25      	ldr	r3, [pc, #148]	; (8000298 <MX_GPIO_Init+0xc4>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	4a24      	ldr	r2, [pc, #144]	; (8000298 <MX_GPIO_Init+0xc4>)
 8000208:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800020c:	6153      	str	r3, [r2, #20]
 800020e:	4b22      	ldr	r3, [pc, #136]	; (8000298 <MX_GPIO_Init+0xc4>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	4b1f      	ldr	r3, [pc, #124]	; (8000298 <MX_GPIO_Init+0xc4>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	4a1e      	ldr	r2, [pc, #120]	; (8000298 <MX_GPIO_Init+0xc4>)
 8000220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000224:	6153      	str	r3, [r2, #20]
 8000226:	4b1c      	ldr	r3, [pc, #112]	; (8000298 <MX_GPIO_Init+0xc4>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800022e:	60bb      	str	r3, [r7, #8]
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	4b19      	ldr	r3, [pc, #100]	; (8000298 <MX_GPIO_Init+0xc4>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	4a18      	ldr	r2, [pc, #96]	; (8000298 <MX_GPIO_Init+0xc4>)
 8000238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800023c:	6153      	str	r3, [r2, #20]
 800023e:	4b16      	ldr	r3, [pc, #88]	; (8000298 <MX_GPIO_Init+0xc4>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2200      	movs	r2, #0
 800024c:	2120      	movs	r1, #32
 800024e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000252:	f001 fdcd 	bl	8001df0 <HAL_GPIO_WritePin>
 8000256:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800025a:	617b      	str	r3, [r7, #20]
 800025c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000260:	61bb      	str	r3, [r7, #24]
 8000262:	2300      	movs	r3, #0
 8000264:	61fb      	str	r3, [r7, #28]
 8000266:	f107 0314 	add.w	r3, r7, #20
 800026a:	4619      	mov	r1, r3
 800026c:	480b      	ldr	r0, [pc, #44]	; (800029c <MX_GPIO_Init+0xc8>)
 800026e:	f001 fc35 	bl	8001adc <HAL_GPIO_Init>
 8000272:	2320      	movs	r3, #32
 8000274:	617b      	str	r3, [r7, #20]
 8000276:	2301      	movs	r3, #1
 8000278:	61bb      	str	r3, [r7, #24]
 800027a:	2300      	movs	r3, #0
 800027c:	61fb      	str	r3, [r7, #28]
 800027e:	2300      	movs	r3, #0
 8000280:	623b      	str	r3, [r7, #32]
 8000282:	f107 0314 	add.w	r3, r7, #20
 8000286:	4619      	mov	r1, r3
 8000288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028c:	f001 fc26 	bl	8001adc <HAL_GPIO_Init>
 8000290:	bf00      	nop
 8000292:	3728      	adds	r7, #40	; 0x28
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	40021000 	.word	0x40021000
 800029c:	48000800 	.word	0x48000800

080002a0 <_ZN5M485E4initEP20__UART_HandleTypeDef>:
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	683a      	ldr	r2, [r7, #0]
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	6818      	ldr	r0, [r3, #0]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	334a      	adds	r3, #74	; 0x4a
 80002b8:	2201      	movs	r2, #1
 80002ba:	4619      	mov	r1, r3
 80002bc:	f003 fbb8 	bl	8003a30 <HAL_UART_Receive_IT>
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <_ZN5M485E7Send_ITEv>:
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	f107 020c 	add.w	r2, r7, #12
 80002d8:	f107 0310 	add.w	r3, r7, #16
 80002dc:	4619      	mov	r1, r3
 80002de:	6878      	ldr	r0, [r7, #4]
 80002e0:	f000 f90a 	bl	80004f8 <_ZN5M485E12bufPrepareTXEPPhPi>
 80002e4:	4603      	mov	r3, r0
 80002e6:	75fb      	strb	r3, [r7, #23]
 80002e8:	7dfb      	ldrb	r3, [r7, #23]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d01f      	beq.n	800032e <_ZN5M485E7Send_ITEv+0x66>
 80002ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002f2:	7d53      	ldrb	r3, [r2, #21]
 80002f4:	f043 0310 	orr.w	r3, r3, #16
 80002f8:	7553      	strb	r3, [r2, #21]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	6939      	ldr	r1, [r7, #16]
 8000300:	68fa      	ldr	r2, [r7, #12]
 8000302:	b292      	uxth	r2, r2
 8000304:	4618      	mov	r0, r3
 8000306:	f003 fb25 	bl	8003954 <HAL_UART_Transmit_IT>
 800030a:	4603      	mov	r3, r0
 800030c:	75bb      	strb	r3, [r7, #22]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	f893 2077 	ldrb.w	r2, [r3, #119]	; 0x77
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	b2db      	uxtb	r3, r3
 8000318:	4413      	add	r3, r2
 800031a:	b2da      	uxtb	r2, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8000322:	7dbb      	ldrb	r3, [r7, #22]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d102      	bne.n	800032e <_ZN5M485E7Send_ITEv+0x66>
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	63da      	str	r2, [r3, #60]	; 0x3c
 800032e:	bf00      	nop
 8000330:	3718      	adds	r7, #24
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}

08000336 <_ZN5M485E7onIT_TXEv>:
 8000336:	b580      	push	{r7, lr}
 8000338:	b086      	sub	sp, #24
 800033a:	af00      	add	r7, sp, #0
 800033c:	6078      	str	r0, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8000344:	2b00      	cmp	r3, #0
 8000346:	d003      	beq.n	8000350 <_ZN5M485E7onIT_TXEv+0x1a>
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2200      	movs	r2, #0
 800034c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000358:	4619      	mov	r1, r3
 800035a:	6878      	ldr	r0, [r7, #4]
 800035c:	f000 f906 	bl	800056c <_ZN5M485E10bufRemoveNEi>
 8000360:	2300      	movs	r3, #0
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	f107 020c 	add.w	r2, r7, #12
 8000368:	f107 0310 	add.w	r3, r7, #16
 800036c:	4619      	mov	r1, r3
 800036e:	6878      	ldr	r0, [r7, #4]
 8000370:	f000 f8c2 	bl	80004f8 <_ZN5M485E12bufPrepareTXEPPhPi>
 8000374:	4603      	mov	r3, r0
 8000376:	75fb      	strb	r3, [r7, #23]
 8000378:	7dfb      	ldrb	r3, [r7, #23]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d01f      	beq.n	80003be <_ZN5M485E7onIT_TXEv+0x88>
 800037e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000382:	7d53      	ldrb	r3, [r2, #21]
 8000384:	f043 0310 	orr.w	r3, r3, #16
 8000388:	7553      	strb	r3, [r2, #21]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	6939      	ldr	r1, [r7, #16]
 8000390:	68fa      	ldr	r2, [r7, #12]
 8000392:	b292      	uxth	r2, r2
 8000394:	4618      	mov	r0, r3
 8000396:	f003 fadd 	bl	8003954 <HAL_UART_Transmit_IT>
 800039a:	4603      	mov	r3, r0
 800039c:	75bb      	strb	r3, [r7, #22]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	f893 2077 	ldrb.w	r2, [r3, #119]	; 0x77
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	4413      	add	r3, r2
 80003aa:	b2da      	uxtb	r2, r3
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80003b2:	7dbb      	ldrb	r3, [r7, #22]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d102      	bne.n	80003be <_ZN5M485E7onIT_TXEv+0x88>
 80003b8:	68fa      	ldr	r2, [r7, #12]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d10b      	bne.n	80003e0 <_ZN5M485E7onIT_TXEv+0xaa>
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f000 f849 	bl	8000460 <_ZN5M485E7isEmptyEv>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d005      	beq.n	80003e0 <_ZN5M485E7onIT_TXEv+0xaa>
 80003d4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003d8:	7d53      	ldrb	r3, [r2, #21]
 80003da:	f36f 1304 	bfc	r3, #4, #1
 80003de:	7553      	strb	r3, [r2, #21]
 80003e0:	bf00      	nop
 80003e2:	3718      	adds	r7, #24
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <_ZN5M485E7onIT_RXEv>:
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003f4:	7d5b      	ldrb	r3, [r3, #21]
 80003f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	f083 0301 	eor.w	r3, r3, #1
 8000400:	b2db      	uxtb	r3, r3
 8000402:	2b00      	cmp	r3, #0
 8000404:	d006      	beq.n	8000414 <_ZN5M485E7onIT_RXEv+0x2c>
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800040c:	4619      	mov	r1, r3
 800040e:	6878      	ldr	r0, [r7, #4]
 8000410:	f000 fac6 	bl	80009a0 <_ZN5M485E9onReceiveEh>
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800041a:	2b00      	cmp	r3, #0
 800041c:	d10c      	bne.n	8000438 <_ZN5M485E7onIT_RXEv+0x50>
 800041e:	6878      	ldr	r0, [r7, #4]
 8000420:	f000 f81e 	bl	8000460 <_ZN5M485E7isEmptyEv>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d00e      	beq.n	8000448 <_ZN5M485E7onIT_RXEv+0x60>
 800042a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800042e:	7d53      	ldrb	r3, [r2, #21]
 8000430:	f36f 1304 	bfc	r3, #4, #1
 8000434:	7553      	strb	r3, [r2, #21]
 8000436:	e007      	b.n	8000448 <_ZN5M485E7onIT_RXEv+0x60>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800043e:	3b01      	subs	r3, #1
 8000440:	b2da      	uxtb	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	334a      	adds	r3, #74	; 0x4a
 8000450:	2201      	movs	r2, #1
 8000452:	4619      	mov	r1, r3
 8000454:	f003 faec 	bl	8003a30 <HAL_UART_Receive_IT>
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <_ZN5M485E7isEmptyEv>:
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000474:	429a      	cmp	r2, r3
 8000476:	bf0c      	ite	eq
 8000478:	2301      	moveq	r3, #1
 800047a:	2300      	movne	r3, #0
 800047c:	b2db      	uxtb	r3, r3
 800047e:	4618      	mov	r0, r3
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
	...

0800048c <_ZN5M485E6bufAddEh>:
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	460b      	mov	r3, r1
 8000496:	70fb      	strb	r3, [r7, #3]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80004a6:	3301      	adds	r3, #1
 80004a8:	4a12      	ldr	r2, [pc, #72]	; (80004f4 <_ZN5M485E6bufAddEh+0x68>)
 80004aa:	fb82 1203 	smull	r1, r2, r2, r3
 80004ae:	1111      	asrs	r1, r2, #4
 80004b0:	17da      	asrs	r2, r3, #31
 80004b2:	1a8a      	subs	r2, r1, r2
 80004b4:	2132      	movs	r1, #50	; 0x32
 80004b6:	fb01 f202 	mul.w	r2, r1, r2
 80004ba:	1a9b      	subs	r3, r3, r2
 80004bc:	60bb      	str	r3, [r7, #8]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80004c4:	461a      	mov	r2, r3
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d101      	bne.n	80004d0 <_ZN5M485E6bufAddEh+0x44>
 80004cc:	2300      	movs	r3, #0
 80004ce:	e00b      	b.n	80004e8 <_ZN5M485E6bufAddEh+0x5c>
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	4413      	add	r3, r2
 80004d6:	3305      	adds	r3, #5
 80004d8:	78fa      	ldrb	r2, [r7, #3]
 80004da:	701a      	strb	r2, [r3, #0]
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	b2da      	uxtb	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80004e6:	2301      	movs	r3, #1
 80004e8:	4618      	mov	r0, r3
 80004ea:	3714      	adds	r7, #20
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	51eb851f 	.word	0x51eb851f

080004f8 <_ZN5M485E12bufPrepareTXEPPhPi>:
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000510:	429a      	cmp	r2, r3
 8000512:	d101      	bne.n	8000518 <_ZN5M485E12bufPrepareTXEPPhPi+0x20>
 8000514:	2300      	movs	r3, #0
 8000516:	e023      	b.n	8000560 <_ZN5M485E12bufPrepareTXEPPhPi+0x68>
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000524:	429a      	cmp	r2, r3
 8000526:	d20a      	bcs.n	800053e <_ZN5M485E12bufPrepareTXEPPhPi+0x46>
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800052e:	461a      	mov	r2, r3
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000536:	1ad2      	subs	r2, r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	e006      	b.n	800054c <_ZN5M485E12bufPrepareTXEPPhPi+0x54>
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000544:	f1c3 0232 	rsb	r2, r3, #50	; 0x32
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000552:	461a      	mov	r2, r3
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	4413      	add	r3, r2
 8000558:	1d5a      	adds	r2, r3, #5
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	2301      	movs	r3, #1
 8000560:	4618      	mov	r0, r3
 8000562:	3714      	adds	r7, #20
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <_ZN5M485E10bufRemoveNEi>:
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	429a      	cmp	r2, r3
 8000580:	da21      	bge.n	80005c6 <_ZN5M485E10bufRemoveNEi+0x5a>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800058e:	429a      	cmp	r2, r3
 8000590:	d101      	bne.n	8000596 <_ZN5M485E10bufRemoveNEi+0x2a>
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	e018      	b.n	80005c8 <_ZN5M485E10bufRemoveNEi+0x5c>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800059c:	3301      	adds	r3, #1
 800059e:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <_ZN5M485E10bufRemoveNEi+0x68>)
 80005a0:	fb82 1203 	smull	r1, r2, r2, r3
 80005a4:	1111      	asrs	r1, r2, #4
 80005a6:	17da      	asrs	r2, r3, #31
 80005a8:	1a8a      	subs	r2, r1, r2
 80005aa:	2132      	movs	r1, #50	; 0x32
 80005ac:	fb01 f202 	mul.w	r2, r1, r2
 80005b0:	1a9b      	subs	r3, r3, r2
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	e7d9      	b.n	800057a <_ZN5M485E10bufRemoveNEi+0xe>
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	4618      	mov	r0, r3
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	51eb851f 	.word	0x51eb851f

080005d8 <_ZN5M485EC1Ev>:
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2200      	movs	r2, #0
 80005e4:	711a      	strb	r2, [r3, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2200      	movs	r2, #0
 8000600:	641a      	str	r2, [r3, #64]	; 0x40
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2200      	movs	r2, #0
 8000606:	645a      	str	r2, [r3, #68]	; 0x44
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2200      	movs	r2, #0
 8000614:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	671a      	str	r2, [r3, #112]	; 0x70
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2201      	movs	r2, #1
 800062a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2201      	movs	r2, #1
 8000632:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <_ZN6MFlash6read16Ett>:
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	460a      	mov	r2, r1
 8000656:	80fb      	strh	r3, [r7, #6]
 8000658:	4613      	mov	r3, r2
 800065a:	80bb      	strh	r3, [r7, #4]
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000662:	02da      	lsls	r2, r3, #11
 8000664:	88bb      	ldrh	r3, [r7, #4]
 8000666:	4413      	add	r3, r2
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	817b      	strh	r3, [r7, #10]
 8000670:	897b      	ldrh	r3, [r7, #10]
 8000672:	4618      	mov	r0, r3
 8000674:	3714      	adds	r7, #20
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <_ZN6MFlash6read32Ett>:
 800067e:	b480      	push	{r7}
 8000680:	b085      	sub	sp, #20
 8000682:	af00      	add	r7, sp, #0
 8000684:	4603      	mov	r3, r0
 8000686:	460a      	mov	r2, r1
 8000688:	80fb      	strh	r3, [r7, #6]
 800068a:	4613      	mov	r3, r2
 800068c:	80bb      	strh	r3, [r7, #4]
 800068e:	88fb      	ldrh	r3, [r7, #6]
 8000690:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000694:	02da      	lsls	r2, r3, #11
 8000696:	88bb      	ldrh	r3, [r7, #4]
 8000698:	4413      	add	r3, r2
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <_ZN6MFlash4lockEv>:
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	f001 f8cf 	bl	8001858 <HAL_FLASH_Lock>
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <_ZN6MFlash6unlockEv>:
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	f001 f89d 	bl	800180c <HAL_FLASH_Unlock>
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <_ZN6MFlash7write16Ettt>:
 80006e0:	b5b0      	push	{r4, r5, r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	80fb      	strh	r3, [r7, #6]
 80006ea:	460b      	mov	r3, r1
 80006ec:	80bb      	strh	r3, [r7, #4]
 80006ee:	4613      	mov	r3, r2
 80006f0:	807b      	strh	r3, [r7, #2]
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80006f8:	02da      	lsls	r2, r3, #11
 80006fa:	88bb      	ldrh	r3, [r7, #4]
 80006fc:	4413      	add	r3, r2
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	887b      	ldrh	r3, [r7, #2]
 8000702:	2200      	movs	r2, #0
 8000704:	461c      	mov	r4, r3
 8000706:	4615      	mov	r5, r2
 8000708:	4622      	mov	r2, r4
 800070a:	462b      	mov	r3, r5
 800070c:	68f9      	ldr	r1, [r7, #12]
 800070e:	2001      	movs	r0, #1
 8000710:	f001 f80c 	bl	800172c <HAL_FLASH_Program>
 8000714:	4603      	mov	r3, r0
 8000716:	72fb      	strb	r3, [r7, #11]
 8000718:	7afb      	ldrb	r3, [r7, #11]
 800071a:	4618      	mov	r0, r3
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bdb0      	pop	{r4, r5, r7, pc}

08000722 <_ZN6MFlash7write32Ettm>:
 8000722:	b5b0      	push	{r4, r5, r7, lr}
 8000724:	b084      	sub	sp, #16
 8000726:	af00      	add	r7, sp, #0
 8000728:	4603      	mov	r3, r0
 800072a:	603a      	str	r2, [r7, #0]
 800072c:	80fb      	strh	r3, [r7, #6]
 800072e:	460b      	mov	r3, r1
 8000730:	80bb      	strh	r3, [r7, #4]
 8000732:	88fb      	ldrh	r3, [r7, #6]
 8000734:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000738:	02da      	lsls	r2, r3, #11
 800073a:	88bb      	ldrh	r3, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	2200      	movs	r2, #0
 8000744:	461c      	mov	r4, r3
 8000746:	4615      	mov	r5, r2
 8000748:	4622      	mov	r2, r4
 800074a:	462b      	mov	r3, r5
 800074c:	68f9      	ldr	r1, [r7, #12]
 800074e:	2002      	movs	r0, #2
 8000750:	f000 ffec 	bl	800172c <HAL_FLASH_Program>
 8000754:	4603      	mov	r3, r0
 8000756:	72fb      	strb	r3, [r7, #11]
 8000758:	7afb      	ldrb	r3, [r7, #11]
 800075a:	4618      	mov	r0, r3
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bdb0      	pop	{r4, r5, r7, pc}

08000762 <_ZN6MFlash9erasePageEt>:
 8000762:	b580      	push	{r7, lr}
 8000764:	b088      	sub	sp, #32
 8000766:	af00      	add	r7, sp, #0
 8000768:	4603      	mov	r3, r0
 800076a:	80fb      	strh	r3, [r7, #6]
 800076c:	88fb      	ldrh	r3, [r7, #6]
 800076e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000772:	02db      	lsls	r3, r3, #11
 8000774:	61fb      	str	r3, [r7, #28]
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	2301      	movs	r3, #1
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	f107 0208 	add.w	r2, r7, #8
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	4611      	mov	r1, r2
 8000790:	4618      	mov	r0, r3
 8000792:	f001 f8ff 	bl	8001994 <HAL_FLASHEx_Erase>
 8000796:	4603      	mov	r3, r0
 8000798:	76fb      	strb	r3, [r7, #27]
 800079a:	7efb      	ldrb	r3, [r7, #27]
 800079c:	4618      	mov	r0, r3
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <_Z13JumpToAddressm>:
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3304      	adds	r3, #4
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	f001 fb32 	bl	8001e20 <HAL_RCC_DeInit>
 80007bc:	f000 fdb8 	bl	8001330 <HAL_DeInit>
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <_Z13JumpToAddressm+0x50>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <_Z13JumpToAddressm+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <_Z13JumpToAddressm+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	4a09      	ldr	r2, [pc, #36]	; (80007f8 <_Z13JumpToAddressm+0x54>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6093      	str	r3, [r2, #8]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	f383 8808 	msr	MSP, r3
}
 80007e4:	bf00      	nop
 80007e6:	693b      	ldr	r3, [r7, #16]
 80007e8:	4798      	blx	r3
 80007ea:	bf00      	nop
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	e000e010 	.word	0xe000e010
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <_Z17JumpToApplicationv>:
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <_Z17JumpToApplicationv+0x10>)
 8000802:	f7ff ffcf 	bl	80007a4 <_Z13JumpToAddressm>
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	08010000 	.word	0x08010000

08000810 <HAL_UART_TxCpltCallback>:
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <HAL_UART_TxCpltCallback+0x20>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	429a      	cmp	r2, r3
 8000820:	d102      	bne.n	8000828 <HAL_UART_TxCpltCallback+0x18>
 8000822:	4803      	ldr	r0, [pc, #12]	; (8000830 <HAL_UART_TxCpltCallback+0x20>)
 8000824:	f7ff fd87 	bl	8000336 <_ZN5M485E7onIT_TXEv>
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2000002c 	.word	0x2000002c

08000834 <HAL_UART_RxCpltCallback>:
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	2305      	movs	r3, #5
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_UART_RxCpltCallback+0x24>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	429a      	cmp	r2, r3
 8000848:	d102      	bne.n	8000850 <HAL_UART_RxCpltCallback+0x1c>
 800084a:	4803      	ldr	r0, [pc, #12]	; (8000858 <HAL_UART_RxCpltCallback+0x24>)
 800084c:	f7ff fdcc 	bl	80003e8 <_ZN5M485E7onIT_RXEv>
 8000850:	bf00      	nop
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000002c 	.word	0x2000002c

0800085c <main>:
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	f000 fd4f 	bl	8001304 <HAL_Init>
 8000866:	f000 f82d 	bl	80008c4 <_Z18SystemClock_Configv>
 800086a:	f7ff fcb3 	bl	80001d4 <MX_GPIO_Init>
 800086e:	f000 fca5 	bl	80011bc <MX_USART2_UART_Init>
 8000872:	4910      	ldr	r1, [pc, #64]	; (80008b4 <main+0x58>)
 8000874:	4810      	ldr	r0, [pc, #64]	; (80008b8 <main+0x5c>)
 8000876:	f7ff fd13 	bl	80002a0 <_ZN5M485E4initEP20__UART_HandleTypeDef>
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	f7ff ff23 	bl	80006c8 <_ZN6MFlash6unlockEv>
 8000882:	20fd      	movs	r0, #253	; 0xfd
 8000884:	f7ff ff6d 	bl	8000762 <_ZN6MFlash9erasePageEt>
 8000888:	f7ff ff12 	bl	80006b0 <_ZN6MFlash4lockEv>
  __ASM volatile ("cpsie i" : : : "memory");
 800088c:	b662      	cpsie	i
}
 800088e:	bf00      	nop
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <main+0x60>)
 8000892:	2206      	movs	r2, #6
 8000894:	701a      	strb	r2, [r3, #0]
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <main+0x60>)
 8000898:	2206      	movs	r2, #6
 800089a:	705a      	strb	r2, [r3, #1]
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <main+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	bf14      	ite	ne
 80008a4:	2301      	movne	r3, #1
 80008a6:	2300      	moveq	r3, #0
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d0f6      	beq.n	800089c <main+0x40>
 80008ae:	f7ff ffa5 	bl	80007fc <_Z17JumpToApplicationv>
 80008b2:	e7f3      	b.n	800089c <main+0x40>
 80008b4:	20000114 	.word	0x20000114
 80008b8:	2000002c 	.word	0x2000002c
 80008bc:	200000a4 	.word	0x200000a4
 80008c0:	200000a8 	.word	0x200000a8

080008c4 <_Z18SystemClock_Configv>:
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b0a6      	sub	sp, #152	; 0x98
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008ce:	2228      	movs	r2, #40	; 0x28
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f004 fb0a 	bl	8004eec <memset>
 80008d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2258      	movs	r2, #88	; 0x58
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f004 fafc 	bl	8004eec <memset>
 80008f4:	2302      	movs	r3, #2
 80008f6:	673b      	str	r3, [r7, #112]	; 0x70
 80008f8:	2301      	movs	r3, #1
 80008fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80008fc:	2310      	movs	r3, #16
 80008fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000902:	2302      	movs	r3, #2
 8000904:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800090c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000910:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000914:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800091e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000922:	4618      	mov	r0, r3
 8000924:	f001 fb20 	bl	8001f68 <HAL_RCC_OscConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	bf14      	ite	ne
 800092e:	2301      	movne	r3, #1
 8000930:	2300      	moveq	r3, #0
 8000932:	b2db      	uxtb	r3, r3
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <_Z18SystemClock_Configv+0x78>
 8000938:	f000 fbb2 	bl	80010a0 <Error_Handler>
 800093c:	230f      	movs	r3, #15
 800093e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000940:	2302      	movs	r3, #2
 8000942:	663b      	str	r3, [r7, #96]	; 0x60
 8000944:	2300      	movs	r3, #0
 8000946:	667b      	str	r3, [r7, #100]	; 0x64
 8000948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094c:	66bb      	str	r3, [r7, #104]	; 0x68
 800094e:	2300      	movs	r3, #0
 8000950:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000952:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000956:	2102      	movs	r1, #2
 8000958:	4618      	mov	r0, r3
 800095a:	f002 fb59 	bl	8003010 <HAL_RCC_ClockConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	bf14      	ite	ne
 8000964:	2301      	movne	r3, #1
 8000966:	2300      	moveq	r3, #0
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <_Z18SystemClock_Configv+0xae>
 800096e:	f000 fb97 	bl	80010a0 <Error_Handler>
 8000972:	2302      	movs	r3, #2
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	4618      	mov	r0, r3
 800097e:	f002 fd7d 	bl	800347c <HAL_RCCEx_PeriphCLKConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	bf14      	ite	ne
 8000988:	2301      	movne	r3, #1
 800098a:	2300      	moveq	r3, #0
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <_Z18SystemClock_Configv+0xd2>
 8000992:	f000 fb85 	bl	80010a0 <Error_Handler>
 8000996:	bf00      	nop
 8000998:	3798      	adds	r7, #152	; 0x98
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <_ZN5M485E9onReceiveEh>:
 80009a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009a2:	b089      	sub	sp, #36	; 0x24
 80009a4:	af04      	add	r7, sp, #16
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	460b      	mov	r3, r1
 80009aa:	70fb      	strb	r3, [r7, #3]
 80009ac:	4bb2      	ldr	r3, [pc, #712]	; (8000c78 <_ZN5M485E9onReceiveEh+0x2d8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	49b2      	ldr	r1, [pc, #712]	; (8000c7c <_ZN5M485E9onReceiveEh+0x2dc>)
 80009b2:	78fa      	ldrb	r2, [r7, #3]
 80009b4:	54ca      	strb	r2, [r1, r3]
 80009b6:	4bb0      	ldr	r3, [pc, #704]	; (8000c78 <_ZN5M485E9onReceiveEh+0x2d8>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	3301      	adds	r3, #1
 80009bc:	4aae      	ldr	r2, [pc, #696]	; (8000c78 <_ZN5M485E9onReceiveEh+0x2d8>)
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4bad      	ldr	r3, [pc, #692]	; (8000c78 <_ZN5M485E9onReceiveEh+0x2d8>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b63      	cmp	r3, #99	; 0x63
 80009c6:	dd03      	ble.n	80009d0 <_ZN5M485E9onReceiveEh+0x30>
 80009c8:	4bab      	ldr	r3, [pc, #684]	; (8000c78 <_ZN5M485E9onReceiveEh+0x2d8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	e000      	b.n	80009d2 <_ZN5M485E9onReceiveEh+0x32>
 80009d0:	bf00      	nop
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	2b2f      	cmp	r3, #47	; 0x2f
 80009d8:	f200 8247 	bhi.w	8000e6a <_ZN5M485E9onReceiveEh+0x4ca>
 80009dc:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <_ZN5M485E9onReceiveEh+0x44>)
 80009de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e2:	bf00      	nop
 80009e4:	08000aa5 	.word	0x08000aa5
 80009e8:	08000b35 	.word	0x08000b35
 80009ec:	08000b4f 	.word	0x08000b4f
 80009f0:	08000e6b 	.word	0x08000e6b
 80009f4:	08000e6b 	.word	0x08000e6b
 80009f8:	08000e6b 	.word	0x08000e6b
 80009fc:	08000e6b 	.word	0x08000e6b
 8000a00:	08000e6b 	.word	0x08000e6b
 8000a04:	08000e6b 	.word	0x08000e6b
 8000a08:	08000e6b 	.word	0x08000e6b
 8000a0c:	08000b87 	.word	0x08000b87
 8000a10:	08000b9b 	.word	0x08000b9b
 8000a14:	08000baf 	.word	0x08000baf
 8000a18:	08000bc3 	.word	0x08000bc3
 8000a1c:	08000bd7 	.word	0x08000bd7
 8000a20:	08000beb 	.word	0x08000beb
 8000a24:	08000bff 	.word	0x08000bff
 8000a28:	08000c13 	.word	0x08000c13
 8000a2c:	08000e6b 	.word	0x08000e6b
 8000a30:	08000e6b 	.word	0x08000e6b
 8000a34:	08000c3b 	.word	0x08000c3b
 8000a38:	08000c4f 	.word	0x08000c4f
 8000a3c:	08000c63 	.word	0x08000c63
 8000a40:	08000c81 	.word	0x08000c81
 8000a44:	08000c95 	.word	0x08000c95
 8000a48:	08000ca9 	.word	0x08000ca9
 8000a4c:	08000cbd 	.word	0x08000cbd
 8000a50:	08000cd1 	.word	0x08000cd1
 8000a54:	08000e6b 	.word	0x08000e6b
 8000a58:	08000e6b 	.word	0x08000e6b
 8000a5c:	08000d1f 	.word	0x08000d1f
 8000a60:	08000d33 	.word	0x08000d33
 8000a64:	08000d47 	.word	0x08000d47
 8000a68:	08000d5b 	.word	0x08000d5b
 8000a6c:	08000d6f 	.word	0x08000d6f
 8000a70:	08000d83 	.word	0x08000d83
 8000a74:	08000d97 	.word	0x08000d97
 8000a78:	08000dab 	.word	0x08000dab
 8000a7c:	08000e6b 	.word	0x08000e6b
 8000a80:	08000e6b 	.word	0x08000e6b
 8000a84:	08000dc9 	.word	0x08000dc9
 8000a88:	08000ddd 	.word	0x08000ddd
 8000a8c:	08000df1 	.word	0x08000df1
 8000a90:	08000e05 	.word	0x08000e05
 8000a94:	08000e19 	.word	0x08000e19
 8000a98:	08000e2d 	.word	0x08000e2d
 8000a9c:	08000e41 	.word	0x08000e41
 8000aa0:	08000e55 	.word	0x08000e55
 8000aa4:	78fb      	ldrb	r3, [r7, #3]
 8000aa6:	2b55      	cmp	r3, #85	; 0x55
 8000aa8:	d109      	bne.n	8000abe <_ZN5M485E9onReceiveEh+0x11e>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	78fa      	ldrb	r2, [r7, #3]
 8000aae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	641a      	str	r2, [r3, #64]	; 0x40
 8000abc:	e1d9      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000abe:	78fb      	ldrb	r3, [r7, #3]
 8000ac0:	2bfa      	cmp	r3, #250	; 0xfa
 8000ac2:	d116      	bne.n	8000af2 <_ZN5M485E9onReceiveEh+0x152>
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	20fd      	movs	r0, #253	; 0xfd
 8000ac8:	f7ff fdc0 	bl	800064c <_ZN6MFlash6read16Ett>
 8000acc:	4603      	mov	r3, r0
 8000ace:	817b      	strh	r3, [r7, #10]
 8000ad0:	f7ff fdfa 	bl	80006c8 <_ZN6MFlash6unlockEv>
 8000ad4:	f64f 22fb 	movw	r2, #64251	; 0xfafb
 8000ad8:	2100      	movs	r1, #0
 8000ada:	20fd      	movs	r0, #253	; 0xfd
 8000adc:	f7ff fe00 	bl	80006e0 <_ZN6MFlash7write16Ettt>
 8000ae0:	f7ff fde6 	bl	80006b0 <_ZN6MFlash4lockEv>
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	20fd      	movs	r0, #253	; 0xfd
 8000ae8:	f7ff fdb0 	bl	800064c <_ZN6MFlash6read16Ett>
 8000aec:	4603      	mov	r3, r0
 8000aee:	817b      	strh	r3, [r7, #10]
 8000af0:	e1bf      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000af2:	78fb      	ldrb	r3, [r7, #3]
 8000af4:	2bfb      	cmp	r3, #251	; 0xfb
 8000af6:	d107      	bne.n	8000b08 <_ZN5M485E9onReceiveEh+0x168>
 8000af8:	f7ff fde6 	bl	80006c8 <_ZN6MFlash6unlockEv>
 8000afc:	20fd      	movs	r0, #253	; 0xfd
 8000afe:	f7ff fe30 	bl	8000762 <_ZN6MFlash9erasePageEt>
 8000b02:	f7ff fdd5 	bl	80006b0 <_ZN6MFlash4lockEv>
 8000b06:	e1b4      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000b08:	78fb      	ldrb	r3, [r7, #3]
 8000b0a:	2bfc      	cmp	r3, #252	; 0xfc
 8000b0c:	d112      	bne.n	8000b34 <_ZN5M485E9onReceiveEh+0x194>
 8000b0e:	2100      	movs	r1, #0
 8000b10:	20fd      	movs	r0, #253	; 0xfd
 8000b12:	f7ff fd9b 	bl	800064c <_ZN6MFlash6read16Ett>
 8000b16:	4603      	mov	r3, r0
 8000b18:	81fb      	strh	r3, [r7, #14]
 8000b1a:	89fb      	ldrh	r3, [r7, #14]
 8000b1c:	737b      	strb	r3, [r7, #13]
 8000b1e:	89fb      	ldrh	r3, [r7, #14]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	733b      	strb	r3, [r7, #12]
 8000b26:	7b3a      	ldrb	r2, [r7, #12]
 8000b28:	7b7b      	ldrb	r3, [r7, #13]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f000 fa31 	bl	8000f94 <_ZN5M485E12sendTX_ReactEhh>
 8000b32:	e19e      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000b34:	78fb      	ldrb	r3, [r7, #3]
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	d109      	bne.n	8000b4e <_ZN5M485E9onReceiveEh+0x1ae>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	78fa      	ldrb	r2, [r7, #3]
 8000b3e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	641a      	str	r2, [r3, #64]	; 0x40
 8000b4c:	e191      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000b4e:	78fb      	ldrb	r3, [r7, #3]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d103      	bne.n	8000b5c <_ZN5M485E9onReceiveEh+0x1bc>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	220a      	movs	r2, #10
 8000b58:	641a      	str	r2, [r3, #64]	; 0x40
 8000b5a:	e18a      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000b5c:	78fb      	ldrb	r3, [r7, #3]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d103      	bne.n	8000b6a <_ZN5M485E9onReceiveEh+0x1ca>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2214      	movs	r2, #20
 8000b66:	641a      	str	r2, [r3, #64]	; 0x40
 8000b68:	e183      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000b6a:	78fb      	ldrb	r3, [r7, #3]
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d103      	bne.n	8000b78 <_ZN5M485E9onReceiveEh+0x1d8>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	221e      	movs	r2, #30
 8000b74:	641a      	str	r2, [r3, #64]	; 0x40
 8000b76:	e17c      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000b78:	78fb      	ldrb	r3, [r7, #3]
 8000b7a:	2b0f      	cmp	r3, #15
 8000b7c:	d103      	bne.n	8000b86 <_ZN5M485E9onReceiveEh+0x1e6>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2228      	movs	r2, #40	; 0x28
 8000b82:	641a      	str	r2, [r3, #64]	; 0x40
 8000b84:	e175      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	78fa      	ldrb	r2, [r7, #3]
 8000b8a:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	641a      	str	r2, [r3, #64]	; 0x40
 8000b98:	e16b      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	78fa      	ldrb	r2, [r7, #3]
 8000b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	641a      	str	r2, [r3, #64]	; 0x40
 8000bac:	e161      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	78fa      	ldrb	r2, [r7, #3]
 8000bb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	641a      	str	r2, [r3, #64]	; 0x40
 8000bc0:	e157      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	78fa      	ldrb	r2, [r7, #3]
 8000bc6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	641a      	str	r2, [r3, #64]	; 0x40
 8000bd4:	e14d      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	78fa      	ldrb	r2, [r7, #3]
 8000bda:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	641a      	str	r2, [r3, #64]	; 0x40
 8000be8:	e143      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	78fa      	ldrb	r2, [r7, #3]
 8000bee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	641a      	str	r2, [r3, #64]	; 0x40
 8000bfc:	e139      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	78fa      	ldrb	r2, [r7, #3]
 8000c02:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	1c5a      	adds	r2, r3, #1
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	641a      	str	r2, [r3, #64]	; 0x40
 8000c10:	e12f      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	78fa      	ldrb	r2, [r7, #3]
 8000c16:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f893 104f 	ldrb.w	r1, [r3, #79]	; 0x4f
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f000 f9dd 	bl	8000fec <_ZN5M485E15sendTX_ReadPageEhhh>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	641a      	str	r2, [r3, #64]	; 0x40
 8000c38:	e11b      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	78fa      	ldrb	r2, [r7, #3]
 8000c3e:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	641a      	str	r2, [r3, #64]	; 0x40
 8000c4c:	e111      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	78fa      	ldrb	r2, [r7, #3]
 8000c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	641a      	str	r2, [r3, #64]	; 0x40
 8000c60:	e107      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	78fa      	ldrb	r2, [r7, #3]
 8000c66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	641a      	str	r2, [r3, #64]	; 0x40
 8000c74:	e0fd      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000c76:	bf00      	nop
 8000c78:	200000ac 	.word	0x200000ac
 8000c7c:	200000b0 	.word	0x200000b0
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	78fa      	ldrb	r2, [r7, #3]
 8000c84:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	1c5a      	adds	r2, r3, #1
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	641a      	str	r2, [r3, #64]	; 0x40
 8000c92:	e0ee      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	78fa      	ldrb	r2, [r7, #3]
 8000c98:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	1c5a      	adds	r2, r3, #1
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ca6:	e0e4      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	78fa      	ldrb	r2, [r7, #3]
 8000cac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	1c5a      	adds	r2, r3, #1
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	641a      	str	r2, [r3, #64]	; 0x40
 8000cba:	e0da      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	78fa      	ldrb	r2, [r7, #3]
 8000cc0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	1c5a      	adds	r2, r3, #1
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	641a      	str	r2, [r3, #64]	; 0x40
 8000cce:	e0d0      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	78fa      	ldrb	r2, [r7, #3]
 8000cd4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f893 404f 	ldrb.w	r4, [r3, #79]	; 0x4f
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f893 5050 	ldrb.w	r5, [r3, #80]	; 0x50
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	f892 2053 	ldrb.w	r2, [r2, #83]	; 0x53
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	f891 1054 	ldrb.w	r1, [r1, #84]	; 0x54
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f890 0055 	ldrb.w	r0, [r0, #85]	; 0x55
 8000d02:	9003      	str	r0, [sp, #12]
 8000d04:	9102      	str	r1, [sp, #8]
 8000d06:	9201      	str	r2, [sp, #4]
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	4633      	mov	r3, r6
 8000d0c:	462a      	mov	r2, r5
 8000d0e:	4621      	mov	r1, r4
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f000 f8b9 	bl	8000e88 <_ZN5M485E17frameRX_WritePageEhhhhhhh>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	641a      	str	r2, [r3, #64]	; 0x40
 8000d1c:	e0a9      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	78fa      	ldrb	r2, [r7, #3]
 8000d22:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	1c5a      	adds	r2, r3, #1
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	641a      	str	r2, [r3, #64]	; 0x40
 8000d30:	e09f      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	78fa      	ldrb	r2, [r7, #3]
 8000d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	641a      	str	r2, [r3, #64]	; 0x40
 8000d44:	e095      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	78fa      	ldrb	r2, [r7, #3]
 8000d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	641a      	str	r2, [r3, #64]	; 0x40
 8000d58:	e08b      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	78fa      	ldrb	r2, [r7, #3]
 8000d5e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	641a      	str	r2, [r3, #64]	; 0x40
 8000d6c:	e081      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	78fa      	ldrb	r2, [r7, #3]
 8000d72:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	1c5a      	adds	r2, r3, #1
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	641a      	str	r2, [r3, #64]	; 0x40
 8000d80:	e077      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	78fa      	ldrb	r2, [r7, #3]
 8000d86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	641a      	str	r2, [r3, #64]	; 0x40
 8000d94:	e06d      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	78fa      	ldrb	r2, [r7, #3]
 8000d9a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	641a      	str	r2, [r3, #64]	; 0x40
 8000da8:	e063      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	78fa      	ldrb	r2, [r7, #3]
 8000dae:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8000db8:	4619      	mov	r1, r3
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f000 f8ae 	bl	8000f1c <_ZN5M485E17frameRX_ErasePageEh>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	641a      	str	r2, [r3, #64]	; 0x40
 8000dc6:	e054      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	78fa      	ldrb	r2, [r7, #3]
 8000dcc:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	1c5a      	adds	r2, r3, #1
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	641a      	str	r2, [r3, #64]	; 0x40
 8000dda:	e04a      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	78fa      	ldrb	r2, [r7, #3]
 8000de0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	1c5a      	adds	r2, r3, #1
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	641a      	str	r2, [r3, #64]	; 0x40
 8000dee:	e040      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	78fa      	ldrb	r2, [r7, #3]
 8000df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	1c5a      	adds	r2, r3, #1
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	641a      	str	r2, [r3, #64]	; 0x40
 8000e02:	e036      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	78fa      	ldrb	r2, [r7, #3]
 8000e08:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	1c5a      	adds	r2, r3, #1
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	641a      	str	r2, [r3, #64]	; 0x40
 8000e16:	e02c      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	78fa      	ldrb	r2, [r7, #3]
 8000e1c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	1c5a      	adds	r2, r3, #1
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	641a      	str	r2, [r3, #64]	; 0x40
 8000e2a:	e022      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	78fa      	ldrb	r2, [r7, #3]
 8000e30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	1c5a      	adds	r2, r3, #1
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e3e:	e018      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	78fa      	ldrb	r2, [r7, #3]
 8000e44:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	1c5a      	adds	r2, r3, #1
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	641a      	str	r2, [r3, #64]	; 0x40
 8000e52:	e00e      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	78fa      	ldrb	r2, [r7, #3]
 8000e58:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f000 f889 	bl	8000f74 <_ZN5M485E12frameRX_JumpEv>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	641a      	str	r2, [r3, #64]	; 0x40
 8000e68:	e003      	b.n	8000e72 <_ZN5M485E9onReceiveEh+0x4d2>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e70:	e5af      	b.n	80009d2 <_ZN5M485E9onReceiveEh+0x32>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d102      	bne.n	8000e80 <_ZN5M485E9onReceiveEh+0x4e0>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2214      	movs	r2, #20
 8000e7e:	645a      	str	r2, [r3, #68]	; 0x44
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e88 <_ZN5M485E17frameRX_WritePageEhhhhhhh>:
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	4608      	mov	r0, r1
 8000e92:	4611      	mov	r1, r2
 8000e94:	461a      	mov	r2, r3
 8000e96:	4603      	mov	r3, r0
 8000e98:	70fb      	strb	r3, [r7, #3]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	70bb      	strb	r3, [r7, #2]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	707b      	strb	r3, [r7, #1]
 8000ea2:	78bb      	ldrb	r3, [r7, #2]
 8000ea4:	021b      	lsls	r3, r3, #8
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	787b      	ldrb	r3, [r7, #1]
 8000eaa:	b21b      	sxth	r3, r3
 8000eac:	4313      	orrs	r3, r2
 8000eae:	b21b      	sxth	r3, r3
 8000eb0:	81fb      	strh	r3, [r7, #14]
 8000eb2:	7e3b      	ldrb	r3, [r7, #24]
 8000eb4:	061a      	lsls	r2, r3, #24
 8000eb6:	7f3b      	ldrb	r3, [r7, #28]
 8000eb8:	041b      	lsls	r3, r3, #16
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	431a      	orrs	r2, r3
 8000ec4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	f7ff fbfc 	bl	80006c8 <_ZN6MFlash6unlockEv>
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	89f9      	ldrh	r1, [r7, #14]
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fc22 	bl	8000722 <_ZN6MFlash7write32Ettm>
 8000ede:	f7ff fbe7 	bl	80006b0 <_ZN6MFlash4lockEv>
 8000ee2:	215a      	movs	r1, #90	; 0x5a
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x90>)
 8000ee6:	f7ff fad1 	bl	800048c <_ZN5M485E6bufAddEh>
 8000eea:	2101      	movs	r1, #1
 8000eec:	480a      	ldr	r0, [pc, #40]	; (8000f18 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x90>)
 8000eee:	f7ff facd 	bl	800048c <_ZN5M485E6bufAddEh>
 8000ef2:	21e0      	movs	r1, #224	; 0xe0
 8000ef4:	4808      	ldr	r0, [pc, #32]	; (8000f18 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x90>)
 8000ef6:	f7ff fac9 	bl	800048c <_ZN5M485E6bufAddEh>
 8000efa:	21e1      	movs	r1, #225	; 0xe1
 8000efc:	4806      	ldr	r0, [pc, #24]	; (8000f18 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x90>)
 8000efe:	f7ff fac5 	bl	800048c <_ZN5M485E6bufAddEh>
 8000f02:	21ff      	movs	r1, #255	; 0xff
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x90>)
 8000f06:	f7ff fac1 	bl	800048c <_ZN5M485E6bufAddEh>
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff f9dc 	bl	80002c8 <_ZN5M485E7Send_ITEv>
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	2000002c 	.word	0x2000002c

08000f1c <_ZN5M485E17frameRX_ErasePageEh>:
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	70fb      	strb	r3, [r7, #3]
 8000f28:	f7ff fbce 	bl	80006c8 <_ZN6MFlash6unlockEv>
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fc16 	bl	8000762 <_ZN6MFlash9erasePageEt>
 8000f36:	f7ff fbbb 	bl	80006b0 <_ZN6MFlash4lockEv>
 8000f3a:	215a      	movs	r1, #90	; 0x5a
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <_ZN5M485E17frameRX_ErasePageEh+0x54>)
 8000f3e:	f7ff faa5 	bl	800048c <_ZN5M485E6bufAddEh>
 8000f42:	2102      	movs	r1, #2
 8000f44:	480a      	ldr	r0, [pc, #40]	; (8000f70 <_ZN5M485E17frameRX_ErasePageEh+0x54>)
 8000f46:	f7ff faa1 	bl	800048c <_ZN5M485E6bufAddEh>
 8000f4a:	21e0      	movs	r1, #224	; 0xe0
 8000f4c:	4808      	ldr	r0, [pc, #32]	; (8000f70 <_ZN5M485E17frameRX_ErasePageEh+0x54>)
 8000f4e:	f7ff fa9d 	bl	800048c <_ZN5M485E6bufAddEh>
 8000f52:	21e1      	movs	r1, #225	; 0xe1
 8000f54:	4806      	ldr	r0, [pc, #24]	; (8000f70 <_ZN5M485E17frameRX_ErasePageEh+0x54>)
 8000f56:	f7ff fa99 	bl	800048c <_ZN5M485E6bufAddEh>
 8000f5a:	21ff      	movs	r1, #255	; 0xff
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <_ZN5M485E17frameRX_ErasePageEh+0x54>)
 8000f5e:	f7ff fa95 	bl	800048c <_ZN5M485E6bufAddEh>
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff f9b0 	bl	80002c8 <_ZN5M485E7Send_ITEv>
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2000002c 	.word	0x2000002c

08000f74 <_ZN5M485E12frameRX_JumpEv>:
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <_ZN5M485E12frameRX_JumpEv+0x1c>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	200000a8 	.word	0x200000a8

08000f94 <_ZN5M485E12sendTX_ReactEhh>:
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	70fb      	strb	r3, [r7, #3]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	70bb      	strb	r3, [r7, #2]
 8000fa4:	215a      	movs	r1, #90	; 0x5a
 8000fa6:	4810      	ldr	r0, [pc, #64]	; (8000fe8 <_ZN5M485E12sendTX_ReactEhh+0x54>)
 8000fa8:	f7ff fa70 	bl	800048c <_ZN5M485E6bufAddEh>
 8000fac:	78bb      	ldrb	r3, [r7, #2]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <_ZN5M485E12sendTX_ReactEhh+0x54>)
 8000fb2:	f7ff fa6b 	bl	800048c <_ZN5M485E6bufAddEh>
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	480b      	ldr	r0, [pc, #44]	; (8000fe8 <_ZN5M485E12sendTX_ReactEhh+0x54>)
 8000fbc:	f7ff fa66 	bl	800048c <_ZN5M485E6bufAddEh>
 8000fc0:	21e0      	movs	r1, #224	; 0xe0
 8000fc2:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <_ZN5M485E12sendTX_ReactEhh+0x54>)
 8000fc4:	f7ff fa62 	bl	800048c <_ZN5M485E6bufAddEh>
 8000fc8:	21e1      	movs	r1, #225	; 0xe1
 8000fca:	4807      	ldr	r0, [pc, #28]	; (8000fe8 <_ZN5M485E12sendTX_ReactEhh+0x54>)
 8000fcc:	f7ff fa5e 	bl	800048c <_ZN5M485E6bufAddEh>
 8000fd0:	21ff      	movs	r1, #255	; 0xff
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <_ZN5M485E12sendTX_ReactEhh+0x54>)
 8000fd4:	f7ff fa5a 	bl	800048c <_ZN5M485E6bufAddEh>
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff f975 	bl	80002c8 <_ZN5M485E7Send_ITEv>
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	2000002c 	.word	0x2000002c

08000fec <_ZN5M485E15sendTX_ReadPageEhhh>:
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	70fb      	strb	r3, [r7, #3]
 8000ffe:	460b      	mov	r3, r1
 8001000:	70bb      	strb	r3, [r7, #2]
 8001002:	4613      	mov	r3, r2
 8001004:	707b      	strb	r3, [r7, #1]
 8001006:	78bb      	ldrb	r3, [r7, #2]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	b21a      	sxth	r2, r3
 800100c:	787b      	ldrb	r3, [r7, #1]
 800100e:	b21b      	sxth	r3, r3
 8001010:	4313      	orrs	r3, r2
 8001012:	b21b      	sxth	r3, r3
 8001014:	82fb      	strh	r3, [r7, #22]
 8001016:	78fb      	ldrb	r3, [r7, #3]
 8001018:	b29b      	uxth	r3, r3
 800101a:	8afa      	ldrh	r2, [r7, #22]
 800101c:	4611      	mov	r1, r2
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fb2d 	bl	800067e <_ZN6MFlash6read32Ett>
 8001024:	6138      	str	r0, [r7, #16]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	73bb      	strb	r3, [r7, #14]
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	0c1b      	lsrs	r3, r3, #16
 8001034:	737b      	strb	r3, [r7, #13]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	0e1b      	lsrs	r3, r3, #24
 800103a:	733b      	strb	r3, [r7, #12]
 800103c:	215a      	movs	r1, #90	; 0x5a
 800103e:	4817      	ldr	r0, [pc, #92]	; (800109c <_ZN5M485E15sendTX_ReadPageEhhh+0xb0>)
 8001040:	f7ff fa24 	bl	800048c <_ZN5M485E6bufAddEh>
 8001044:	2100      	movs	r1, #0
 8001046:	4815      	ldr	r0, [pc, #84]	; (800109c <_ZN5M485E15sendTX_ReadPageEhhh+0xb0>)
 8001048:	f7ff fa20 	bl	800048c <_ZN5M485E6bufAddEh>
 800104c:	7b3b      	ldrb	r3, [r7, #12]
 800104e:	4619      	mov	r1, r3
 8001050:	4812      	ldr	r0, [pc, #72]	; (800109c <_ZN5M485E15sendTX_ReadPageEhhh+0xb0>)
 8001052:	f7ff fa1b 	bl	800048c <_ZN5M485E6bufAddEh>
 8001056:	7b7b      	ldrb	r3, [r7, #13]
 8001058:	4619      	mov	r1, r3
 800105a:	4810      	ldr	r0, [pc, #64]	; (800109c <_ZN5M485E15sendTX_ReadPageEhhh+0xb0>)
 800105c:	f7ff fa16 	bl	800048c <_ZN5M485E6bufAddEh>
 8001060:	7bbb      	ldrb	r3, [r7, #14]
 8001062:	4619      	mov	r1, r3
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <_ZN5M485E15sendTX_ReadPageEhhh+0xb0>)
 8001066:	f7ff fa11 	bl	800048c <_ZN5M485E6bufAddEh>
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	4619      	mov	r1, r3
 800106e:	480b      	ldr	r0, [pc, #44]	; (800109c <_ZN5M485E15sendTX_ReadPageEhhh+0xb0>)
 8001070:	f7ff fa0c 	bl	800048c <_ZN5M485E6bufAddEh>
 8001074:	21e0      	movs	r1, #224	; 0xe0
 8001076:	4809      	ldr	r0, [pc, #36]	; (800109c <_ZN5M485E15sendTX_ReadPageEhhh+0xb0>)
 8001078:	f7ff fa08 	bl	800048c <_ZN5M485E6bufAddEh>
 800107c:	21e1      	movs	r1, #225	; 0xe1
 800107e:	4807      	ldr	r0, [pc, #28]	; (800109c <_ZN5M485E15sendTX_ReadPageEhhh+0xb0>)
 8001080:	f7ff fa04 	bl	800048c <_ZN5M485E6bufAddEh>
 8001084:	21ff      	movs	r1, #255	; 0xff
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <_ZN5M485E15sendTX_ReadPageEhhh+0xb0>)
 8001088:	f7ff fa00 	bl	800048c <_ZN5M485E6bufAddEh>
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff f91b 	bl	80002c8 <_ZN5M485E7Send_ITEv>
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000002c 	.word	0x2000002c

080010a0 <Error_Handler>:
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
 80010a8:	e7fe      	b.n	80010a8 <Error_Handler+0x8>
	...

080010ac <_Z41__static_initialization_and_destruction_0ii>:
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d107      	bne.n	80010cc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d102      	bne.n	80010cc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80010c6:	4803      	ldr	r0, [pc, #12]	; (80010d4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80010c8:	f7ff fa86 	bl	80005d8 <_ZN5M485EC1Ev>
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	2000002c 	.word	0x2000002c

080010d8 <_GLOBAL__sub_I_g485E>:
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
 80010dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010e0:	2001      	movs	r0, #1
 80010e2:	f7ff ffe3 	bl	80010ac <_Z41__static_initialization_and_destruction_0ii>
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <HAL_MspInit>:
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_MspInit+0x44>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	4a0e      	ldr	r2, [pc, #56]	; (800112c <HAL_MspInit+0x44>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6193      	str	r3, [r2, #24]
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_MspInit+0x44>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_MspInit+0x44>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	4a08      	ldr	r2, [pc, #32]	; (800112c <HAL_MspInit+0x44>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001110:	61d3      	str	r3, [r2, #28]
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_MspInit+0x44>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	2007      	movs	r0, #7
 8001120:	f000 fa4c 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40021000 	.word	0x40021000

08001130 <NMI_Handler>:
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
 8001134:	e7fe      	b.n	8001134 <NMI_Handler+0x4>

08001136 <HardFault_Handler>:
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
 800113a:	e7fe      	b.n	800113a <HardFault_Handler+0x4>

0800113c <MemManage_Handler>:
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
 8001140:	e7fe      	b.n	8001140 <MemManage_Handler+0x4>

08001142 <BusFault_Handler>:
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
 8001146:	e7fe      	b.n	8001146 <BusFault_Handler+0x4>

08001148 <UsageFault_Handler>:
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
 800114c:	e7fe      	b.n	800114c <UsageFault_Handler+0x4>

0800114e <SVC_Handler>:
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <DebugMon_Handler>:
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <PendSV_Handler>:
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <SysTick_Handler>:
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
 800117c:	f000 f92e 	bl	80013dc <HAL_IncTick>
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}

08001184 <USART2_IRQHandler>:
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <USART2_IRQHandler+0x10>)
 800118a:	f002 fc9f 	bl	8003acc <HAL_UART_IRQHandler>
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000114 	.word	0x20000114

08001198 <SystemInit>:
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <SystemInit+0x20>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <SystemInit+0x20>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <MX_USART2_UART_Init>:
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011c2:	4a15      	ldr	r2, [pc, #84]	; (8001218 <MX_USART2_UART_Init+0x5c>)
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011c8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011e2:	220c      	movs	r2, #12
 80011e4:	615a      	str	r2, [r3, #20]
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_USART2_UART_Init+0x58>)
 8001200:	f002 fb5a 	bl	80038b8 <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART2_UART_Init+0x52>
 800120a:	f7ff ff49 	bl	80010a0 <Error_Handler>
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000114 	.word	0x20000114
 8001218:	40004400 	.word	0x40004400

0800121c <HAL_UART_MspInit>:
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <HAL_UART_MspInit+0x8c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d130      	bne.n	80012a0 <HAL_UART_MspInit+0x84>
 800123e:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <HAL_UART_MspInit+0x90>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	4a1a      	ldr	r2, [pc, #104]	; (80012ac <HAL_UART_MspInit+0x90>)
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	61d3      	str	r3, [r2, #28]
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <HAL_UART_MspInit+0x90>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <HAL_UART_MspInit+0x90>)
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	4a14      	ldr	r2, [pc, #80]	; (80012ac <HAL_UART_MspInit+0x90>)
 800125c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001260:	6153      	str	r3, [r2, #20]
 8001262:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_UART_MspInit+0x90>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	230c      	movs	r3, #12
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	2302      	movs	r3, #2
 8001274:	61bb      	str	r3, [r7, #24]
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
 800127e:	2307      	movs	r3, #7
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128c:	f000 fc26 	bl	8001adc <HAL_GPIO_Init>
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	2026      	movs	r0, #38	; 0x26
 8001296:	f000 f99c 	bl	80015d2 <HAL_NVIC_SetPriority>
 800129a:	2026      	movs	r0, #38	; 0x26
 800129c:	f000 f9b5 	bl	800160a <HAL_NVIC_EnableIRQ>
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40004400 	.word	0x40004400
 80012ac:	40021000 	.word	0x40021000

080012b0 <Reset_Handler>:
 80012b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e8 <LoopForever+0x2>
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <LoopForever+0x6>)
 80012b6:	490e      	ldr	r1, [pc, #56]	; (80012f0 <LoopForever+0xa>)
 80012b8:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <LoopForever+0xe>)
 80012ba:	2300      	movs	r3, #0
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:
 80012be:	58d4      	ldr	r4, [r2, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:
 80012c4:	18c4      	adds	r4, r0, r3
 80012c6:	428c      	cmp	r4, r1
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
 80012ca:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <LoopForever+0x12>)
 80012cc:	4c0b      	ldr	r4, [pc, #44]	; (80012fc <LoopForever+0x16>)
 80012ce:	2300      	movs	r3, #0
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:
 80012d6:	42a2      	cmp	r2, r4
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>
 80012da:	f7ff ff5d 	bl	8001198 <SystemInit>
 80012de:	f003 fde1 	bl	8004ea4 <__libc_init_array>
 80012e2:	f7ff fabb 	bl	800085c <main>

080012e6 <LoopForever>:
 80012e6:	e7fe      	b.n	80012e6 <LoopForever>
 80012e8:	20010000 	.word	0x20010000
 80012ec:	20000000 	.word	0x20000000
 80012f0:	2000000c 	.word	0x2000000c
 80012f4:	08004f58 	.word	0x08004f58
 80012f8:	20000010 	.word	0x20000010
 80012fc:	200001c0 	.word	0x200001c0

08001300 <ADC1_2_IRQHandler>:
 8001300:	e7fe      	b.n	8001300 <ADC1_2_IRQHandler>
	...

08001304 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_Init+0x28>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_Init+0x28>)
 800130e:	f043 0310 	orr.w	r3, r3, #16
 8001312:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001314:	2003      	movs	r0, #3
 8001316:	f000 f951 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131a:	2000      	movs	r0, #0
 800131c:	f000 f82e 	bl	800137c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001320:	f7ff fee2 	bl	80010e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40022000 	.word	0x40022000

08001330 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_DeInit+0x38>)
 8001336:	f04f 32ff 	mov.w	r2, #4294967295
 800133a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <HAL_DeInit+0x38>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_DeInit+0x38>)
 8001344:	f04f 32ff 	mov.w	r2, #4294967295
 8001348:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <HAL_DeInit+0x38>)
 800134c:	2200      	movs	r2, #0
 800134e:	60da      	str	r2, [r3, #12]

  __HAL_RCC_AHB_FORCE_RESET();
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_DeInit+0x38>)
 8001352:	f04f 32ff 	mov.w	r2, #4294967295
 8001356:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <HAL_DeInit+0x38>)
 800135a:	2200      	movs	r2, #0
 800135c:	629a      	str	r2, [r3, #40]	; 0x28

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800135e:	f000 f805 	bl	800136c <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40021000 	.word	0x40021000

0800136c <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_InitTick+0x54>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_InitTick+0x58>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001392:	fbb3 f3f1 	udiv	r3, r3, r1
 8001396:	fbb2 f3f3 	udiv	r3, r2, r3
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f943 	bl	8001626 <HAL_SYSTICK_Config>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00e      	b.n	80013c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b0f      	cmp	r3, #15
 80013ae:	d80a      	bhi.n	80013c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b0:	2200      	movs	r2, #0
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f000 f90b 	bl	80015d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <HAL_InitTick+0x5c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e000      	b.n	80013c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000000 	.word	0x20000000
 80013d4:	20000008 	.word	0x20000008
 80013d8:	20000004 	.word	0x20000004

080013dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_IncTick+0x20>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_IncTick+0x24>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <HAL_IncTick+0x24>)
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000008 	.word	0x20000008
 8001400:	20000198 	.word	0x20000198

08001404 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return uwTick;  
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <HAL_GetTick+0x14>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000198 	.word	0x20000198

0800141c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001438:	4013      	ands	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144e:	4a04      	ldr	r2, [pc, #16]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	60d3      	str	r3, [r2, #12]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <__NVIC_GetPriorityGrouping+0x18>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	0a1b      	lsrs	r3, r3, #8
 800146e:	f003 0307 	and.w	r3, r3, #7
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	2b00      	cmp	r3, #0
 8001490:	db0b      	blt.n	80014aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f003 021f 	and.w	r2, r3, #31
 8001498:	4907      	ldr	r1, [pc, #28]	; (80014b8 <__NVIC_EnableIRQ+0x38>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	095b      	lsrs	r3, r3, #5
 80014a0:	2001      	movs	r0, #1
 80014a2:	fa00 f202 	lsl.w	r2, r0, r2
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000e100 	.word	0xe000e100

080014bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	db0a      	blt.n	80014e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	490c      	ldr	r1, [pc, #48]	; (8001508 <__NVIC_SetPriority+0x4c>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	0112      	lsls	r2, r2, #4
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	440b      	add	r3, r1
 80014e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e4:	e00a      	b.n	80014fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4908      	ldr	r1, [pc, #32]	; (800150c <__NVIC_SetPriority+0x50>)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	3b04      	subs	r3, #4
 80014f4:	0112      	lsls	r2, r2, #4
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	440b      	add	r3, r1
 80014fa:	761a      	strb	r2, [r3, #24]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000e100 	.word	0xe000e100
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f1c3 0307 	rsb	r3, r3, #7
 800152a:	2b04      	cmp	r3, #4
 800152c:	bf28      	it	cs
 800152e:	2304      	movcs	r3, #4
 8001530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3304      	adds	r3, #4
 8001536:	2b06      	cmp	r3, #6
 8001538:	d902      	bls.n	8001540 <NVIC_EncodePriority+0x30>
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3b03      	subs	r3, #3
 800153e:	e000      	b.n	8001542 <NVIC_EncodePriority+0x32>
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	f04f 32ff 	mov.w	r2, #4294967295
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43da      	mvns	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	401a      	ands	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001558:	f04f 31ff 	mov.w	r1, #4294967295
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43d9      	mvns	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	4313      	orrs	r3, r2
         );
}
 800156a:	4618      	mov	r0, r3
 800156c:	3724      	adds	r7, #36	; 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001588:	d301      	bcc.n	800158e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158a:	2301      	movs	r3, #1
 800158c:	e00f      	b.n	80015ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <SysTick_Config+0x40>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001596:	210f      	movs	r1, #15
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f7ff ff8e 	bl	80014bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <SysTick_Config+0x40>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <SysTick_Config+0x40>)
 80015a8:	2207      	movs	r2, #7
 80015aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	e000e010 	.word	0xe000e010

080015bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff29 	bl	800141c <__NVIC_SetPriorityGrouping>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e4:	f7ff ff3e 	bl	8001464 <__NVIC_GetPriorityGrouping>
 80015e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	6978      	ldr	r0, [r7, #20]
 80015f0:	f7ff ff8e 	bl	8001510 <NVIC_EncodePriority>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff5d 	bl	80014bc <__NVIC_SetPriority>
}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff31 	bl	8001480 <__NVIC_EnableIRQ>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff ffa2 	bl	8001578 <SysTick_Config>
 8001634:	4603      	mov	r3, r0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800164c:	2b02      	cmp	r3, #2
 800164e:	d008      	beq.n	8001662 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2204      	movs	r2, #4
 8001654:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e020      	b.n	80016a4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 020e 	bic.w	r2, r2, #14
 8001670:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0201 	bic.w	r2, r2, #1
 8001680:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168a:	2101      	movs	r1, #1
 800168c:	fa01 f202 	lsl.w	r2, r1, r2
 8001690:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d005      	beq.n	80016d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2204      	movs	r2, #4
 80016ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	e027      	b.n	8001722 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 020e 	bic.w	r2, r2, #14
 80016e0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0201 	bic.w	r2, r2, #1
 80016f0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fa:	2101      	movs	r1, #1
 80016fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001700:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	4798      	blx	r3
    } 
  }
  return status;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800172c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800172e:	b087      	sub	sp, #28
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001746:	4b2f      	ldr	r3, [pc, #188]	; (8001804 <HAL_FLASH_Program+0xd8>)
 8001748:	7e1b      	ldrb	r3, [r3, #24]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_FLASH_Program+0x26>
 800174e:	2302      	movs	r3, #2
 8001750:	e054      	b.n	80017fc <HAL_FLASH_Program+0xd0>
 8001752:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <HAL_FLASH_Program+0xd8>)
 8001754:	2201      	movs	r2, #1
 8001756:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001758:	f24c 3050 	movw	r0, #50000	; 0xc350
 800175c:	f000 f8a8 	bl	80018b0 <FLASH_WaitForLastOperation>
 8001760:	4603      	mov	r3, r0
 8001762:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d144      	bne.n	80017f4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d102      	bne.n	8001776 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001770:	2301      	movs	r3, #1
 8001772:	757b      	strb	r3, [r7, #21]
 8001774:	e007      	b.n	8001786 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d102      	bne.n	8001782 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800177c:	2302      	movs	r3, #2
 800177e:	757b      	strb	r3, [r7, #21]
 8001780:	e001      	b.n	8001786 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001782:	2304      	movs	r3, #4
 8001784:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001786:	2300      	movs	r3, #0
 8001788:	75bb      	strb	r3, [r7, #22]
 800178a:	e02d      	b.n	80017e8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800178c:	7dbb      	ldrb	r3, [r7, #22]
 800178e:	005a      	lsls	r2, r3, #1
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	eb02 0c03 	add.w	ip, r2, r3
 8001796:	7dbb      	ldrb	r3, [r7, #22]
 8001798:	0119      	lsls	r1, r3, #4
 800179a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800179e:	f1c1 0620 	rsb	r6, r1, #32
 80017a2:	f1a1 0020 	sub.w	r0, r1, #32
 80017a6:	fa22 f401 	lsr.w	r4, r2, r1
 80017aa:	fa03 f606 	lsl.w	r6, r3, r6
 80017ae:	4334      	orrs	r4, r6
 80017b0:	fa23 f000 	lsr.w	r0, r3, r0
 80017b4:	4304      	orrs	r4, r0
 80017b6:	fa23 f501 	lsr.w	r5, r3, r1
 80017ba:	b2a3      	uxth	r3, r4
 80017bc:	4619      	mov	r1, r3
 80017be:	4660      	mov	r0, ip
 80017c0:	f000 f85a 	bl	8001878 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80017c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017c8:	f000 f872 	bl	80018b0 <FLASH_WaitForLastOperation>
 80017cc:	4603      	mov	r3, r0
 80017ce:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <HAL_FLASH_Program+0xdc>)
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	4a0c      	ldr	r2, [pc, #48]	; (8001808 <HAL_FLASH_Program+0xdc>)
 80017d6:	f023 0301 	bic.w	r3, r3, #1
 80017da:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 80017dc:	7dfb      	ldrb	r3, [r7, #23]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d107      	bne.n	80017f2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80017e2:	7dbb      	ldrb	r3, [r7, #22]
 80017e4:	3301      	adds	r3, #1
 80017e6:	75bb      	strb	r3, [r7, #22]
 80017e8:	7dba      	ldrb	r2, [r7, #22]
 80017ea:	7d7b      	ldrb	r3, [r7, #21]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d3cd      	bcc.n	800178c <HAL_FLASH_Program+0x60>
 80017f0:	e000      	b.n	80017f4 <HAL_FLASH_Program+0xc8>
      {
        break;
 80017f2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <HAL_FLASH_Program+0xd8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	761a      	strb	r2, [r3, #24]

  return status;
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	371c      	adds	r7, #28
 8001800:	46bd      	mov	sp, r7
 8001802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001804:	200001a0 	.word	0x200001a0
 8001808:	40022000 	.word	0x40022000

0800180c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <HAL_FLASH_Unlock+0x40>)
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00d      	beq.n	800183e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_FLASH_Unlock+0x40>)
 8001824:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <HAL_FLASH_Unlock+0x44>)
 8001826:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_FLASH_Unlock+0x40>)
 800182a:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <HAL_FLASH_Unlock+0x48>)
 800182c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <HAL_FLASH_Unlock+0x40>)
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800183e:	79fb      	ldrb	r3, [r7, #7]
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	40022000 	.word	0x40022000
 8001850:	45670123 	.word	0x45670123
 8001854:	cdef89ab 	.word	0xcdef89ab

08001858 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_FLASH_Lock+0x1c>)
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <HAL_FLASH_Lock+0x1c>)
 8001862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001866:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	40022000 	.word	0x40022000

08001878 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <FLASH_Program_HalfWord+0x30>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <FLASH_Program_HalfWord+0x34>)
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	4a07      	ldr	r2, [pc, #28]	; (80018ac <FLASH_Program_HalfWord+0x34>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	887a      	ldrh	r2, [r7, #2]
 800189a:	801a      	strh	r2, [r3, #0]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	200001a0 	.word	0x200001a0
 80018ac:	40022000 	.word	0x40022000

080018b0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80018b8:	f7ff fda4 	bl	8001404 <HAL_GetTick>
 80018bc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80018be:	e010      	b.n	80018e2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c6:	d00c      	beq.n	80018e2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d007      	beq.n	80018de <FLASH_WaitForLastOperation+0x2e>
 80018ce:	f7ff fd99 	bl	8001404 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d201      	bcs.n	80018e2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e01f      	b.n	8001922 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <FLASH_WaitForLastOperation+0x7c>)
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d0e8      	beq.n	80018c0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <FLASH_WaitForLastOperation+0x7c>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	f003 0320 	and.w	r3, r3, #32
 80018f6:	2b20      	cmp	r3, #32
 80018f8:	d102      	bne.n	8001900 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <FLASH_WaitForLastOperation+0x7c>)
 80018fc:	2220      	movs	r2, #32
 80018fe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <FLASH_WaitForLastOperation+0x7c>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	f003 0310 	and.w	r3, r3, #16
 8001908:	2b10      	cmp	r3, #16
 800190a:	d005      	beq.n	8001918 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <FLASH_WaitForLastOperation+0x7c>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001914:	2b04      	cmp	r3, #4
 8001916:	d103      	bne.n	8001920 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001918:	f000 f80a 	bl	8001930 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40022000 	.word	0x40022000

08001930 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <FLASH_SetErrorCode+0x5c>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	2b10      	cmp	r3, #16
 8001944:	d109      	bne.n	800195a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <FLASH_SetErrorCode+0x60>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f043 0302 	orr.w	r3, r3, #2
 800194e:	4a10      	ldr	r2, [pc, #64]	; (8001990 <FLASH_SetErrorCode+0x60>)
 8001950:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f043 0310 	orr.w	r3, r3, #16
 8001958:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <FLASH_SetErrorCode+0x5c>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	2b04      	cmp	r3, #4
 8001964:	d109      	bne.n	800197a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <FLASH_SetErrorCode+0x60>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	4a08      	ldr	r2, [pc, #32]	; (8001990 <FLASH_SetErrorCode+0x60>)
 8001970:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f043 0304 	orr.w	r3, r3, #4
 8001978:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800197a:	4a04      	ldr	r2, [pc, #16]	; (800198c <FLASH_SetErrorCode+0x5c>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	60d3      	str	r3, [r2, #12]
}  
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	40022000 	.word	0x40022000
 8001990:	200001a0 	.word	0x200001a0

08001994 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80019a6:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <HAL_FLASHEx_Erase+0xcc>)
 80019a8:	7e1b      	ldrb	r3, [r3, #24]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_FLASHEx_Erase+0x1e>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e052      	b.n	8001a58 <HAL_FLASHEx_Erase+0xc4>
 80019b2:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <HAL_FLASHEx_Erase+0xcc>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d115      	bne.n	80019ec <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80019c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019c4:	f7ff ff74 	bl	80018b0 <FLASH_WaitForLastOperation>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d140      	bne.n	8001a50 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 80019ce:	f000 f84b 	bl	8001a68 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019d6:	f7ff ff6b 	bl	80018b0 <FLASH_WaitForLastOperation>
 80019da:	4603      	mov	r3, r0
 80019dc:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80019de:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <HAL_FLASHEx_Erase+0xd0>)
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	4a20      	ldr	r2, [pc, #128]	; (8001a64 <HAL_FLASHEx_Erase+0xd0>)
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	6113      	str	r3, [r2, #16]
 80019ea:	e031      	b.n	8001a50 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80019ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019f0:	f7ff ff5e 	bl	80018b0 <FLASH_WaitForLastOperation>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d12a      	bne.n	8001a50 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	e019      	b.n	8001a3e <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001a0a:	68b8      	ldr	r0, [r7, #8]
 8001a0c:	f000 f846 	bl	8001a9c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a14:	f7ff ff4c 	bl	80018b0 <FLASH_WaitForLastOperation>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_FLASHEx_Erase+0xd0>)
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	4a10      	ldr	r2, [pc, #64]	; (8001a64 <HAL_FLASHEx_Erase+0xd0>)
 8001a22:	f023 0302 	bic.w	r3, r3, #2
 8001a26:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	68ba      	ldr	r2, [r7, #8]
 8001a32:	601a      	str	r2, [r3, #0]
            break;
 8001a34:	e00c      	b.n	8001a50 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a3c:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	02da      	lsls	r2, r3, #11
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d3dc      	bcc.n	8001a0a <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <HAL_FLASHEx_Erase+0xcc>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	761a      	strb	r2, [r3, #24]

  return status;
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200001a0 	.word	0x200001a0
 8001a64:	40022000 	.word	0x40022000

08001a68 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <FLASH_MassErase+0x2c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <FLASH_MassErase+0x30>)
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	4a08      	ldr	r2, [pc, #32]	; (8001a98 <FLASH_MassErase+0x30>)
 8001a78:	f043 0304 	orr.w	r3, r3, #4
 8001a7c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <FLASH_MassErase+0x30>)
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <FLASH_MassErase+0x30>)
 8001a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a88:	6113      	str	r3, [r2, #16]
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	200001a0 	.word	0x200001a0
 8001a98:	40022000 	.word	0x40022000

08001a9c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <FLASH_PageErase+0x38>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <FLASH_PageErase+0x3c>)
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <FLASH_PageErase+0x3c>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001ab6:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <FLASH_PageErase+0x3c>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <FLASH_PageErase+0x3c>)
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <FLASH_PageErase+0x3c>)
 8001ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ac6:	6113      	str	r3, [r2, #16]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	200001a0 	.word	0x200001a0
 8001ad8:	40022000 	.word	0x40022000

08001adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aea:	e160      	b.n	8001dae <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2101      	movs	r1, #1
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	fa01 f303 	lsl.w	r3, r1, r3
 8001af8:	4013      	ands	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 8152 	beq.w	8001da8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d005      	beq.n	8001b1c <HAL_GPIO_Init+0x40>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d130      	bne.n	8001b7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b52:	2201      	movs	r2, #1
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	091b      	lsrs	r3, r3, #4
 8001b68:	f003 0201 	and.w	r2, r3, #1
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d017      	beq.n	8001bba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	2203      	movs	r2, #3
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d123      	bne.n	8001c0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	08da      	lsrs	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3208      	adds	r2, #8
 8001bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	691a      	ldr	r2, [r3, #16]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	08da      	lsrs	r2, r3, #3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3208      	adds	r2, #8
 8001c08:	6939      	ldr	r1, [r7, #16]
 8001c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	2203      	movs	r2, #3
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 0203 	and.w	r2, r3, #3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80ac 	beq.w	8001da8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c50:	4b5e      	ldr	r3, [pc, #376]	; (8001dcc <HAL_GPIO_Init+0x2f0>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4a5d      	ldr	r2, [pc, #372]	; (8001dcc <HAL_GPIO_Init+0x2f0>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6193      	str	r3, [r2, #24]
 8001c5c:	4b5b      	ldr	r3, [pc, #364]	; (8001dcc <HAL_GPIO_Init+0x2f0>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c68:	4a59      	ldr	r2, [pc, #356]	; (8001dd0 <HAL_GPIO_Init+0x2f4>)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	089b      	lsrs	r3, r3, #2
 8001c6e:	3302      	adds	r3, #2
 8001c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	220f      	movs	r2, #15
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c92:	d025      	beq.n	8001ce0 <HAL_GPIO_Init+0x204>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a4f      	ldr	r2, [pc, #316]	; (8001dd4 <HAL_GPIO_Init+0x2f8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d01f      	beq.n	8001cdc <HAL_GPIO_Init+0x200>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a4e      	ldr	r2, [pc, #312]	; (8001dd8 <HAL_GPIO_Init+0x2fc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d019      	beq.n	8001cd8 <HAL_GPIO_Init+0x1fc>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a4d      	ldr	r2, [pc, #308]	; (8001ddc <HAL_GPIO_Init+0x300>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d013      	beq.n	8001cd4 <HAL_GPIO_Init+0x1f8>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a4c      	ldr	r2, [pc, #304]	; (8001de0 <HAL_GPIO_Init+0x304>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d00d      	beq.n	8001cd0 <HAL_GPIO_Init+0x1f4>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a4b      	ldr	r2, [pc, #300]	; (8001de4 <HAL_GPIO_Init+0x308>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d007      	beq.n	8001ccc <HAL_GPIO_Init+0x1f0>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a4a      	ldr	r2, [pc, #296]	; (8001de8 <HAL_GPIO_Init+0x30c>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d101      	bne.n	8001cc8 <HAL_GPIO_Init+0x1ec>
 8001cc4:	2306      	movs	r3, #6
 8001cc6:	e00c      	b.n	8001ce2 <HAL_GPIO_Init+0x206>
 8001cc8:	2307      	movs	r3, #7
 8001cca:	e00a      	b.n	8001ce2 <HAL_GPIO_Init+0x206>
 8001ccc:	2305      	movs	r3, #5
 8001cce:	e008      	b.n	8001ce2 <HAL_GPIO_Init+0x206>
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	e006      	b.n	8001ce2 <HAL_GPIO_Init+0x206>
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e004      	b.n	8001ce2 <HAL_GPIO_Init+0x206>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e002      	b.n	8001ce2 <HAL_GPIO_Init+0x206>
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <HAL_GPIO_Init+0x206>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	f002 0203 	and.w	r2, r2, #3
 8001ce8:	0092      	lsls	r2, r2, #2
 8001cea:	4093      	lsls	r3, r2
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cf2:	4937      	ldr	r1, [pc, #220]	; (8001dd0 <HAL_GPIO_Init+0x2f4>)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d00:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <HAL_GPIO_Init+0x310>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d24:	4a31      	ldr	r2, [pc, #196]	; (8001dec <HAL_GPIO_Init+0x310>)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d2a:	4b30      	ldr	r3, [pc, #192]	; (8001dec <HAL_GPIO_Init+0x310>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d4e:	4a27      	ldr	r2, [pc, #156]	; (8001dec <HAL_GPIO_Init+0x310>)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d54:	4b25      	ldr	r3, [pc, #148]	; (8001dec <HAL_GPIO_Init+0x310>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d78:	4a1c      	ldr	r2, [pc, #112]	; (8001dec <HAL_GPIO_Init+0x310>)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d7e:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <HAL_GPIO_Init+0x310>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <HAL_GPIO_Init+0x310>)
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3301      	adds	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f47f ae97 	bne.w	8001aec <HAL_GPIO_Init+0x10>
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	bf00      	nop
 8001dc2:	371c      	adds	r7, #28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40010000 	.word	0x40010000
 8001dd4:	48000400 	.word	0x48000400
 8001dd8:	48000800 	.word	0x48000800
 8001ddc:	48000c00 	.word	0x48000c00
 8001de0:	48001000 	.word	0x48001000
 8001de4:	48001400 	.word	0x48001400
 8001de8:	48001800 	.word	0x48001800
 8001dec:	40010400 	.word	0x40010400

08001df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e00:	787b      	ldrb	r3, [r7, #1]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e0c:	e002      	b.n	8001e14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e0e:	887a      	ldrh	r2, [r7, #2]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001e2a:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <HAL_RCC_DeInit+0x130>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a48      	ldr	r2, [pc, #288]	; (8001f50 <HAL_RCC_DeInit+0x130>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6013      	str	r3, [r2, #0]

  /* Insure HSIRDY bit is set before writing default HSITRIM value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8001e36:	f7ff fae5 	bl	8001404 <HAL_GetTick>
 8001e3a:	60f8      	str	r0, [r7, #12]

  /* Wait till HSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_DeInit+0x30>
  {
    if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e3e:	f7ff fae1 	bl	8001404 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e07b      	b.n	8001f48 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001e50:	4b3f      	ldr	r3, [pc, #252]	; (8001f50 <HAL_RCC_DeInit+0x130>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Set HSITRIM default value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, RCC_CR_HSITRIM_4);
 8001e5c:	4b3c      	ldr	r3, [pc, #240]	; (8001f50 <HAL_RCC_DeInit+0x130>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e64:	4a3a      	ldr	r2, [pc, #232]	; (8001f50 <HAL_RCC_DeInit+0x130>)
 8001e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e6a:	6013      	str	r3, [r2, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0] and MCOSEL[2:0] bits */
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2 | RCC_CFGR_MCO);
 8001e6c:	4b38      	ldr	r3, [pc, #224]	; (8001f50 <HAL_RCC_DeInit+0x130>)
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	4937      	ldr	r1, [pc, #220]	; (8001f50 <HAL_RCC_DeInit+0x130>)
 8001e72:	4b38      	ldr	r3, [pc, #224]	; (8001f54 <HAL_RCC_DeInit+0x134>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]

  /* Insure HSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8001e78:	f7ff fac4 	bl	8001404 <HAL_GetTick>
 8001e7c:	60f8      	str	r0, [r7, #12]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_DeInit+0x76>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e80:	f7ff fac0 	bl	8001404 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_DeInit+0x76>
    {
      return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e058      	b.n	8001f48 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <HAL_RCC_DeInit+0x130>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1ee      	bne.n	8001e80 <HAL_RCC_DeInit+0x60>
    }
  }

  /* Update the SystemCoreClock global variable for HSI as system clock source */
  SystemCoreClock = HSI_VALUE;
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <HAL_RCC_DeInit+0x138>)
 8001ea4:	4a2d      	ldr	r2, [pc, #180]	; (8001f5c <HAL_RCC_DeInit+0x13c>)
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <HAL_RCC_DeInit+0x140>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fa65 	bl	800137c <HAL_InitTick>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_DeInit+0x9c>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e045      	b.n	8001f48 <HAL_RCC_DeInit+0x128>
  }

  /* Reset HSEON, CSSON, PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
 8001ebc:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <HAL_RCC_DeInit+0x130>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a23      	ldr	r2, [pc, #140]	; (8001f50 <HAL_RCC_DeInit+0x130>)
 8001ec2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001ecc:	4b20      	ldr	r3, [pc, #128]	; (8001f50 <HAL_RCC_DeInit+0x130>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1f      	ldr	r2, [pc, #124]	; (8001f50 <HAL_RCC_DeInit+0x130>)
 8001ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed6:	6013      	str	r3, [r2, #0]

  /* Insure PLLRDY is reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8001ed8:	f7ff fa94 	bl	8001404 <HAL_GetTick>
 8001edc:	60f8      	str	r0, [r7, #12]
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_DeInit+0xd2>
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7ff fa90 	bl	8001404 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_DeInit+0xd2>
    {
      return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e02a      	b.n	8001f48 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef2:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <HAL_RCC_DeInit+0x130>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_DeInit+0xc0>
    }
  }

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001efe:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <HAL_RCC_DeInit+0x130>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
 8001f04:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_RCC_DeInit+0x130>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset CFGR3 register */
  CLEAR_REG(RCC->CFGR3);
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_RCC_DeInit+0x130>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8001f10:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <HAL_RCC_DeInit+0x130>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	4a0e      	ldr	r2, [pc, #56]	; (8001f50 <HAL_RCC_DeInit+0x130>)
 8001f16:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8001f1a:	6093      	str	r3, [r2, #8]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <HAL_RCC_DeInit+0x130>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f26:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f30:	687b      	ldr	r3, [r7, #4]

  /* Reset all CSR flags */
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_RCC_DeInit+0x144>)
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	461a      	mov	r2, r3
 8001f42:	2301      	movs	r3, #1
 8001f44:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021000 	.word	0x40021000
 8001f54:	f8ffc00c 	.word	0xf8ffc00c
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	007a1200 	.word	0x007a1200
 8001f60:	20000004 	.word	0x20000004
 8001f64:	10908120 	.word	0x10908120

08001f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f78:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d102      	bne.n	8001f8e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	f001 b83a 	b.w	8003002 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 816f 	beq.w	8002282 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001fa4:	4bb5      	ldr	r3, [pc, #724]	; (800227c <HAL_RCC_OscConfig+0x314>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d00c      	beq.n	8001fca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fb0:	4bb2      	ldr	r3, [pc, #712]	; (800227c <HAL_RCC_OscConfig+0x314>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d15c      	bne.n	8002076 <HAL_RCC_OscConfig+0x10e>
 8001fbc:	4baf      	ldr	r3, [pc, #700]	; (800227c <HAL_RCC_OscConfig+0x314>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc8:	d155      	bne.n	8002076 <HAL_RCC_OscConfig+0x10e>
 8001fca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fce:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8001fde:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe2:	fab3 f383 	clz	r3, r3
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	095b      	lsrs	r3, r3, #5
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d102      	bne.n	8001ffc <HAL_RCC_OscConfig+0x94>
 8001ff6:	4ba1      	ldr	r3, [pc, #644]	; (800227c <HAL_RCC_OscConfig+0x314>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	e015      	b.n	8002028 <HAL_RCC_OscConfig+0xc0>
 8001ffc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002000:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002010:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002014:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002018:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800201c:	fa93 f3a3 	rbit	r3, r3
 8002020:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002024:	4b95      	ldr	r3, [pc, #596]	; (800227c <HAL_RCC_OscConfig+0x314>)
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800202c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002030:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002034:	fa92 f2a2 	rbit	r2, r2
 8002038:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800203c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002040:	fab2 f282 	clz	r2, r2
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	f042 0220 	orr.w	r2, r2, #32
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	f002 021f 	and.w	r2, r2, #31
 8002050:	2101      	movs	r1, #1
 8002052:	fa01 f202 	lsl.w	r2, r1, r2
 8002056:	4013      	ands	r3, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 8111 	beq.w	8002280 <HAL_RCC_OscConfig+0x318>
 800205e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002062:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 8108 	bne.w	8002280 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	f000 bfc6 	b.w	8003002 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002076:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800207a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002086:	d106      	bne.n	8002096 <HAL_RCC_OscConfig+0x12e>
 8002088:	4b7c      	ldr	r3, [pc, #496]	; (800227c <HAL_RCC_OscConfig+0x314>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a7b      	ldr	r2, [pc, #492]	; (800227c <HAL_RCC_OscConfig+0x314>)
 800208e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	e036      	b.n	8002104 <HAL_RCC_OscConfig+0x19c>
 8002096:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800209a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x158>
 80020a6:	4b75      	ldr	r3, [pc, #468]	; (800227c <HAL_RCC_OscConfig+0x314>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a74      	ldr	r2, [pc, #464]	; (800227c <HAL_RCC_OscConfig+0x314>)
 80020ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b72      	ldr	r3, [pc, #456]	; (800227c <HAL_RCC_OscConfig+0x314>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a71      	ldr	r2, [pc, #452]	; (800227c <HAL_RCC_OscConfig+0x314>)
 80020b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e021      	b.n	8002104 <HAL_RCC_OscConfig+0x19c>
 80020c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0x184>
 80020d2:	4b6a      	ldr	r3, [pc, #424]	; (800227c <HAL_RCC_OscConfig+0x314>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a69      	ldr	r2, [pc, #420]	; (800227c <HAL_RCC_OscConfig+0x314>)
 80020d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	4b67      	ldr	r3, [pc, #412]	; (800227c <HAL_RCC_OscConfig+0x314>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a66      	ldr	r2, [pc, #408]	; (800227c <HAL_RCC_OscConfig+0x314>)
 80020e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	e00b      	b.n	8002104 <HAL_RCC_OscConfig+0x19c>
 80020ec:	4b63      	ldr	r3, [pc, #396]	; (800227c <HAL_RCC_OscConfig+0x314>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a62      	ldr	r2, [pc, #392]	; (800227c <HAL_RCC_OscConfig+0x314>)
 80020f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4b60      	ldr	r3, [pc, #384]	; (800227c <HAL_RCC_OscConfig+0x314>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a5f      	ldr	r2, [pc, #380]	; (800227c <HAL_RCC_OscConfig+0x314>)
 80020fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002102:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002104:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002108:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d059      	beq.n	80021c8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7ff f976 	bl	8001404 <HAL_GetTick>
 8002118:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211c:	e00a      	b.n	8002134 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800211e:	f7ff f971 	bl	8001404 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	; 0x64
 800212c:	d902      	bls.n	8002134 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	f000 bf67 	b.w	8003002 <HAL_RCC_OscConfig+0x109a>
 8002134:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002138:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002148:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214c:	fab3 f383 	clz	r3, r3
 8002150:	b2db      	uxtb	r3, r3
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	b2db      	uxtb	r3, r3
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b01      	cmp	r3, #1
 800215e:	d102      	bne.n	8002166 <HAL_RCC_OscConfig+0x1fe>
 8002160:	4b46      	ldr	r3, [pc, #280]	; (800227c <HAL_RCC_OscConfig+0x314>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	e015      	b.n	8002192 <HAL_RCC_OscConfig+0x22a>
 8002166:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800216a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800217a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800217e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002182:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800218e:	4b3b      	ldr	r3, [pc, #236]	; (800227c <HAL_RCC_OscConfig+0x314>)
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002196:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800219a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800219e:	fa92 f2a2 	rbit	r2, r2
 80021a2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80021a6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80021aa:	fab2 f282 	clz	r2, r2
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	f042 0220 	orr.w	r2, r2, #32
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	f002 021f 	and.w	r2, r2, #31
 80021ba:	2101      	movs	r1, #1
 80021bc:	fa01 f202 	lsl.w	r2, r1, r2
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0ab      	beq.n	800211e <HAL_RCC_OscConfig+0x1b6>
 80021c6:	e05c      	b.n	8002282 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7ff f91c 	bl	8001404 <HAL_GetTick>
 80021cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d0:	e00a      	b.n	80021e8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d2:	f7ff f917 	bl	8001404 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	; 0x64
 80021e0:	d902      	bls.n	80021e8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	f000 bf0d 	b.w	8003002 <HAL_RCC_OscConfig+0x109a>
 80021e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ec:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80021fc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002200:	fab3 f383 	clz	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b01      	cmp	r3, #1
 8002212:	d102      	bne.n	800221a <HAL_RCC_OscConfig+0x2b2>
 8002214:	4b19      	ldr	r3, [pc, #100]	; (800227c <HAL_RCC_OscConfig+0x314>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	e015      	b.n	8002246 <HAL_RCC_OscConfig+0x2de>
 800221a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800221e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002222:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800222e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002232:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002236:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <HAL_RCC_OscConfig+0x314>)
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800224a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800224e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002252:	fa92 f2a2 	rbit	r2, r2
 8002256:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800225a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800225e:	fab2 f282 	clz	r2, r2
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	f042 0220 	orr.w	r2, r2, #32
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	f002 021f 	and.w	r2, r2, #31
 800226e:	2101      	movs	r1, #1
 8002270:	fa01 f202 	lsl.w	r2, r1, r2
 8002274:	4013      	ands	r3, r2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1ab      	bne.n	80021d2 <HAL_RCC_OscConfig+0x26a>
 800227a:	e002      	b.n	8002282 <HAL_RCC_OscConfig+0x31a>
 800227c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002282:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002286:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 817f 	beq.w	8002596 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002298:	4ba7      	ldr	r3, [pc, #668]	; (8002538 <HAL_RCC_OscConfig+0x5d0>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00c      	beq.n	80022be <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022a4:	4ba4      	ldr	r3, [pc, #656]	; (8002538 <HAL_RCC_OscConfig+0x5d0>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d173      	bne.n	8002398 <HAL_RCC_OscConfig+0x430>
 80022b0:	4ba1      	ldr	r3, [pc, #644]	; (8002538 <HAL_RCC_OscConfig+0x5d0>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80022b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022bc:	d16c      	bne.n	8002398 <HAL_RCC_OscConfig+0x430>
 80022be:	2302      	movs	r3, #2
 80022c0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80022d0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d102      	bne.n	80022ee <HAL_RCC_OscConfig+0x386>
 80022e8:	4b93      	ldr	r3, [pc, #588]	; (8002538 <HAL_RCC_OscConfig+0x5d0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	e013      	b.n	8002316 <HAL_RCC_OscConfig+0x3ae>
 80022ee:	2302      	movs	r3, #2
 80022f0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002300:	2302      	movs	r3, #2
 8002302:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002306:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002312:	4b89      	ldr	r3, [pc, #548]	; (8002538 <HAL_RCC_OscConfig+0x5d0>)
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	2202      	movs	r2, #2
 8002318:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800231c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002320:	fa92 f2a2 	rbit	r2, r2
 8002324:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002328:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800232c:	fab2 f282 	clz	r2, r2
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	f042 0220 	orr.w	r2, r2, #32
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	f002 021f 	and.w	r2, r2, #31
 800233c:	2101      	movs	r1, #1
 800233e:	fa01 f202 	lsl.w	r2, r1, r2
 8002342:	4013      	ands	r3, r2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <HAL_RCC_OscConfig+0x3f6>
 8002348:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800234c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d002      	beq.n	800235e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	f000 be52 	b.w	8003002 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235e:	4b76      	ldr	r3, [pc, #472]	; (8002538 <HAL_RCC_OscConfig+0x5d0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002366:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800236a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	21f8      	movs	r1, #248	; 0xf8
 8002374:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800237c:	fa91 f1a1 	rbit	r1, r1
 8002380:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002384:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002388:	fab1 f181 	clz	r1, r1
 800238c:	b2c9      	uxtb	r1, r1
 800238e:	408b      	lsls	r3, r1
 8002390:	4969      	ldr	r1, [pc, #420]	; (8002538 <HAL_RCC_OscConfig+0x5d0>)
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002396:	e0fe      	b.n	8002596 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800239c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 8088 	beq.w	80024ba <HAL_RCC_OscConfig+0x552>
 80023aa:	2301      	movs	r3, #1
 80023ac:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80023bc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c0:	fab3 f383 	clz	r3, r3
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	461a      	mov	r2, r3
 80023d2:	2301      	movs	r3, #1
 80023d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d6:	f7ff f815 	bl	8001404 <HAL_GetTick>
 80023da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023de:	e00a      	b.n	80023f6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e0:	f7ff f810 	bl	8001404 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d902      	bls.n	80023f6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	f000 be06 	b.w	8003002 <HAL_RCC_OscConfig+0x109a>
 80023f6:	2302      	movs	r3, #2
 80023f8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002400:	fa93 f3a3 	rbit	r3, r3
 8002404:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002408:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240c:	fab3 f383 	clz	r3, r3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	b2db      	uxtb	r3, r3
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b01      	cmp	r3, #1
 800241e:	d102      	bne.n	8002426 <HAL_RCC_OscConfig+0x4be>
 8002420:	4b45      	ldr	r3, [pc, #276]	; (8002538 <HAL_RCC_OscConfig+0x5d0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	e013      	b.n	800244e <HAL_RCC_OscConfig+0x4e6>
 8002426:	2302      	movs	r3, #2
 8002428:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002438:	2302      	movs	r3, #2
 800243a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800243e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002442:	fa93 f3a3 	rbit	r3, r3
 8002446:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800244a:	4b3b      	ldr	r3, [pc, #236]	; (8002538 <HAL_RCC_OscConfig+0x5d0>)
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	2202      	movs	r2, #2
 8002450:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002454:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002458:	fa92 f2a2 	rbit	r2, r2
 800245c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002460:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002464:	fab2 f282 	clz	r2, r2
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	f042 0220 	orr.w	r2, r2, #32
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	f002 021f 	and.w	r2, r2, #31
 8002474:	2101      	movs	r1, #1
 8002476:	fa01 f202 	lsl.w	r2, r1, r2
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0af      	beq.n	80023e0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002480:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <HAL_RCC_OscConfig+0x5d0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800248c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	21f8      	movs	r1, #248	; 0xf8
 8002496:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800249e:	fa91 f1a1 	rbit	r1, r1
 80024a2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80024a6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80024aa:	fab1 f181 	clz	r1, r1
 80024ae:	b2c9      	uxtb	r1, r1
 80024b0:	408b      	lsls	r3, r1
 80024b2:	4921      	ldr	r1, [pc, #132]	; (8002538 <HAL_RCC_OscConfig+0x5d0>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	600b      	str	r3, [r1, #0]
 80024b8:	e06d      	b.n	8002596 <HAL_RCC_OscConfig+0x62e>
 80024ba:	2301      	movs	r3, #1
 80024bc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80024cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d0:	fab3 f383 	clz	r3, r3
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	461a      	mov	r2, r3
 80024e2:	2300      	movs	r3, #0
 80024e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e6:	f7fe ff8d 	bl	8001404 <HAL_GetTick>
 80024ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f0:	f7fe ff88 	bl	8001404 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d902      	bls.n	8002506 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	f000 bd7e 	b.w	8003002 <HAL_RCC_OscConfig+0x109a>
 8002506:	2302      	movs	r3, #2
 8002508:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002518:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251c:	fab3 f383 	clz	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	095b      	lsrs	r3, r3, #5
 8002524:	b2db      	uxtb	r3, r3
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b01      	cmp	r3, #1
 800252e:	d105      	bne.n	800253c <HAL_RCC_OscConfig+0x5d4>
 8002530:	4b01      	ldr	r3, [pc, #4]	; (8002538 <HAL_RCC_OscConfig+0x5d0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	e016      	b.n	8002564 <HAL_RCC_OscConfig+0x5fc>
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000
 800253c:	2302      	movs	r3, #2
 800253e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800254e:	2302      	movs	r3, #2
 8002550:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002554:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002560:	4bbf      	ldr	r3, [pc, #764]	; (8002860 <HAL_RCC_OscConfig+0x8f8>)
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	2202      	movs	r2, #2
 8002566:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800256a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800256e:	fa92 f2a2 	rbit	r2, r2
 8002572:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002576:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800257a:	fab2 f282 	clz	r2, r2
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	f042 0220 	orr.w	r2, r2, #32
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	f002 021f 	and.w	r2, r2, #31
 800258a:	2101      	movs	r1, #1
 800258c:	fa01 f202 	lsl.w	r2, r1, r2
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1ac      	bne.n	80024f0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002596:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800259a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 8113 	beq.w	80027d2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d07c      	beq.n	80026b6 <HAL_RCC_OscConfig+0x74e>
 80025bc:	2301      	movs	r3, #1
 80025be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80025ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d2:	fab3 f383 	clz	r3, r3
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	4ba2      	ldr	r3, [pc, #648]	; (8002864 <HAL_RCC_OscConfig+0x8fc>)
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	461a      	mov	r2, r3
 80025e2:	2301      	movs	r3, #1
 80025e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e6:	f7fe ff0d 	bl	8001404 <HAL_GetTick>
 80025ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f0:	f7fe ff08 	bl	8001404 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d902      	bls.n	8002606 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	f000 bcfe 	b.w	8003002 <HAL_RCC_OscConfig+0x109a>
 8002606:	2302      	movs	r3, #2
 8002608:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002610:	fa93 f2a3 	rbit	r2, r3
 8002614:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002618:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002622:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002626:	2202      	movs	r2, #2
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800262e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	fa93 f2a3 	rbit	r2, r3
 8002638:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800263c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002646:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800264a:	2202      	movs	r2, #2
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002652:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	fa93 f2a3 	rbit	r2, r3
 800265c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002660:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002664:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002666:	4b7e      	ldr	r3, [pc, #504]	; (8002860 <HAL_RCC_OscConfig+0x8f8>)
 8002668:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800266a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800266e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002672:	2102      	movs	r1, #2
 8002674:	6019      	str	r1, [r3, #0]
 8002676:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800267a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	fa93 f1a3 	rbit	r1, r3
 8002684:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002688:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800268c:	6019      	str	r1, [r3, #0]
  return result;
 800268e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002692:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	2101      	movs	r1, #1
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d09d      	beq.n	80025f0 <HAL_RCC_OscConfig+0x688>
 80026b4:	e08d      	b.n	80027d2 <HAL_RCC_OscConfig+0x86a>
 80026b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80026be:	2201      	movs	r2, #1
 80026c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	fa93 f2a3 	rbit	r2, r3
 80026d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80026d8:	601a      	str	r2, [r3, #0]
  return result;
 80026da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80026e2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e4:	fab3 f383 	clz	r3, r3
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	461a      	mov	r2, r3
 80026ec:	4b5d      	ldr	r3, [pc, #372]	; (8002864 <HAL_RCC_OscConfig+0x8fc>)
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	461a      	mov	r2, r3
 80026f4:	2300      	movs	r3, #0
 80026f6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f8:	f7fe fe84 	bl	8001404 <HAL_GetTick>
 80026fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002700:	e00a      	b.n	8002718 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002702:	f7fe fe7f 	bl	8001404 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d902      	bls.n	8002718 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	f000 bc75 	b.w	8003002 <HAL_RCC_OscConfig+0x109a>
 8002718:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800271c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002720:	2202      	movs	r2, #2
 8002722:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002728:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	fa93 f2a3 	rbit	r2, r3
 8002732:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002736:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002740:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002744:	2202      	movs	r2, #2
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800274c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	fa93 f2a3 	rbit	r2, r3
 8002756:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800275a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002764:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002768:	2202      	movs	r2, #2
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002770:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	fa93 f2a3 	rbit	r2, r3
 800277a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800277e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002782:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002784:	4b36      	ldr	r3, [pc, #216]	; (8002860 <HAL_RCC_OscConfig+0x8f8>)
 8002786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002788:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800278c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002790:	2102      	movs	r1, #2
 8002792:	6019      	str	r1, [r3, #0]
 8002794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002798:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	fa93 f1a3 	rbit	r1, r3
 80027a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027a6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80027aa:	6019      	str	r1, [r3, #0]
  return result;
 80027ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	f003 031f 	and.w	r3, r3, #31
 80027c6:	2101      	movs	r1, #1
 80027c8:	fa01 f303 	lsl.w	r3, r1, r3
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d197      	bne.n	8002702 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 81a5 	beq.w	8002b32 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027e8:	2300      	movs	r3, #0
 80027ea:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <HAL_RCC_OscConfig+0x8f8>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d116      	bne.n	8002828 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fa:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_RCC_OscConfig+0x8f8>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	4a18      	ldr	r2, [pc, #96]	; (8002860 <HAL_RCC_OscConfig+0x8f8>)
 8002800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002804:	61d3      	str	r3, [r2, #28]
 8002806:	4b16      	ldr	r3, [pc, #88]	; (8002860 <HAL_RCC_OscConfig+0x8f8>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800280e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002812:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800281c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002820:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002822:	2301      	movs	r3, #1
 8002824:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <HAL_RCC_OscConfig+0x900>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d121      	bne.n	8002878 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <HAL_RCC_OscConfig+0x900>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a0b      	ldr	r2, [pc, #44]	; (8002868 <HAL_RCC_OscConfig+0x900>)
 800283a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002840:	f7fe fde0 	bl	8001404 <HAL_GetTick>
 8002844:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002848:	e010      	b.n	800286c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800284a:	f7fe fddb 	bl	8001404 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d908      	bls.n	800286c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e3d1      	b.n	8003002 <HAL_RCC_OscConfig+0x109a>
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	10908120 	.word	0x10908120
 8002868:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286c:	4b8d      	ldr	r3, [pc, #564]	; (8002aa4 <HAL_RCC_OscConfig+0xb3c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0e8      	beq.n	800284a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002878:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800287c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d106      	bne.n	8002896 <HAL_RCC_OscConfig+0x92e>
 8002888:	4b87      	ldr	r3, [pc, #540]	; (8002aa8 <HAL_RCC_OscConfig+0xb40>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	4a86      	ldr	r2, [pc, #536]	; (8002aa8 <HAL_RCC_OscConfig+0xb40>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6213      	str	r3, [r2, #32]
 8002894:	e035      	b.n	8002902 <HAL_RCC_OscConfig+0x99a>
 8002896:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800289a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x958>
 80028a6:	4b80      	ldr	r3, [pc, #512]	; (8002aa8 <HAL_RCC_OscConfig+0xb40>)
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	4a7f      	ldr	r2, [pc, #508]	; (8002aa8 <HAL_RCC_OscConfig+0xb40>)
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	6213      	str	r3, [r2, #32]
 80028b2:	4b7d      	ldr	r3, [pc, #500]	; (8002aa8 <HAL_RCC_OscConfig+0xb40>)
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	4a7c      	ldr	r2, [pc, #496]	; (8002aa8 <HAL_RCC_OscConfig+0xb40>)
 80028b8:	f023 0304 	bic.w	r3, r3, #4
 80028bc:	6213      	str	r3, [r2, #32]
 80028be:	e020      	b.n	8002902 <HAL_RCC_OscConfig+0x99a>
 80028c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2b05      	cmp	r3, #5
 80028ce:	d10c      	bne.n	80028ea <HAL_RCC_OscConfig+0x982>
 80028d0:	4b75      	ldr	r3, [pc, #468]	; (8002aa8 <HAL_RCC_OscConfig+0xb40>)
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	4a74      	ldr	r2, [pc, #464]	; (8002aa8 <HAL_RCC_OscConfig+0xb40>)
 80028d6:	f043 0304 	orr.w	r3, r3, #4
 80028da:	6213      	str	r3, [r2, #32]
 80028dc:	4b72      	ldr	r3, [pc, #456]	; (8002aa8 <HAL_RCC_OscConfig+0xb40>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	4a71      	ldr	r2, [pc, #452]	; (8002aa8 <HAL_RCC_OscConfig+0xb40>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6213      	str	r3, [r2, #32]
 80028e8:	e00b      	b.n	8002902 <HAL_RCC_OscConfig+0x99a>
 80028ea:	4b6f      	ldr	r3, [pc, #444]	; (8002aa8 <HAL_RCC_OscConfig+0xb40>)
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	4a6e      	ldr	r2, [pc, #440]	; (8002aa8 <HAL_RCC_OscConfig+0xb40>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6213      	str	r3, [r2, #32]
 80028f6:	4b6c      	ldr	r3, [pc, #432]	; (8002aa8 <HAL_RCC_OscConfig+0xb40>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	4a6b      	ldr	r2, [pc, #428]	; (8002aa8 <HAL_RCC_OscConfig+0xb40>)
 80028fc:	f023 0304 	bic.w	r3, r3, #4
 8002900:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002902:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002906:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 8081 	beq.w	8002a16 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002914:	f7fe fd76 	bl	8001404 <HAL_GetTick>
 8002918:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291c:	e00b      	b.n	8002936 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800291e:	f7fe fd71 	bl	8001404 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	; 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e365      	b.n	8003002 <HAL_RCC_OscConfig+0x109a>
 8002936:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800293a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800293e:	2202      	movs	r2, #2
 8002940:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002946:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	fa93 f2a3 	rbit	r2, r3
 8002950:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002954:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800295e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002962:	2202      	movs	r2, #2
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800296a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	fa93 f2a3 	rbit	r2, r3
 8002974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002978:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800297c:	601a      	str	r2, [r3, #0]
  return result;
 800297e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002982:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002986:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	b2db      	uxtb	r3, r3
 8002992:	f043 0302 	orr.w	r3, r3, #2
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d102      	bne.n	80029a2 <HAL_RCC_OscConfig+0xa3a>
 800299c:	4b42      	ldr	r3, [pc, #264]	; (8002aa8 <HAL_RCC_OscConfig+0xb40>)
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	e013      	b.n	80029ca <HAL_RCC_OscConfig+0xa62>
 80029a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029a6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80029aa:	2202      	movs	r2, #2
 80029ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	fa93 f2a3 	rbit	r2, r3
 80029bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	4b38      	ldr	r3, [pc, #224]	; (8002aa8 <HAL_RCC_OscConfig+0xb40>)
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029ce:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80029d2:	2102      	movs	r1, #2
 80029d4:	6011      	str	r1, [r2, #0]
 80029d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029da:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	fa92 f1a2 	rbit	r1, r2
 80029e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029e8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80029ec:	6011      	str	r1, [r2, #0]
  return result;
 80029ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029f2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	fab2 f282 	clz	r2, r2
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	f002 021f 	and.w	r2, r2, #31
 8002a08:	2101      	movs	r1, #1
 8002a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d084      	beq.n	800291e <HAL_RCC_OscConfig+0x9b6>
 8002a14:	e083      	b.n	8002b1e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a16:	f7fe fcf5 	bl	8001404 <HAL_GetTick>
 8002a1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1e:	e00b      	b.n	8002a38 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a20:	f7fe fcf0 	bl	8001404 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e2e4      	b.n	8003002 <HAL_RCC_OscConfig+0x109a>
 8002a38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a3c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002a40:	2202      	movs	r2, #2
 8002a42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a48:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	fa93 f2a3 	rbit	r2, r3
 8002a52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a56:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a60:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a64:	2202      	movs	r2, #2
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a6c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	fa93 f2a3 	rbit	r2, r3
 8002a76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a7a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a7e:	601a      	str	r2, [r3, #0]
  return result;
 8002a80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a84:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a88:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	095b      	lsrs	r3, r3, #5
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	f043 0302 	orr.w	r3, r3, #2
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d106      	bne.n	8002aac <HAL_RCC_OscConfig+0xb44>
 8002a9e:	4b02      	ldr	r3, [pc, #8]	; (8002aa8 <HAL_RCC_OscConfig+0xb40>)
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	e017      	b.n	8002ad4 <HAL_RCC_OscConfig+0xb6c>
 8002aa4:	40007000 	.word	0x40007000
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002abc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	fa93 f2a3 	rbit	r2, r3
 8002ac6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aca:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	4bb3      	ldr	r3, [pc, #716]	; (8002da0 <HAL_RCC_OscConfig+0xe38>)
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ad8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002adc:	2102      	movs	r1, #2
 8002ade:	6011      	str	r1, [r2, #0]
 8002ae0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ae4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	fa92 f1a2 	rbit	r1, r2
 8002aee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002af2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002af6:	6011      	str	r1, [r2, #0]
  return result;
 8002af8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002afc:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	fab2 f282 	clz	r2, r2
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	f002 021f 	and.w	r2, r2, #31
 8002b12:	2101      	movs	r1, #1
 8002b14:	fa01 f202 	lsl.w	r2, r1, r2
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d180      	bne.n	8002a20 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b1e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d105      	bne.n	8002b32 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b26:	4b9e      	ldr	r3, [pc, #632]	; (8002da0 <HAL_RCC_OscConfig+0xe38>)
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	4a9d      	ldr	r2, [pc, #628]	; (8002da0 <HAL_RCC_OscConfig+0xe38>)
 8002b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b30:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 825e 	beq.w	8003000 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b44:	4b96      	ldr	r3, [pc, #600]	; (8002da0 <HAL_RCC_OscConfig+0xe38>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 030c 	and.w	r3, r3, #12
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	f000 821f 	beq.w	8002f90 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	f040 8170 	bne.w	8002e44 <HAL_RCC_OscConfig+0xedc>
 8002b64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b68:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b76:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	fa93 f2a3 	rbit	r2, r3
 8002b80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b84:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b88:	601a      	str	r2, [r3, #0]
  return result;
 8002b8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b8e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b92:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b94:	fab3 f383 	clz	r3, r3
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002baa:	f7fe fc2b 	bl	8001404 <HAL_GetTick>
 8002bae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb2:	e009      	b.n	8002bc8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb4:	f7fe fc26 	bl	8001404 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e21c      	b.n	8003002 <HAL_RCC_OscConfig+0x109a>
 8002bc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bcc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002bd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bda:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	fa93 f2a3 	rbit	r2, r3
 8002be4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002bec:	601a      	str	r2, [r3, #0]
  return result;
 8002bee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bf2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002bf6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf8:	fab3 f383 	clz	r3, r3
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d102      	bne.n	8002c12 <HAL_RCC_OscConfig+0xcaa>
 8002c0c:	4b64      	ldr	r3, [pc, #400]	; (8002da0 <HAL_RCC_OscConfig+0xe38>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	e027      	b.n	8002c62 <HAL_RCC_OscConfig+0xcfa>
 8002c12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c16:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002c1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c24:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	fa93 f2a3 	rbit	r2, r3
 8002c2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c32:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c3c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002c40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c4a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	fa93 f2a3 	rbit	r2, r3
 8002c54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c58:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	4b50      	ldr	r3, [pc, #320]	; (8002da0 <HAL_RCC_OscConfig+0xe38>)
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c66:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c6a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c6e:	6011      	str	r1, [r2, #0]
 8002c70:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c74:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	fa92 f1a2 	rbit	r1, r2
 8002c7e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c82:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002c86:	6011      	str	r1, [r2, #0]
  return result;
 8002c88:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c8c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002c90:	6812      	ldr	r2, [r2, #0]
 8002c92:	fab2 f282 	clz	r2, r2
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	f042 0220 	orr.w	r2, r2, #32
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	f002 021f 	and.w	r2, r2, #31
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d182      	bne.n	8002bb4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cae:	4b3c      	ldr	r3, [pc, #240]	; (8002da0 <HAL_RCC_OscConfig+0xe38>)
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	f023 020f 	bic.w	r2, r3, #15
 8002cb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	4937      	ldr	r1, [pc, #220]	; (8002da0 <HAL_RCC_OscConfig+0xe38>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002cc8:	4b35      	ldr	r3, [pc, #212]	; (8002da0 <HAL_RCC_OscConfig+0xe38>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002cd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6a19      	ldr	r1, [r3, #32]
 8002cdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ce0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	492d      	ldr	r1, [pc, #180]	; (8002da0 <HAL_RCC_OscConfig+0xe38>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]
 8002cf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cf4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002cf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d02:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	fa93 f2a3 	rbit	r2, r3
 8002d0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d10:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d14:	601a      	str	r2, [r3, #0]
  return result;
 8002d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d1a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d1e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d20:	fab3 f383 	clz	r3, r3
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	461a      	mov	r2, r3
 8002d32:	2301      	movs	r3, #1
 8002d34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d36:	f7fe fb65 	bl	8001404 <HAL_GetTick>
 8002d3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d3e:	e009      	b.n	8002d54 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d40:	f7fe fb60 	bl	8001404 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e156      	b.n	8003002 <HAL_RCC_OscConfig+0x109a>
 8002d54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d58:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d66:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	fa93 f2a3 	rbit	r2, r3
 8002d70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d74:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d78:	601a      	str	r2, [r3, #0]
  return result;
 8002d7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d7e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d84:	fab3 f383 	clz	r3, r3
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d105      	bne.n	8002da4 <HAL_RCC_OscConfig+0xe3c>
 8002d98:	4b01      	ldr	r3, [pc, #4]	; (8002da0 <HAL_RCC_OscConfig+0xe38>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	e02a      	b.n	8002df4 <HAL_RCC_OscConfig+0xe8c>
 8002d9e:	bf00      	nop
 8002da0:	40021000 	.word	0x40021000
 8002da4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002dac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002db0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002db6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	fa93 f2a3 	rbit	r2, r3
 8002dc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dc4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dce:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002dd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ddc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	fa93 f2a3 	rbit	r2, r3
 8002de6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dea:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	4b86      	ldr	r3, [pc, #536]	; (800300c <HAL_RCC_OscConfig+0x10a4>)
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002df8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002dfc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e00:	6011      	str	r1, [r2, #0]
 8002e02:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e06:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	fa92 f1a2 	rbit	r1, r2
 8002e10:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e14:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002e18:	6011      	str	r1, [r2, #0]
  return result;
 8002e1a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e1e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	fab2 f282 	clz	r2, r2
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	f042 0220 	orr.w	r2, r2, #32
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	f002 021f 	and.w	r2, r2, #31
 8002e34:	2101      	movs	r1, #1
 8002e36:	fa01 f202 	lsl.w	r2, r1, r2
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f43f af7f 	beq.w	8002d40 <HAL_RCC_OscConfig+0xdd8>
 8002e42:	e0dd      	b.n	8003000 <HAL_RCC_OscConfig+0x1098>
 8002e44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e48:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e56:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	fa93 f2a3 	rbit	r2, r3
 8002e60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e64:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e68:	601a      	str	r2, [r3, #0]
  return result;
 8002e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e6e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e72:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e74:	fab3 f383 	clz	r3, r3
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	461a      	mov	r2, r3
 8002e86:	2300      	movs	r3, #0
 8002e88:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8a:	f7fe fabb 	bl	8001404 <HAL_GetTick>
 8002e8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e92:	e009      	b.n	8002ea8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e94:	f7fe fab6 	bl	8001404 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e0ac      	b.n	8003002 <HAL_RCC_OscConfig+0x109a>
 8002ea8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eac:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002eb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eba:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	fa93 f2a3 	rbit	r2, r3
 8002ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ec8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ecc:	601a      	str	r2, [r3, #0]
  return result;
 8002ece:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ed2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ed6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed8:	fab3 f383 	clz	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d102      	bne.n	8002ef2 <HAL_RCC_OscConfig+0xf8a>
 8002eec:	4b47      	ldr	r3, [pc, #284]	; (800300c <HAL_RCC_OscConfig+0x10a4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	e027      	b.n	8002f42 <HAL_RCC_OscConfig+0xfda>
 8002ef2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ef6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002efa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002efe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f04:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	fa93 f2a3 	rbit	r2, r3
 8002f0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f12:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f1c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002f20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f2a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	fa93 f2a3 	rbit	r2, r3
 8002f34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f38:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	4b33      	ldr	r3, [pc, #204]	; (800300c <HAL_RCC_OscConfig+0x10a4>)
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f46:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f4a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f4e:	6011      	str	r1, [r2, #0]
 8002f50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f54:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	fa92 f1a2 	rbit	r1, r2
 8002f5e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f62:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002f66:	6011      	str	r1, [r2, #0]
  return result;
 8002f68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f6c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	fab2 f282 	clz	r2, r2
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	f042 0220 	orr.w	r2, r2, #32
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	f002 021f 	and.w	r2, r2, #31
 8002f82:	2101      	movs	r1, #1
 8002f84:	fa01 f202 	lsl.w	r2, r1, r2
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d182      	bne.n	8002e94 <HAL_RCC_OscConfig+0xf2c>
 8002f8e:	e037      	b.n	8003000 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f94:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e02e      	b.n	8003002 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fa4:	4b19      	ldr	r3, [pc, #100]	; (800300c <HAL_RCC_OscConfig+0x10a4>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002fac:	4b17      	ldr	r3, [pc, #92]	; (800300c <HAL_RCC_OscConfig+0x10a4>)
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fb4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002fb8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002fbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fc0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d117      	bne.n	8002ffc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002fcc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002fd0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fd8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d10b      	bne.n	8002ffc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002fe4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fe8:	f003 020f 	and.w	r2, r3, #15
 8002fec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ff0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000

08003010 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b09e      	sub	sp, #120	; 0x78
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e162      	b.n	80032ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003028:	4b90      	ldr	r3, [pc, #576]	; (800326c <HAL_RCC_ClockConfig+0x25c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d910      	bls.n	8003058 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b8d      	ldr	r3, [pc, #564]	; (800326c <HAL_RCC_ClockConfig+0x25c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 0207 	bic.w	r2, r3, #7
 800303e:	498b      	ldr	r1, [pc, #556]	; (800326c <HAL_RCC_ClockConfig+0x25c>)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003046:	4b89      	ldr	r3, [pc, #548]	; (800326c <HAL_RCC_ClockConfig+0x25c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d001      	beq.n	8003058 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e14a      	b.n	80032ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d008      	beq.n	8003076 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003064:	4b82      	ldr	r3, [pc, #520]	; (8003270 <HAL_RCC_ClockConfig+0x260>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	497f      	ldr	r1, [pc, #508]	; (8003270 <HAL_RCC_ClockConfig+0x260>)
 8003072:	4313      	orrs	r3, r2
 8003074:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 80dc 	beq.w	800323c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d13c      	bne.n	8003106 <HAL_RCC_ClockConfig+0xf6>
 800308c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003090:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003094:	fa93 f3a3 	rbit	r3, r3
 8003098:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800309a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309c:	fab3 f383 	clz	r3, r3
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d102      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xa6>
 80030b0:	4b6f      	ldr	r3, [pc, #444]	; (8003270 <HAL_RCC_ClockConfig+0x260>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	e00f      	b.n	80030d6 <HAL_RCC_ClockConfig+0xc6>
 80030b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	667b      	str	r3, [r7, #100]	; 0x64
 80030c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030c8:	663b      	str	r3, [r7, #96]	; 0x60
 80030ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030cc:	fa93 f3a3 	rbit	r3, r3
 80030d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030d2:	4b67      	ldr	r3, [pc, #412]	; (8003270 <HAL_RCC_ClockConfig+0x260>)
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030da:	65ba      	str	r2, [r7, #88]	; 0x58
 80030dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030de:	fa92 f2a2 	rbit	r2, r2
 80030e2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80030e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030e6:	fab2 f282 	clz	r2, r2
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	f042 0220 	orr.w	r2, r2, #32
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	f002 021f 	and.w	r2, r2, #31
 80030f6:	2101      	movs	r1, #1
 80030f8:	fa01 f202 	lsl.w	r2, r1, r2
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d17b      	bne.n	80031fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e0f3      	b.n	80032ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d13c      	bne.n	8003188 <HAL_RCC_ClockConfig+0x178>
 800310e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003112:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003116:	fa93 f3a3 	rbit	r3, r3
 800311a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800311c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311e:	fab3 f383 	clz	r3, r3
 8003122:	b2db      	uxtb	r3, r3
 8003124:	095b      	lsrs	r3, r3, #5
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d102      	bne.n	8003138 <HAL_RCC_ClockConfig+0x128>
 8003132:	4b4f      	ldr	r3, [pc, #316]	; (8003270 <HAL_RCC_ClockConfig+0x260>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	e00f      	b.n	8003158 <HAL_RCC_ClockConfig+0x148>
 8003138:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800313c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	647b      	str	r3, [r7, #68]	; 0x44
 8003146:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800314a:	643b      	str	r3, [r7, #64]	; 0x40
 800314c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800314e:	fa93 f3a3 	rbit	r3, r3
 8003152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003154:	4b46      	ldr	r3, [pc, #280]	; (8003270 <HAL_RCC_ClockConfig+0x260>)
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800315c:	63ba      	str	r2, [r7, #56]	; 0x38
 800315e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003160:	fa92 f2a2 	rbit	r2, r2
 8003164:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003168:	fab2 f282 	clz	r2, r2
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	f042 0220 	orr.w	r2, r2, #32
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	f002 021f 	and.w	r2, r2, #31
 8003178:	2101      	movs	r1, #1
 800317a:	fa01 f202 	lsl.w	r2, r1, r2
 800317e:	4013      	ands	r3, r2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d13a      	bne.n	80031fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e0b2      	b.n	80032ee <HAL_RCC_ClockConfig+0x2de>
 8003188:	2302      	movs	r3, #2
 800318a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318e:	fa93 f3a3 	rbit	r3, r3
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003196:	fab3 f383 	clz	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d102      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x1a0>
 80031aa:	4b31      	ldr	r3, [pc, #196]	; (8003270 <HAL_RCC_ClockConfig+0x260>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	e00d      	b.n	80031cc <HAL_RCC_ClockConfig+0x1bc>
 80031b0:	2302      	movs	r3, #2
 80031b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
 80031bc:	2302      	movs	r3, #2
 80031be:	623b      	str	r3, [r7, #32]
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	fa93 f3a3 	rbit	r3, r3
 80031c6:	61fb      	str	r3, [r7, #28]
 80031c8:	4b29      	ldr	r3, [pc, #164]	; (8003270 <HAL_RCC_ClockConfig+0x260>)
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	2202      	movs	r2, #2
 80031ce:	61ba      	str	r2, [r7, #24]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	fa92 f2a2 	rbit	r2, r2
 80031d6:	617a      	str	r2, [r7, #20]
  return result;
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	fab2 f282 	clz	r2, r2
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	f042 0220 	orr.w	r2, r2, #32
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	f002 021f 	and.w	r2, r2, #31
 80031ea:	2101      	movs	r1, #1
 80031ec:	fa01 f202 	lsl.w	r2, r1, r2
 80031f0:	4013      	ands	r3, r2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e079      	b.n	80032ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031fa:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <HAL_RCC_ClockConfig+0x260>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f023 0203 	bic.w	r2, r3, #3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	491a      	ldr	r1, [pc, #104]	; (8003270 <HAL_RCC_ClockConfig+0x260>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800320c:	f7fe f8fa 	bl	8001404 <HAL_GetTick>
 8003210:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	e00a      	b.n	800322a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003214:	f7fe f8f6 	bl	8001404 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e061      	b.n	80032ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322a:	4b11      	ldr	r3, [pc, #68]	; (8003270 <HAL_RCC_ClockConfig+0x260>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 020c 	and.w	r2, r3, #12
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	429a      	cmp	r2, r3
 800323a:	d1eb      	bne.n	8003214 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <HAL_RCC_ClockConfig+0x25c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d214      	bcs.n	8003274 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b08      	ldr	r3, [pc, #32]	; (800326c <HAL_RCC_ClockConfig+0x25c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 0207 	bic.w	r2, r3, #7
 8003252:	4906      	ldr	r1, [pc, #24]	; (800326c <HAL_RCC_ClockConfig+0x25c>)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	4b04      	ldr	r3, [pc, #16]	; (800326c <HAL_RCC_ClockConfig+0x25c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d005      	beq.n	8003274 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e040      	b.n	80032ee <HAL_RCC_ClockConfig+0x2de>
 800326c:	40022000 	.word	0x40022000
 8003270:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003280:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <HAL_RCC_ClockConfig+0x2e8>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	491a      	ldr	r1, [pc, #104]	; (80032f8 <HAL_RCC_ClockConfig+0x2e8>)
 800328e:	4313      	orrs	r3, r2
 8003290:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800329e:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <HAL_RCC_ClockConfig+0x2e8>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4912      	ldr	r1, [pc, #72]	; (80032f8 <HAL_RCC_ClockConfig+0x2e8>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032b2:	f000 f829 	bl	8003308 <HAL_RCC_GetSysClockFreq>
 80032b6:	4601      	mov	r1, r0
 80032b8:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <HAL_RCC_ClockConfig+0x2e8>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032c0:	22f0      	movs	r2, #240	; 0xf0
 80032c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	fa92 f2a2 	rbit	r2, r2
 80032ca:	60fa      	str	r2, [r7, #12]
  return result;
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	fab2 f282 	clz	r2, r2
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	40d3      	lsrs	r3, r2
 80032d6:	4a09      	ldr	r2, [pc, #36]	; (80032fc <HAL_RCC_ClockConfig+0x2ec>)
 80032d8:	5cd3      	ldrb	r3, [r2, r3]
 80032da:	fa21 f303 	lsr.w	r3, r1, r3
 80032de:	4a08      	ldr	r2, [pc, #32]	; (8003300 <HAL_RCC_ClockConfig+0x2f0>)
 80032e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <HAL_RCC_ClockConfig+0x2f4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fe f848 	bl	800137c <HAL_InitTick>
  
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3778      	adds	r7, #120	; 0x78
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40021000 	.word	0x40021000
 80032fc:	08004f14 	.word	0x08004f14
 8003300:	20000000 	.word	0x20000000
 8003304:	20000004 	.word	0x20000004

08003308 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003308:	b480      	push	{r7}
 800330a:	b08b      	sub	sp, #44	; 0x2c
 800330c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	2300      	movs	r3, #0
 8003314:	61bb      	str	r3, [r7, #24]
 8003316:	2300      	movs	r3, #0
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800331e:	2300      	movs	r3, #0
 8003320:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003322:	4b2a      	ldr	r3, [pc, #168]	; (80033cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b04      	cmp	r3, #4
 8003330:	d002      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x30>
 8003332:	2b08      	cmp	r3, #8
 8003334:	d003      	beq.n	800333e <HAL_RCC_GetSysClockFreq+0x36>
 8003336:	e03f      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003338:	4b25      	ldr	r3, [pc, #148]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800333a:	623b      	str	r3, [r7, #32]
      break;
 800333c:	e03f      	b.n	80033be <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003344:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003348:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	fa92 f2a2 	rbit	r2, r2
 8003350:	607a      	str	r2, [r7, #4]
  return result;
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	fab2 f282 	clz	r2, r2
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	40d3      	lsrs	r3, r2
 800335c:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800335e:	5cd3      	ldrb	r3, [r2, r3]
 8003360:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003362:	4b1a      	ldr	r3, [pc, #104]	; (80033cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	220f      	movs	r2, #15
 800336c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	fa92 f2a2 	rbit	r2, r2
 8003374:	60fa      	str	r2, [r7, #12]
  return result;
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	fab2 f282 	clz	r2, r2
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	40d3      	lsrs	r3, r2
 8003380:	4a15      	ldr	r2, [pc, #84]	; (80033d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003382:	5cd3      	ldrb	r3, [r2, r3]
 8003384:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003390:	4a0f      	ldr	r2, [pc, #60]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	fbb2 f2f3 	udiv	r2, r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	fb02 f303 	mul.w	r3, r2, r3
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
 80033a0:	e007      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033a2:	4a0b      	ldr	r2, [pc, #44]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	fb02 f303 	mul.w	r3, r2, r3
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	623b      	str	r3, [r7, #32]
      break;
 80033b6:	e002      	b.n	80033be <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033ba:	623b      	str	r3, [r7, #32]
      break;
 80033bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033be:	6a3b      	ldr	r3, [r7, #32]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	372c      	adds	r7, #44	; 0x2c
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	40021000 	.word	0x40021000
 80033d0:	007a1200 	.word	0x007a1200
 80033d4:	08004f2c 	.word	0x08004f2c
 80033d8:	08004f3c 	.word	0x08004f3c

080033dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e0:	4b03      	ldr	r3, [pc, #12]	; (80033f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033e2:	681b      	ldr	r3, [r3, #0]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	20000000 	.word	0x20000000

080033f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80033fa:	f7ff ffef 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 80033fe:	4601      	mov	r1, r0
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003408:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800340c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	fa92 f2a2 	rbit	r2, r2
 8003414:	603a      	str	r2, [r7, #0]
  return result;
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	fab2 f282 	clz	r2, r2
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	40d3      	lsrs	r3, r2
 8003420:	4a04      	ldr	r2, [pc, #16]	; (8003434 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003422:	5cd3      	ldrb	r3, [r2, r3]
 8003424:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003428:	4618      	mov	r0, r3
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40021000 	.word	0x40021000
 8003434:	08004f24 	.word	0x08004f24

08003438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800343e:	f7ff ffcd 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 8003442:	4601      	mov	r1, r0
 8003444:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800344c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003450:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	fa92 f2a2 	rbit	r2, r2
 8003458:	603a      	str	r2, [r7, #0]
  return result;
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	fab2 f282 	clz	r2, r2
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	40d3      	lsrs	r3, r2
 8003464:	4a04      	ldr	r2, [pc, #16]	; (8003478 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003466:	5cd3      	ldrb	r3, [r2, r3]
 8003468:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40021000 	.word	0x40021000
 8003478:	08004f24 	.word	0x08004f24

0800347c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b092      	sub	sp, #72	; 0x48
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800348c:	2300      	movs	r3, #0
 800348e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 80d4 	beq.w	8003648 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a0:	4b4e      	ldr	r3, [pc, #312]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10e      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ac:	4b4b      	ldr	r3, [pc, #300]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	4a4a      	ldr	r2, [pc, #296]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b6:	61d3      	str	r3, [r2, #28]
 80034b8:	4b48      	ldr	r3, [pc, #288]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c4:	2301      	movs	r3, #1
 80034c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ca:	4b45      	ldr	r3, [pc, #276]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d118      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d6:	4b42      	ldr	r3, [pc, #264]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a41      	ldr	r2, [pc, #260]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e2:	f7fd ff8f 	bl	8001404 <HAL_GetTick>
 80034e6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e8:	e008      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ea:	f7fd ff8b 	bl	8001404 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b64      	cmp	r3, #100	; 0x64
 80034f6:	d901      	bls.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e1d6      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fc:	4b38      	ldr	r3, [pc, #224]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0f0      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003508:	4b34      	ldr	r3, [pc, #208]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003510:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 8084 	beq.w	8003622 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003522:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003524:	429a      	cmp	r2, r3
 8003526:	d07c      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003528:	4b2c      	ldr	r3, [pc, #176]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003530:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003532:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003536:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353a:	fa93 f3a3 	rbit	r3, r3
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003542:	fab3 f383 	clz	r3, r3
 8003546:	b2db      	uxtb	r3, r3
 8003548:	461a      	mov	r2, r3
 800354a:	4b26      	ldr	r3, [pc, #152]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	461a      	mov	r2, r3
 8003552:	2301      	movs	r3, #1
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800355a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	461a      	mov	r2, r3
 8003576:	2300      	movs	r3, #0
 8003578:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800357a:	4a18      	ldr	r2, [pc, #96]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d04b      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358a:	f7fd ff3b 	bl	8001404 <HAL_GetTick>
 800358e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003590:	e00a      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003592:	f7fd ff37 	bl	8001404 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e180      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80035a8:	2302      	movs	r3, #2
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ae:	fa93 f3a3 	rbit	r3, r3
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
 80035b4:	2302      	movs	r3, #2
 80035b6:	623b      	str	r3, [r7, #32]
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	61fb      	str	r3, [r7, #28]
  return result;
 80035c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f043 0302 	orr.w	r3, r3, #2
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d108      	bne.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80035d6:	4b01      	ldr	r3, [pc, #4]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	e00d      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80035dc:	40021000 	.word	0x40021000
 80035e0:	40007000 	.word	0x40007000
 80035e4:	10908100 	.word	0x10908100
 80035e8:	2302      	movs	r3, #2
 80035ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	4b9a      	ldr	r3, [pc, #616]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	2202      	movs	r2, #2
 80035fa:	613a      	str	r2, [r7, #16]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	fa92 f2a2 	rbit	r2, r2
 8003602:	60fa      	str	r2, [r7, #12]
  return result;
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	fab2 f282 	clz	r2, r2
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	f002 021f 	and.w	r2, r2, #31
 8003616:	2101      	movs	r1, #1
 8003618:	fa01 f202 	lsl.w	r2, r1, r2
 800361c:	4013      	ands	r3, r2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0b7      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003622:	4b8f      	ldr	r3, [pc, #572]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	498c      	ldr	r1, [pc, #560]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003630:	4313      	orrs	r3, r2
 8003632:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003634:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003638:	2b01      	cmp	r3, #1
 800363a:	d105      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363c:	4b88      	ldr	r3, [pc, #544]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	4a87      	ldr	r2, [pc, #540]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003646:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d008      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003654:	4b82      	ldr	r3, [pc, #520]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003658:	f023 0203 	bic.w	r2, r3, #3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	497f      	ldr	r1, [pc, #508]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003662:	4313      	orrs	r3, r2
 8003664:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d008      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003672:	4b7b      	ldr	r3, [pc, #492]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	4978      	ldr	r1, [pc, #480]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003680:	4313      	orrs	r3, r2
 8003682:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003690:	4b73      	ldr	r3, [pc, #460]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	4970      	ldr	r1, [pc, #448]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d008      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036ae:	4b6c      	ldr	r3, [pc, #432]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f023 0210 	bic.w	r2, r3, #16
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	4969      	ldr	r1, [pc, #420]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80036cc:	4b64      	ldr	r3, [pc, #400]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d8:	4961      	ldr	r1, [pc, #388]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d008      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036ea:	4b5d      	ldr	r3, [pc, #372]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	f023 0220 	bic.w	r2, r3, #32
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	495a      	ldr	r1, [pc, #360]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003708:	4b55      	ldr	r3, [pc, #340]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	4952      	ldr	r1, [pc, #328]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003716:	4313      	orrs	r3, r2
 8003718:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d008      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003726:	4b4e      	ldr	r3, [pc, #312]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	494b      	ldr	r1, [pc, #300]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003734:	4313      	orrs	r3, r2
 8003736:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0310 	and.w	r3, r3, #16
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003744:	4b46      	ldr	r3, [pc, #280]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	4943      	ldr	r1, [pc, #268]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003752:	4313      	orrs	r3, r2
 8003754:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800375e:	2b00      	cmp	r3, #0
 8003760:	d008      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003762:	4b3f      	ldr	r3, [pc, #252]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	493c      	ldr	r1, [pc, #240]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003780:	4b37      	ldr	r3, [pc, #220]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	4934      	ldr	r1, [pc, #208]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800378e:	4313      	orrs	r3, r2
 8003790:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379a:	2b00      	cmp	r3, #0
 800379c:	d008      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800379e:	4b30      	ldr	r3, [pc, #192]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	492d      	ldr	r1, [pc, #180]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80037bc:	4b28      	ldr	r3, [pc, #160]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c8:	4925      	ldr	r1, [pc, #148]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d008      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80037da:	4b21      	ldr	r3, [pc, #132]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	491e      	ldr	r1, [pc, #120]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80037f8:	4b19      	ldr	r3, [pc, #100]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003804:	4916      	ldr	r1, [pc, #88]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003806:	4313      	orrs	r3, r2
 8003808:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d008      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003816:	4b12      	ldr	r3, [pc, #72]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003822:	490f      	ldr	r1, [pc, #60]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003824:	4313      	orrs	r3, r2
 8003826:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003838:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003840:	4907      	ldr	r1, [pc, #28]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003842:	4313      	orrs	r3, r2
 8003844:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00c      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003852:	4b03      	ldr	r3, [pc, #12]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	e002      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000
 8003864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003866:	4913      	ldr	r1, [pc, #76]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003868:	4313      	orrs	r3, r2
 800386a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003878:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003884:	490b      	ldr	r1, [pc, #44]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003886:	4313      	orrs	r3, r2
 8003888:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d008      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003896:	4b07      	ldr	r3, [pc, #28]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a2:	4904      	ldr	r1, [pc, #16]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3748      	adds	r7, #72	; 0x48
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40021000 	.word	0x40021000

080038b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e040      	b.n	800394c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd fc9e 	bl	800121c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2224      	movs	r2, #36	; 0x24
 80038e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0201 	bic.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fbdc 	bl	80040b4 <UART_SetConfig>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e022      	b.n	800394c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fda6 	bl	8004460 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003922:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003932:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 fe2d 	bl	80045a4 <UART_CheckIdleState>
 800394a:	4603      	mov	r3, r0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003954:	b480      	push	{r7}
 8003956:	b08b      	sub	sp, #44	; 0x2c
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	4613      	mov	r3, r2
 8003960:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003966:	2b20      	cmp	r3, #32
 8003968:	d156      	bne.n	8003a18 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_UART_Transmit_IT+0x22>
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e04f      	b.n	8003a1a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_UART_Transmit_IT+0x34>
 8003984:	2302      	movs	r3, #2
 8003986:	e048      	b.n	8003a1a <HAL_UART_Transmit_IT+0xc6>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	88fa      	ldrh	r2, [r7, #6]
 800399a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	88fa      	ldrh	r2, [r7, #6]
 80039a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2221      	movs	r2, #33	; 0x21
 80039b8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c2:	d107      	bne.n	80039d4 <HAL_UART_Transmit_IT+0x80>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d103      	bne.n	80039d4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4a16      	ldr	r2, [pc, #88]	; (8003a28 <HAL_UART_Transmit_IT+0xd4>)
 80039d0:	669a      	str	r2, [r3, #104]	; 0x68
 80039d2:	e002      	b.n	80039da <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4a15      	ldr	r2, [pc, #84]	; (8003a2c <HAL_UART_Transmit_IT+0xd8>)
 80039d8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	e853 3f00 	ldrex	r3, [r3]
 80039ee:	613b      	str	r3, [r7, #16]
   return(result);
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	623b      	str	r3, [r7, #32]
 8003a02:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a04:	69f9      	ldr	r1, [r7, #28]
 8003a06:	6a3a      	ldr	r2, [r7, #32]
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e6      	bne.n	80039e2 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	e000      	b.n	8003a1a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003a18:	2302      	movs	r3, #2
  }
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	372c      	adds	r7, #44	; 0x2c
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	08004ac3 	.word	0x08004ac3
 8003a2c:	08004a0b 	.word	0x08004a0b

08003a30 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08a      	sub	sp, #40	; 0x28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d13d      	bne.n	8003ac2 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_UART_Receive_IT+0x22>
 8003a4c:	88fb      	ldrh	r3, [r7, #6]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e036      	b.n	8003ac4 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_UART_Receive_IT+0x34>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e02f      	b.n	8003ac4 <HAL_UART_Receive_IT+0x94>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d018      	beq.n	8003ab2 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	623b      	str	r3, [r7, #32]
 8003aa0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	69f9      	ldr	r1, [r7, #28]
 8003aa4:	6a3a      	ldr	r2, [r7, #32]
 8003aa6:	e841 2300 	strex	r3, r2, [r1]
 8003aaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e6      	bne.n	8003a80 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ab2:	88fb      	ldrh	r3, [r7, #6]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 fe81 	bl	80047c0 <UART_Start_Receive_IT>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	e000      	b.n	8003ac4 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
  }
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3728      	adds	r7, #40	; 0x28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b0ba      	sub	sp, #232	; 0xe8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003af2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003af6:	f640 030f 	movw	r3, #2063	; 0x80f
 8003afa:	4013      	ands	r3, r2
 8003afc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003b00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d115      	bne.n	8003b34 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00f      	beq.n	8003b34 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d009      	beq.n	8003b34 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 82a3 	beq.w	8004070 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	4798      	blx	r3
      }
      return;
 8003b32:	e29d      	b.n	8004070 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8117 	beq.w	8003d6c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003b4e:	4b85      	ldr	r3, [pc, #532]	; (8003d64 <HAL_UART_IRQHandler+0x298>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 810a 	beq.w	8003d6c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d011      	beq.n	8003b88 <HAL_UART_IRQHandler+0xbc>
 8003b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00b      	beq.n	8003b88 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2201      	movs	r2, #1
 8003b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b7e:	f043 0201 	orr.w	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d011      	beq.n	8003bb8 <HAL_UART_IRQHandler+0xec>
 8003b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00b      	beq.n	8003bb8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bae:	f043 0204 	orr.w	r2, r3, #4
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d011      	beq.n	8003be8 <HAL_UART_IRQHandler+0x11c>
 8003bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00b      	beq.n	8003be8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bde:	f043 0202 	orr.w	r2, r3, #2
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d017      	beq.n	8003c24 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d105      	bne.n	8003c0c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c04:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00b      	beq.n	8003c24 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2208      	movs	r2, #8
 8003c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c1a:	f043 0208 	orr.w	r2, r3, #8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d012      	beq.n	8003c56 <HAL_UART_IRQHandler+0x18a>
 8003c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00c      	beq.n	8003c56 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c4c:	f043 0220 	orr.w	r2, r3, #32
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 8209 	beq.w	8004074 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00d      	beq.n	8003c8a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d007      	beq.n	8003c8a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9e:	2b40      	cmp	r3, #64	; 0x40
 8003ca0:	d005      	beq.n	8003cae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ca6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d04f      	beq.n	8003d4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fe32 	bl	8004918 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbe:	2b40      	cmp	r3, #64	; 0x40
 8003cc0:	d141      	bne.n	8003d46 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3308      	adds	r3, #8
 8003cea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003cee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003cfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1d9      	bne.n	8003cc2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d013      	beq.n	8003d3e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	4a13      	ldr	r2, [pc, #76]	; (8003d68 <HAL_UART_IRQHandler+0x29c>)
 8003d1c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fd fcc4 	bl	80016b0 <HAL_DMA_Abort_IT>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d017      	beq.n	8003d5e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d3c:	e00f      	b.n	8003d5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f9a2 	bl	8004088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d44:	e00b      	b.n	8003d5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f99e 	bl	8004088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d4c:	e007      	b.n	8003d5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f99a 	bl	8004088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003d5c:	e18a      	b.n	8004074 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5e:	bf00      	nop
    return;
 8003d60:	e188      	b.n	8004074 <HAL_UART_IRQHandler+0x5a8>
 8003d62:	bf00      	nop
 8003d64:	04000120 	.word	0x04000120
 8003d68:	080049df 	.word	0x080049df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	f040 8143 	bne.w	8003ffc <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d7a:	f003 0310 	and.w	r3, r3, #16
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 813c 	beq.w	8003ffc <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d88:	f003 0310 	and.w	r3, r3, #16
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 8135 	beq.w	8003ffc <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2210      	movs	r2, #16
 8003d98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	f040 80b1 	bne.w	8003f0c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003db6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 815c 	beq.w	8004078 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003dc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	f080 8154 	bcs.w	8004078 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	f000 8085 	beq.w	8003ef0 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003dfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e14:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e18:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e20:	e841 2300 	strex	r3, r2, [r1]
 8003e24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1da      	bne.n	8003de6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3308      	adds	r3, #8
 8003e36:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e3a:	e853 3f00 	ldrex	r3, [r3]
 8003e3e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e42:	f023 0301 	bic.w	r3, r3, #1
 8003e46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3308      	adds	r3, #8
 8003e50:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e54:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e58:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e60:	e841 2300 	strex	r3, r2, [r1]
 8003e64:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e1      	bne.n	8003e30 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3308      	adds	r3, #8
 8003e72:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e76:	e853 3f00 	ldrex	r3, [r3]
 8003e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3308      	adds	r3, #8
 8003e8c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e90:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e3      	bne.n	8003e6c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec0:	f023 0310 	bic.w	r3, r3, #16
 8003ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ed2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ed4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ed8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e4      	bne.n	8003eb0 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fd fba7 	bl	800163e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	4619      	mov	r1, r3
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f8c9 	bl	800409c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f0a:	e0b5      	b.n	8004078 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 80a7 	beq.w	800407c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003f2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 80a2 	beq.w	800407c <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f40:	e853 3f00 	ldrex	r3, [r3]
 8003f44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f5c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e4      	bne.n	8003f38 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3308      	adds	r3, #8
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3308      	adds	r3, #8
 8003f8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f92:	633a      	str	r2, [r7, #48]	; 0x30
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e3      	bne.n	8003f6e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f023 0310 	bic.w	r3, r3, #16
 8003fcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fda:	61fb      	str	r3, [r7, #28]
 8003fdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	69b9      	ldr	r1, [r7, #24]
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	617b      	str	r3, [r7, #20]
   return(result);
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e4      	bne.n	8003fb8 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f851 	bl	800409c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ffa:	e03f      	b.n	800407c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00e      	beq.n	8004026 <HAL_UART_IRQHandler+0x55a>
 8004008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800400c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800401c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 ff35 	bl	8004e8e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004024:	e02d      	b.n	8004082 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800402a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00e      	beq.n	8004050 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403a:	2b00      	cmp	r3, #0
 800403c:	d008      	beq.n	8004050 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004042:	2b00      	cmp	r3, #0
 8004044:	d01c      	beq.n	8004080 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4798      	blx	r3
    }
    return;
 800404e:	e017      	b.n	8004080 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d012      	beq.n	8004082 <HAL_UART_IRQHandler+0x5b6>
 800405c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00c      	beq.n	8004082 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fd8a 	bl	8004b82 <UART_EndTransmit_IT>
    return;
 800406e:	e008      	b.n	8004082 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004070:	bf00      	nop
 8004072:	e006      	b.n	8004082 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004074:	bf00      	nop
 8004076:	e004      	b.n	8004082 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004078:	bf00      	nop
 800407a:	e002      	b.n	8004082 <HAL_UART_IRQHandler+0x5b6>
      return;
 800407c:	bf00      	nop
 800407e:	e000      	b.n	8004082 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004080:	bf00      	nop
  }

}
 8004082:	37e8      	adds	r7, #232	; 0xe8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	4b92      	ldr	r3, [pc, #584]	; (8004328 <UART_SetConfig+0x274>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6812      	ldr	r2, [r2, #0]
 80040e6:	6979      	ldr	r1, [r7, #20]
 80040e8:	430b      	orrs	r3, r1
 80040ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	430a      	orrs	r2, r1
 8004124:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a80      	ldr	r2, [pc, #512]	; (800432c <UART_SetConfig+0x278>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d120      	bne.n	8004172 <UART_SetConfig+0xbe>
 8004130:	4b7f      	ldr	r3, [pc, #508]	; (8004330 <UART_SetConfig+0x27c>)
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	2b03      	cmp	r3, #3
 800413a:	d817      	bhi.n	800416c <UART_SetConfig+0xb8>
 800413c:	a201      	add	r2, pc, #4	; (adr r2, 8004144 <UART_SetConfig+0x90>)
 800413e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004142:	bf00      	nop
 8004144:	08004155 	.word	0x08004155
 8004148:	08004161 	.word	0x08004161
 800414c:	08004167 	.word	0x08004167
 8004150:	0800415b 	.word	0x0800415b
 8004154:	2301      	movs	r3, #1
 8004156:	77fb      	strb	r3, [r7, #31]
 8004158:	e0b5      	b.n	80042c6 <UART_SetConfig+0x212>
 800415a:	2302      	movs	r3, #2
 800415c:	77fb      	strb	r3, [r7, #31]
 800415e:	e0b2      	b.n	80042c6 <UART_SetConfig+0x212>
 8004160:	2304      	movs	r3, #4
 8004162:	77fb      	strb	r3, [r7, #31]
 8004164:	e0af      	b.n	80042c6 <UART_SetConfig+0x212>
 8004166:	2308      	movs	r3, #8
 8004168:	77fb      	strb	r3, [r7, #31]
 800416a:	e0ac      	b.n	80042c6 <UART_SetConfig+0x212>
 800416c:	2310      	movs	r3, #16
 800416e:	77fb      	strb	r3, [r7, #31]
 8004170:	e0a9      	b.n	80042c6 <UART_SetConfig+0x212>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a6f      	ldr	r2, [pc, #444]	; (8004334 <UART_SetConfig+0x280>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d124      	bne.n	80041c6 <UART_SetConfig+0x112>
 800417c:	4b6c      	ldr	r3, [pc, #432]	; (8004330 <UART_SetConfig+0x27c>)
 800417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004180:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004184:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004188:	d011      	beq.n	80041ae <UART_SetConfig+0xfa>
 800418a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800418e:	d817      	bhi.n	80041c0 <UART_SetConfig+0x10c>
 8004190:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004194:	d011      	beq.n	80041ba <UART_SetConfig+0x106>
 8004196:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800419a:	d811      	bhi.n	80041c0 <UART_SetConfig+0x10c>
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <UART_SetConfig+0xf4>
 80041a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a4:	d006      	beq.n	80041b4 <UART_SetConfig+0x100>
 80041a6:	e00b      	b.n	80041c0 <UART_SetConfig+0x10c>
 80041a8:	2300      	movs	r3, #0
 80041aa:	77fb      	strb	r3, [r7, #31]
 80041ac:	e08b      	b.n	80042c6 <UART_SetConfig+0x212>
 80041ae:	2302      	movs	r3, #2
 80041b0:	77fb      	strb	r3, [r7, #31]
 80041b2:	e088      	b.n	80042c6 <UART_SetConfig+0x212>
 80041b4:	2304      	movs	r3, #4
 80041b6:	77fb      	strb	r3, [r7, #31]
 80041b8:	e085      	b.n	80042c6 <UART_SetConfig+0x212>
 80041ba:	2308      	movs	r3, #8
 80041bc:	77fb      	strb	r3, [r7, #31]
 80041be:	e082      	b.n	80042c6 <UART_SetConfig+0x212>
 80041c0:	2310      	movs	r3, #16
 80041c2:	77fb      	strb	r3, [r7, #31]
 80041c4:	e07f      	b.n	80042c6 <UART_SetConfig+0x212>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a5b      	ldr	r2, [pc, #364]	; (8004338 <UART_SetConfig+0x284>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d124      	bne.n	800421a <UART_SetConfig+0x166>
 80041d0:	4b57      	ldr	r3, [pc, #348]	; (8004330 <UART_SetConfig+0x27c>)
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80041d8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80041dc:	d011      	beq.n	8004202 <UART_SetConfig+0x14e>
 80041de:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80041e2:	d817      	bhi.n	8004214 <UART_SetConfig+0x160>
 80041e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041e8:	d011      	beq.n	800420e <UART_SetConfig+0x15a>
 80041ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041ee:	d811      	bhi.n	8004214 <UART_SetConfig+0x160>
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <UART_SetConfig+0x148>
 80041f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041f8:	d006      	beq.n	8004208 <UART_SetConfig+0x154>
 80041fa:	e00b      	b.n	8004214 <UART_SetConfig+0x160>
 80041fc:	2300      	movs	r3, #0
 80041fe:	77fb      	strb	r3, [r7, #31]
 8004200:	e061      	b.n	80042c6 <UART_SetConfig+0x212>
 8004202:	2302      	movs	r3, #2
 8004204:	77fb      	strb	r3, [r7, #31]
 8004206:	e05e      	b.n	80042c6 <UART_SetConfig+0x212>
 8004208:	2304      	movs	r3, #4
 800420a:	77fb      	strb	r3, [r7, #31]
 800420c:	e05b      	b.n	80042c6 <UART_SetConfig+0x212>
 800420e:	2308      	movs	r3, #8
 8004210:	77fb      	strb	r3, [r7, #31]
 8004212:	e058      	b.n	80042c6 <UART_SetConfig+0x212>
 8004214:	2310      	movs	r3, #16
 8004216:	77fb      	strb	r3, [r7, #31]
 8004218:	e055      	b.n	80042c6 <UART_SetConfig+0x212>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a47      	ldr	r2, [pc, #284]	; (800433c <UART_SetConfig+0x288>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d124      	bne.n	800426e <UART_SetConfig+0x1ba>
 8004224:	4b42      	ldr	r3, [pc, #264]	; (8004330 <UART_SetConfig+0x27c>)
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800422c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004230:	d011      	beq.n	8004256 <UART_SetConfig+0x1a2>
 8004232:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004236:	d817      	bhi.n	8004268 <UART_SetConfig+0x1b4>
 8004238:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800423c:	d011      	beq.n	8004262 <UART_SetConfig+0x1ae>
 800423e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004242:	d811      	bhi.n	8004268 <UART_SetConfig+0x1b4>
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <UART_SetConfig+0x19c>
 8004248:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800424c:	d006      	beq.n	800425c <UART_SetConfig+0x1a8>
 800424e:	e00b      	b.n	8004268 <UART_SetConfig+0x1b4>
 8004250:	2300      	movs	r3, #0
 8004252:	77fb      	strb	r3, [r7, #31]
 8004254:	e037      	b.n	80042c6 <UART_SetConfig+0x212>
 8004256:	2302      	movs	r3, #2
 8004258:	77fb      	strb	r3, [r7, #31]
 800425a:	e034      	b.n	80042c6 <UART_SetConfig+0x212>
 800425c:	2304      	movs	r3, #4
 800425e:	77fb      	strb	r3, [r7, #31]
 8004260:	e031      	b.n	80042c6 <UART_SetConfig+0x212>
 8004262:	2308      	movs	r3, #8
 8004264:	77fb      	strb	r3, [r7, #31]
 8004266:	e02e      	b.n	80042c6 <UART_SetConfig+0x212>
 8004268:	2310      	movs	r3, #16
 800426a:	77fb      	strb	r3, [r7, #31]
 800426c:	e02b      	b.n	80042c6 <UART_SetConfig+0x212>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a33      	ldr	r2, [pc, #204]	; (8004340 <UART_SetConfig+0x28c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d124      	bne.n	80042c2 <UART_SetConfig+0x20e>
 8004278:	4b2d      	ldr	r3, [pc, #180]	; (8004330 <UART_SetConfig+0x27c>)
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004280:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004284:	d011      	beq.n	80042aa <UART_SetConfig+0x1f6>
 8004286:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800428a:	d817      	bhi.n	80042bc <UART_SetConfig+0x208>
 800428c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004290:	d011      	beq.n	80042b6 <UART_SetConfig+0x202>
 8004292:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004296:	d811      	bhi.n	80042bc <UART_SetConfig+0x208>
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <UART_SetConfig+0x1f0>
 800429c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042a0:	d006      	beq.n	80042b0 <UART_SetConfig+0x1fc>
 80042a2:	e00b      	b.n	80042bc <UART_SetConfig+0x208>
 80042a4:	2300      	movs	r3, #0
 80042a6:	77fb      	strb	r3, [r7, #31]
 80042a8:	e00d      	b.n	80042c6 <UART_SetConfig+0x212>
 80042aa:	2302      	movs	r3, #2
 80042ac:	77fb      	strb	r3, [r7, #31]
 80042ae:	e00a      	b.n	80042c6 <UART_SetConfig+0x212>
 80042b0:	2304      	movs	r3, #4
 80042b2:	77fb      	strb	r3, [r7, #31]
 80042b4:	e007      	b.n	80042c6 <UART_SetConfig+0x212>
 80042b6:	2308      	movs	r3, #8
 80042b8:	77fb      	strb	r3, [r7, #31]
 80042ba:	e004      	b.n	80042c6 <UART_SetConfig+0x212>
 80042bc:	2310      	movs	r3, #16
 80042be:	77fb      	strb	r3, [r7, #31]
 80042c0:	e001      	b.n	80042c6 <UART_SetConfig+0x212>
 80042c2:	2310      	movs	r3, #16
 80042c4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ce:	d16c      	bne.n	80043aa <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80042d0:	7ffb      	ldrb	r3, [r7, #31]
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d838      	bhi.n	8004348 <UART_SetConfig+0x294>
 80042d6:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <UART_SetConfig+0x228>)
 80042d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042dc:	08004301 	.word	0x08004301
 80042e0:	08004309 	.word	0x08004309
 80042e4:	08004311 	.word	0x08004311
 80042e8:	08004349 	.word	0x08004349
 80042ec:	08004317 	.word	0x08004317
 80042f0:	08004349 	.word	0x08004349
 80042f4:	08004349 	.word	0x08004349
 80042f8:	08004349 	.word	0x08004349
 80042fc:	0800431f 	.word	0x0800431f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004300:	f7ff f878 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 8004304:	61b8      	str	r0, [r7, #24]
        break;
 8004306:	e024      	b.n	8004352 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004308:	f7ff f896 	bl	8003438 <HAL_RCC_GetPCLK2Freq>
 800430c:	61b8      	str	r0, [r7, #24]
        break;
 800430e:	e020      	b.n	8004352 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004310:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <UART_SetConfig+0x290>)
 8004312:	61bb      	str	r3, [r7, #24]
        break;
 8004314:	e01d      	b.n	8004352 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004316:	f7fe fff7 	bl	8003308 <HAL_RCC_GetSysClockFreq>
 800431a:	61b8      	str	r0, [r7, #24]
        break;
 800431c:	e019      	b.n	8004352 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800431e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004322:	61bb      	str	r3, [r7, #24]
        break;
 8004324:	e015      	b.n	8004352 <UART_SetConfig+0x29e>
 8004326:	bf00      	nop
 8004328:	efff69f3 	.word	0xefff69f3
 800432c:	40013800 	.word	0x40013800
 8004330:	40021000 	.word	0x40021000
 8004334:	40004400 	.word	0x40004400
 8004338:	40004800 	.word	0x40004800
 800433c:	40004c00 	.word	0x40004c00
 8004340:	40005000 	.word	0x40005000
 8004344:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	77bb      	strb	r3, [r7, #30]
        break;
 8004350:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d075      	beq.n	8004444 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	005a      	lsls	r2, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	085b      	lsrs	r3, r3, #1
 8004362:	441a      	add	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	fbb2 f3f3 	udiv	r3, r2, r3
 800436c:	b29b      	uxth	r3, r3
 800436e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	2b0f      	cmp	r3, #15
 8004374:	d916      	bls.n	80043a4 <UART_SetConfig+0x2f0>
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800437c:	d212      	bcs.n	80043a4 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	b29b      	uxth	r3, r3
 8004382:	f023 030f 	bic.w	r3, r3, #15
 8004386:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	085b      	lsrs	r3, r3, #1
 800438c:	b29b      	uxth	r3, r3
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	b29a      	uxth	r2, r3
 8004394:	89fb      	ldrh	r3, [r7, #14]
 8004396:	4313      	orrs	r3, r2
 8004398:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	89fa      	ldrh	r2, [r7, #14]
 80043a0:	60da      	str	r2, [r3, #12]
 80043a2:	e04f      	b.n	8004444 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	77bb      	strb	r3, [r7, #30]
 80043a8:	e04c      	b.n	8004444 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043aa:	7ffb      	ldrb	r3, [r7, #31]
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d828      	bhi.n	8004402 <UART_SetConfig+0x34e>
 80043b0:	a201      	add	r2, pc, #4	; (adr r2, 80043b8 <UART_SetConfig+0x304>)
 80043b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b6:	bf00      	nop
 80043b8:	080043dd 	.word	0x080043dd
 80043bc:	080043e5 	.word	0x080043e5
 80043c0:	080043ed 	.word	0x080043ed
 80043c4:	08004403 	.word	0x08004403
 80043c8:	080043f3 	.word	0x080043f3
 80043cc:	08004403 	.word	0x08004403
 80043d0:	08004403 	.word	0x08004403
 80043d4:	08004403 	.word	0x08004403
 80043d8:	080043fb 	.word	0x080043fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043dc:	f7ff f80a 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 80043e0:	61b8      	str	r0, [r7, #24]
        break;
 80043e2:	e013      	b.n	800440c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043e4:	f7ff f828 	bl	8003438 <HAL_RCC_GetPCLK2Freq>
 80043e8:	61b8      	str	r0, [r7, #24]
        break;
 80043ea:	e00f      	b.n	800440c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043ec:	4b1b      	ldr	r3, [pc, #108]	; (800445c <UART_SetConfig+0x3a8>)
 80043ee:	61bb      	str	r3, [r7, #24]
        break;
 80043f0:	e00c      	b.n	800440c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043f2:	f7fe ff89 	bl	8003308 <HAL_RCC_GetSysClockFreq>
 80043f6:	61b8      	str	r0, [r7, #24]
        break;
 80043f8:	e008      	b.n	800440c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043fe:	61bb      	str	r3, [r7, #24]
        break;
 8004400:	e004      	b.n	800440c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	77bb      	strb	r3, [r7, #30]
        break;
 800440a:	bf00      	nop
    }

    if (pclk != 0U)
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d018      	beq.n	8004444 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	085a      	lsrs	r2, r3, #1
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	441a      	add	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	fbb2 f3f3 	udiv	r3, r2, r3
 8004424:	b29b      	uxth	r3, r3
 8004426:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b0f      	cmp	r3, #15
 800442c:	d908      	bls.n	8004440 <UART_SetConfig+0x38c>
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004434:	d204      	bcs.n	8004440 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	60da      	str	r2, [r3, #12]
 800443e:	e001      	b.n	8004444 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004450:	7fbb      	ldrb	r3, [r7, #30]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3720      	adds	r7, #32
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	007a1200 	.word	0x007a1200

08004460 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01a      	beq.n	8004576 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800455e:	d10a      	bne.n	8004576 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	605a      	str	r2, [r3, #4]
  }
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045b4:	f7fc ff26 	bl	8001404 <HAL_GetTick>
 80045b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d10e      	bne.n	80045e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f82d 	bl	8004636 <UART_WaitOnFlagUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e023      	b.n	800462e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d10e      	bne.n	8004612 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f817 	bl	8004636 <UART_WaitOnFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e00d      	b.n	800462e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b09c      	sub	sp, #112	; 0x70
 800463a:	af00      	add	r7, sp, #0
 800463c:	60f8      	str	r0, [r7, #12]
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	603b      	str	r3, [r7, #0]
 8004642:	4613      	mov	r3, r2
 8004644:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004646:	e0a5      	b.n	8004794 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800464a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464e:	f000 80a1 	beq.w	8004794 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004652:	f7fc fed7 	bl	8001404 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800465e:	429a      	cmp	r2, r3
 8004660:	d302      	bcc.n	8004668 <UART_WaitOnFlagUntilTimeout+0x32>
 8004662:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004664:	2b00      	cmp	r3, #0
 8004666:	d13e      	bne.n	80046e6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004670:	e853 3f00 	ldrex	r3, [r3]
 8004674:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004678:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800467c:	667b      	str	r3, [r7, #100]	; 0x64
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004686:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004688:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800468c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1e6      	bne.n	8004668 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3308      	adds	r3, #8
 80046a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	663b      	str	r3, [r7, #96]	; 0x60
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3308      	adds	r3, #8
 80046b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80046bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80046c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e5      	bne.n	800469a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2220      	movs	r2, #32
 80046d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2220      	movs	r2, #32
 80046d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e067      	b.n	80047b6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d04f      	beq.n	8004794 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004702:	d147      	bne.n	8004794 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800470c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	e853 3f00 	ldrex	r3, [r3]
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004722:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	461a      	mov	r2, r3
 800472a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800472c:	637b      	str	r3, [r7, #52]	; 0x34
 800472e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004730:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004734:	e841 2300 	strex	r3, r2, [r1]
 8004738:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800473a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e6      	bne.n	800470e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3308      	adds	r3, #8
 8004746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	e853 3f00 	ldrex	r3, [r3]
 800474e:	613b      	str	r3, [r7, #16]
   return(result);
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f023 0301 	bic.w	r3, r3, #1
 8004756:	66bb      	str	r3, [r7, #104]	; 0x68
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3308      	adds	r3, #8
 800475e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004760:	623a      	str	r2, [r7, #32]
 8004762:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004764:	69f9      	ldr	r1, [r7, #28]
 8004766:	6a3a      	ldr	r2, [r7, #32]
 8004768:	e841 2300 	strex	r3, r2, [r1]
 800476c:	61bb      	str	r3, [r7, #24]
   return(result);
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e5      	bne.n	8004740 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2220      	movs	r2, #32
 8004778:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2220      	movs	r2, #32
 800477e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e010      	b.n	80047b6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69da      	ldr	r2, [r3, #28]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	4013      	ands	r3, r2
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	bf0c      	ite	eq
 80047a4:	2301      	moveq	r3, #1
 80047a6:	2300      	movne	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	461a      	mov	r2, r3
 80047ac:	79fb      	ldrb	r3, [r7, #7]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	f43f af4a 	beq.w	8004648 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3770      	adds	r7, #112	; 0x70
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b091      	sub	sp, #68	; 0x44
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	4613      	mov	r3, r2
 80047cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	88fa      	ldrh	r2, [r7, #6]
 80047d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	88fa      	ldrh	r2, [r7, #6]
 80047e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f2:	d10e      	bne.n	8004812 <UART_Start_Receive_IT+0x52>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d105      	bne.n	8004808 <UART_Start_Receive_IT+0x48>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004802:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004806:	e02d      	b.n	8004864 <UART_Start_Receive_IT+0xa4>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	22ff      	movs	r2, #255	; 0xff
 800480c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004810:	e028      	b.n	8004864 <UART_Start_Receive_IT+0xa4>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10d      	bne.n	8004836 <UART_Start_Receive_IT+0x76>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d104      	bne.n	800482c <UART_Start_Receive_IT+0x6c>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	22ff      	movs	r2, #255	; 0xff
 8004826:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800482a:	e01b      	b.n	8004864 <UART_Start_Receive_IT+0xa4>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	227f      	movs	r2, #127	; 0x7f
 8004830:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004834:	e016      	b.n	8004864 <UART_Start_Receive_IT+0xa4>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800483e:	d10d      	bne.n	800485c <UART_Start_Receive_IT+0x9c>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d104      	bne.n	8004852 <UART_Start_Receive_IT+0x92>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	227f      	movs	r2, #127	; 0x7f
 800484c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004850:	e008      	b.n	8004864 <UART_Start_Receive_IT+0xa4>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	223f      	movs	r2, #63	; 0x3f
 8004856:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800485a:	e003      	b.n	8004864 <UART_Start_Receive_IT+0xa4>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2222      	movs	r2, #34	; 0x22
 8004870:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3308      	adds	r3, #8
 8004878:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487c:	e853 3f00 	ldrex	r3, [r3]
 8004880:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3308      	adds	r3, #8
 8004890:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004892:	637a      	str	r2, [r7, #52]	; 0x34
 8004894:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004896:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004898:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800489a:	e841 2300 	strex	r3, r2, [r1]
 800489e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1e5      	bne.n	8004872 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ae:	d107      	bne.n	80048c0 <UART_Start_Receive_IT+0x100>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d103      	bne.n	80048c0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4a15      	ldr	r2, [pc, #84]	; (8004910 <UART_Start_Receive_IT+0x150>)
 80048bc:	665a      	str	r2, [r3, #100]	; 0x64
 80048be:	e002      	b.n	80048c6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4a14      	ldr	r2, [pc, #80]	; (8004914 <UART_Start_Receive_IT+0x154>)
 80048c4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	613b      	str	r3, [r7, #16]
   return(result);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80048e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ec:	623b      	str	r3, [r7, #32]
 80048ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	69f9      	ldr	r1, [r7, #28]
 80048f2:	6a3a      	ldr	r2, [r7, #32]
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e6      	bne.n	80048ce <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3744      	adds	r7, #68	; 0x44
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	08004d33 	.word	0x08004d33
 8004914:	08004bd7 	.word	0x08004bd7

08004918 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004918:	b480      	push	{r7}
 800491a:	b095      	sub	sp, #84	; 0x54
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004928:	e853 3f00 	ldrex	r3, [r3]
 800492c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004934:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800493e:	643b      	str	r3, [r7, #64]	; 0x40
 8004940:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004942:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004944:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004946:	e841 2300 	strex	r3, r2, [r1]
 800494a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1e6      	bne.n	8004920 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3308      	adds	r3, #8
 8004958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	61fb      	str	r3, [r7, #28]
   return(result);
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	f023 0301 	bic.w	r3, r3, #1
 8004968:	64bb      	str	r3, [r7, #72]	; 0x48
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3308      	adds	r3, #8
 8004970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004972:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004974:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004976:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800497a:	e841 2300 	strex	r3, r2, [r1]
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1e5      	bne.n	8004952 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498a:	2b01      	cmp	r3, #1
 800498c:	d118      	bne.n	80049c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	e853 3f00 	ldrex	r3, [r3]
 800499a:	60bb      	str	r3, [r7, #8]
   return(result);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f023 0310 	bic.w	r3, r3, #16
 80049a2:	647b      	str	r3, [r7, #68]	; 0x44
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	461a      	mov	r2, r3
 80049aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	6979      	ldr	r1, [r7, #20]
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	613b      	str	r3, [r7, #16]
   return(result);
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e6      	bne.n	800498e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80049d2:	bf00      	nop
 80049d4:	3754      	adds	r7, #84	; 0x54
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b084      	sub	sp, #16
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f7ff fb43 	bl	8004088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a02:	bf00      	nop
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b08f      	sub	sp, #60	; 0x3c
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a16:	2b21      	cmp	r3, #33	; 0x21
 8004a18:	d14d      	bne.n	8004ab6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d132      	bne.n	8004a8c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	e853 3f00 	ldrex	r3, [r3]
 8004a32:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a46:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a4c:	e841 2300 	strex	r3, r2, [r1]
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e6      	bne.n	8004a26 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	e853 3f00 	ldrex	r3, [r3]
 8004a64:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	461a      	mov	r2, r3
 8004a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a76:	61bb      	str	r3, [r7, #24]
 8004a78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7a:	6979      	ldr	r1, [r7, #20]
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	e841 2300 	strex	r3, r2, [r1]
 8004a82:	613b      	str	r3, [r7, #16]
   return(result);
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1e6      	bne.n	8004a58 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004a8a:	e014      	b.n	8004ab6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a90:	781a      	ldrb	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	b292      	uxth	r2, r2
 8004a98:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004ab6:	bf00      	nop
 8004ab8:	373c      	adds	r7, #60	; 0x3c
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b091      	sub	sp, #68	; 0x44
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ace:	2b21      	cmp	r3, #33	; 0x21
 8004ad0:	d151      	bne.n	8004b76 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d132      	bne.n	8004b44 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	e853 3f00 	ldrex	r3, [r3]
 8004aea:	623b      	str	r3, [r7, #32]
   return(result);
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004af2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afc:	633b      	str	r3, [r7, #48]	; 0x30
 8004afe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e6      	bne.n	8004ade <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	e853 3f00 	ldrex	r3, [r3]
 8004b1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b24:	637b      	str	r3, [r7, #52]	; 0x34
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2e:	61fb      	str	r3, [r7, #28]
 8004b30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b32:	69b9      	ldr	r1, [r7, #24]
 8004b34:	69fa      	ldr	r2, [r7, #28]
 8004b36:	e841 2300 	strex	r3, r2, [r1]
 8004b3a:	617b      	str	r3, [r7, #20]
   return(result);
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1e6      	bne.n	8004b10 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004b42:	e018      	b.n	8004b76 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b48:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b4c:	881a      	ldrh	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b56:	b292      	uxth	r2, r2
 8004b58:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5e:	1c9a      	adds	r2, r3, #2
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004b76:	bf00      	nop
 8004b78:	3744      	adds	r7, #68	; 0x44
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b088      	sub	sp, #32
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	e853 3f00 	ldrex	r3, [r3]
 8004b96:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b9e:	61fb      	str	r3, [r7, #28]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bac:	6979      	ldr	r1, [r7, #20]
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	e841 2300 	strex	r3, r2, [r1]
 8004bb4:	613b      	str	r3, [r7, #16]
   return(result);
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1e6      	bne.n	8004b8a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7fb fe21 	bl	8000810 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bce:	bf00      	nop
 8004bd0:	3720      	adds	r7, #32
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b096      	sub	sp, #88	; 0x58
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004be4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bec:	2b22      	cmp	r3, #34	; 0x22
 8004bee:	f040 8094 	bne.w	8004d1a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004bf8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004bfc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004c00:	b2d9      	uxtb	r1, r3
 8004c02:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c0c:	400a      	ands	r2, r1
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	1c5a      	adds	r2, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d177      	bne.n	8004d2a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c4e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c58:	647b      	str	r3, [r7, #68]	; 0x44
 8004c5a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c60:	e841 2300 	strex	r3, r2, [r1]
 8004c64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e6      	bne.n	8004c3a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3308      	adds	r3, #8
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	623b      	str	r3, [r7, #32]
   return(result);
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	f023 0301 	bic.w	r3, r3, #1
 8004c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3308      	adds	r3, #8
 8004c8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c8c:	633a      	str	r2, [r7, #48]	; 0x30
 8004c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e5      	bne.n	8004c6c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d12e      	bne.n	8004d12 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0310 	bic.w	r3, r3, #16
 8004cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cd8:	61fb      	str	r3, [r7, #28]
 8004cda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	69b9      	ldr	r1, [r7, #24]
 8004cde:	69fa      	ldr	r2, [r7, #28]
 8004ce0:	e841 2300 	strex	r3, r2, [r1]
 8004ce4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e6      	bne.n	8004cba <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	2b10      	cmp	r3, #16
 8004cf8:	d103      	bne.n	8004d02 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2210      	movs	r2, #16
 8004d00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d08:	4619      	mov	r1, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7ff f9c6 	bl	800409c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d10:	e00b      	b.n	8004d2a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7fb fd8e 	bl	8000834 <HAL_UART_RxCpltCallback>
}
 8004d18:	e007      	b.n	8004d2a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	699a      	ldr	r2, [r3, #24]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f042 0208 	orr.w	r2, r2, #8
 8004d28:	619a      	str	r2, [r3, #24]
}
 8004d2a:	bf00      	nop
 8004d2c:	3758      	adds	r7, #88	; 0x58
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b096      	sub	sp, #88	; 0x58
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d40:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d48:	2b22      	cmp	r3, #34	; 0x22
 8004d4a:	f040 8094 	bne.w	8004e76 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d54:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004d5e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004d62:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d66:	4013      	ands	r3, r2
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d72:	1c9a      	adds	r2, r3, #2
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d177      	bne.n	8004e86 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9e:	e853 3f00 	ldrex	r3, [r3]
 8004da2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db4:	643b      	str	r3, [r7, #64]	; 0x40
 8004db6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004dba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dbc:	e841 2300 	strex	r3, r2, [r1]
 8004dc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e6      	bne.n	8004d96 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3308      	adds	r3, #8
 8004dce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	e853 3f00 	ldrex	r3, [r3]
 8004dd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	f023 0301 	bic.w	r3, r3, #1
 8004dde:	64bb      	str	r3, [r7, #72]	; 0x48
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3308      	adds	r3, #8
 8004de6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004de8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e5      	bne.n	8004dc8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d12e      	bne.n	8004e6e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f023 0310 	bic.w	r3, r3, #16
 8004e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	461a      	mov	r2, r3
 8004e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e34:	61bb      	str	r3, [r7, #24]
 8004e36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	6979      	ldr	r1, [r7, #20]
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	613b      	str	r3, [r7, #16]
   return(result);
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e6      	bne.n	8004e16 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f003 0310 	and.w	r3, r3, #16
 8004e52:	2b10      	cmp	r3, #16
 8004e54:	d103      	bne.n	8004e5e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2210      	movs	r2, #16
 8004e5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e64:	4619      	mov	r1, r3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff f918 	bl	800409c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e6c:	e00b      	b.n	8004e86 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fb fce0 	bl	8000834 <HAL_UART_RxCpltCallback>
}
 8004e74:	e007      	b.n	8004e86 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699a      	ldr	r2, [r3, #24]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f042 0208 	orr.w	r2, r2, #8
 8004e84:	619a      	str	r2, [r3, #24]
}
 8004e86:	bf00      	nop
 8004e88:	3758      	adds	r7, #88	; 0x58
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <__libc_init_array>:
 8004ea4:	b570      	push	{r4, r5, r6, lr}
 8004ea6:	4d0d      	ldr	r5, [pc, #52]	; (8004edc <__libc_init_array+0x38>)
 8004ea8:	4c0d      	ldr	r4, [pc, #52]	; (8004ee0 <__libc_init_array+0x3c>)
 8004eaa:	1b64      	subs	r4, r4, r5
 8004eac:	10a4      	asrs	r4, r4, #2
 8004eae:	2600      	movs	r6, #0
 8004eb0:	42a6      	cmp	r6, r4
 8004eb2:	d109      	bne.n	8004ec8 <__libc_init_array+0x24>
 8004eb4:	4d0b      	ldr	r5, [pc, #44]	; (8004ee4 <__libc_init_array+0x40>)
 8004eb6:	4c0c      	ldr	r4, [pc, #48]	; (8004ee8 <__libc_init_array+0x44>)
 8004eb8:	f000 f820 	bl	8004efc <_init>
 8004ebc:	1b64      	subs	r4, r4, r5
 8004ebe:	10a4      	asrs	r4, r4, #2
 8004ec0:	2600      	movs	r6, #0
 8004ec2:	42a6      	cmp	r6, r4
 8004ec4:	d105      	bne.n	8004ed2 <__libc_init_array+0x2e>
 8004ec6:	bd70      	pop	{r4, r5, r6, pc}
 8004ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ecc:	4798      	blx	r3
 8004ece:	3601      	adds	r6, #1
 8004ed0:	e7ee      	b.n	8004eb0 <__libc_init_array+0xc>
 8004ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed6:	4798      	blx	r3
 8004ed8:	3601      	adds	r6, #1
 8004eda:	e7f2      	b.n	8004ec2 <__libc_init_array+0x1e>
 8004edc:	08004f4c 	.word	0x08004f4c
 8004ee0:	08004f4c 	.word	0x08004f4c
 8004ee4:	08004f4c 	.word	0x08004f4c
 8004ee8:	08004f54 	.word	0x08004f54

08004eec <memset>:
 8004eec:	4402      	add	r2, r0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d100      	bne.n	8004ef6 <memset+0xa>
 8004ef4:	4770      	bx	lr
 8004ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8004efa:	e7f9      	b.n	8004ef0 <memset+0x4>

08004efc <_init>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	bf00      	nop
 8004f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f02:	bc08      	pop	{r3}
 8004f04:	469e      	mov	lr, r3
 8004f06:	4770      	bx	lr

08004f08 <_fini>:
 8004f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0a:	bf00      	nop
 8004f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f0e:	bc08      	pop	{r3}
 8004f10:	469e      	mov	lr, r3
 8004f12:	4770      	bx	lr
