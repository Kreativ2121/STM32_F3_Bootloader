
BLApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046d0  080101a0  080101a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08014870  08014870  00014870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080148e8  080148e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080148e8  080148e8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080148e8  080148e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080148e8  080148e8  000148e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080148ec  080148ec  000148ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080148f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000140  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b0  200001b0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b0f2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b04  00000000  00000000  0002b192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000788  00000000  00000000  0002cc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006e0  00000000  00000000  0002d420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f372  00000000  00000000  0002db00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b05b  00000000  00000000  0004ce72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be285  00000000  00000000  00057ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00116152  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002108  00000000  00000000  001161a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	; (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	; (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	; (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	20000070 	.word	0x20000070
 80101bc:	00000000 	.word	0x00000000
 80101c0:	08014858 	.word	0x08014858

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	; (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	; (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	; (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	20000074 	.word	0x20000074
 80101dc:	08014858 	.word	0x08014858

080101e0 <memchr>:
 80101e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80101e4:	2a10      	cmp	r2, #16
 80101e6:	db2b      	blt.n	8010240 <memchr+0x60>
 80101e8:	f010 0f07 	tst.w	r0, #7
 80101ec:	d008      	beq.n	8010200 <memchr+0x20>
 80101ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80101f2:	3a01      	subs	r2, #1
 80101f4:	428b      	cmp	r3, r1
 80101f6:	d02d      	beq.n	8010254 <memchr+0x74>
 80101f8:	f010 0f07 	tst.w	r0, #7
 80101fc:	b342      	cbz	r2, 8010250 <memchr+0x70>
 80101fe:	d1f6      	bne.n	80101ee <memchr+0xe>
 8010200:	b4f0      	push	{r4, r5, r6, r7}
 8010202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801020a:	f022 0407 	bic.w	r4, r2, #7
 801020e:	f07f 0700 	mvns.w	r7, #0
 8010212:	2300      	movs	r3, #0
 8010214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010218:	3c08      	subs	r4, #8
 801021a:	ea85 0501 	eor.w	r5, r5, r1
 801021e:	ea86 0601 	eor.w	r6, r6, r1
 8010222:	fa85 f547 	uadd8	r5, r5, r7
 8010226:	faa3 f587 	sel	r5, r3, r7
 801022a:	fa86 f647 	uadd8	r6, r6, r7
 801022e:	faa5 f687 	sel	r6, r5, r7
 8010232:	b98e      	cbnz	r6, 8010258 <memchr+0x78>
 8010234:	d1ee      	bne.n	8010214 <memchr+0x34>
 8010236:	bcf0      	pop	{r4, r5, r6, r7}
 8010238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801023c:	f002 0207 	and.w	r2, r2, #7
 8010240:	b132      	cbz	r2, 8010250 <memchr+0x70>
 8010242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010246:	3a01      	subs	r2, #1
 8010248:	ea83 0301 	eor.w	r3, r3, r1
 801024c:	b113      	cbz	r3, 8010254 <memchr+0x74>
 801024e:	d1f8      	bne.n	8010242 <memchr+0x62>
 8010250:	2000      	movs	r0, #0
 8010252:	4770      	bx	lr
 8010254:	3801      	subs	r0, #1
 8010256:	4770      	bx	lr
 8010258:	2d00      	cmp	r5, #0
 801025a:	bf06      	itte	eq
 801025c:	4635      	moveq	r5, r6
 801025e:	3803      	subeq	r0, #3
 8010260:	3807      	subne	r0, #7
 8010262:	f015 0f01 	tst.w	r5, #1
 8010266:	d107      	bne.n	8010278 <memchr+0x98>
 8010268:	3001      	adds	r0, #1
 801026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801026e:	bf02      	ittt	eq
 8010270:	3001      	addeq	r0, #1
 8010272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8010276:	3001      	addeq	r0, #1
 8010278:	bcf0      	pop	{r4, r5, r6, r7}
 801027a:	3801      	subs	r0, #1
 801027c:	4770      	bx	lr
 801027e:	bf00      	nop

08010280 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8010280:	b480      	push	{r7}
 8010282:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8010284:	f3bf 8f4f 	dsb	sy
}
 8010288:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801028a:	4b06      	ldr	r3, [pc, #24]	; (80102a4 <__NVIC_SystemReset+0x24>)
 801028c:	68db      	ldr	r3, [r3, #12]
 801028e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8010292:	4904      	ldr	r1, [pc, #16]	; (80102a4 <__NVIC_SystemReset+0x24>)
 8010294:	4b04      	ldr	r3, [pc, #16]	; (80102a8 <__NVIC_SystemReset+0x28>)
 8010296:	4313      	orrs	r3, r2
 8010298:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801029a:	f3bf 8f4f 	dsb	sy
}
 801029e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80102a0:	bf00      	nop
 80102a2:	e7fd      	b.n	80102a0 <__NVIC_SystemReset+0x20>
 80102a4:	e000ed00 	.word	0xe000ed00
 80102a8:	05fa0004 	.word	0x05fa0004

080102ac <HAL_UART_RxCpltCallback>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART1_UART_Init(void);

/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b090      	sub	sp, #64	; 0x40
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]

	uint8_t dataToSend[50]; // Tablica przechowujaca wysylana wiadomosc.
	uint16_t size = 0; // Rozmiar wysylanej wiadomosci
 80102b4:	2300      	movs	r3, #0
 80102b6:	87fb      	strh	r3, [r7, #62]	; 0x3e

	// Odebrany znak zostaje przekonwertowany na liczbe calkowita i sprawdzony
	// instrukcja warunkowa
	switch (Received) {
 80102b8:	4b0f      	ldr	r3, [pc, #60]	; (80102f8 <HAL_UART_RxCpltCallback+0x4c>)
 80102ba:	781b      	ldrb	r3, [r3, #0]
 80102bc:	2bb0      	cmp	r3, #176	; 0xb0
 80102be:	d101      	bne.n	80102c4 <HAL_UART_RxCpltCallback+0x18>

		case 0xB0:
			NVIC_SystemReset();
 80102c0:	f7ff ffde 	bl	8010280 <__NVIC_SystemReset>
			break;

		default:
			size = sprintf(dataToSend, "WRONGMSG");
 80102c4:	f107 030c 	add.w	r3, r7, #12
 80102c8:	490c      	ldr	r1, [pc, #48]	; (80102fc <HAL_UART_RxCpltCallback+0x50>)
 80102ca:	4618      	mov	r0, r3
 80102cc:	f003 fe56 	bl	8013f7c <siprintf>
 80102d0:	4603      	mov	r3, r0
 80102d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
			break;
 80102d4:	bf00      	nop
	}

	HAL_UART_Transmit_IT(&huart1, dataToSend, size); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
 80102d6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80102d8:	f107 030c 	add.w	r3, r7, #12
 80102dc:	4619      	mov	r1, r3
 80102de:	4808      	ldr	r0, [pc, #32]	; (8010300 <HAL_UART_RxCpltCallback+0x54>)
 80102e0:	f002 fb68 	bl	80129b4 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, &Received, 1); // Ponowne włączenie nasłuchiwania
 80102e4:	2201      	movs	r2, #1
 80102e6:	4904      	ldr	r1, [pc, #16]	; (80102f8 <HAL_UART_RxCpltCallback+0x4c>)
 80102e8:	4805      	ldr	r0, [pc, #20]	; (8010300 <HAL_UART_RxCpltCallback+0x54>)
 80102ea:	f002 fbd1 	bl	8012a90 <HAL_UART_Receive_IT>
}
 80102ee:	bf00      	nop
 80102f0:	3740      	adds	r7, #64	; 0x40
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}
 80102f6:	bf00      	nop
 80102f8:	20000194 	.word	0x20000194
 80102fc:	08014870 	.word	0x08014870
 8010300:	2000008c 	.word	0x2000008c

08010304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010308:	f000 fa90 	bl	801082c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801030c:	f000 f818 	bl	8010340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010310:	f000 f8d6 	bl	80104c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8010314:	f000 f8a4 	bl	8010460 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8010318:	f000 f872 	bl	8010400 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &Received, 1);//uruchomienie nasłuchiwania na UART1
 801031c:	2201      	movs	r2, #1
 801031e:	4906      	ldr	r1, [pc, #24]	; (8010338 <main+0x34>)
 8010320:	4806      	ldr	r0, [pc, #24]	; (801033c <main+0x38>)
 8010322:	f002 fbb5 	bl	8012a90 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 8010326:	2120      	movs	r1, #32
 8010328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801032c:	f000 fe32 	bl	8010f94 <HAL_GPIO_TogglePin>
	  HAL_Delay (150);   /* Insert delay 100 ms */
 8010330:	2096      	movs	r0, #150	; 0x96
 8010332:	f000 fae1 	bl	80108f8 <HAL_Delay>
	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 8010336:	e7f6      	b.n	8010326 <main+0x22>
 8010338:	20000194 	.word	0x20000194
 801033c:	2000008c 	.word	0x2000008c

08010340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b0a6      	sub	sp, #152	; 0x98
 8010344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010346:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801034a:	2228      	movs	r2, #40	; 0x28
 801034c:	2100      	movs	r1, #0
 801034e:	4618      	mov	r0, r3
 8010350:	f003 fe0c 	bl	8013f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010354:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010358:	2200      	movs	r2, #0
 801035a:	601a      	str	r2, [r3, #0]
 801035c:	605a      	str	r2, [r3, #4]
 801035e:	609a      	str	r2, [r3, #8]
 8010360:	60da      	str	r2, [r3, #12]
 8010362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010364:	1d3b      	adds	r3, r7, #4
 8010366:	2258      	movs	r2, #88	; 0x58
 8010368:	2100      	movs	r1, #0
 801036a:	4618      	mov	r0, r3
 801036c:	f003 fdfe 	bl	8013f6c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8010370:	2302      	movs	r3, #2
 8010372:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8010374:	2301      	movs	r3, #1
 8010376:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8010378:	2310      	movs	r3, #16
 801037a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801037e:	2302      	movs	r3, #2
 8010380:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8010384:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010388:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 801038c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8010390:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8010394:	2300      	movs	r3, #0
 8010396:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801039a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801039e:	4618      	mov	r0, r3
 80103a0:	f000 fe12 	bl	8010fc8 <HAL_RCC_OscConfig>
 80103a4:	4603      	mov	r3, r0
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d001      	beq.n	80103ae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80103aa:	f000 f8ef 	bl	801058c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80103ae:	230f      	movs	r3, #15
 80103b0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80103b2:	2302      	movs	r3, #2
 80103b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80103b6:	2300      	movs	r3, #0
 80103b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80103ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103be:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80103c0:	2300      	movs	r3, #0
 80103c2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80103c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80103c8:	2102      	movs	r1, #2
 80103ca:	4618      	mov	r0, r3
 80103cc:	f001 fe50 	bl	8012070 <HAL_RCC_ClockConfig>
 80103d0:	4603      	mov	r3, r0
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d001      	beq.n	80103da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80103d6:	f000 f8d9 	bl	801058c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80103da:	2303      	movs	r3, #3
 80103dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80103de:	2300      	movs	r3, #0
 80103e0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80103e2:	2300      	movs	r3, #0
 80103e4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80103e6:	1d3b      	adds	r3, r7, #4
 80103e8:	4618      	mov	r0, r3
 80103ea:	f002 f877 	bl	80124dc <HAL_RCCEx_PeriphCLKConfig>
 80103ee:	4603      	mov	r3, r0
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d001      	beq.n	80103f8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80103f4:	f000 f8ca 	bl	801058c <Error_Handler>
  }
}
 80103f8:	bf00      	nop
 80103fa:	3798      	adds	r7, #152	; 0x98
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8010404:	4b14      	ldr	r3, [pc, #80]	; (8010458 <MX_USART1_UART_Init+0x58>)
 8010406:	4a15      	ldr	r2, [pc, #84]	; (801045c <MX_USART1_UART_Init+0x5c>)
 8010408:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 801040a:	4b13      	ldr	r3, [pc, #76]	; (8010458 <MX_USART1_UART_Init+0x58>)
 801040c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8010410:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8010412:	4b11      	ldr	r3, [pc, #68]	; (8010458 <MX_USART1_UART_Init+0x58>)
 8010414:	2200      	movs	r2, #0
 8010416:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8010418:	4b0f      	ldr	r3, [pc, #60]	; (8010458 <MX_USART1_UART_Init+0x58>)
 801041a:	2200      	movs	r2, #0
 801041c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801041e:	4b0e      	ldr	r3, [pc, #56]	; (8010458 <MX_USART1_UART_Init+0x58>)
 8010420:	2200      	movs	r2, #0
 8010422:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8010424:	4b0c      	ldr	r3, [pc, #48]	; (8010458 <MX_USART1_UART_Init+0x58>)
 8010426:	220c      	movs	r2, #12
 8010428:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801042a:	4b0b      	ldr	r3, [pc, #44]	; (8010458 <MX_USART1_UART_Init+0x58>)
 801042c:	2200      	movs	r2, #0
 801042e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8010430:	4b09      	ldr	r3, [pc, #36]	; (8010458 <MX_USART1_UART_Init+0x58>)
 8010432:	2200      	movs	r2, #0
 8010434:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8010436:	4b08      	ldr	r3, [pc, #32]	; (8010458 <MX_USART1_UART_Init+0x58>)
 8010438:	2200      	movs	r2, #0
 801043a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801043c:	4b06      	ldr	r3, [pc, #24]	; (8010458 <MX_USART1_UART_Init+0x58>)
 801043e:	2200      	movs	r2, #0
 8010440:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8010442:	4805      	ldr	r0, [pc, #20]	; (8010458 <MX_USART1_UART_Init+0x58>)
 8010444:	f002 fa68 	bl	8012918 <HAL_UART_Init>
 8010448:	4603      	mov	r3, r0
 801044a:	2b00      	cmp	r3, #0
 801044c:	d001      	beq.n	8010452 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 801044e:	f000 f89d 	bl	801058c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8010452:	bf00      	nop
 8010454:	bd80      	pop	{r7, pc}
 8010456:	bf00      	nop
 8010458:	2000008c 	.word	0x2000008c
 801045c:	40013800 	.word	0x40013800

08010460 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8010464:	4b14      	ldr	r3, [pc, #80]	; (80104b8 <MX_USART2_UART_Init+0x58>)
 8010466:	4a15      	ldr	r2, [pc, #84]	; (80104bc <MX_USART2_UART_Init+0x5c>)
 8010468:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 801046a:	4b13      	ldr	r3, [pc, #76]	; (80104b8 <MX_USART2_UART_Init+0x58>)
 801046c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8010470:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8010472:	4b11      	ldr	r3, [pc, #68]	; (80104b8 <MX_USART2_UART_Init+0x58>)
 8010474:	2200      	movs	r2, #0
 8010476:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8010478:	4b0f      	ldr	r3, [pc, #60]	; (80104b8 <MX_USART2_UART_Init+0x58>)
 801047a:	2200      	movs	r2, #0
 801047c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 801047e:	4b0e      	ldr	r3, [pc, #56]	; (80104b8 <MX_USART2_UART_Init+0x58>)
 8010480:	2200      	movs	r2, #0
 8010482:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8010484:	4b0c      	ldr	r3, [pc, #48]	; (80104b8 <MX_USART2_UART_Init+0x58>)
 8010486:	220c      	movs	r2, #12
 8010488:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801048a:	4b0b      	ldr	r3, [pc, #44]	; (80104b8 <MX_USART2_UART_Init+0x58>)
 801048c:	2200      	movs	r2, #0
 801048e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8010490:	4b09      	ldr	r3, [pc, #36]	; (80104b8 <MX_USART2_UART_Init+0x58>)
 8010492:	2200      	movs	r2, #0
 8010494:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8010496:	4b08      	ldr	r3, [pc, #32]	; (80104b8 <MX_USART2_UART_Init+0x58>)
 8010498:	2200      	movs	r2, #0
 801049a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801049c:	4b06      	ldr	r3, [pc, #24]	; (80104b8 <MX_USART2_UART_Init+0x58>)
 801049e:	2200      	movs	r2, #0
 80104a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80104a2:	4805      	ldr	r0, [pc, #20]	; (80104b8 <MX_USART2_UART_Init+0x58>)
 80104a4:	f002 fa38 	bl	8012918 <HAL_UART_Init>
 80104a8:	4603      	mov	r3, r0
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d001      	beq.n	80104b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80104ae:	f000 f86d 	bl	801058c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80104b2:	bf00      	nop
 80104b4:	bd80      	pop	{r7, pc}
 80104b6:	bf00      	nop
 80104b8:	20000110 	.word	0x20000110
 80104bc:	40004400 	.word	0x40004400

080104c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b08a      	sub	sp, #40	; 0x28
 80104c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80104c6:	f107 0314 	add.w	r3, r7, #20
 80104ca:	2200      	movs	r2, #0
 80104cc:	601a      	str	r2, [r3, #0]
 80104ce:	605a      	str	r2, [r3, #4]
 80104d0:	609a      	str	r2, [r3, #8]
 80104d2:	60da      	str	r2, [r3, #12]
 80104d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80104d6:	4b2b      	ldr	r3, [pc, #172]	; (8010584 <MX_GPIO_Init+0xc4>)
 80104d8:	695b      	ldr	r3, [r3, #20]
 80104da:	4a2a      	ldr	r2, [pc, #168]	; (8010584 <MX_GPIO_Init+0xc4>)
 80104dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80104e0:	6153      	str	r3, [r2, #20]
 80104e2:	4b28      	ldr	r3, [pc, #160]	; (8010584 <MX_GPIO_Init+0xc4>)
 80104e4:	695b      	ldr	r3, [r3, #20]
 80104e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80104ea:	613b      	str	r3, [r7, #16]
 80104ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80104ee:	4b25      	ldr	r3, [pc, #148]	; (8010584 <MX_GPIO_Init+0xc4>)
 80104f0:	695b      	ldr	r3, [r3, #20]
 80104f2:	4a24      	ldr	r2, [pc, #144]	; (8010584 <MX_GPIO_Init+0xc4>)
 80104f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80104f8:	6153      	str	r3, [r2, #20]
 80104fa:	4b22      	ldr	r3, [pc, #136]	; (8010584 <MX_GPIO_Init+0xc4>)
 80104fc:	695b      	ldr	r3, [r3, #20]
 80104fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010502:	60fb      	str	r3, [r7, #12]
 8010504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010506:	4b1f      	ldr	r3, [pc, #124]	; (8010584 <MX_GPIO_Init+0xc4>)
 8010508:	695b      	ldr	r3, [r3, #20]
 801050a:	4a1e      	ldr	r2, [pc, #120]	; (8010584 <MX_GPIO_Init+0xc4>)
 801050c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010510:	6153      	str	r3, [r2, #20]
 8010512:	4b1c      	ldr	r3, [pc, #112]	; (8010584 <MX_GPIO_Init+0xc4>)
 8010514:	695b      	ldr	r3, [r3, #20]
 8010516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801051a:	60bb      	str	r3, [r7, #8]
 801051c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801051e:	4b19      	ldr	r3, [pc, #100]	; (8010584 <MX_GPIO_Init+0xc4>)
 8010520:	695b      	ldr	r3, [r3, #20]
 8010522:	4a18      	ldr	r2, [pc, #96]	; (8010584 <MX_GPIO_Init+0xc4>)
 8010524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010528:	6153      	str	r3, [r2, #20]
 801052a:	4b16      	ldr	r3, [pc, #88]	; (8010584 <MX_GPIO_Init+0xc4>)
 801052c:	695b      	ldr	r3, [r3, #20]
 801052e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010532:	607b      	str	r3, [r7, #4]
 8010534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8010536:	2200      	movs	r2, #0
 8010538:	2120      	movs	r1, #32
 801053a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801053e:	f000 fd11 	bl	8010f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8010542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8010548:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 801054c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801054e:	2300      	movs	r3, #0
 8010550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8010552:	f107 0314 	add.w	r3, r7, #20
 8010556:	4619      	mov	r1, r3
 8010558:	480b      	ldr	r0, [pc, #44]	; (8010588 <MX_GPIO_Init+0xc8>)
 801055a:	f000 fb79 	bl	8010c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 801055e:	2320      	movs	r3, #32
 8010560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010562:	2301      	movs	r3, #1
 8010564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010566:	2300      	movs	r3, #0
 8010568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801056a:	2300      	movs	r3, #0
 801056c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 801056e:	f107 0314 	add.w	r3, r7, #20
 8010572:	4619      	mov	r1, r3
 8010574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010578:	f000 fb6a 	bl	8010c50 <HAL_GPIO_Init>

}
 801057c:	bf00      	nop
 801057e:	3728      	adds	r7, #40	; 0x28
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}
 8010584:	40021000 	.word	0x40021000
 8010588:	48000800 	.word	0x48000800

0801058c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801058c:	b480      	push	{r7}
 801058e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8010590:	b672      	cpsid	i
}
 8010592:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8010594:	e7fe      	b.n	8010594 <Error_Handler+0x8>
	...

08010598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b082      	sub	sp, #8
 801059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801059e:	4b0f      	ldr	r3, [pc, #60]	; (80105dc <HAL_MspInit+0x44>)
 80105a0:	699b      	ldr	r3, [r3, #24]
 80105a2:	4a0e      	ldr	r2, [pc, #56]	; (80105dc <HAL_MspInit+0x44>)
 80105a4:	f043 0301 	orr.w	r3, r3, #1
 80105a8:	6193      	str	r3, [r2, #24]
 80105aa:	4b0c      	ldr	r3, [pc, #48]	; (80105dc <HAL_MspInit+0x44>)
 80105ac:	699b      	ldr	r3, [r3, #24]
 80105ae:	f003 0301 	and.w	r3, r3, #1
 80105b2:	607b      	str	r3, [r7, #4]
 80105b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80105b6:	4b09      	ldr	r3, [pc, #36]	; (80105dc <HAL_MspInit+0x44>)
 80105b8:	69db      	ldr	r3, [r3, #28]
 80105ba:	4a08      	ldr	r2, [pc, #32]	; (80105dc <HAL_MspInit+0x44>)
 80105bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80105c0:	61d3      	str	r3, [r2, #28]
 80105c2:	4b06      	ldr	r3, [pc, #24]	; (80105dc <HAL_MspInit+0x44>)
 80105c4:	69db      	ldr	r3, [r3, #28]
 80105c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80105ca:	603b      	str	r3, [r7, #0]
 80105cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80105ce:	2007      	movs	r0, #7
 80105d0:	f000 fa86 	bl	8010ae0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80105d4:	bf00      	nop
 80105d6:	3708      	adds	r7, #8
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}
 80105dc:	40021000 	.word	0x40021000

080105e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b08c      	sub	sp, #48	; 0x30
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80105e8:	f107 031c 	add.w	r3, r7, #28
 80105ec:	2200      	movs	r2, #0
 80105ee:	601a      	str	r2, [r3, #0]
 80105f0:	605a      	str	r2, [r3, #4]
 80105f2:	609a      	str	r2, [r3, #8]
 80105f4:	60da      	str	r2, [r3, #12]
 80105f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	4a32      	ldr	r2, [pc, #200]	; (80106c8 <HAL_UART_MspInit+0xe8>)
 80105fe:	4293      	cmp	r3, r2
 8010600:	d130      	bne.n	8010664 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8010602:	4b32      	ldr	r3, [pc, #200]	; (80106cc <HAL_UART_MspInit+0xec>)
 8010604:	699b      	ldr	r3, [r3, #24]
 8010606:	4a31      	ldr	r2, [pc, #196]	; (80106cc <HAL_UART_MspInit+0xec>)
 8010608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801060c:	6193      	str	r3, [r2, #24]
 801060e:	4b2f      	ldr	r3, [pc, #188]	; (80106cc <HAL_UART_MspInit+0xec>)
 8010610:	699b      	ldr	r3, [r3, #24]
 8010612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010616:	61bb      	str	r3, [r7, #24]
 8010618:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801061a:	4b2c      	ldr	r3, [pc, #176]	; (80106cc <HAL_UART_MspInit+0xec>)
 801061c:	695b      	ldr	r3, [r3, #20]
 801061e:	4a2b      	ldr	r2, [pc, #172]	; (80106cc <HAL_UART_MspInit+0xec>)
 8010620:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010624:	6153      	str	r3, [r2, #20]
 8010626:	4b29      	ldr	r3, [pc, #164]	; (80106cc <HAL_UART_MspInit+0xec>)
 8010628:	695b      	ldr	r3, [r3, #20]
 801062a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801062e:	617b      	str	r3, [r7, #20]
 8010630:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8010632:	2330      	movs	r3, #48	; 0x30
 8010634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010636:	2302      	movs	r3, #2
 8010638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801063a:	2300      	movs	r3, #0
 801063c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801063e:	2303      	movs	r3, #3
 8010640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8010642:	2307      	movs	r3, #7
 8010644:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010646:	f107 031c 	add.w	r3, r7, #28
 801064a:	4619      	mov	r1, r3
 801064c:	4820      	ldr	r0, [pc, #128]	; (80106d0 <HAL_UART_MspInit+0xf0>)
 801064e:	f000 faff 	bl	8010c50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8010652:	2200      	movs	r2, #0
 8010654:	2100      	movs	r1, #0
 8010656:	2025      	movs	r0, #37	; 0x25
 8010658:	f000 fa4d 	bl	8010af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 801065c:	2025      	movs	r0, #37	; 0x25
 801065e:	f000 fa66 	bl	8010b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8010662:	e02d      	b.n	80106c0 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	4a1a      	ldr	r2, [pc, #104]	; (80106d4 <HAL_UART_MspInit+0xf4>)
 801066a:	4293      	cmp	r3, r2
 801066c:	d128      	bne.n	80106c0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 801066e:	4b17      	ldr	r3, [pc, #92]	; (80106cc <HAL_UART_MspInit+0xec>)
 8010670:	69db      	ldr	r3, [r3, #28]
 8010672:	4a16      	ldr	r2, [pc, #88]	; (80106cc <HAL_UART_MspInit+0xec>)
 8010674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010678:	61d3      	str	r3, [r2, #28]
 801067a:	4b14      	ldr	r3, [pc, #80]	; (80106cc <HAL_UART_MspInit+0xec>)
 801067c:	69db      	ldr	r3, [r3, #28]
 801067e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010682:	613b      	str	r3, [r7, #16]
 8010684:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010686:	4b11      	ldr	r3, [pc, #68]	; (80106cc <HAL_UART_MspInit+0xec>)
 8010688:	695b      	ldr	r3, [r3, #20]
 801068a:	4a10      	ldr	r2, [pc, #64]	; (80106cc <HAL_UART_MspInit+0xec>)
 801068c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010690:	6153      	str	r3, [r2, #20]
 8010692:	4b0e      	ldr	r3, [pc, #56]	; (80106cc <HAL_UART_MspInit+0xec>)
 8010694:	695b      	ldr	r3, [r3, #20]
 8010696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801069a:	60fb      	str	r3, [r7, #12]
 801069c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 801069e:	230c      	movs	r3, #12
 80106a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80106a2:	2302      	movs	r3, #2
 80106a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106a6:	2300      	movs	r3, #0
 80106a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80106aa:	2300      	movs	r3, #0
 80106ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80106ae:	2307      	movs	r3, #7
 80106b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80106b2:	f107 031c 	add.w	r3, r7, #28
 80106b6:	4619      	mov	r1, r3
 80106b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80106bc:	f000 fac8 	bl	8010c50 <HAL_GPIO_Init>
}
 80106c0:	bf00      	nop
 80106c2:	3730      	adds	r7, #48	; 0x30
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bd80      	pop	{r7, pc}
 80106c8:	40013800 	.word	0x40013800
 80106cc:	40021000 	.word	0x40021000
 80106d0:	48000800 	.word	0x48000800
 80106d4:	40004400 	.word	0x40004400

080106d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80106d8:	b480      	push	{r7}
 80106da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80106dc:	e7fe      	b.n	80106dc <NMI_Handler+0x4>

080106de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80106de:	b480      	push	{r7}
 80106e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80106e2:	e7fe      	b.n	80106e2 <HardFault_Handler+0x4>

080106e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80106e4:	b480      	push	{r7}
 80106e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80106e8:	e7fe      	b.n	80106e8 <MemManage_Handler+0x4>

080106ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80106ea:	b480      	push	{r7}
 80106ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80106ee:	e7fe      	b.n	80106ee <BusFault_Handler+0x4>

080106f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80106f0:	b480      	push	{r7}
 80106f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80106f4:	e7fe      	b.n	80106f4 <UsageFault_Handler+0x4>

080106f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80106f6:	b480      	push	{r7}
 80106f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80106fa:	bf00      	nop
 80106fc:	46bd      	mov	sp, r7
 80106fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010702:	4770      	bx	lr

08010704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010704:	b480      	push	{r7}
 8010706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010708:	bf00      	nop
 801070a:	46bd      	mov	sp, r7
 801070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010710:	4770      	bx	lr

08010712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010712:	b480      	push	{r7}
 8010714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010716:	bf00      	nop
 8010718:	46bd      	mov	sp, r7
 801071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071e:	4770      	bx	lr

08010720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010724:	f000 f8c8 	bl	80108b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010728:	bf00      	nop
 801072a:	bd80      	pop	{r7, pc}

0801072c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8010730:	4802      	ldr	r0, [pc, #8]	; (801073c <USART1_IRQHandler+0x10>)
 8010732:	f002 f9fb 	bl	8012b2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8010736:	bf00      	nop
 8010738:	bd80      	pop	{r7, pc}
 801073a:	bf00      	nop
 801073c:	2000008c 	.word	0x2000008c

08010740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b086      	sub	sp, #24
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010748:	4a14      	ldr	r2, [pc, #80]	; (801079c <_sbrk+0x5c>)
 801074a:	4b15      	ldr	r3, [pc, #84]	; (80107a0 <_sbrk+0x60>)
 801074c:	1ad3      	subs	r3, r2, r3
 801074e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8010750:	697b      	ldr	r3, [r7, #20]
 8010752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8010754:	4b13      	ldr	r3, [pc, #76]	; (80107a4 <_sbrk+0x64>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d102      	bne.n	8010762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801075c:	4b11      	ldr	r3, [pc, #68]	; (80107a4 <_sbrk+0x64>)
 801075e:	4a12      	ldr	r2, [pc, #72]	; (80107a8 <_sbrk+0x68>)
 8010760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010762:	4b10      	ldr	r3, [pc, #64]	; (80107a4 <_sbrk+0x64>)
 8010764:	681a      	ldr	r2, [r3, #0]
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	4413      	add	r3, r2
 801076a:	693a      	ldr	r2, [r7, #16]
 801076c:	429a      	cmp	r2, r3
 801076e:	d207      	bcs.n	8010780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010770:	f003 fbd2 	bl	8013f18 <__errno>
 8010774:	4603      	mov	r3, r0
 8010776:	220c      	movs	r2, #12
 8010778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801077a:	f04f 33ff 	mov.w	r3, #4294967295
 801077e:	e009      	b.n	8010794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8010780:	4b08      	ldr	r3, [pc, #32]	; (80107a4 <_sbrk+0x64>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8010786:	4b07      	ldr	r3, [pc, #28]	; (80107a4 <_sbrk+0x64>)
 8010788:	681a      	ldr	r2, [r3, #0]
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	4413      	add	r3, r2
 801078e:	4a05      	ldr	r2, [pc, #20]	; (80107a4 <_sbrk+0x64>)
 8010790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8010792:	68fb      	ldr	r3, [r7, #12]
}
 8010794:	4618      	mov	r0, r3
 8010796:	3718      	adds	r7, #24
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}
 801079c:	20010000 	.word	0x20010000
 80107a0:	00000400 	.word	0x00000400
 80107a4:	20000198 	.word	0x20000198
 80107a8:	200001b0 	.word	0x200001b0

080107ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80107ac:	b480      	push	{r7}
 80107ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80107b0:	4b07      	ldr	r3, [pc, #28]	; (80107d0 <SystemInit+0x24>)
 80107b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107b6:	4a06      	ldr	r2, [pc, #24]	; (80107d0 <SystemInit+0x24>)
 80107b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80107bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80107c0:	4b03      	ldr	r3, [pc, #12]	; (80107d0 <SystemInit+0x24>)
 80107c2:	4a04      	ldr	r2, [pc, #16]	; (80107d4 <SystemInit+0x28>)
 80107c4:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80107c6:	bf00      	nop
 80107c8:	46bd      	mov	sp, r7
 80107ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ce:	4770      	bx	lr
 80107d0:	e000ed00 	.word	0xe000ed00
 80107d4:	08010000 	.word	0x08010000

080107d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80107d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010810 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80107dc:	480d      	ldr	r0, [pc, #52]	; (8010814 <LoopForever+0x6>)
  ldr r1, =_edata
 80107de:	490e      	ldr	r1, [pc, #56]	; (8010818 <LoopForever+0xa>)
  ldr r2, =_sidata
 80107e0:	4a0e      	ldr	r2, [pc, #56]	; (801081c <LoopForever+0xe>)
  movs r3, #0
 80107e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80107e4:	e002      	b.n	80107ec <LoopCopyDataInit>

080107e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80107e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80107e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80107ea:	3304      	adds	r3, #4

080107ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80107ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80107ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80107f0:	d3f9      	bcc.n	80107e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80107f2:	4a0b      	ldr	r2, [pc, #44]	; (8010820 <LoopForever+0x12>)
  ldr r4, =_ebss
 80107f4:	4c0b      	ldr	r4, [pc, #44]	; (8010824 <LoopForever+0x16>)
  movs r3, #0
 80107f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80107f8:	e001      	b.n	80107fe <LoopFillZerobss>

080107fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80107fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80107fc:	3204      	adds	r2, #4

080107fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80107fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010800:	d3fb      	bcc.n	80107fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8010802:	f7ff ffd3 	bl	80107ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010806:	f003 fb8d 	bl	8013f24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801080a:	f7ff fd7b 	bl	8010304 <main>

0801080e <LoopForever>:

LoopForever:
    b LoopForever
 801080e:	e7fe      	b.n	801080e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8010810:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8010814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010818:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 801081c:	080148f0 	.word	0x080148f0
  ldr r2, =_sbss
 8010820:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8010824:	200001b0 	.word	0x200001b0

08010828 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8010828:	e7fe      	b.n	8010828 <ADC1_2_IRQHandler>
	...

0801082c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010830:	4b08      	ldr	r3, [pc, #32]	; (8010854 <HAL_Init+0x28>)
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	4a07      	ldr	r2, [pc, #28]	; (8010854 <HAL_Init+0x28>)
 8010836:	f043 0310 	orr.w	r3, r3, #16
 801083a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801083c:	2003      	movs	r0, #3
 801083e:	f000 f94f 	bl	8010ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010842:	2000      	movs	r0, #0
 8010844:	f000 f808 	bl	8010858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010848:	f7ff fea6 	bl	8010598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801084c:	2300      	movs	r3, #0
}
 801084e:	4618      	mov	r0, r3
 8010850:	bd80      	pop	{r7, pc}
 8010852:	bf00      	nop
 8010854:	40022000 	.word	0x40022000

08010858 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b082      	sub	sp, #8
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010860:	4b12      	ldr	r3, [pc, #72]	; (80108ac <HAL_InitTick+0x54>)
 8010862:	681a      	ldr	r2, [r3, #0]
 8010864:	4b12      	ldr	r3, [pc, #72]	; (80108b0 <HAL_InitTick+0x58>)
 8010866:	781b      	ldrb	r3, [r3, #0]
 8010868:	4619      	mov	r1, r3
 801086a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801086e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010872:	fbb2 f3f3 	udiv	r3, r2, r3
 8010876:	4618      	mov	r0, r3
 8010878:	f000 f967 	bl	8010b4a <HAL_SYSTICK_Config>
 801087c:	4603      	mov	r3, r0
 801087e:	2b00      	cmp	r3, #0
 8010880:	d001      	beq.n	8010886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8010882:	2301      	movs	r3, #1
 8010884:	e00e      	b.n	80108a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2b0f      	cmp	r3, #15
 801088a:	d80a      	bhi.n	80108a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801088c:	2200      	movs	r2, #0
 801088e:	6879      	ldr	r1, [r7, #4]
 8010890:	f04f 30ff 	mov.w	r0, #4294967295
 8010894:	f000 f92f 	bl	8010af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010898:	4a06      	ldr	r2, [pc, #24]	; (80108b4 <HAL_InitTick+0x5c>)
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 801089e:	2300      	movs	r3, #0
 80108a0:	e000      	b.n	80108a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80108a2:	2301      	movs	r3, #1
}
 80108a4:	4618      	mov	r0, r3
 80108a6:	3708      	adds	r7, #8
 80108a8:	46bd      	mov	sp, r7
 80108aa:	bd80      	pop	{r7, pc}
 80108ac:	20000000 	.word	0x20000000
 80108b0:	20000008 	.word	0x20000008
 80108b4:	20000004 	.word	0x20000004

080108b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80108b8:	b480      	push	{r7}
 80108ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80108bc:	4b06      	ldr	r3, [pc, #24]	; (80108d8 <HAL_IncTick+0x20>)
 80108be:	781b      	ldrb	r3, [r3, #0]
 80108c0:	461a      	mov	r2, r3
 80108c2:	4b06      	ldr	r3, [pc, #24]	; (80108dc <HAL_IncTick+0x24>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	4413      	add	r3, r2
 80108c8:	4a04      	ldr	r2, [pc, #16]	; (80108dc <HAL_IncTick+0x24>)
 80108ca:	6013      	str	r3, [r2, #0]
}
 80108cc:	bf00      	nop
 80108ce:	46bd      	mov	sp, r7
 80108d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d4:	4770      	bx	lr
 80108d6:	bf00      	nop
 80108d8:	20000008 	.word	0x20000008
 80108dc:	2000019c 	.word	0x2000019c

080108e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80108e0:	b480      	push	{r7}
 80108e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80108e4:	4b03      	ldr	r3, [pc, #12]	; (80108f4 <HAL_GetTick+0x14>)
 80108e6:	681b      	ldr	r3, [r3, #0]
}
 80108e8:	4618      	mov	r0, r3
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr
 80108f2:	bf00      	nop
 80108f4:	2000019c 	.word	0x2000019c

080108f8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b084      	sub	sp, #16
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010900:	f7ff ffee 	bl	80108e0 <HAL_GetTick>
 8010904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010910:	d005      	beq.n	801091e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010912:	4b0a      	ldr	r3, [pc, #40]	; (801093c <HAL_Delay+0x44>)
 8010914:	781b      	ldrb	r3, [r3, #0]
 8010916:	461a      	mov	r2, r3
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	4413      	add	r3, r2
 801091c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 801091e:	bf00      	nop
 8010920:	f7ff ffde 	bl	80108e0 <HAL_GetTick>
 8010924:	4602      	mov	r2, r0
 8010926:	68bb      	ldr	r3, [r7, #8]
 8010928:	1ad3      	subs	r3, r2, r3
 801092a:	68fa      	ldr	r2, [r7, #12]
 801092c:	429a      	cmp	r2, r3
 801092e:	d8f7      	bhi.n	8010920 <HAL_Delay+0x28>
  {
  }
}
 8010930:	bf00      	nop
 8010932:	bf00      	nop
 8010934:	3710      	adds	r7, #16
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}
 801093a:	bf00      	nop
 801093c:	20000008 	.word	0x20000008

08010940 <__NVIC_SetPriorityGrouping>:
{
 8010940:	b480      	push	{r7}
 8010942:	b085      	sub	sp, #20
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	f003 0307 	and.w	r3, r3, #7
 801094e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010950:	4b0c      	ldr	r3, [pc, #48]	; (8010984 <__NVIC_SetPriorityGrouping+0x44>)
 8010952:	68db      	ldr	r3, [r3, #12]
 8010954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010956:	68ba      	ldr	r2, [r7, #8]
 8010958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801095c:	4013      	ands	r3, r2
 801095e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801096c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010972:	4a04      	ldr	r2, [pc, #16]	; (8010984 <__NVIC_SetPriorityGrouping+0x44>)
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	60d3      	str	r3, [r2, #12]
}
 8010978:	bf00      	nop
 801097a:	3714      	adds	r7, #20
 801097c:	46bd      	mov	sp, r7
 801097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010982:	4770      	bx	lr
 8010984:	e000ed00 	.word	0xe000ed00

08010988 <__NVIC_GetPriorityGrouping>:
{
 8010988:	b480      	push	{r7}
 801098a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801098c:	4b04      	ldr	r3, [pc, #16]	; (80109a0 <__NVIC_GetPriorityGrouping+0x18>)
 801098e:	68db      	ldr	r3, [r3, #12]
 8010990:	0a1b      	lsrs	r3, r3, #8
 8010992:	f003 0307 	and.w	r3, r3, #7
}
 8010996:	4618      	mov	r0, r3
 8010998:	46bd      	mov	sp, r7
 801099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099e:	4770      	bx	lr
 80109a0:	e000ed00 	.word	0xe000ed00

080109a4 <__NVIC_EnableIRQ>:
{
 80109a4:	b480      	push	{r7}
 80109a6:	b083      	sub	sp, #12
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	4603      	mov	r3, r0
 80109ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80109ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	db0b      	blt.n	80109ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80109b6:	79fb      	ldrb	r3, [r7, #7]
 80109b8:	f003 021f 	and.w	r2, r3, #31
 80109bc:	4907      	ldr	r1, [pc, #28]	; (80109dc <__NVIC_EnableIRQ+0x38>)
 80109be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80109c2:	095b      	lsrs	r3, r3, #5
 80109c4:	2001      	movs	r0, #1
 80109c6:	fa00 f202 	lsl.w	r2, r0, r2
 80109ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80109ce:	bf00      	nop
 80109d0:	370c      	adds	r7, #12
 80109d2:	46bd      	mov	sp, r7
 80109d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d8:	4770      	bx	lr
 80109da:	bf00      	nop
 80109dc:	e000e100 	.word	0xe000e100

080109e0 <__NVIC_SetPriority>:
{
 80109e0:	b480      	push	{r7}
 80109e2:	b083      	sub	sp, #12
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	4603      	mov	r3, r0
 80109e8:	6039      	str	r1, [r7, #0]
 80109ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80109ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	db0a      	blt.n	8010a0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	b2da      	uxtb	r2, r3
 80109f8:	490c      	ldr	r1, [pc, #48]	; (8010a2c <__NVIC_SetPriority+0x4c>)
 80109fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80109fe:	0112      	lsls	r2, r2, #4
 8010a00:	b2d2      	uxtb	r2, r2
 8010a02:	440b      	add	r3, r1
 8010a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010a08:	e00a      	b.n	8010a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	b2da      	uxtb	r2, r3
 8010a0e:	4908      	ldr	r1, [pc, #32]	; (8010a30 <__NVIC_SetPriority+0x50>)
 8010a10:	79fb      	ldrb	r3, [r7, #7]
 8010a12:	f003 030f 	and.w	r3, r3, #15
 8010a16:	3b04      	subs	r3, #4
 8010a18:	0112      	lsls	r2, r2, #4
 8010a1a:	b2d2      	uxtb	r2, r2
 8010a1c:	440b      	add	r3, r1
 8010a1e:	761a      	strb	r2, [r3, #24]
}
 8010a20:	bf00      	nop
 8010a22:	370c      	adds	r7, #12
 8010a24:	46bd      	mov	sp, r7
 8010a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2a:	4770      	bx	lr
 8010a2c:	e000e100 	.word	0xe000e100
 8010a30:	e000ed00 	.word	0xe000ed00

08010a34 <NVIC_EncodePriority>:
{
 8010a34:	b480      	push	{r7}
 8010a36:	b089      	sub	sp, #36	; 0x24
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	60f8      	str	r0, [r7, #12]
 8010a3c:	60b9      	str	r1, [r7, #8]
 8010a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	f003 0307 	and.w	r3, r3, #7
 8010a46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010a48:	69fb      	ldr	r3, [r7, #28]
 8010a4a:	f1c3 0307 	rsb	r3, r3, #7
 8010a4e:	2b04      	cmp	r3, #4
 8010a50:	bf28      	it	cs
 8010a52:	2304      	movcs	r3, #4
 8010a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010a56:	69fb      	ldr	r3, [r7, #28]
 8010a58:	3304      	adds	r3, #4
 8010a5a:	2b06      	cmp	r3, #6
 8010a5c:	d902      	bls.n	8010a64 <NVIC_EncodePriority+0x30>
 8010a5e:	69fb      	ldr	r3, [r7, #28]
 8010a60:	3b03      	subs	r3, #3
 8010a62:	e000      	b.n	8010a66 <NVIC_EncodePriority+0x32>
 8010a64:	2300      	movs	r3, #0
 8010a66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010a68:	f04f 32ff 	mov.w	r2, #4294967295
 8010a6c:	69bb      	ldr	r3, [r7, #24]
 8010a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8010a72:	43da      	mvns	r2, r3
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	401a      	ands	r2, r3
 8010a78:	697b      	ldr	r3, [r7, #20]
 8010a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	fa01 f303 	lsl.w	r3, r1, r3
 8010a86:	43d9      	mvns	r1, r3
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010a8c:	4313      	orrs	r3, r2
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	3724      	adds	r7, #36	; 0x24
 8010a92:	46bd      	mov	sp, r7
 8010a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a98:	4770      	bx	lr
	...

08010a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b082      	sub	sp, #8
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	3b01      	subs	r3, #1
 8010aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010aac:	d301      	bcc.n	8010ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010aae:	2301      	movs	r3, #1
 8010ab0:	e00f      	b.n	8010ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010ab2:	4a0a      	ldr	r2, [pc, #40]	; (8010adc <SysTick_Config+0x40>)
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	3b01      	subs	r3, #1
 8010ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010aba:	210f      	movs	r1, #15
 8010abc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ac0:	f7ff ff8e 	bl	80109e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010ac4:	4b05      	ldr	r3, [pc, #20]	; (8010adc <SysTick_Config+0x40>)
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010aca:	4b04      	ldr	r3, [pc, #16]	; (8010adc <SysTick_Config+0x40>)
 8010acc:	2207      	movs	r2, #7
 8010ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010ad0:	2300      	movs	r3, #0
}
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	3708      	adds	r7, #8
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}
 8010ada:	bf00      	nop
 8010adc:	e000e010 	.word	0xe000e010

08010ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b082      	sub	sp, #8
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f7ff ff29 	bl	8010940 <__NVIC_SetPriorityGrouping>
}
 8010aee:	bf00      	nop
 8010af0:	3708      	adds	r7, #8
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}

08010af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010af6:	b580      	push	{r7, lr}
 8010af8:	b086      	sub	sp, #24
 8010afa:	af00      	add	r7, sp, #0
 8010afc:	4603      	mov	r3, r0
 8010afe:	60b9      	str	r1, [r7, #8]
 8010b00:	607a      	str	r2, [r7, #4]
 8010b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010b04:	2300      	movs	r3, #0
 8010b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010b08:	f7ff ff3e 	bl	8010988 <__NVIC_GetPriorityGrouping>
 8010b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010b0e:	687a      	ldr	r2, [r7, #4]
 8010b10:	68b9      	ldr	r1, [r7, #8]
 8010b12:	6978      	ldr	r0, [r7, #20]
 8010b14:	f7ff ff8e 	bl	8010a34 <NVIC_EncodePriority>
 8010b18:	4602      	mov	r2, r0
 8010b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b1e:	4611      	mov	r1, r2
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7ff ff5d 	bl	80109e0 <__NVIC_SetPriority>
}
 8010b26:	bf00      	nop
 8010b28:	3718      	adds	r7, #24
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}

08010b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010b2e:	b580      	push	{r7, lr}
 8010b30:	b082      	sub	sp, #8
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	4603      	mov	r3, r0
 8010b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	f7ff ff31 	bl	80109a4 <__NVIC_EnableIRQ>
}
 8010b42:	bf00      	nop
 8010b44:	3708      	adds	r7, #8
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}

08010b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010b4a:	b580      	push	{r7, lr}
 8010b4c:	b082      	sub	sp, #8
 8010b4e:	af00      	add	r7, sp, #0
 8010b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f7ff ffa2 	bl	8010a9c <SysTick_Config>
 8010b58:	4603      	mov	r3, r0
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	3708      	adds	r7, #8
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}

08010b62 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8010b62:	b480      	push	{r7}
 8010b64:	b083      	sub	sp, #12
 8010b66:	af00      	add	r7, sp, #0
 8010b68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010b70:	2b02      	cmp	r3, #2
 8010b72:	d008      	beq.n	8010b86 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2204      	movs	r2, #4
 8010b78:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8010b82:	2301      	movs	r3, #1
 8010b84:	e020      	b.n	8010bc8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	681a      	ldr	r2, [r3, #0]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	f022 020e 	bic.w	r2, r2, #14
 8010b94:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	681a      	ldr	r2, [r3, #0]
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	f022 0201 	bic.w	r2, r2, #1
 8010ba4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bae:	2101      	movs	r1, #1
 8010bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8010bb4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	2201      	movs	r2, #1
 8010bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8010bc6:	2300      	movs	r3, #0
}
 8010bc8:	4618      	mov	r0, r3
 8010bca:	370c      	adds	r7, #12
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd2:	4770      	bx	lr

08010bd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b084      	sub	sp, #16
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010be6:	2b02      	cmp	r3, #2
 8010be8:	d005      	beq.n	8010bf6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2204      	movs	r2, #4
 8010bee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8010bf0:	2301      	movs	r3, #1
 8010bf2:	73fb      	strb	r3, [r7, #15]
 8010bf4:	e027      	b.n	8010c46 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	681a      	ldr	r2, [r3, #0]
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	f022 020e 	bic.w	r2, r2, #14
 8010c04:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	681a      	ldr	r2, [r3, #0]
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	f022 0201 	bic.w	r2, r2, #1
 8010c14:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c1e:	2101      	movs	r1, #1
 8010c20:	fa01 f202 	lsl.w	r2, r1, r2
 8010c24:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	2201      	movs	r2, #1
 8010c2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	2200      	movs	r2, #0
 8010c32:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d003      	beq.n	8010c46 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	4798      	blx	r3
    } 
  }
  return status;
 8010c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c48:	4618      	mov	r0, r3
 8010c4a:	3710      	adds	r7, #16
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}

08010c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010c50:	b480      	push	{r7}
 8010c52:	b087      	sub	sp, #28
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8010c5e:	e160      	b.n	8010f22 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	681a      	ldr	r2, [r3, #0]
 8010c64:	2101      	movs	r1, #1
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	fa01 f303 	lsl.w	r3, r1, r3
 8010c6c:	4013      	ands	r3, r2
 8010c6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	f000 8152 	beq.w	8010f1c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	685b      	ldr	r3, [r3, #4]
 8010c7c:	f003 0303 	and.w	r3, r3, #3
 8010c80:	2b01      	cmp	r3, #1
 8010c82:	d005      	beq.n	8010c90 <HAL_GPIO_Init+0x40>
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	f003 0303 	and.w	r3, r3, #3
 8010c8c:	2b02      	cmp	r3, #2
 8010c8e:	d130      	bne.n	8010cf2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	689b      	ldr	r3, [r3, #8]
 8010c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	005b      	lsls	r3, r3, #1
 8010c9a:	2203      	movs	r2, #3
 8010c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8010ca0:	43db      	mvns	r3, r3
 8010ca2:	693a      	ldr	r2, [r7, #16]
 8010ca4:	4013      	ands	r3, r2
 8010ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	68da      	ldr	r2, [r3, #12]
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	005b      	lsls	r3, r3, #1
 8010cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8010cb4:	693a      	ldr	r2, [r7, #16]
 8010cb6:	4313      	orrs	r3, r2
 8010cb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	693a      	ldr	r2, [r7, #16]
 8010cbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	685b      	ldr	r3, [r3, #4]
 8010cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010cc6:	2201      	movs	r2, #1
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	fa02 f303 	lsl.w	r3, r2, r3
 8010cce:	43db      	mvns	r3, r3
 8010cd0:	693a      	ldr	r2, [r7, #16]
 8010cd2:	4013      	ands	r3, r2
 8010cd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	685b      	ldr	r3, [r3, #4]
 8010cda:	091b      	lsrs	r3, r3, #4
 8010cdc:	f003 0201 	and.w	r2, r3, #1
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8010ce6:	693a      	ldr	r2, [r7, #16]
 8010ce8:	4313      	orrs	r3, r2
 8010cea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	693a      	ldr	r2, [r7, #16]
 8010cf0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010cf2:	683b      	ldr	r3, [r7, #0]
 8010cf4:	685b      	ldr	r3, [r3, #4]
 8010cf6:	f003 0303 	and.w	r3, r3, #3
 8010cfa:	2b03      	cmp	r3, #3
 8010cfc:	d017      	beq.n	8010d2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	68db      	ldr	r3, [r3, #12]
 8010d02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	005b      	lsls	r3, r3, #1
 8010d08:	2203      	movs	r2, #3
 8010d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8010d0e:	43db      	mvns	r3, r3
 8010d10:	693a      	ldr	r2, [r7, #16]
 8010d12:	4013      	ands	r3, r2
 8010d14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	689a      	ldr	r2, [r3, #8]
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	005b      	lsls	r3, r3, #1
 8010d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8010d22:	693a      	ldr	r2, [r7, #16]
 8010d24:	4313      	orrs	r3, r2
 8010d26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	693a      	ldr	r2, [r7, #16]
 8010d2c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	685b      	ldr	r3, [r3, #4]
 8010d32:	f003 0303 	and.w	r3, r3, #3
 8010d36:	2b02      	cmp	r3, #2
 8010d38:	d123      	bne.n	8010d82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	08da      	lsrs	r2, r3, #3
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	3208      	adds	r2, #8
 8010d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8010d48:	697b      	ldr	r3, [r7, #20]
 8010d4a:	f003 0307 	and.w	r3, r3, #7
 8010d4e:	009b      	lsls	r3, r3, #2
 8010d50:	220f      	movs	r2, #15
 8010d52:	fa02 f303 	lsl.w	r3, r2, r3
 8010d56:	43db      	mvns	r3, r3
 8010d58:	693a      	ldr	r2, [r7, #16]
 8010d5a:	4013      	ands	r3, r2
 8010d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	691a      	ldr	r2, [r3, #16]
 8010d62:	697b      	ldr	r3, [r7, #20]
 8010d64:	f003 0307 	and.w	r3, r3, #7
 8010d68:	009b      	lsls	r3, r3, #2
 8010d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8010d6e:	693a      	ldr	r2, [r7, #16]
 8010d70:	4313      	orrs	r3, r2
 8010d72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8010d74:	697b      	ldr	r3, [r7, #20]
 8010d76:	08da      	lsrs	r2, r3, #3
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	3208      	adds	r2, #8
 8010d7c:	6939      	ldr	r1, [r7, #16]
 8010d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8010d88:	697b      	ldr	r3, [r7, #20]
 8010d8a:	005b      	lsls	r3, r3, #1
 8010d8c:	2203      	movs	r2, #3
 8010d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8010d92:	43db      	mvns	r3, r3
 8010d94:	693a      	ldr	r2, [r7, #16]
 8010d96:	4013      	ands	r3, r2
 8010d98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	685b      	ldr	r3, [r3, #4]
 8010d9e:	f003 0203 	and.w	r2, r3, #3
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	005b      	lsls	r3, r3, #1
 8010da6:	fa02 f303 	lsl.w	r3, r2, r3
 8010daa:	693a      	ldr	r2, [r7, #16]
 8010dac:	4313      	orrs	r3, r2
 8010dae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	693a      	ldr	r2, [r7, #16]
 8010db4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	685b      	ldr	r3, [r3, #4]
 8010dba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	f000 80ac 	beq.w	8010f1c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010dc4:	4b5e      	ldr	r3, [pc, #376]	; (8010f40 <HAL_GPIO_Init+0x2f0>)
 8010dc6:	699b      	ldr	r3, [r3, #24]
 8010dc8:	4a5d      	ldr	r2, [pc, #372]	; (8010f40 <HAL_GPIO_Init+0x2f0>)
 8010dca:	f043 0301 	orr.w	r3, r3, #1
 8010dce:	6193      	str	r3, [r2, #24]
 8010dd0:	4b5b      	ldr	r3, [pc, #364]	; (8010f40 <HAL_GPIO_Init+0x2f0>)
 8010dd2:	699b      	ldr	r3, [r3, #24]
 8010dd4:	f003 0301 	and.w	r3, r3, #1
 8010dd8:	60bb      	str	r3, [r7, #8]
 8010dda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8010ddc:	4a59      	ldr	r2, [pc, #356]	; (8010f44 <HAL_GPIO_Init+0x2f4>)
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	089b      	lsrs	r3, r3, #2
 8010de2:	3302      	adds	r3, #2
 8010de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010de8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8010dea:	697b      	ldr	r3, [r7, #20]
 8010dec:	f003 0303 	and.w	r3, r3, #3
 8010df0:	009b      	lsls	r3, r3, #2
 8010df2:	220f      	movs	r2, #15
 8010df4:	fa02 f303 	lsl.w	r3, r2, r3
 8010df8:	43db      	mvns	r3, r3
 8010dfa:	693a      	ldr	r2, [r7, #16]
 8010dfc:	4013      	ands	r3, r2
 8010dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8010e06:	d025      	beq.n	8010e54 <HAL_GPIO_Init+0x204>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	4a4f      	ldr	r2, [pc, #316]	; (8010f48 <HAL_GPIO_Init+0x2f8>)
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	d01f      	beq.n	8010e50 <HAL_GPIO_Init+0x200>
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	4a4e      	ldr	r2, [pc, #312]	; (8010f4c <HAL_GPIO_Init+0x2fc>)
 8010e14:	4293      	cmp	r3, r2
 8010e16:	d019      	beq.n	8010e4c <HAL_GPIO_Init+0x1fc>
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	4a4d      	ldr	r2, [pc, #308]	; (8010f50 <HAL_GPIO_Init+0x300>)
 8010e1c:	4293      	cmp	r3, r2
 8010e1e:	d013      	beq.n	8010e48 <HAL_GPIO_Init+0x1f8>
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	4a4c      	ldr	r2, [pc, #304]	; (8010f54 <HAL_GPIO_Init+0x304>)
 8010e24:	4293      	cmp	r3, r2
 8010e26:	d00d      	beq.n	8010e44 <HAL_GPIO_Init+0x1f4>
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	4a4b      	ldr	r2, [pc, #300]	; (8010f58 <HAL_GPIO_Init+0x308>)
 8010e2c:	4293      	cmp	r3, r2
 8010e2e:	d007      	beq.n	8010e40 <HAL_GPIO_Init+0x1f0>
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	4a4a      	ldr	r2, [pc, #296]	; (8010f5c <HAL_GPIO_Init+0x30c>)
 8010e34:	4293      	cmp	r3, r2
 8010e36:	d101      	bne.n	8010e3c <HAL_GPIO_Init+0x1ec>
 8010e38:	2306      	movs	r3, #6
 8010e3a:	e00c      	b.n	8010e56 <HAL_GPIO_Init+0x206>
 8010e3c:	2307      	movs	r3, #7
 8010e3e:	e00a      	b.n	8010e56 <HAL_GPIO_Init+0x206>
 8010e40:	2305      	movs	r3, #5
 8010e42:	e008      	b.n	8010e56 <HAL_GPIO_Init+0x206>
 8010e44:	2304      	movs	r3, #4
 8010e46:	e006      	b.n	8010e56 <HAL_GPIO_Init+0x206>
 8010e48:	2303      	movs	r3, #3
 8010e4a:	e004      	b.n	8010e56 <HAL_GPIO_Init+0x206>
 8010e4c:	2302      	movs	r3, #2
 8010e4e:	e002      	b.n	8010e56 <HAL_GPIO_Init+0x206>
 8010e50:	2301      	movs	r3, #1
 8010e52:	e000      	b.n	8010e56 <HAL_GPIO_Init+0x206>
 8010e54:	2300      	movs	r3, #0
 8010e56:	697a      	ldr	r2, [r7, #20]
 8010e58:	f002 0203 	and.w	r2, r2, #3
 8010e5c:	0092      	lsls	r2, r2, #2
 8010e5e:	4093      	lsls	r3, r2
 8010e60:	693a      	ldr	r2, [r7, #16]
 8010e62:	4313      	orrs	r3, r2
 8010e64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8010e66:	4937      	ldr	r1, [pc, #220]	; (8010f44 <HAL_GPIO_Init+0x2f4>)
 8010e68:	697b      	ldr	r3, [r7, #20]
 8010e6a:	089b      	lsrs	r3, r3, #2
 8010e6c:	3302      	adds	r3, #2
 8010e6e:	693a      	ldr	r2, [r7, #16]
 8010e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010e74:	4b3a      	ldr	r3, [pc, #232]	; (8010f60 <HAL_GPIO_Init+0x310>)
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	43db      	mvns	r3, r3
 8010e7e:	693a      	ldr	r2, [r7, #16]
 8010e80:	4013      	ands	r3, r2
 8010e82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8010e84:	683b      	ldr	r3, [r7, #0]
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d003      	beq.n	8010e98 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8010e90:	693a      	ldr	r2, [r7, #16]
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	4313      	orrs	r3, r2
 8010e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8010e98:	4a31      	ldr	r2, [pc, #196]	; (8010f60 <HAL_GPIO_Init+0x310>)
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8010e9e:	4b30      	ldr	r3, [pc, #192]	; (8010f60 <HAL_GPIO_Init+0x310>)
 8010ea0:	685b      	ldr	r3, [r3, #4]
 8010ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	43db      	mvns	r3, r3
 8010ea8:	693a      	ldr	r2, [r7, #16]
 8010eaa:	4013      	ands	r3, r2
 8010eac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8010eae:	683b      	ldr	r3, [r7, #0]
 8010eb0:	685b      	ldr	r3, [r3, #4]
 8010eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d003      	beq.n	8010ec2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8010eba:	693a      	ldr	r2, [r7, #16]
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	4313      	orrs	r3, r2
 8010ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8010ec2:	4a27      	ldr	r2, [pc, #156]	; (8010f60 <HAL_GPIO_Init+0x310>)
 8010ec4:	693b      	ldr	r3, [r7, #16]
 8010ec6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010ec8:	4b25      	ldr	r3, [pc, #148]	; (8010f60 <HAL_GPIO_Init+0x310>)
 8010eca:	689b      	ldr	r3, [r3, #8]
 8010ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	43db      	mvns	r3, r3
 8010ed2:	693a      	ldr	r2, [r7, #16]
 8010ed4:	4013      	ands	r3, r2
 8010ed6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d003      	beq.n	8010eec <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8010ee4:	693a      	ldr	r2, [r7, #16]
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	4313      	orrs	r3, r2
 8010eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8010eec:	4a1c      	ldr	r2, [pc, #112]	; (8010f60 <HAL_GPIO_Init+0x310>)
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010ef2:	4b1b      	ldr	r3, [pc, #108]	; (8010f60 <HAL_GPIO_Init+0x310>)
 8010ef4:	68db      	ldr	r3, [r3, #12]
 8010ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	43db      	mvns	r3, r3
 8010efc:	693a      	ldr	r2, [r7, #16]
 8010efe:	4013      	ands	r3, r2
 8010f00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8010f02:	683b      	ldr	r3, [r7, #0]
 8010f04:	685b      	ldr	r3, [r3, #4]
 8010f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d003      	beq.n	8010f16 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8010f0e:	693a      	ldr	r2, [r7, #16]
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	4313      	orrs	r3, r2
 8010f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8010f16:	4a12      	ldr	r2, [pc, #72]	; (8010f60 <HAL_GPIO_Init+0x310>)
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8010f1c:	697b      	ldr	r3, [r7, #20]
 8010f1e:	3301      	adds	r3, #1
 8010f20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	681a      	ldr	r2, [r3, #0]
 8010f26:	697b      	ldr	r3, [r7, #20]
 8010f28:	fa22 f303 	lsr.w	r3, r2, r3
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	f47f ae97 	bne.w	8010c60 <HAL_GPIO_Init+0x10>
  }
}
 8010f32:	bf00      	nop
 8010f34:	bf00      	nop
 8010f36:	371c      	adds	r7, #28
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3e:	4770      	bx	lr
 8010f40:	40021000 	.word	0x40021000
 8010f44:	40010000 	.word	0x40010000
 8010f48:	48000400 	.word	0x48000400
 8010f4c:	48000800 	.word	0x48000800
 8010f50:	48000c00 	.word	0x48000c00
 8010f54:	48001000 	.word	0x48001000
 8010f58:	48001400 	.word	0x48001400
 8010f5c:	48001800 	.word	0x48001800
 8010f60:	40010400 	.word	0x40010400

08010f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010f64:	b480      	push	{r7}
 8010f66:	b083      	sub	sp, #12
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
 8010f6c:	460b      	mov	r3, r1
 8010f6e:	807b      	strh	r3, [r7, #2]
 8010f70:	4613      	mov	r3, r2
 8010f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010f74:	787b      	ldrb	r3, [r7, #1]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d003      	beq.n	8010f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8010f7a:	887a      	ldrh	r2, [r7, #2]
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8010f80:	e002      	b.n	8010f88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8010f82:	887a      	ldrh	r2, [r7, #2]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010f88:	bf00      	nop
 8010f8a:	370c      	adds	r7, #12
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f92:	4770      	bx	lr

08010f94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8010f94:	b480      	push	{r7}
 8010f96:	b085      	sub	sp, #20
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
 8010f9c:	460b      	mov	r3, r1
 8010f9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	695b      	ldr	r3, [r3, #20]
 8010fa4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8010fa6:	887a      	ldrh	r2, [r7, #2]
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	4013      	ands	r3, r2
 8010fac:	041a      	lsls	r2, r3, #16
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	43d9      	mvns	r1, r3
 8010fb2:	887b      	ldrh	r3, [r7, #2]
 8010fb4:	400b      	ands	r3, r1
 8010fb6:	431a      	orrs	r2, r3
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	619a      	str	r2, [r3, #24]
}
 8010fbc:	bf00      	nop
 8010fbe:	3714      	adds	r7, #20
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc6:	4770      	bx	lr

08010fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8010fce:	af00      	add	r7, sp, #0
 8010fd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8010fd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8010fd8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8010fde:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d102      	bne.n	8010fee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8010fe8:	2301      	movs	r3, #1
 8010fea:	f001 b83a 	b.w	8012062 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010fee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8010ff2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	f003 0301 	and.w	r3, r3, #1
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	f000 816f 	beq.w	80112e2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8011004:	4bb5      	ldr	r3, [pc, #724]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 8011006:	685b      	ldr	r3, [r3, #4]
 8011008:	f003 030c 	and.w	r3, r3, #12
 801100c:	2b04      	cmp	r3, #4
 801100e:	d00c      	beq.n	801102a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8011010:	4bb2      	ldr	r3, [pc, #712]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 8011012:	685b      	ldr	r3, [r3, #4]
 8011014:	f003 030c 	and.w	r3, r3, #12
 8011018:	2b08      	cmp	r3, #8
 801101a:	d15c      	bne.n	80110d6 <HAL_RCC_OscConfig+0x10e>
 801101c:	4baf      	ldr	r3, [pc, #700]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 801101e:	685b      	ldr	r3, [r3, #4]
 8011020:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8011024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011028:	d155      	bne.n	80110d6 <HAL_RCC_OscConfig+0x10e>
 801102a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801102e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011032:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8011036:	fa93 f3a3 	rbit	r3, r3
 801103a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 801103e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011042:	fab3 f383 	clz	r3, r3
 8011046:	b2db      	uxtb	r3, r3
 8011048:	095b      	lsrs	r3, r3, #5
 801104a:	b2db      	uxtb	r3, r3
 801104c:	f043 0301 	orr.w	r3, r3, #1
 8011050:	b2db      	uxtb	r3, r3
 8011052:	2b01      	cmp	r3, #1
 8011054:	d102      	bne.n	801105c <HAL_RCC_OscConfig+0x94>
 8011056:	4ba1      	ldr	r3, [pc, #644]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	e015      	b.n	8011088 <HAL_RCC_OscConfig+0xc0>
 801105c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011060:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011064:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8011068:	fa93 f3a3 	rbit	r3, r3
 801106c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8011070:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011074:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8011078:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801107c:	fa93 f3a3 	rbit	r3, r3
 8011080:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8011084:	4b95      	ldr	r3, [pc, #596]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 8011086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011088:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801108c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8011090:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8011094:	fa92 f2a2 	rbit	r2, r2
 8011098:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 801109c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80110a0:	fab2 f282 	clz	r2, r2
 80110a4:	b2d2      	uxtb	r2, r2
 80110a6:	f042 0220 	orr.w	r2, r2, #32
 80110aa:	b2d2      	uxtb	r2, r2
 80110ac:	f002 021f 	and.w	r2, r2, #31
 80110b0:	2101      	movs	r1, #1
 80110b2:	fa01 f202 	lsl.w	r2, r1, r2
 80110b6:	4013      	ands	r3, r2
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	f000 8111 	beq.w	80112e0 <HAL_RCC_OscConfig+0x318>
 80110be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80110c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	685b      	ldr	r3, [r3, #4]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	f040 8108 	bne.w	80112e0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80110d0:	2301      	movs	r3, #1
 80110d2:	f000 bfc6 	b.w	8012062 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80110d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80110da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	685b      	ldr	r3, [r3, #4]
 80110e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80110e6:	d106      	bne.n	80110f6 <HAL_RCC_OscConfig+0x12e>
 80110e8:	4b7c      	ldr	r3, [pc, #496]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	4a7b      	ldr	r2, [pc, #492]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 80110ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80110f2:	6013      	str	r3, [r2, #0]
 80110f4:	e036      	b.n	8011164 <HAL_RCC_OscConfig+0x19c>
 80110f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80110fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	685b      	ldr	r3, [r3, #4]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d10c      	bne.n	8011120 <HAL_RCC_OscConfig+0x158>
 8011106:	4b75      	ldr	r3, [pc, #468]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	4a74      	ldr	r2, [pc, #464]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 801110c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011110:	6013      	str	r3, [r2, #0]
 8011112:	4b72      	ldr	r3, [pc, #456]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	4a71      	ldr	r2, [pc, #452]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 8011118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801111c:	6013      	str	r3, [r2, #0]
 801111e:	e021      	b.n	8011164 <HAL_RCC_OscConfig+0x19c>
 8011120:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011124:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	685b      	ldr	r3, [r3, #4]
 801112c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011130:	d10c      	bne.n	801114c <HAL_RCC_OscConfig+0x184>
 8011132:	4b6a      	ldr	r3, [pc, #424]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	4a69      	ldr	r2, [pc, #420]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 8011138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801113c:	6013      	str	r3, [r2, #0]
 801113e:	4b67      	ldr	r3, [pc, #412]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	4a66      	ldr	r2, [pc, #408]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 8011144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011148:	6013      	str	r3, [r2, #0]
 801114a:	e00b      	b.n	8011164 <HAL_RCC_OscConfig+0x19c>
 801114c:	4b63      	ldr	r3, [pc, #396]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	4a62      	ldr	r2, [pc, #392]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 8011152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011156:	6013      	str	r3, [r2, #0]
 8011158:	4b60      	ldr	r3, [pc, #384]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	4a5f      	ldr	r2, [pc, #380]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 801115e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011162:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011164:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011168:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	685b      	ldr	r3, [r3, #4]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d059      	beq.n	8011228 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011174:	f7ff fbb4 	bl	80108e0 <HAL_GetTick>
 8011178:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801117c:	e00a      	b.n	8011194 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801117e:	f7ff fbaf 	bl	80108e0 <HAL_GetTick>
 8011182:	4602      	mov	r2, r0
 8011184:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011188:	1ad3      	subs	r3, r2, r3
 801118a:	2b64      	cmp	r3, #100	; 0x64
 801118c:	d902      	bls.n	8011194 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 801118e:	2303      	movs	r3, #3
 8011190:	f000 bf67 	b.w	8012062 <HAL_RCC_OscConfig+0x109a>
 8011194:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011198:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801119c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80111a0:	fa93 f3a3 	rbit	r3, r3
 80111a4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80111a8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80111ac:	fab3 f383 	clz	r3, r3
 80111b0:	b2db      	uxtb	r3, r3
 80111b2:	095b      	lsrs	r3, r3, #5
 80111b4:	b2db      	uxtb	r3, r3
 80111b6:	f043 0301 	orr.w	r3, r3, #1
 80111ba:	b2db      	uxtb	r3, r3
 80111bc:	2b01      	cmp	r3, #1
 80111be:	d102      	bne.n	80111c6 <HAL_RCC_OscConfig+0x1fe>
 80111c0:	4b46      	ldr	r3, [pc, #280]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	e015      	b.n	80111f2 <HAL_RCC_OscConfig+0x22a>
 80111c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80111ca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80111ce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80111d2:	fa93 f3a3 	rbit	r3, r3
 80111d6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80111da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80111de:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80111e2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80111e6:	fa93 f3a3 	rbit	r3, r3
 80111ea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80111ee:	4b3b      	ldr	r3, [pc, #236]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 80111f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80111f6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80111fa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80111fe:	fa92 f2a2 	rbit	r2, r2
 8011202:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8011206:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 801120a:	fab2 f282 	clz	r2, r2
 801120e:	b2d2      	uxtb	r2, r2
 8011210:	f042 0220 	orr.w	r2, r2, #32
 8011214:	b2d2      	uxtb	r2, r2
 8011216:	f002 021f 	and.w	r2, r2, #31
 801121a:	2101      	movs	r1, #1
 801121c:	fa01 f202 	lsl.w	r2, r1, r2
 8011220:	4013      	ands	r3, r2
 8011222:	2b00      	cmp	r3, #0
 8011224:	d0ab      	beq.n	801117e <HAL_RCC_OscConfig+0x1b6>
 8011226:	e05c      	b.n	80112e2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011228:	f7ff fb5a 	bl	80108e0 <HAL_GetTick>
 801122c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011230:	e00a      	b.n	8011248 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011232:	f7ff fb55 	bl	80108e0 <HAL_GetTick>
 8011236:	4602      	mov	r2, r0
 8011238:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801123c:	1ad3      	subs	r3, r2, r3
 801123e:	2b64      	cmp	r3, #100	; 0x64
 8011240:	d902      	bls.n	8011248 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8011242:	2303      	movs	r3, #3
 8011244:	f000 bf0d 	b.w	8012062 <HAL_RCC_OscConfig+0x109a>
 8011248:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801124c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011250:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8011254:	fa93 f3a3 	rbit	r3, r3
 8011258:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 801125c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011260:	fab3 f383 	clz	r3, r3
 8011264:	b2db      	uxtb	r3, r3
 8011266:	095b      	lsrs	r3, r3, #5
 8011268:	b2db      	uxtb	r3, r3
 801126a:	f043 0301 	orr.w	r3, r3, #1
 801126e:	b2db      	uxtb	r3, r3
 8011270:	2b01      	cmp	r3, #1
 8011272:	d102      	bne.n	801127a <HAL_RCC_OscConfig+0x2b2>
 8011274:	4b19      	ldr	r3, [pc, #100]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	e015      	b.n	80112a6 <HAL_RCC_OscConfig+0x2de>
 801127a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801127e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011282:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8011286:	fa93 f3a3 	rbit	r3, r3
 801128a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 801128e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011292:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8011296:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 801129a:	fa93 f3a3 	rbit	r3, r3
 801129e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80112a2:	4b0e      	ldr	r3, [pc, #56]	; (80112dc <HAL_RCC_OscConfig+0x314>)
 80112a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80112aa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80112ae:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80112b2:	fa92 f2a2 	rbit	r2, r2
 80112b6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80112ba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80112be:	fab2 f282 	clz	r2, r2
 80112c2:	b2d2      	uxtb	r2, r2
 80112c4:	f042 0220 	orr.w	r2, r2, #32
 80112c8:	b2d2      	uxtb	r2, r2
 80112ca:	f002 021f 	and.w	r2, r2, #31
 80112ce:	2101      	movs	r1, #1
 80112d0:	fa01 f202 	lsl.w	r2, r1, r2
 80112d4:	4013      	ands	r3, r2
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d1ab      	bne.n	8011232 <HAL_RCC_OscConfig+0x26a>
 80112da:	e002      	b.n	80112e2 <HAL_RCC_OscConfig+0x31a>
 80112dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80112e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80112e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80112e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	f003 0302 	and.w	r3, r3, #2
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	f000 817f 	beq.w	80115f6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80112f8:	4ba7      	ldr	r3, [pc, #668]	; (8011598 <HAL_RCC_OscConfig+0x5d0>)
 80112fa:	685b      	ldr	r3, [r3, #4]
 80112fc:	f003 030c 	and.w	r3, r3, #12
 8011300:	2b00      	cmp	r3, #0
 8011302:	d00c      	beq.n	801131e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011304:	4ba4      	ldr	r3, [pc, #656]	; (8011598 <HAL_RCC_OscConfig+0x5d0>)
 8011306:	685b      	ldr	r3, [r3, #4]
 8011308:	f003 030c 	and.w	r3, r3, #12
 801130c:	2b08      	cmp	r3, #8
 801130e:	d173      	bne.n	80113f8 <HAL_RCC_OscConfig+0x430>
 8011310:	4ba1      	ldr	r3, [pc, #644]	; (8011598 <HAL_RCC_OscConfig+0x5d0>)
 8011312:	685b      	ldr	r3, [r3, #4]
 8011314:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8011318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801131c:	d16c      	bne.n	80113f8 <HAL_RCC_OscConfig+0x430>
 801131e:	2302      	movs	r3, #2
 8011320:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011324:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8011328:	fa93 f3a3 	rbit	r3, r3
 801132c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8011330:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011334:	fab3 f383 	clz	r3, r3
 8011338:	b2db      	uxtb	r3, r3
 801133a:	095b      	lsrs	r3, r3, #5
 801133c:	b2db      	uxtb	r3, r3
 801133e:	f043 0301 	orr.w	r3, r3, #1
 8011342:	b2db      	uxtb	r3, r3
 8011344:	2b01      	cmp	r3, #1
 8011346:	d102      	bne.n	801134e <HAL_RCC_OscConfig+0x386>
 8011348:	4b93      	ldr	r3, [pc, #588]	; (8011598 <HAL_RCC_OscConfig+0x5d0>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	e013      	b.n	8011376 <HAL_RCC_OscConfig+0x3ae>
 801134e:	2302      	movs	r3, #2
 8011350:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011354:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8011358:	fa93 f3a3 	rbit	r3, r3
 801135c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8011360:	2302      	movs	r3, #2
 8011362:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8011366:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801136a:	fa93 f3a3 	rbit	r3, r3
 801136e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8011372:	4b89      	ldr	r3, [pc, #548]	; (8011598 <HAL_RCC_OscConfig+0x5d0>)
 8011374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011376:	2202      	movs	r2, #2
 8011378:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 801137c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8011380:	fa92 f2a2 	rbit	r2, r2
 8011384:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8011388:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 801138c:	fab2 f282 	clz	r2, r2
 8011390:	b2d2      	uxtb	r2, r2
 8011392:	f042 0220 	orr.w	r2, r2, #32
 8011396:	b2d2      	uxtb	r2, r2
 8011398:	f002 021f 	and.w	r2, r2, #31
 801139c:	2101      	movs	r1, #1
 801139e:	fa01 f202 	lsl.w	r2, r1, r2
 80113a2:	4013      	ands	r3, r2
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d00a      	beq.n	80113be <HAL_RCC_OscConfig+0x3f6>
 80113a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80113ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	68db      	ldr	r3, [r3, #12]
 80113b4:	2b01      	cmp	r3, #1
 80113b6:	d002      	beq.n	80113be <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80113b8:	2301      	movs	r3, #1
 80113ba:	f000 be52 	b.w	8012062 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80113be:	4b76      	ldr	r3, [pc, #472]	; (8011598 <HAL_RCC_OscConfig+0x5d0>)
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80113c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80113ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	691b      	ldr	r3, [r3, #16]
 80113d2:	21f8      	movs	r1, #248	; 0xf8
 80113d4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80113d8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80113dc:	fa91 f1a1 	rbit	r1, r1
 80113e0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80113e4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80113e8:	fab1 f181 	clz	r1, r1
 80113ec:	b2c9      	uxtb	r1, r1
 80113ee:	408b      	lsls	r3, r1
 80113f0:	4969      	ldr	r1, [pc, #420]	; (8011598 <HAL_RCC_OscConfig+0x5d0>)
 80113f2:	4313      	orrs	r3, r2
 80113f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80113f6:	e0fe      	b.n	80115f6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80113f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80113fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	68db      	ldr	r3, [r3, #12]
 8011404:	2b00      	cmp	r3, #0
 8011406:	f000 8088 	beq.w	801151a <HAL_RCC_OscConfig+0x552>
 801140a:	2301      	movs	r3, #1
 801140c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011410:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8011414:	fa93 f3a3 	rbit	r3, r3
 8011418:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 801141c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011420:	fab3 f383 	clz	r3, r3
 8011424:	b2db      	uxtb	r3, r3
 8011426:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 801142a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 801142e:	009b      	lsls	r3, r3, #2
 8011430:	461a      	mov	r2, r3
 8011432:	2301      	movs	r3, #1
 8011434:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011436:	f7ff fa53 	bl	80108e0 <HAL_GetTick>
 801143a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801143e:	e00a      	b.n	8011456 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011440:	f7ff fa4e 	bl	80108e0 <HAL_GetTick>
 8011444:	4602      	mov	r2, r0
 8011446:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801144a:	1ad3      	subs	r3, r2, r3
 801144c:	2b02      	cmp	r3, #2
 801144e:	d902      	bls.n	8011456 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8011450:	2303      	movs	r3, #3
 8011452:	f000 be06 	b.w	8012062 <HAL_RCC_OscConfig+0x109a>
 8011456:	2302      	movs	r3, #2
 8011458:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801145c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8011460:	fa93 f3a3 	rbit	r3, r3
 8011464:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8011468:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801146c:	fab3 f383 	clz	r3, r3
 8011470:	b2db      	uxtb	r3, r3
 8011472:	095b      	lsrs	r3, r3, #5
 8011474:	b2db      	uxtb	r3, r3
 8011476:	f043 0301 	orr.w	r3, r3, #1
 801147a:	b2db      	uxtb	r3, r3
 801147c:	2b01      	cmp	r3, #1
 801147e:	d102      	bne.n	8011486 <HAL_RCC_OscConfig+0x4be>
 8011480:	4b45      	ldr	r3, [pc, #276]	; (8011598 <HAL_RCC_OscConfig+0x5d0>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	e013      	b.n	80114ae <HAL_RCC_OscConfig+0x4e6>
 8011486:	2302      	movs	r3, #2
 8011488:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801148c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8011490:	fa93 f3a3 	rbit	r3, r3
 8011494:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8011498:	2302      	movs	r3, #2
 801149a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801149e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80114a2:	fa93 f3a3 	rbit	r3, r3
 80114a6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80114aa:	4b3b      	ldr	r3, [pc, #236]	; (8011598 <HAL_RCC_OscConfig+0x5d0>)
 80114ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114ae:	2202      	movs	r2, #2
 80114b0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80114b4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80114b8:	fa92 f2a2 	rbit	r2, r2
 80114bc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80114c0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80114c4:	fab2 f282 	clz	r2, r2
 80114c8:	b2d2      	uxtb	r2, r2
 80114ca:	f042 0220 	orr.w	r2, r2, #32
 80114ce:	b2d2      	uxtb	r2, r2
 80114d0:	f002 021f 	and.w	r2, r2, #31
 80114d4:	2101      	movs	r1, #1
 80114d6:	fa01 f202 	lsl.w	r2, r1, r2
 80114da:	4013      	ands	r3, r2
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d0af      	beq.n	8011440 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80114e0:	4b2d      	ldr	r3, [pc, #180]	; (8011598 <HAL_RCC_OscConfig+0x5d0>)
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80114e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80114ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	691b      	ldr	r3, [r3, #16]
 80114f4:	21f8      	movs	r1, #248	; 0xf8
 80114f6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80114fa:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80114fe:	fa91 f1a1 	rbit	r1, r1
 8011502:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8011506:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 801150a:	fab1 f181 	clz	r1, r1
 801150e:	b2c9      	uxtb	r1, r1
 8011510:	408b      	lsls	r3, r1
 8011512:	4921      	ldr	r1, [pc, #132]	; (8011598 <HAL_RCC_OscConfig+0x5d0>)
 8011514:	4313      	orrs	r3, r2
 8011516:	600b      	str	r3, [r1, #0]
 8011518:	e06d      	b.n	80115f6 <HAL_RCC_OscConfig+0x62e>
 801151a:	2301      	movs	r3, #1
 801151c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011520:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8011524:	fa93 f3a3 	rbit	r3, r3
 8011528:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 801152c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011530:	fab3 f383 	clz	r3, r3
 8011534:	b2db      	uxtb	r3, r3
 8011536:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 801153a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 801153e:	009b      	lsls	r3, r3, #2
 8011540:	461a      	mov	r2, r3
 8011542:	2300      	movs	r3, #0
 8011544:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011546:	f7ff f9cb 	bl	80108e0 <HAL_GetTick>
 801154a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801154e:	e00a      	b.n	8011566 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011550:	f7ff f9c6 	bl	80108e0 <HAL_GetTick>
 8011554:	4602      	mov	r2, r0
 8011556:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801155a:	1ad3      	subs	r3, r2, r3
 801155c:	2b02      	cmp	r3, #2
 801155e:	d902      	bls.n	8011566 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8011560:	2303      	movs	r3, #3
 8011562:	f000 bd7e 	b.w	8012062 <HAL_RCC_OscConfig+0x109a>
 8011566:	2302      	movs	r3, #2
 8011568:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801156c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011570:	fa93 f3a3 	rbit	r3, r3
 8011574:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8011578:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801157c:	fab3 f383 	clz	r3, r3
 8011580:	b2db      	uxtb	r3, r3
 8011582:	095b      	lsrs	r3, r3, #5
 8011584:	b2db      	uxtb	r3, r3
 8011586:	f043 0301 	orr.w	r3, r3, #1
 801158a:	b2db      	uxtb	r3, r3
 801158c:	2b01      	cmp	r3, #1
 801158e:	d105      	bne.n	801159c <HAL_RCC_OscConfig+0x5d4>
 8011590:	4b01      	ldr	r3, [pc, #4]	; (8011598 <HAL_RCC_OscConfig+0x5d0>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	e016      	b.n	80115c4 <HAL_RCC_OscConfig+0x5fc>
 8011596:	bf00      	nop
 8011598:	40021000 	.word	0x40021000
 801159c:	2302      	movs	r3, #2
 801159e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80115a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80115a6:	fa93 f3a3 	rbit	r3, r3
 80115aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80115ae:	2302      	movs	r3, #2
 80115b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80115b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80115b8:	fa93 f3a3 	rbit	r3, r3
 80115bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80115c0:	4bbf      	ldr	r3, [pc, #764]	; (80118c0 <HAL_RCC_OscConfig+0x8f8>)
 80115c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115c4:	2202      	movs	r2, #2
 80115c6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80115ca:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80115ce:	fa92 f2a2 	rbit	r2, r2
 80115d2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80115d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80115da:	fab2 f282 	clz	r2, r2
 80115de:	b2d2      	uxtb	r2, r2
 80115e0:	f042 0220 	orr.w	r2, r2, #32
 80115e4:	b2d2      	uxtb	r2, r2
 80115e6:	f002 021f 	and.w	r2, r2, #31
 80115ea:	2101      	movs	r1, #1
 80115ec:	fa01 f202 	lsl.w	r2, r1, r2
 80115f0:	4013      	ands	r3, r2
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d1ac      	bne.n	8011550 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80115f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80115fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	f003 0308 	and.w	r3, r3, #8
 8011606:	2b00      	cmp	r3, #0
 8011608:	f000 8113 	beq.w	8011832 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801160c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011610:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	695b      	ldr	r3, [r3, #20]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d07c      	beq.n	8011716 <HAL_RCC_OscConfig+0x74e>
 801161c:	2301      	movs	r3, #1
 801161e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011626:	fa93 f3a3 	rbit	r3, r3
 801162a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 801162e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011632:	fab3 f383 	clz	r3, r3
 8011636:	b2db      	uxtb	r3, r3
 8011638:	461a      	mov	r2, r3
 801163a:	4ba2      	ldr	r3, [pc, #648]	; (80118c4 <HAL_RCC_OscConfig+0x8fc>)
 801163c:	4413      	add	r3, r2
 801163e:	009b      	lsls	r3, r3, #2
 8011640:	461a      	mov	r2, r3
 8011642:	2301      	movs	r3, #1
 8011644:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011646:	f7ff f94b 	bl	80108e0 <HAL_GetTick>
 801164a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801164e:	e00a      	b.n	8011666 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011650:	f7ff f946 	bl	80108e0 <HAL_GetTick>
 8011654:	4602      	mov	r2, r0
 8011656:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801165a:	1ad3      	subs	r3, r2, r3
 801165c:	2b02      	cmp	r3, #2
 801165e:	d902      	bls.n	8011666 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8011660:	2303      	movs	r3, #3
 8011662:	f000 bcfe 	b.w	8012062 <HAL_RCC_OscConfig+0x109a>
 8011666:	2302      	movs	r3, #2
 8011668:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801166c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011670:	fa93 f2a3 	rbit	r2, r3
 8011674:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011678:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801167c:	601a      	str	r2, [r3, #0]
 801167e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011682:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011686:	2202      	movs	r2, #2
 8011688:	601a      	str	r2, [r3, #0]
 801168a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801168e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	fa93 f2a3 	rbit	r2, r3
 8011698:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801169c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116a0:	601a      	str	r2, [r3, #0]
 80116a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80116a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80116aa:	2202      	movs	r2, #2
 80116ac:	601a      	str	r2, [r3, #0]
 80116ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80116b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	fa93 f2a3 	rbit	r2, r3
 80116bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80116c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80116c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80116c6:	4b7e      	ldr	r3, [pc, #504]	; (80118c0 <HAL_RCC_OscConfig+0x8f8>)
 80116c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80116ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80116ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80116d2:	2102      	movs	r1, #2
 80116d4:	6019      	str	r1, [r3, #0]
 80116d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80116da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	fa93 f1a3 	rbit	r1, r3
 80116e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80116e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80116ec:	6019      	str	r1, [r3, #0]
  return result;
 80116ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80116f2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	fab3 f383 	clz	r3, r3
 80116fc:	b2db      	uxtb	r3, r3
 80116fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8011702:	b2db      	uxtb	r3, r3
 8011704:	f003 031f 	and.w	r3, r3, #31
 8011708:	2101      	movs	r1, #1
 801170a:	fa01 f303 	lsl.w	r3, r1, r3
 801170e:	4013      	ands	r3, r2
 8011710:	2b00      	cmp	r3, #0
 8011712:	d09d      	beq.n	8011650 <HAL_RCC_OscConfig+0x688>
 8011714:	e08d      	b.n	8011832 <HAL_RCC_OscConfig+0x86a>
 8011716:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801171a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801171e:	2201      	movs	r2, #1
 8011720:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011722:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011726:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	fa93 f2a3 	rbit	r2, r3
 8011730:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011734:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8011738:	601a      	str	r2, [r3, #0]
  return result;
 801173a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801173e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8011742:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011744:	fab3 f383 	clz	r3, r3
 8011748:	b2db      	uxtb	r3, r3
 801174a:	461a      	mov	r2, r3
 801174c:	4b5d      	ldr	r3, [pc, #372]	; (80118c4 <HAL_RCC_OscConfig+0x8fc>)
 801174e:	4413      	add	r3, r2
 8011750:	009b      	lsls	r3, r3, #2
 8011752:	461a      	mov	r2, r3
 8011754:	2300      	movs	r3, #0
 8011756:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011758:	f7ff f8c2 	bl	80108e0 <HAL_GetTick>
 801175c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011760:	e00a      	b.n	8011778 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011762:	f7ff f8bd 	bl	80108e0 <HAL_GetTick>
 8011766:	4602      	mov	r2, r0
 8011768:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801176c:	1ad3      	subs	r3, r2, r3
 801176e:	2b02      	cmp	r3, #2
 8011770:	d902      	bls.n	8011778 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8011772:	2303      	movs	r3, #3
 8011774:	f000 bc75 	b.w	8012062 <HAL_RCC_OscConfig+0x109a>
 8011778:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801177c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8011780:	2202      	movs	r2, #2
 8011782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011784:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011788:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	fa93 f2a3 	rbit	r2, r3
 8011792:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011796:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801179a:	601a      	str	r2, [r3, #0]
 801179c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80117a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80117a4:	2202      	movs	r2, #2
 80117a6:	601a      	str	r2, [r3, #0]
 80117a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80117ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	fa93 f2a3 	rbit	r2, r3
 80117b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80117ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80117be:	601a      	str	r2, [r3, #0]
 80117c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80117c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80117c8:	2202      	movs	r2, #2
 80117ca:	601a      	str	r2, [r3, #0]
 80117cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80117d0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	fa93 f2a3 	rbit	r2, r3
 80117da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80117de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80117e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80117e4:	4b36      	ldr	r3, [pc, #216]	; (80118c0 <HAL_RCC_OscConfig+0x8f8>)
 80117e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80117ec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80117f0:	2102      	movs	r1, #2
 80117f2:	6019      	str	r1, [r3, #0]
 80117f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80117f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	fa93 f1a3 	rbit	r1, r3
 8011802:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011806:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801180a:	6019      	str	r1, [r3, #0]
  return result;
 801180c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011810:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	fab3 f383 	clz	r3, r3
 801181a:	b2db      	uxtb	r3, r3
 801181c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8011820:	b2db      	uxtb	r3, r3
 8011822:	f003 031f 	and.w	r3, r3, #31
 8011826:	2101      	movs	r1, #1
 8011828:	fa01 f303 	lsl.w	r3, r1, r3
 801182c:	4013      	ands	r3, r2
 801182e:	2b00      	cmp	r3, #0
 8011830:	d197      	bne.n	8011762 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011832:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011836:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	f003 0304 	and.w	r3, r3, #4
 8011842:	2b00      	cmp	r3, #0
 8011844:	f000 81a5 	beq.w	8011b92 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011848:	2300      	movs	r3, #0
 801184a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801184e:	4b1c      	ldr	r3, [pc, #112]	; (80118c0 <HAL_RCC_OscConfig+0x8f8>)
 8011850:	69db      	ldr	r3, [r3, #28]
 8011852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011856:	2b00      	cmp	r3, #0
 8011858:	d116      	bne.n	8011888 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801185a:	4b19      	ldr	r3, [pc, #100]	; (80118c0 <HAL_RCC_OscConfig+0x8f8>)
 801185c:	69db      	ldr	r3, [r3, #28]
 801185e:	4a18      	ldr	r2, [pc, #96]	; (80118c0 <HAL_RCC_OscConfig+0x8f8>)
 8011860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011864:	61d3      	str	r3, [r2, #28]
 8011866:	4b16      	ldr	r3, [pc, #88]	; (80118c0 <HAL_RCC_OscConfig+0x8f8>)
 8011868:	69db      	ldr	r3, [r3, #28]
 801186a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 801186e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011872:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8011876:	601a      	str	r2, [r3, #0]
 8011878:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801187c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8011880:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8011882:	2301      	movs	r3, #1
 8011884:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011888:	4b0f      	ldr	r3, [pc, #60]	; (80118c8 <HAL_RCC_OscConfig+0x900>)
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011890:	2b00      	cmp	r3, #0
 8011892:	d121      	bne.n	80118d8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011894:	4b0c      	ldr	r3, [pc, #48]	; (80118c8 <HAL_RCC_OscConfig+0x900>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	4a0b      	ldr	r2, [pc, #44]	; (80118c8 <HAL_RCC_OscConfig+0x900>)
 801189a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801189e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80118a0:	f7ff f81e 	bl	80108e0 <HAL_GetTick>
 80118a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80118a8:	e010      	b.n	80118cc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80118aa:	f7ff f819 	bl	80108e0 <HAL_GetTick>
 80118ae:	4602      	mov	r2, r0
 80118b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80118b4:	1ad3      	subs	r3, r2, r3
 80118b6:	2b64      	cmp	r3, #100	; 0x64
 80118b8:	d908      	bls.n	80118cc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80118ba:	2303      	movs	r3, #3
 80118bc:	e3d1      	b.n	8012062 <HAL_RCC_OscConfig+0x109a>
 80118be:	bf00      	nop
 80118c0:	40021000 	.word	0x40021000
 80118c4:	10908120 	.word	0x10908120
 80118c8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80118cc:	4b8d      	ldr	r3, [pc, #564]	; (8011b04 <HAL_RCC_OscConfig+0xb3c>)
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d0e8      	beq.n	80118aa <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80118d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80118dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	689b      	ldr	r3, [r3, #8]
 80118e4:	2b01      	cmp	r3, #1
 80118e6:	d106      	bne.n	80118f6 <HAL_RCC_OscConfig+0x92e>
 80118e8:	4b87      	ldr	r3, [pc, #540]	; (8011b08 <HAL_RCC_OscConfig+0xb40>)
 80118ea:	6a1b      	ldr	r3, [r3, #32]
 80118ec:	4a86      	ldr	r2, [pc, #536]	; (8011b08 <HAL_RCC_OscConfig+0xb40>)
 80118ee:	f043 0301 	orr.w	r3, r3, #1
 80118f2:	6213      	str	r3, [r2, #32]
 80118f4:	e035      	b.n	8011962 <HAL_RCC_OscConfig+0x99a>
 80118f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80118fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	689b      	ldr	r3, [r3, #8]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d10c      	bne.n	8011920 <HAL_RCC_OscConfig+0x958>
 8011906:	4b80      	ldr	r3, [pc, #512]	; (8011b08 <HAL_RCC_OscConfig+0xb40>)
 8011908:	6a1b      	ldr	r3, [r3, #32]
 801190a:	4a7f      	ldr	r2, [pc, #508]	; (8011b08 <HAL_RCC_OscConfig+0xb40>)
 801190c:	f023 0301 	bic.w	r3, r3, #1
 8011910:	6213      	str	r3, [r2, #32]
 8011912:	4b7d      	ldr	r3, [pc, #500]	; (8011b08 <HAL_RCC_OscConfig+0xb40>)
 8011914:	6a1b      	ldr	r3, [r3, #32]
 8011916:	4a7c      	ldr	r2, [pc, #496]	; (8011b08 <HAL_RCC_OscConfig+0xb40>)
 8011918:	f023 0304 	bic.w	r3, r3, #4
 801191c:	6213      	str	r3, [r2, #32]
 801191e:	e020      	b.n	8011962 <HAL_RCC_OscConfig+0x99a>
 8011920:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011924:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	689b      	ldr	r3, [r3, #8]
 801192c:	2b05      	cmp	r3, #5
 801192e:	d10c      	bne.n	801194a <HAL_RCC_OscConfig+0x982>
 8011930:	4b75      	ldr	r3, [pc, #468]	; (8011b08 <HAL_RCC_OscConfig+0xb40>)
 8011932:	6a1b      	ldr	r3, [r3, #32]
 8011934:	4a74      	ldr	r2, [pc, #464]	; (8011b08 <HAL_RCC_OscConfig+0xb40>)
 8011936:	f043 0304 	orr.w	r3, r3, #4
 801193a:	6213      	str	r3, [r2, #32]
 801193c:	4b72      	ldr	r3, [pc, #456]	; (8011b08 <HAL_RCC_OscConfig+0xb40>)
 801193e:	6a1b      	ldr	r3, [r3, #32]
 8011940:	4a71      	ldr	r2, [pc, #452]	; (8011b08 <HAL_RCC_OscConfig+0xb40>)
 8011942:	f043 0301 	orr.w	r3, r3, #1
 8011946:	6213      	str	r3, [r2, #32]
 8011948:	e00b      	b.n	8011962 <HAL_RCC_OscConfig+0x99a>
 801194a:	4b6f      	ldr	r3, [pc, #444]	; (8011b08 <HAL_RCC_OscConfig+0xb40>)
 801194c:	6a1b      	ldr	r3, [r3, #32]
 801194e:	4a6e      	ldr	r2, [pc, #440]	; (8011b08 <HAL_RCC_OscConfig+0xb40>)
 8011950:	f023 0301 	bic.w	r3, r3, #1
 8011954:	6213      	str	r3, [r2, #32]
 8011956:	4b6c      	ldr	r3, [pc, #432]	; (8011b08 <HAL_RCC_OscConfig+0xb40>)
 8011958:	6a1b      	ldr	r3, [r3, #32]
 801195a:	4a6b      	ldr	r2, [pc, #428]	; (8011b08 <HAL_RCC_OscConfig+0xb40>)
 801195c:	f023 0304 	bic.w	r3, r3, #4
 8011960:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011966:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	689b      	ldr	r3, [r3, #8]
 801196e:	2b00      	cmp	r3, #0
 8011970:	f000 8081 	beq.w	8011a76 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011974:	f7fe ffb4 	bl	80108e0 <HAL_GetTick>
 8011978:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801197c:	e00b      	b.n	8011996 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801197e:	f7fe ffaf 	bl	80108e0 <HAL_GetTick>
 8011982:	4602      	mov	r2, r0
 8011984:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011988:	1ad3      	subs	r3, r2, r3
 801198a:	f241 3288 	movw	r2, #5000	; 0x1388
 801198e:	4293      	cmp	r3, r2
 8011990:	d901      	bls.n	8011996 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8011992:	2303      	movs	r3, #3
 8011994:	e365      	b.n	8012062 <HAL_RCC_OscConfig+0x109a>
 8011996:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801199a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801199e:	2202      	movs	r2, #2
 80119a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80119a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80119a6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	fa93 f2a3 	rbit	r2, r3
 80119b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80119b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80119b8:	601a      	str	r2, [r3, #0]
 80119ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80119be:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80119c2:	2202      	movs	r2, #2
 80119c4:	601a      	str	r2, [r3, #0]
 80119c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80119ca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	fa93 f2a3 	rbit	r2, r3
 80119d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80119d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80119dc:	601a      	str	r2, [r3, #0]
  return result;
 80119de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80119e2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80119e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80119e8:	fab3 f383 	clz	r3, r3
 80119ec:	b2db      	uxtb	r3, r3
 80119ee:	095b      	lsrs	r3, r3, #5
 80119f0:	b2db      	uxtb	r3, r3
 80119f2:	f043 0302 	orr.w	r3, r3, #2
 80119f6:	b2db      	uxtb	r3, r3
 80119f8:	2b02      	cmp	r3, #2
 80119fa:	d102      	bne.n	8011a02 <HAL_RCC_OscConfig+0xa3a>
 80119fc:	4b42      	ldr	r3, [pc, #264]	; (8011b08 <HAL_RCC_OscConfig+0xb40>)
 80119fe:	6a1b      	ldr	r3, [r3, #32]
 8011a00:	e013      	b.n	8011a2a <HAL_RCC_OscConfig+0xa62>
 8011a02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011a06:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8011a0a:	2202      	movs	r2, #2
 8011a0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011a0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011a12:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	fa93 f2a3 	rbit	r2, r3
 8011a1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011a20:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8011a24:	601a      	str	r2, [r3, #0]
 8011a26:	4b38      	ldr	r3, [pc, #224]	; (8011b08 <HAL_RCC_OscConfig+0xb40>)
 8011a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011a2e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8011a32:	2102      	movs	r1, #2
 8011a34:	6011      	str	r1, [r2, #0]
 8011a36:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011a3a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8011a3e:	6812      	ldr	r2, [r2, #0]
 8011a40:	fa92 f1a2 	rbit	r1, r2
 8011a44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011a48:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8011a4c:	6011      	str	r1, [r2, #0]
  return result;
 8011a4e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011a52:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8011a56:	6812      	ldr	r2, [r2, #0]
 8011a58:	fab2 f282 	clz	r2, r2
 8011a5c:	b2d2      	uxtb	r2, r2
 8011a5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011a62:	b2d2      	uxtb	r2, r2
 8011a64:	f002 021f 	and.w	r2, r2, #31
 8011a68:	2101      	movs	r1, #1
 8011a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8011a6e:	4013      	ands	r3, r2
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d084      	beq.n	801197e <HAL_RCC_OscConfig+0x9b6>
 8011a74:	e083      	b.n	8011b7e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011a76:	f7fe ff33 	bl	80108e0 <HAL_GetTick>
 8011a7a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011a7e:	e00b      	b.n	8011a98 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011a80:	f7fe ff2e 	bl	80108e0 <HAL_GetTick>
 8011a84:	4602      	mov	r2, r0
 8011a86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011a8a:	1ad3      	subs	r3, r2, r3
 8011a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a90:	4293      	cmp	r3, r2
 8011a92:	d901      	bls.n	8011a98 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8011a94:	2303      	movs	r3, #3
 8011a96:	e2e4      	b.n	8012062 <HAL_RCC_OscConfig+0x109a>
 8011a98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011a9c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8011aa0:	2202      	movs	r2, #2
 8011aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011aa8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	fa93 f2a3 	rbit	r2, r3
 8011ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011ab6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8011aba:	601a      	str	r2, [r3, #0]
 8011abc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011ac0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8011ac4:	2202      	movs	r2, #2
 8011ac6:	601a      	str	r2, [r3, #0]
 8011ac8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011acc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	fa93 f2a3 	rbit	r2, r3
 8011ad6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011ada:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8011ade:	601a      	str	r2, [r3, #0]
  return result;
 8011ae0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011ae4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8011ae8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011aea:	fab3 f383 	clz	r3, r3
 8011aee:	b2db      	uxtb	r3, r3
 8011af0:	095b      	lsrs	r3, r3, #5
 8011af2:	b2db      	uxtb	r3, r3
 8011af4:	f043 0302 	orr.w	r3, r3, #2
 8011af8:	b2db      	uxtb	r3, r3
 8011afa:	2b02      	cmp	r3, #2
 8011afc:	d106      	bne.n	8011b0c <HAL_RCC_OscConfig+0xb44>
 8011afe:	4b02      	ldr	r3, [pc, #8]	; (8011b08 <HAL_RCC_OscConfig+0xb40>)
 8011b00:	6a1b      	ldr	r3, [r3, #32]
 8011b02:	e017      	b.n	8011b34 <HAL_RCC_OscConfig+0xb6c>
 8011b04:	40007000 	.word	0x40007000
 8011b08:	40021000 	.word	0x40021000
 8011b0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011b10:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8011b14:	2202      	movs	r2, #2
 8011b16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011b1c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	fa93 f2a3 	rbit	r2, r3
 8011b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011b2a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8011b2e:	601a      	str	r2, [r3, #0]
 8011b30:	4bb3      	ldr	r3, [pc, #716]	; (8011e00 <HAL_RCC_OscConfig+0xe38>)
 8011b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011b38:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8011b3c:	2102      	movs	r1, #2
 8011b3e:	6011      	str	r1, [r2, #0]
 8011b40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011b44:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8011b48:	6812      	ldr	r2, [r2, #0]
 8011b4a:	fa92 f1a2 	rbit	r1, r2
 8011b4e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011b52:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8011b56:	6011      	str	r1, [r2, #0]
  return result;
 8011b58:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011b5c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8011b60:	6812      	ldr	r2, [r2, #0]
 8011b62:	fab2 f282 	clz	r2, r2
 8011b66:	b2d2      	uxtb	r2, r2
 8011b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011b6c:	b2d2      	uxtb	r2, r2
 8011b6e:	f002 021f 	and.w	r2, r2, #31
 8011b72:	2101      	movs	r1, #1
 8011b74:	fa01 f202 	lsl.w	r2, r1, r2
 8011b78:	4013      	ands	r3, r2
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d180      	bne.n	8011a80 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8011b7e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8011b82:	2b01      	cmp	r3, #1
 8011b84:	d105      	bne.n	8011b92 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011b86:	4b9e      	ldr	r3, [pc, #632]	; (8011e00 <HAL_RCC_OscConfig+0xe38>)
 8011b88:	69db      	ldr	r3, [r3, #28]
 8011b8a:	4a9d      	ldr	r2, [pc, #628]	; (8011e00 <HAL_RCC_OscConfig+0xe38>)
 8011b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011b90:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011b92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011b96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	699b      	ldr	r3, [r3, #24]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	f000 825e 	beq.w	8012060 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011ba4:	4b96      	ldr	r3, [pc, #600]	; (8011e00 <HAL_RCC_OscConfig+0xe38>)
 8011ba6:	685b      	ldr	r3, [r3, #4]
 8011ba8:	f003 030c 	and.w	r3, r3, #12
 8011bac:	2b08      	cmp	r3, #8
 8011bae:	f000 821f 	beq.w	8011ff0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011bb6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	699b      	ldr	r3, [r3, #24]
 8011bbe:	2b02      	cmp	r3, #2
 8011bc0:	f040 8170 	bne.w	8011ea4 <HAL_RCC_OscConfig+0xedc>
 8011bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011bc8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8011bcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011bd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011bd6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	fa93 f2a3 	rbit	r2, r3
 8011be0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011be4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8011be8:	601a      	str	r2, [r3, #0]
  return result;
 8011bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011bee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8011bf2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011bf4:	fab3 f383 	clz	r3, r3
 8011bf8:	b2db      	uxtb	r3, r3
 8011bfa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8011bfe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8011c02:	009b      	lsls	r3, r3, #2
 8011c04:	461a      	mov	r2, r3
 8011c06:	2300      	movs	r3, #0
 8011c08:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011c0a:	f7fe fe69 	bl	80108e0 <HAL_GetTick>
 8011c0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011c12:	e009      	b.n	8011c28 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011c14:	f7fe fe64 	bl	80108e0 <HAL_GetTick>
 8011c18:	4602      	mov	r2, r0
 8011c1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011c1e:	1ad3      	subs	r3, r2, r3
 8011c20:	2b02      	cmp	r3, #2
 8011c22:	d901      	bls.n	8011c28 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8011c24:	2303      	movs	r3, #3
 8011c26:	e21c      	b.n	8012062 <HAL_RCC_OscConfig+0x109a>
 8011c28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011c2c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8011c30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8011c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011c3a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	fa93 f2a3 	rbit	r2, r3
 8011c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011c48:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8011c4c:	601a      	str	r2, [r3, #0]
  return result;
 8011c4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011c52:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8011c56:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011c58:	fab3 f383 	clz	r3, r3
 8011c5c:	b2db      	uxtb	r3, r3
 8011c5e:	095b      	lsrs	r3, r3, #5
 8011c60:	b2db      	uxtb	r3, r3
 8011c62:	f043 0301 	orr.w	r3, r3, #1
 8011c66:	b2db      	uxtb	r3, r3
 8011c68:	2b01      	cmp	r3, #1
 8011c6a:	d102      	bne.n	8011c72 <HAL_RCC_OscConfig+0xcaa>
 8011c6c:	4b64      	ldr	r3, [pc, #400]	; (8011e00 <HAL_RCC_OscConfig+0xe38>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	e027      	b.n	8011cc2 <HAL_RCC_OscConfig+0xcfa>
 8011c72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011c76:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8011c7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8011c7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011c80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011c84:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	fa93 f2a3 	rbit	r2, r3
 8011c8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011c92:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8011c96:	601a      	str	r2, [r3, #0]
 8011c98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011c9c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8011ca0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8011ca4:	601a      	str	r2, [r3, #0]
 8011ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011caa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	fa93 f2a3 	rbit	r2, r3
 8011cb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011cb8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8011cbc:	601a      	str	r2, [r3, #0]
 8011cbe:	4b50      	ldr	r3, [pc, #320]	; (8011e00 <HAL_RCC_OscConfig+0xe38>)
 8011cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cc2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011cc6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8011cca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8011cce:	6011      	str	r1, [r2, #0]
 8011cd0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011cd4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8011cd8:	6812      	ldr	r2, [r2, #0]
 8011cda:	fa92 f1a2 	rbit	r1, r2
 8011cde:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011ce2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8011ce6:	6011      	str	r1, [r2, #0]
  return result;
 8011ce8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011cec:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8011cf0:	6812      	ldr	r2, [r2, #0]
 8011cf2:	fab2 f282 	clz	r2, r2
 8011cf6:	b2d2      	uxtb	r2, r2
 8011cf8:	f042 0220 	orr.w	r2, r2, #32
 8011cfc:	b2d2      	uxtb	r2, r2
 8011cfe:	f002 021f 	and.w	r2, r2, #31
 8011d02:	2101      	movs	r1, #1
 8011d04:	fa01 f202 	lsl.w	r2, r1, r2
 8011d08:	4013      	ands	r3, r2
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d182      	bne.n	8011c14 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011d0e:	4b3c      	ldr	r3, [pc, #240]	; (8011e00 <HAL_RCC_OscConfig+0xe38>)
 8011d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d12:	f023 020f 	bic.w	r2, r3, #15
 8011d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011d1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d22:	4937      	ldr	r1, [pc, #220]	; (8011e00 <HAL_RCC_OscConfig+0xe38>)
 8011d24:	4313      	orrs	r3, r2
 8011d26:	62cb      	str	r3, [r1, #44]	; 0x2c
 8011d28:	4b35      	ldr	r3, [pc, #212]	; (8011e00 <HAL_RCC_OscConfig+0xe38>)
 8011d2a:	685b      	ldr	r3, [r3, #4]
 8011d2c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8011d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011d34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	6a19      	ldr	r1, [r3, #32]
 8011d3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011d40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	69db      	ldr	r3, [r3, #28]
 8011d48:	430b      	orrs	r3, r1
 8011d4a:	492d      	ldr	r1, [pc, #180]	; (8011e00 <HAL_RCC_OscConfig+0xe38>)
 8011d4c:	4313      	orrs	r3, r2
 8011d4e:	604b      	str	r3, [r1, #4]
 8011d50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011d54:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8011d58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011d5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011d5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011d62:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	fa93 f2a3 	rbit	r2, r3
 8011d6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011d70:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8011d74:	601a      	str	r2, [r3, #0]
  return result;
 8011d76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011d7a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8011d7e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011d80:	fab3 f383 	clz	r3, r3
 8011d84:	b2db      	uxtb	r3, r3
 8011d86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8011d8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8011d8e:	009b      	lsls	r3, r3, #2
 8011d90:	461a      	mov	r2, r3
 8011d92:	2301      	movs	r3, #1
 8011d94:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011d96:	f7fe fda3 	bl	80108e0 <HAL_GetTick>
 8011d9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011d9e:	e009      	b.n	8011db4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011da0:	f7fe fd9e 	bl	80108e0 <HAL_GetTick>
 8011da4:	4602      	mov	r2, r0
 8011da6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011daa:	1ad3      	subs	r3, r2, r3
 8011dac:	2b02      	cmp	r3, #2
 8011dae:	d901      	bls.n	8011db4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8011db0:	2303      	movs	r3, #3
 8011db2:	e156      	b.n	8012062 <HAL_RCC_OscConfig+0x109a>
 8011db4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011db8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8011dbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8011dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011dc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011dc6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	fa93 f2a3 	rbit	r2, r3
 8011dd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011dd4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8011dd8:	601a      	str	r2, [r3, #0]
  return result;
 8011dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011dde:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8011de2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011de4:	fab3 f383 	clz	r3, r3
 8011de8:	b2db      	uxtb	r3, r3
 8011dea:	095b      	lsrs	r3, r3, #5
 8011dec:	b2db      	uxtb	r3, r3
 8011dee:	f043 0301 	orr.w	r3, r3, #1
 8011df2:	b2db      	uxtb	r3, r3
 8011df4:	2b01      	cmp	r3, #1
 8011df6:	d105      	bne.n	8011e04 <HAL_RCC_OscConfig+0xe3c>
 8011df8:	4b01      	ldr	r3, [pc, #4]	; (8011e00 <HAL_RCC_OscConfig+0xe38>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	e02a      	b.n	8011e54 <HAL_RCC_OscConfig+0xe8c>
 8011dfe:	bf00      	nop
 8011e00:	40021000 	.word	0x40021000
 8011e04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011e08:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011e0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8011e10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011e12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011e16:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	fa93 f2a3 	rbit	r2, r3
 8011e20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011e24:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8011e28:	601a      	str	r2, [r3, #0]
 8011e2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011e2e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8011e32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8011e36:	601a      	str	r2, [r3, #0]
 8011e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011e3c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	fa93 f2a3 	rbit	r2, r3
 8011e46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011e4a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8011e4e:	601a      	str	r2, [r3, #0]
 8011e50:	4b86      	ldr	r3, [pc, #536]	; (801206c <HAL_RCC_OscConfig+0x10a4>)
 8011e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e54:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011e58:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8011e5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8011e60:	6011      	str	r1, [r2, #0]
 8011e62:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011e66:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8011e6a:	6812      	ldr	r2, [r2, #0]
 8011e6c:	fa92 f1a2 	rbit	r1, r2
 8011e70:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011e74:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8011e78:	6011      	str	r1, [r2, #0]
  return result;
 8011e7a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011e7e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8011e82:	6812      	ldr	r2, [r2, #0]
 8011e84:	fab2 f282 	clz	r2, r2
 8011e88:	b2d2      	uxtb	r2, r2
 8011e8a:	f042 0220 	orr.w	r2, r2, #32
 8011e8e:	b2d2      	uxtb	r2, r2
 8011e90:	f002 021f 	and.w	r2, r2, #31
 8011e94:	2101      	movs	r1, #1
 8011e96:	fa01 f202 	lsl.w	r2, r1, r2
 8011e9a:	4013      	ands	r3, r2
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	f43f af7f 	beq.w	8011da0 <HAL_RCC_OscConfig+0xdd8>
 8011ea2:	e0dd      	b.n	8012060 <HAL_RCC_OscConfig+0x1098>
 8011ea4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011ea8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8011eac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011eb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011eb6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	fa93 f2a3 	rbit	r2, r3
 8011ec0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011ec4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8011ec8:	601a      	str	r2, [r3, #0]
  return result;
 8011eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011ece:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8011ed2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011ed4:	fab3 f383 	clz	r3, r3
 8011ed8:	b2db      	uxtb	r3, r3
 8011eda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8011ede:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8011ee2:	009b      	lsls	r3, r3, #2
 8011ee4:	461a      	mov	r2, r3
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011eea:	f7fe fcf9 	bl	80108e0 <HAL_GetTick>
 8011eee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011ef2:	e009      	b.n	8011f08 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011ef4:	f7fe fcf4 	bl	80108e0 <HAL_GetTick>
 8011ef8:	4602      	mov	r2, r0
 8011efa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011efe:	1ad3      	subs	r3, r2, r3
 8011f00:	2b02      	cmp	r3, #2
 8011f02:	d901      	bls.n	8011f08 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8011f04:	2303      	movs	r3, #3
 8011f06:	e0ac      	b.n	8012062 <HAL_RCC_OscConfig+0x109a>
 8011f08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011f0c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8011f10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8011f14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011f16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011f1a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	fa93 f2a3 	rbit	r2, r3
 8011f24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011f28:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8011f2c:	601a      	str	r2, [r3, #0]
  return result;
 8011f2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011f32:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8011f36:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011f38:	fab3 f383 	clz	r3, r3
 8011f3c:	b2db      	uxtb	r3, r3
 8011f3e:	095b      	lsrs	r3, r3, #5
 8011f40:	b2db      	uxtb	r3, r3
 8011f42:	f043 0301 	orr.w	r3, r3, #1
 8011f46:	b2db      	uxtb	r3, r3
 8011f48:	2b01      	cmp	r3, #1
 8011f4a:	d102      	bne.n	8011f52 <HAL_RCC_OscConfig+0xf8a>
 8011f4c:	4b47      	ldr	r3, [pc, #284]	; (801206c <HAL_RCC_OscConfig+0x10a4>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	e027      	b.n	8011fa2 <HAL_RCC_OscConfig+0xfda>
 8011f52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011f56:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8011f5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8011f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011f60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011f64:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	fa93 f2a3 	rbit	r2, r3
 8011f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011f72:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8011f76:	601a      	str	r2, [r3, #0]
 8011f78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011f7c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011f80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8011f84:	601a      	str	r2, [r3, #0]
 8011f86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011f8a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	fa93 f2a3 	rbit	r2, r3
 8011f94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011f98:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8011f9c:	601a      	str	r2, [r3, #0]
 8011f9e:	4b33      	ldr	r3, [pc, #204]	; (801206c <HAL_RCC_OscConfig+0x10a4>)
 8011fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fa2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011fa6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8011faa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8011fae:	6011      	str	r1, [r2, #0]
 8011fb0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011fb4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8011fb8:	6812      	ldr	r2, [r2, #0]
 8011fba:	fa92 f1a2 	rbit	r1, r2
 8011fbe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011fc2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8011fc6:	6011      	str	r1, [r2, #0]
  return result;
 8011fc8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011fcc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8011fd0:	6812      	ldr	r2, [r2, #0]
 8011fd2:	fab2 f282 	clz	r2, r2
 8011fd6:	b2d2      	uxtb	r2, r2
 8011fd8:	f042 0220 	orr.w	r2, r2, #32
 8011fdc:	b2d2      	uxtb	r2, r2
 8011fde:	f002 021f 	and.w	r2, r2, #31
 8011fe2:	2101      	movs	r1, #1
 8011fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8011fe8:	4013      	ands	r3, r2
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d182      	bne.n	8011ef4 <HAL_RCC_OscConfig+0xf2c>
 8011fee:	e037      	b.n	8012060 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011ff0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011ff4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	699b      	ldr	r3, [r3, #24]
 8011ffc:	2b01      	cmp	r3, #1
 8011ffe:	d101      	bne.n	8012004 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8012000:	2301      	movs	r3, #1
 8012002:	e02e      	b.n	8012062 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8012004:	4b19      	ldr	r3, [pc, #100]	; (801206c <HAL_RCC_OscConfig+0x10a4>)
 8012006:	685b      	ldr	r3, [r3, #4]
 8012008:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 801200c:	4b17      	ldr	r3, [pc, #92]	; (801206c <HAL_RCC_OscConfig+0x10a4>)
 801200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012010:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8012014:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012018:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 801201c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8012020:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	69db      	ldr	r3, [r3, #28]
 8012028:	429a      	cmp	r2, r3
 801202a:	d117      	bne.n	801205c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 801202c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012030:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8012034:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8012038:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8012040:	429a      	cmp	r2, r3
 8012042:	d10b      	bne.n	801205c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8012044:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8012048:	f003 020f 	and.w	r2, r3, #15
 801204c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8012050:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8012058:	429a      	cmp	r2, r3
 801205a:	d001      	beq.n	8012060 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 801205c:	2301      	movs	r3, #1
 801205e:	e000      	b.n	8012062 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8012060:	2300      	movs	r3, #0
}
 8012062:	4618      	mov	r0, r3
 8012064:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}
 801206c:	40021000 	.word	0x40021000

08012070 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b09e      	sub	sp, #120	; 0x78
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
 8012078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 801207a:	2300      	movs	r3, #0
 801207c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d101      	bne.n	8012088 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8012084:	2301      	movs	r3, #1
 8012086:	e162      	b.n	801234e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012088:	4b90      	ldr	r3, [pc, #576]	; (80122cc <HAL_RCC_ClockConfig+0x25c>)
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	f003 0307 	and.w	r3, r3, #7
 8012090:	683a      	ldr	r2, [r7, #0]
 8012092:	429a      	cmp	r2, r3
 8012094:	d910      	bls.n	80120b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012096:	4b8d      	ldr	r3, [pc, #564]	; (80122cc <HAL_RCC_ClockConfig+0x25c>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	f023 0207 	bic.w	r2, r3, #7
 801209e:	498b      	ldr	r1, [pc, #556]	; (80122cc <HAL_RCC_ClockConfig+0x25c>)
 80120a0:	683b      	ldr	r3, [r7, #0]
 80120a2:	4313      	orrs	r3, r2
 80120a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80120a6:	4b89      	ldr	r3, [pc, #548]	; (80122cc <HAL_RCC_ClockConfig+0x25c>)
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	f003 0307 	and.w	r3, r3, #7
 80120ae:	683a      	ldr	r2, [r7, #0]
 80120b0:	429a      	cmp	r2, r3
 80120b2:	d001      	beq.n	80120b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80120b4:	2301      	movs	r3, #1
 80120b6:	e14a      	b.n	801234e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	f003 0302 	and.w	r3, r3, #2
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d008      	beq.n	80120d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80120c4:	4b82      	ldr	r3, [pc, #520]	; (80122d0 <HAL_RCC_ClockConfig+0x260>)
 80120c6:	685b      	ldr	r3, [r3, #4]
 80120c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	689b      	ldr	r3, [r3, #8]
 80120d0:	497f      	ldr	r1, [pc, #508]	; (80122d0 <HAL_RCC_ClockConfig+0x260>)
 80120d2:	4313      	orrs	r3, r2
 80120d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	f003 0301 	and.w	r3, r3, #1
 80120de:	2b00      	cmp	r3, #0
 80120e0:	f000 80dc 	beq.w	801229c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	685b      	ldr	r3, [r3, #4]
 80120e8:	2b01      	cmp	r3, #1
 80120ea:	d13c      	bne.n	8012166 <HAL_RCC_ClockConfig+0xf6>
 80120ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80120f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80120f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80120f4:	fa93 f3a3 	rbit	r3, r3
 80120f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80120fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80120fc:	fab3 f383 	clz	r3, r3
 8012100:	b2db      	uxtb	r3, r3
 8012102:	095b      	lsrs	r3, r3, #5
 8012104:	b2db      	uxtb	r3, r3
 8012106:	f043 0301 	orr.w	r3, r3, #1
 801210a:	b2db      	uxtb	r3, r3
 801210c:	2b01      	cmp	r3, #1
 801210e:	d102      	bne.n	8012116 <HAL_RCC_ClockConfig+0xa6>
 8012110:	4b6f      	ldr	r3, [pc, #444]	; (80122d0 <HAL_RCC_ClockConfig+0x260>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	e00f      	b.n	8012136 <HAL_RCC_ClockConfig+0xc6>
 8012116:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801211a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801211c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801211e:	fa93 f3a3 	rbit	r3, r3
 8012122:	667b      	str	r3, [r7, #100]	; 0x64
 8012124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012128:	663b      	str	r3, [r7, #96]	; 0x60
 801212a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801212c:	fa93 f3a3 	rbit	r3, r3
 8012130:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012132:	4b67      	ldr	r3, [pc, #412]	; (80122d0 <HAL_RCC_ClockConfig+0x260>)
 8012134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012136:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801213a:	65ba      	str	r2, [r7, #88]	; 0x58
 801213c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801213e:	fa92 f2a2 	rbit	r2, r2
 8012142:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8012144:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012146:	fab2 f282 	clz	r2, r2
 801214a:	b2d2      	uxtb	r2, r2
 801214c:	f042 0220 	orr.w	r2, r2, #32
 8012150:	b2d2      	uxtb	r2, r2
 8012152:	f002 021f 	and.w	r2, r2, #31
 8012156:	2101      	movs	r1, #1
 8012158:	fa01 f202 	lsl.w	r2, r1, r2
 801215c:	4013      	ands	r3, r2
 801215e:	2b00      	cmp	r3, #0
 8012160:	d17b      	bne.n	801225a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8012162:	2301      	movs	r3, #1
 8012164:	e0f3      	b.n	801234e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	685b      	ldr	r3, [r3, #4]
 801216a:	2b02      	cmp	r3, #2
 801216c:	d13c      	bne.n	80121e8 <HAL_RCC_ClockConfig+0x178>
 801216e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012172:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012176:	fa93 f3a3 	rbit	r3, r3
 801217a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 801217c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801217e:	fab3 f383 	clz	r3, r3
 8012182:	b2db      	uxtb	r3, r3
 8012184:	095b      	lsrs	r3, r3, #5
 8012186:	b2db      	uxtb	r3, r3
 8012188:	f043 0301 	orr.w	r3, r3, #1
 801218c:	b2db      	uxtb	r3, r3
 801218e:	2b01      	cmp	r3, #1
 8012190:	d102      	bne.n	8012198 <HAL_RCC_ClockConfig+0x128>
 8012192:	4b4f      	ldr	r3, [pc, #316]	; (80122d0 <HAL_RCC_ClockConfig+0x260>)
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	e00f      	b.n	80121b8 <HAL_RCC_ClockConfig+0x148>
 8012198:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801219c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801219e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121a0:	fa93 f3a3 	rbit	r3, r3
 80121a4:	647b      	str	r3, [r7, #68]	; 0x44
 80121a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80121aa:	643b      	str	r3, [r7, #64]	; 0x40
 80121ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121ae:	fa93 f3a3 	rbit	r3, r3
 80121b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80121b4:	4b46      	ldr	r3, [pc, #280]	; (80122d0 <HAL_RCC_ClockConfig+0x260>)
 80121b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80121bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80121be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80121c0:	fa92 f2a2 	rbit	r2, r2
 80121c4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80121c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80121c8:	fab2 f282 	clz	r2, r2
 80121cc:	b2d2      	uxtb	r2, r2
 80121ce:	f042 0220 	orr.w	r2, r2, #32
 80121d2:	b2d2      	uxtb	r2, r2
 80121d4:	f002 021f 	and.w	r2, r2, #31
 80121d8:	2101      	movs	r1, #1
 80121da:	fa01 f202 	lsl.w	r2, r1, r2
 80121de:	4013      	ands	r3, r2
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d13a      	bne.n	801225a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80121e4:	2301      	movs	r3, #1
 80121e6:	e0b2      	b.n	801234e <HAL_RCC_ClockConfig+0x2de>
 80121e8:	2302      	movs	r3, #2
 80121ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80121ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ee:	fa93 f3a3 	rbit	r3, r3
 80121f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80121f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80121f6:	fab3 f383 	clz	r3, r3
 80121fa:	b2db      	uxtb	r3, r3
 80121fc:	095b      	lsrs	r3, r3, #5
 80121fe:	b2db      	uxtb	r3, r3
 8012200:	f043 0301 	orr.w	r3, r3, #1
 8012204:	b2db      	uxtb	r3, r3
 8012206:	2b01      	cmp	r3, #1
 8012208:	d102      	bne.n	8012210 <HAL_RCC_ClockConfig+0x1a0>
 801220a:	4b31      	ldr	r3, [pc, #196]	; (80122d0 <HAL_RCC_ClockConfig+0x260>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	e00d      	b.n	801222c <HAL_RCC_ClockConfig+0x1bc>
 8012210:	2302      	movs	r3, #2
 8012212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012216:	fa93 f3a3 	rbit	r3, r3
 801221a:	627b      	str	r3, [r7, #36]	; 0x24
 801221c:	2302      	movs	r3, #2
 801221e:	623b      	str	r3, [r7, #32]
 8012220:	6a3b      	ldr	r3, [r7, #32]
 8012222:	fa93 f3a3 	rbit	r3, r3
 8012226:	61fb      	str	r3, [r7, #28]
 8012228:	4b29      	ldr	r3, [pc, #164]	; (80122d0 <HAL_RCC_ClockConfig+0x260>)
 801222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801222c:	2202      	movs	r2, #2
 801222e:	61ba      	str	r2, [r7, #24]
 8012230:	69ba      	ldr	r2, [r7, #24]
 8012232:	fa92 f2a2 	rbit	r2, r2
 8012236:	617a      	str	r2, [r7, #20]
  return result;
 8012238:	697a      	ldr	r2, [r7, #20]
 801223a:	fab2 f282 	clz	r2, r2
 801223e:	b2d2      	uxtb	r2, r2
 8012240:	f042 0220 	orr.w	r2, r2, #32
 8012244:	b2d2      	uxtb	r2, r2
 8012246:	f002 021f 	and.w	r2, r2, #31
 801224a:	2101      	movs	r1, #1
 801224c:	fa01 f202 	lsl.w	r2, r1, r2
 8012250:	4013      	ands	r3, r2
 8012252:	2b00      	cmp	r3, #0
 8012254:	d101      	bne.n	801225a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8012256:	2301      	movs	r3, #1
 8012258:	e079      	b.n	801234e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801225a:	4b1d      	ldr	r3, [pc, #116]	; (80122d0 <HAL_RCC_ClockConfig+0x260>)
 801225c:	685b      	ldr	r3, [r3, #4]
 801225e:	f023 0203 	bic.w	r2, r3, #3
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	685b      	ldr	r3, [r3, #4]
 8012266:	491a      	ldr	r1, [pc, #104]	; (80122d0 <HAL_RCC_ClockConfig+0x260>)
 8012268:	4313      	orrs	r3, r2
 801226a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801226c:	f7fe fb38 	bl	80108e0 <HAL_GetTick>
 8012270:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012272:	e00a      	b.n	801228a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012274:	f7fe fb34 	bl	80108e0 <HAL_GetTick>
 8012278:	4602      	mov	r2, r0
 801227a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801227c:	1ad3      	subs	r3, r2, r3
 801227e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012282:	4293      	cmp	r3, r2
 8012284:	d901      	bls.n	801228a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8012286:	2303      	movs	r3, #3
 8012288:	e061      	b.n	801234e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801228a:	4b11      	ldr	r3, [pc, #68]	; (80122d0 <HAL_RCC_ClockConfig+0x260>)
 801228c:	685b      	ldr	r3, [r3, #4]
 801228e:	f003 020c 	and.w	r2, r3, #12
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	685b      	ldr	r3, [r3, #4]
 8012296:	009b      	lsls	r3, r3, #2
 8012298:	429a      	cmp	r2, r3
 801229a:	d1eb      	bne.n	8012274 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801229c:	4b0b      	ldr	r3, [pc, #44]	; (80122cc <HAL_RCC_ClockConfig+0x25c>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	f003 0307 	and.w	r3, r3, #7
 80122a4:	683a      	ldr	r2, [r7, #0]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d214      	bcs.n	80122d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80122aa:	4b08      	ldr	r3, [pc, #32]	; (80122cc <HAL_RCC_ClockConfig+0x25c>)
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	f023 0207 	bic.w	r2, r3, #7
 80122b2:	4906      	ldr	r1, [pc, #24]	; (80122cc <HAL_RCC_ClockConfig+0x25c>)
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	4313      	orrs	r3, r2
 80122b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80122ba:	4b04      	ldr	r3, [pc, #16]	; (80122cc <HAL_RCC_ClockConfig+0x25c>)
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	f003 0307 	and.w	r3, r3, #7
 80122c2:	683a      	ldr	r2, [r7, #0]
 80122c4:	429a      	cmp	r2, r3
 80122c6:	d005      	beq.n	80122d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80122c8:	2301      	movs	r3, #1
 80122ca:	e040      	b.n	801234e <HAL_RCC_ClockConfig+0x2de>
 80122cc:	40022000 	.word	0x40022000
 80122d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	f003 0304 	and.w	r3, r3, #4
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d008      	beq.n	80122f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80122e0:	4b1d      	ldr	r3, [pc, #116]	; (8012358 <HAL_RCC_ClockConfig+0x2e8>)
 80122e2:	685b      	ldr	r3, [r3, #4]
 80122e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	68db      	ldr	r3, [r3, #12]
 80122ec:	491a      	ldr	r1, [pc, #104]	; (8012358 <HAL_RCC_ClockConfig+0x2e8>)
 80122ee:	4313      	orrs	r3, r2
 80122f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	f003 0308 	and.w	r3, r3, #8
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d009      	beq.n	8012312 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80122fe:	4b16      	ldr	r3, [pc, #88]	; (8012358 <HAL_RCC_ClockConfig+0x2e8>)
 8012300:	685b      	ldr	r3, [r3, #4]
 8012302:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	691b      	ldr	r3, [r3, #16]
 801230a:	00db      	lsls	r3, r3, #3
 801230c:	4912      	ldr	r1, [pc, #72]	; (8012358 <HAL_RCC_ClockConfig+0x2e8>)
 801230e:	4313      	orrs	r3, r2
 8012310:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8012312:	f000 f829 	bl	8012368 <HAL_RCC_GetSysClockFreq>
 8012316:	4601      	mov	r1, r0
 8012318:	4b0f      	ldr	r3, [pc, #60]	; (8012358 <HAL_RCC_ClockConfig+0x2e8>)
 801231a:	685b      	ldr	r3, [r3, #4]
 801231c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012320:	22f0      	movs	r2, #240	; 0xf0
 8012322:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012324:	693a      	ldr	r2, [r7, #16]
 8012326:	fa92 f2a2 	rbit	r2, r2
 801232a:	60fa      	str	r2, [r7, #12]
  return result;
 801232c:	68fa      	ldr	r2, [r7, #12]
 801232e:	fab2 f282 	clz	r2, r2
 8012332:	b2d2      	uxtb	r2, r2
 8012334:	40d3      	lsrs	r3, r2
 8012336:	4a09      	ldr	r2, [pc, #36]	; (801235c <HAL_RCC_ClockConfig+0x2ec>)
 8012338:	5cd3      	ldrb	r3, [r2, r3]
 801233a:	fa21 f303 	lsr.w	r3, r1, r3
 801233e:	4a08      	ldr	r2, [pc, #32]	; (8012360 <HAL_RCC_ClockConfig+0x2f0>)
 8012340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8012342:	4b08      	ldr	r3, [pc, #32]	; (8012364 <HAL_RCC_ClockConfig+0x2f4>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	4618      	mov	r0, r3
 8012348:	f7fe fa86 	bl	8010858 <HAL_InitTick>
  
  return HAL_OK;
 801234c:	2300      	movs	r3, #0
}
 801234e:	4618      	mov	r0, r3
 8012350:	3778      	adds	r7, #120	; 0x78
 8012352:	46bd      	mov	sp, r7
 8012354:	bd80      	pop	{r7, pc}
 8012356:	bf00      	nop
 8012358:	40021000 	.word	0x40021000
 801235c:	0801487c 	.word	0x0801487c
 8012360:	20000000 	.word	0x20000000
 8012364:	20000004 	.word	0x20000004

08012368 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012368:	b480      	push	{r7}
 801236a:	b08b      	sub	sp, #44	; 0x2c
 801236c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 801236e:	2300      	movs	r3, #0
 8012370:	61fb      	str	r3, [r7, #28]
 8012372:	2300      	movs	r3, #0
 8012374:	61bb      	str	r3, [r7, #24]
 8012376:	2300      	movs	r3, #0
 8012378:	627b      	str	r3, [r7, #36]	; 0x24
 801237a:	2300      	movs	r3, #0
 801237c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 801237e:	2300      	movs	r3, #0
 8012380:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8012382:	4b2a      	ldr	r3, [pc, #168]	; (801242c <HAL_RCC_GetSysClockFreq+0xc4>)
 8012384:	685b      	ldr	r3, [r3, #4]
 8012386:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8012388:	69fb      	ldr	r3, [r7, #28]
 801238a:	f003 030c 	and.w	r3, r3, #12
 801238e:	2b04      	cmp	r3, #4
 8012390:	d002      	beq.n	8012398 <HAL_RCC_GetSysClockFreq+0x30>
 8012392:	2b08      	cmp	r3, #8
 8012394:	d003      	beq.n	801239e <HAL_RCC_GetSysClockFreq+0x36>
 8012396:	e03f      	b.n	8012418 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8012398:	4b25      	ldr	r3, [pc, #148]	; (8012430 <HAL_RCC_GetSysClockFreq+0xc8>)
 801239a:	623b      	str	r3, [r7, #32]
      break;
 801239c:	e03f      	b.n	801241e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 801239e:	69fb      	ldr	r3, [r7, #28]
 80123a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80123a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80123a8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80123aa:	68ba      	ldr	r2, [r7, #8]
 80123ac:	fa92 f2a2 	rbit	r2, r2
 80123b0:	607a      	str	r2, [r7, #4]
  return result;
 80123b2:	687a      	ldr	r2, [r7, #4]
 80123b4:	fab2 f282 	clz	r2, r2
 80123b8:	b2d2      	uxtb	r2, r2
 80123ba:	40d3      	lsrs	r3, r2
 80123bc:	4a1d      	ldr	r2, [pc, #116]	; (8012434 <HAL_RCC_GetSysClockFreq+0xcc>)
 80123be:	5cd3      	ldrb	r3, [r2, r3]
 80123c0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80123c2:	4b1a      	ldr	r3, [pc, #104]	; (801242c <HAL_RCC_GetSysClockFreq+0xc4>)
 80123c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123c6:	f003 030f 	and.w	r3, r3, #15
 80123ca:	220f      	movs	r2, #15
 80123cc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80123ce:	693a      	ldr	r2, [r7, #16]
 80123d0:	fa92 f2a2 	rbit	r2, r2
 80123d4:	60fa      	str	r2, [r7, #12]
  return result;
 80123d6:	68fa      	ldr	r2, [r7, #12]
 80123d8:	fab2 f282 	clz	r2, r2
 80123dc:	b2d2      	uxtb	r2, r2
 80123de:	40d3      	lsrs	r3, r2
 80123e0:	4a15      	ldr	r2, [pc, #84]	; (8012438 <HAL_RCC_GetSysClockFreq+0xd0>)
 80123e2:	5cd3      	ldrb	r3, [r2, r3]
 80123e4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80123e6:	69fb      	ldr	r3, [r7, #28]
 80123e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d008      	beq.n	8012402 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80123f0:	4a0f      	ldr	r2, [pc, #60]	; (8012430 <HAL_RCC_GetSysClockFreq+0xc8>)
 80123f2:	69bb      	ldr	r3, [r7, #24]
 80123f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80123f8:	697b      	ldr	r3, [r7, #20]
 80123fa:	fb02 f303 	mul.w	r3, r2, r3
 80123fe:	627b      	str	r3, [r7, #36]	; 0x24
 8012400:	e007      	b.n	8012412 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8012402:	4a0b      	ldr	r2, [pc, #44]	; (8012430 <HAL_RCC_GetSysClockFreq+0xc8>)
 8012404:	69bb      	ldr	r3, [r7, #24]
 8012406:	fbb2 f2f3 	udiv	r2, r2, r3
 801240a:	697b      	ldr	r3, [r7, #20]
 801240c:	fb02 f303 	mul.w	r3, r2, r3
 8012410:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8012412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012414:	623b      	str	r3, [r7, #32]
      break;
 8012416:	e002      	b.n	801241e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8012418:	4b05      	ldr	r3, [pc, #20]	; (8012430 <HAL_RCC_GetSysClockFreq+0xc8>)
 801241a:	623b      	str	r3, [r7, #32]
      break;
 801241c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801241e:	6a3b      	ldr	r3, [r7, #32]
}
 8012420:	4618      	mov	r0, r3
 8012422:	372c      	adds	r7, #44	; 0x2c
 8012424:	46bd      	mov	sp, r7
 8012426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242a:	4770      	bx	lr
 801242c:	40021000 	.word	0x40021000
 8012430:	007a1200 	.word	0x007a1200
 8012434:	08014894 	.word	0x08014894
 8012438:	080148a4 	.word	0x080148a4

0801243c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801243c:	b480      	push	{r7}
 801243e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012440:	4b03      	ldr	r3, [pc, #12]	; (8012450 <HAL_RCC_GetHCLKFreq+0x14>)
 8012442:	681b      	ldr	r3, [r3, #0]
}
 8012444:	4618      	mov	r0, r3
 8012446:	46bd      	mov	sp, r7
 8012448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244c:	4770      	bx	lr
 801244e:	bf00      	nop
 8012450:	20000000 	.word	0x20000000

08012454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b082      	sub	sp, #8
 8012458:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 801245a:	f7ff ffef 	bl	801243c <HAL_RCC_GetHCLKFreq>
 801245e:	4601      	mov	r1, r0
 8012460:	4b0b      	ldr	r3, [pc, #44]	; (8012490 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8012462:	685b      	ldr	r3, [r3, #4]
 8012464:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012468:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 801246c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801246e:	687a      	ldr	r2, [r7, #4]
 8012470:	fa92 f2a2 	rbit	r2, r2
 8012474:	603a      	str	r2, [r7, #0]
  return result;
 8012476:	683a      	ldr	r2, [r7, #0]
 8012478:	fab2 f282 	clz	r2, r2
 801247c:	b2d2      	uxtb	r2, r2
 801247e:	40d3      	lsrs	r3, r2
 8012480:	4a04      	ldr	r2, [pc, #16]	; (8012494 <HAL_RCC_GetPCLK1Freq+0x40>)
 8012482:	5cd3      	ldrb	r3, [r2, r3]
 8012484:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8012488:	4618      	mov	r0, r3
 801248a:	3708      	adds	r7, #8
 801248c:	46bd      	mov	sp, r7
 801248e:	bd80      	pop	{r7, pc}
 8012490:	40021000 	.word	0x40021000
 8012494:	0801488c 	.word	0x0801488c

08012498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b082      	sub	sp, #8
 801249c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 801249e:	f7ff ffcd 	bl	801243c <HAL_RCC_GetHCLKFreq>
 80124a2:	4601      	mov	r1, r0
 80124a4:	4b0b      	ldr	r3, [pc, #44]	; (80124d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80124a6:	685b      	ldr	r3, [r3, #4]
 80124a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80124ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80124b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80124b2:	687a      	ldr	r2, [r7, #4]
 80124b4:	fa92 f2a2 	rbit	r2, r2
 80124b8:	603a      	str	r2, [r7, #0]
  return result;
 80124ba:	683a      	ldr	r2, [r7, #0]
 80124bc:	fab2 f282 	clz	r2, r2
 80124c0:	b2d2      	uxtb	r2, r2
 80124c2:	40d3      	lsrs	r3, r2
 80124c4:	4a04      	ldr	r2, [pc, #16]	; (80124d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80124c6:	5cd3      	ldrb	r3, [r2, r3]
 80124c8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80124cc:	4618      	mov	r0, r3
 80124ce:	3708      	adds	r7, #8
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd80      	pop	{r7, pc}
 80124d4:	40021000 	.word	0x40021000
 80124d8:	0801488c 	.word	0x0801488c

080124dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b092      	sub	sp, #72	; 0x48
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80124e4:	2300      	movs	r3, #0
 80124e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80124e8:	2300      	movs	r3, #0
 80124ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80124ec:	2300      	movs	r3, #0
 80124ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	f000 80d4 	beq.w	80126a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012500:	4b4e      	ldr	r3, [pc, #312]	; (801263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8012502:	69db      	ldr	r3, [r3, #28]
 8012504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012508:	2b00      	cmp	r3, #0
 801250a:	d10e      	bne.n	801252a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801250c:	4b4b      	ldr	r3, [pc, #300]	; (801263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801250e:	69db      	ldr	r3, [r3, #28]
 8012510:	4a4a      	ldr	r2, [pc, #296]	; (801263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8012512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012516:	61d3      	str	r3, [r2, #28]
 8012518:	4b48      	ldr	r3, [pc, #288]	; (801263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801251a:	69db      	ldr	r3, [r3, #28]
 801251c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012520:	60bb      	str	r3, [r7, #8]
 8012522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012524:	2301      	movs	r3, #1
 8012526:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801252a:	4b45      	ldr	r3, [pc, #276]	; (8012640 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012532:	2b00      	cmp	r3, #0
 8012534:	d118      	bne.n	8012568 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012536:	4b42      	ldr	r3, [pc, #264]	; (8012640 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	4a41      	ldr	r2, [pc, #260]	; (8012640 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 801253c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012540:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012542:	f7fe f9cd 	bl	80108e0 <HAL_GetTick>
 8012546:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012548:	e008      	b.n	801255c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801254a:	f7fe f9c9 	bl	80108e0 <HAL_GetTick>
 801254e:	4602      	mov	r2, r0
 8012550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012552:	1ad3      	subs	r3, r2, r3
 8012554:	2b64      	cmp	r3, #100	; 0x64
 8012556:	d901      	bls.n	801255c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8012558:	2303      	movs	r3, #3
 801255a:	e1d6      	b.n	801290a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801255c:	4b38      	ldr	r3, [pc, #224]	; (8012640 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012564:	2b00      	cmp	r3, #0
 8012566:	d0f0      	beq.n	801254a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8012568:	4b34      	ldr	r3, [pc, #208]	; (801263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801256a:	6a1b      	ldr	r3, [r3, #32]
 801256c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012570:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8012572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012574:	2b00      	cmp	r3, #0
 8012576:	f000 8084 	beq.w	8012682 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	685b      	ldr	r3, [r3, #4]
 801257e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012582:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012584:	429a      	cmp	r2, r3
 8012586:	d07c      	beq.n	8012682 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012588:	4b2c      	ldr	r3, [pc, #176]	; (801263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801258a:	6a1b      	ldr	r3, [r3, #32]
 801258c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8012596:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801259a:	fa93 f3a3 	rbit	r3, r3
 801259e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80125a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80125a2:	fab3 f383 	clz	r3, r3
 80125a6:	b2db      	uxtb	r3, r3
 80125a8:	461a      	mov	r2, r3
 80125aa:	4b26      	ldr	r3, [pc, #152]	; (8012644 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80125ac:	4413      	add	r3, r2
 80125ae:	009b      	lsls	r3, r3, #2
 80125b0:	461a      	mov	r2, r3
 80125b2:	2301      	movs	r3, #1
 80125b4:	6013      	str	r3, [r2, #0]
 80125b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80125ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80125bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125be:	fa93 f3a3 	rbit	r3, r3
 80125c2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80125c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80125c6:	fab3 f383 	clz	r3, r3
 80125ca:	b2db      	uxtb	r3, r3
 80125cc:	461a      	mov	r2, r3
 80125ce:	4b1d      	ldr	r3, [pc, #116]	; (8012644 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80125d0:	4413      	add	r3, r2
 80125d2:	009b      	lsls	r3, r3, #2
 80125d4:	461a      	mov	r2, r3
 80125d6:	2300      	movs	r3, #0
 80125d8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80125da:	4a18      	ldr	r2, [pc, #96]	; (801263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80125dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125de:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80125e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125e2:	f003 0301 	and.w	r3, r3, #1
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d04b      	beq.n	8012682 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80125ea:	f7fe f979 	bl	80108e0 <HAL_GetTick>
 80125ee:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80125f0:	e00a      	b.n	8012608 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80125f2:	f7fe f975 	bl	80108e0 <HAL_GetTick>
 80125f6:	4602      	mov	r2, r0
 80125f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125fa:	1ad3      	subs	r3, r2, r3
 80125fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012600:	4293      	cmp	r3, r2
 8012602:	d901      	bls.n	8012608 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8012604:	2303      	movs	r3, #3
 8012606:	e180      	b.n	801290a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8012608:	2302      	movs	r3, #2
 801260a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801260c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801260e:	fa93 f3a3 	rbit	r3, r3
 8012612:	627b      	str	r3, [r7, #36]	; 0x24
 8012614:	2302      	movs	r3, #2
 8012616:	623b      	str	r3, [r7, #32]
 8012618:	6a3b      	ldr	r3, [r7, #32]
 801261a:	fa93 f3a3 	rbit	r3, r3
 801261e:	61fb      	str	r3, [r7, #28]
  return result;
 8012620:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012622:	fab3 f383 	clz	r3, r3
 8012626:	b2db      	uxtb	r3, r3
 8012628:	095b      	lsrs	r3, r3, #5
 801262a:	b2db      	uxtb	r3, r3
 801262c:	f043 0302 	orr.w	r3, r3, #2
 8012630:	b2db      	uxtb	r3, r3
 8012632:	2b02      	cmp	r3, #2
 8012634:	d108      	bne.n	8012648 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8012636:	4b01      	ldr	r3, [pc, #4]	; (801263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8012638:	6a1b      	ldr	r3, [r3, #32]
 801263a:	e00d      	b.n	8012658 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 801263c:	40021000 	.word	0x40021000
 8012640:	40007000 	.word	0x40007000
 8012644:	10908100 	.word	0x10908100
 8012648:	2302      	movs	r3, #2
 801264a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801264c:	69bb      	ldr	r3, [r7, #24]
 801264e:	fa93 f3a3 	rbit	r3, r3
 8012652:	617b      	str	r3, [r7, #20]
 8012654:	4b9a      	ldr	r3, [pc, #616]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012658:	2202      	movs	r2, #2
 801265a:	613a      	str	r2, [r7, #16]
 801265c:	693a      	ldr	r2, [r7, #16]
 801265e:	fa92 f2a2 	rbit	r2, r2
 8012662:	60fa      	str	r2, [r7, #12]
  return result;
 8012664:	68fa      	ldr	r2, [r7, #12]
 8012666:	fab2 f282 	clz	r2, r2
 801266a:	b2d2      	uxtb	r2, r2
 801266c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012670:	b2d2      	uxtb	r2, r2
 8012672:	f002 021f 	and.w	r2, r2, #31
 8012676:	2101      	movs	r1, #1
 8012678:	fa01 f202 	lsl.w	r2, r1, r2
 801267c:	4013      	ands	r3, r2
 801267e:	2b00      	cmp	r3, #0
 8012680:	d0b7      	beq.n	80125f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8012682:	4b8f      	ldr	r3, [pc, #572]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012684:	6a1b      	ldr	r3, [r3, #32]
 8012686:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	685b      	ldr	r3, [r3, #4]
 801268e:	498c      	ldr	r1, [pc, #560]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012690:	4313      	orrs	r3, r2
 8012692:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8012694:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012698:	2b01      	cmp	r3, #1
 801269a:	d105      	bne.n	80126a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801269c:	4b88      	ldr	r3, [pc, #544]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801269e:	69db      	ldr	r3, [r3, #28]
 80126a0:	4a87      	ldr	r2, [pc, #540]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80126a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80126a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	f003 0301 	and.w	r3, r3, #1
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d008      	beq.n	80126c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80126b4:	4b82      	ldr	r3, [pc, #520]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80126b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126b8:	f023 0203 	bic.w	r2, r3, #3
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	689b      	ldr	r3, [r3, #8]
 80126c0:	497f      	ldr	r1, [pc, #508]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80126c2:	4313      	orrs	r3, r2
 80126c4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	f003 0302 	and.w	r3, r3, #2
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d008      	beq.n	80126e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80126d2:	4b7b      	ldr	r3, [pc, #492]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80126d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	68db      	ldr	r3, [r3, #12]
 80126de:	4978      	ldr	r1, [pc, #480]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80126e0:	4313      	orrs	r3, r2
 80126e2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	f003 0304 	and.w	r3, r3, #4
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d008      	beq.n	8012702 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80126f0:	4b73      	ldr	r3, [pc, #460]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80126f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	691b      	ldr	r3, [r3, #16]
 80126fc:	4970      	ldr	r1, [pc, #448]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80126fe:	4313      	orrs	r3, r2
 8012700:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	f003 0320 	and.w	r3, r3, #32
 801270a:	2b00      	cmp	r3, #0
 801270c:	d008      	beq.n	8012720 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801270e:	4b6c      	ldr	r3, [pc, #432]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012712:	f023 0210 	bic.w	r2, r3, #16
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	69db      	ldr	r3, [r3, #28]
 801271a:	4969      	ldr	r1, [pc, #420]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801271c:	4313      	orrs	r3, r2
 801271e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012728:	2b00      	cmp	r3, #0
 801272a:	d008      	beq.n	801273e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 801272c:	4b64      	ldr	r3, [pc, #400]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801272e:	685b      	ldr	r3, [r3, #4]
 8012730:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012738:	4961      	ldr	r1, [pc, #388]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801273a:	4313      	orrs	r3, r2
 801273c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012746:	2b00      	cmp	r3, #0
 8012748:	d008      	beq.n	801275c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801274a:	4b5d      	ldr	r3, [pc, #372]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801274e:	f023 0220 	bic.w	r2, r3, #32
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	6a1b      	ldr	r3, [r3, #32]
 8012756:	495a      	ldr	r1, [pc, #360]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012758:	4313      	orrs	r3, r2
 801275a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012764:	2b00      	cmp	r3, #0
 8012766:	d008      	beq.n	801277a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8012768:	4b55      	ldr	r3, [pc, #340]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801276c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012774:	4952      	ldr	r1, [pc, #328]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012776:	4313      	orrs	r3, r2
 8012778:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	f003 0308 	and.w	r3, r3, #8
 8012782:	2b00      	cmp	r3, #0
 8012784:	d008      	beq.n	8012798 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8012786:	4b4e      	ldr	r3, [pc, #312]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801278a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	695b      	ldr	r3, [r3, #20]
 8012792:	494b      	ldr	r1, [pc, #300]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012794:	4313      	orrs	r3, r2
 8012796:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	f003 0310 	and.w	r3, r3, #16
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d008      	beq.n	80127b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80127a4:	4b46      	ldr	r3, [pc, #280]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80127a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	699b      	ldr	r3, [r3, #24]
 80127b0:	4943      	ldr	r1, [pc, #268]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80127b2:	4313      	orrs	r3, r2
 80127b4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d008      	beq.n	80127d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80127c2:	4b3f      	ldr	r3, [pc, #252]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80127c4:	685b      	ldr	r3, [r3, #4]
 80127c6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127ce:	493c      	ldr	r1, [pc, #240]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80127d0:	4313      	orrs	r3, r2
 80127d2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d008      	beq.n	80127f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80127e0:	4b37      	ldr	r3, [pc, #220]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80127e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127e4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127ec:	4934      	ldr	r1, [pc, #208]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80127ee:	4313      	orrs	r3, r2
 80127f0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d008      	beq.n	8012810 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80127fe:	4b30      	ldr	r3, [pc, #192]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012802:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801280a:	492d      	ldr	r1, [pc, #180]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801280c:	4313      	orrs	r3, r2
 801280e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012818:	2b00      	cmp	r3, #0
 801281a:	d008      	beq.n	801282e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 801281c:	4b28      	ldr	r3, [pc, #160]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012820:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012828:	4925      	ldr	r1, [pc, #148]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801282a:	4313      	orrs	r3, r2
 801282c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012836:	2b00      	cmp	r3, #0
 8012838:	d008      	beq.n	801284c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 801283a:	4b21      	ldr	r3, [pc, #132]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801283e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012846:	491e      	ldr	r1, [pc, #120]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012848:	4313      	orrs	r3, r2
 801284a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012854:	2b00      	cmp	r3, #0
 8012856:	d008      	beq.n	801286a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8012858:	4b19      	ldr	r3, [pc, #100]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801285c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012864:	4916      	ldr	r1, [pc, #88]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012866:	4313      	orrs	r3, r2
 8012868:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012872:	2b00      	cmp	r3, #0
 8012874:	d008      	beq.n	8012888 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8012876:	4b12      	ldr	r3, [pc, #72]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801287a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012882:	490f      	ldr	r1, [pc, #60]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012884:	4313      	orrs	r3, r2
 8012886:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012890:	2b00      	cmp	r3, #0
 8012892:	d008      	beq.n	80128a6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8012894:	4b0a      	ldr	r3, [pc, #40]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012898:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128a0:	4907      	ldr	r1, [pc, #28]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80128a2:	4313      	orrs	r3, r2
 80128a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d00c      	beq.n	80128cc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80128b2:	4b03      	ldr	r3, [pc, #12]	; (80128c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80128b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128b6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	e002      	b.n	80128c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80128be:	bf00      	nop
 80128c0:	40021000 	.word	0x40021000
 80128c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80128c6:	4913      	ldr	r1, [pc, #76]	; (8012914 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80128c8:	4313      	orrs	r3, r2
 80128ca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d008      	beq.n	80128ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80128d8:	4b0e      	ldr	r3, [pc, #56]	; (8012914 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80128da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80128e4:	490b      	ldr	r1, [pc, #44]	; (8012914 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80128e6:	4313      	orrs	r3, r2
 80128e8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d008      	beq.n	8012908 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80128f6:	4b07      	ldr	r3, [pc, #28]	; (8012914 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80128f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128fa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012902:	4904      	ldr	r1, [pc, #16]	; (8012914 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8012904:	4313      	orrs	r3, r2
 8012906:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8012908:	2300      	movs	r3, #0
}
 801290a:	4618      	mov	r0, r3
 801290c:	3748      	adds	r7, #72	; 0x48
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}
 8012912:	bf00      	nop
 8012914:	40021000 	.word	0x40021000

08012918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b082      	sub	sp, #8
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d101      	bne.n	801292a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012926:	2301      	movs	r3, #1
 8012928:	e040      	b.n	80129ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801292e:	2b00      	cmp	r3, #0
 8012930:	d106      	bne.n	8012940 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	2200      	movs	r2, #0
 8012936:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f7fd fe50 	bl	80105e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2224      	movs	r2, #36	; 0x24
 8012944:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	681a      	ldr	r2, [r3, #0]
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	f022 0201 	bic.w	r2, r2, #1
 8012954:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	f000 fbe6 	bl	8013128 <UART_SetConfig>
 801295c:	4603      	mov	r3, r0
 801295e:	2b01      	cmp	r3, #1
 8012960:	d101      	bne.n	8012966 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8012962:	2301      	movs	r3, #1
 8012964:	e022      	b.n	80129ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801296a:	2b00      	cmp	r3, #0
 801296c:	d002      	beq.n	8012974 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 801296e:	6878      	ldr	r0, [r7, #4]
 8012970:	f000 fdb0 	bl	80134d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	685a      	ldr	r2, [r3, #4]
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012982:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	689a      	ldr	r2, [r3, #8]
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012992:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	681a      	ldr	r2, [r3, #0]
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	f042 0201 	orr.w	r2, r2, #1
 80129a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80129a4:	6878      	ldr	r0, [r7, #4]
 80129a6:	f000 fe37 	bl	8013618 <UART_CheckIdleState>
 80129aa:	4603      	mov	r3, r0
}
 80129ac:	4618      	mov	r0, r3
 80129ae:	3708      	adds	r7, #8
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}

080129b4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80129b4:	b480      	push	{r7}
 80129b6:	b08b      	sub	sp, #44	; 0x2c
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	60f8      	str	r0, [r7, #12]
 80129bc:	60b9      	str	r1, [r7, #8]
 80129be:	4613      	mov	r3, r2
 80129c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80129c6:	2b20      	cmp	r3, #32
 80129c8:	d156      	bne.n	8012a78 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80129ca:	68bb      	ldr	r3, [r7, #8]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d002      	beq.n	80129d6 <HAL_UART_Transmit_IT+0x22>
 80129d0:	88fb      	ldrh	r3, [r7, #6]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d101      	bne.n	80129da <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80129d6:	2301      	movs	r3, #1
 80129d8:	e04f      	b.n	8012a7a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80129e0:	2b01      	cmp	r3, #1
 80129e2:	d101      	bne.n	80129e8 <HAL_UART_Transmit_IT+0x34>
 80129e4:	2302      	movs	r3, #2
 80129e6:	e048      	b.n	8012a7a <HAL_UART_Transmit_IT+0xc6>
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	2201      	movs	r2, #1
 80129ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	68ba      	ldr	r2, [r7, #8]
 80129f4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	88fa      	ldrh	r2, [r7, #6]
 80129fa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	88fa      	ldrh	r2, [r7, #6]
 8012a02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	2200      	movs	r2, #0
 8012a0a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	2200      	movs	r2, #0
 8012a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	2221      	movs	r2, #33	; 0x21
 8012a18:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	689b      	ldr	r3, [r3, #8]
 8012a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012a22:	d107      	bne.n	8012a34 <HAL_UART_Transmit_IT+0x80>
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	691b      	ldr	r3, [r3, #16]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d103      	bne.n	8012a34 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	4a16      	ldr	r2, [pc, #88]	; (8012a88 <HAL_UART_Transmit_IT+0xd4>)
 8012a30:	669a      	str	r2, [r3, #104]	; 0x68
 8012a32:	e002      	b.n	8012a3a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	4a15      	ldr	r2, [pc, #84]	; (8012a8c <HAL_UART_Transmit_IT+0xd8>)
 8012a38:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a48:	697b      	ldr	r3, [r7, #20]
 8012a4a:	e853 3f00 	ldrex	r3, [r3]
 8012a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8012a50:	693b      	ldr	r3, [r7, #16]
 8012a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a56:	627b      	str	r3, [r7, #36]	; 0x24
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	461a      	mov	r2, r3
 8012a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a60:	623b      	str	r3, [r7, #32]
 8012a62:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a64:	69f9      	ldr	r1, [r7, #28]
 8012a66:	6a3a      	ldr	r2, [r7, #32]
 8012a68:	e841 2300 	strex	r3, r2, [r1]
 8012a6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8012a6e:	69bb      	ldr	r3, [r7, #24]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d1e6      	bne.n	8012a42 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8012a74:	2300      	movs	r3, #0
 8012a76:	e000      	b.n	8012a7a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8012a78:	2302      	movs	r3, #2
  }
}
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	372c      	adds	r7, #44	; 0x2c
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a84:	4770      	bx	lr
 8012a86:	bf00      	nop
 8012a88:	08013b37 	.word	0x08013b37
 8012a8c:	08013a7f 	.word	0x08013a7f

08012a90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b08a      	sub	sp, #40	; 0x28
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	60f8      	str	r0, [r7, #12]
 8012a98:	60b9      	str	r1, [r7, #8]
 8012a9a:	4613      	mov	r3, r2
 8012a9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012aa2:	2b20      	cmp	r3, #32
 8012aa4:	d13d      	bne.n	8012b22 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8012aa6:	68bb      	ldr	r3, [r7, #8]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d002      	beq.n	8012ab2 <HAL_UART_Receive_IT+0x22>
 8012aac:	88fb      	ldrh	r3, [r7, #6]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d101      	bne.n	8012ab6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8012ab2:	2301      	movs	r3, #1
 8012ab4:	e036      	b.n	8012b24 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012abc:	2b01      	cmp	r3, #1
 8012abe:	d101      	bne.n	8012ac4 <HAL_UART_Receive_IT+0x34>
 8012ac0:	2302      	movs	r3, #2
 8012ac2:	e02f      	b.n	8012b24 <HAL_UART_Receive_IT+0x94>
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	2201      	movs	r2, #1
 8012ac8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	2200      	movs	r2, #0
 8012ad0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	685b      	ldr	r3, [r3, #4]
 8012ad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d018      	beq.n	8012b12 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ae6:	697b      	ldr	r3, [r7, #20]
 8012ae8:	e853 3f00 	ldrex	r3, [r3]
 8012aec:	613b      	str	r3, [r7, #16]
   return(result);
 8012aee:	693b      	ldr	r3, [r7, #16]
 8012af0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012af4:	627b      	str	r3, [r7, #36]	; 0x24
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	461a      	mov	r2, r3
 8012afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012afe:	623b      	str	r3, [r7, #32]
 8012b00:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b02:	69f9      	ldr	r1, [r7, #28]
 8012b04:	6a3a      	ldr	r2, [r7, #32]
 8012b06:	e841 2300 	strex	r3, r2, [r1]
 8012b0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8012b0c:	69bb      	ldr	r3, [r7, #24]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d1e6      	bne.n	8012ae0 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8012b12:	88fb      	ldrh	r3, [r7, #6]
 8012b14:	461a      	mov	r2, r3
 8012b16:	68b9      	ldr	r1, [r7, #8]
 8012b18:	68f8      	ldr	r0, [r7, #12]
 8012b1a:	f000 fe8b 	bl	8013834 <UART_Start_Receive_IT>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	e000      	b.n	8012b24 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8012b22:	2302      	movs	r3, #2
  }
}
 8012b24:	4618      	mov	r0, r3
 8012b26:	3728      	adds	r7, #40	; 0x28
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}

08012b2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b0ba      	sub	sp, #232	; 0xe8
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	69db      	ldr	r3, [r3, #28]
 8012b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	689b      	ldr	r3, [r3, #8]
 8012b4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012b52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8012b56:	f640 030f 	movw	r3, #2063	; 0x80f
 8012b5a:	4013      	ands	r3, r2
 8012b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8012b60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d115      	bne.n	8012b94 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8012b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012b6c:	f003 0320 	and.w	r3, r3, #32
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d00f      	beq.n	8012b94 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8012b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012b78:	f003 0320 	and.w	r3, r3, #32
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d009      	beq.n	8012b94 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	f000 82a3 	beq.w	80130d0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	4798      	blx	r3
      }
      return;
 8012b92:	e29d      	b.n	80130d0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012b94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	f000 8117 	beq.w	8012dcc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8012b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012ba2:	f003 0301 	and.w	r3, r3, #1
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d106      	bne.n	8012bb8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8012baa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8012bae:	4b85      	ldr	r3, [pc, #532]	; (8012dc4 <HAL_UART_IRQHandler+0x298>)
 8012bb0:	4013      	ands	r3, r2
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	f000 810a 	beq.w	8012dcc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012bbc:	f003 0301 	and.w	r3, r3, #1
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d011      	beq.n	8012be8 <HAL_UART_IRQHandler+0xbc>
 8012bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d00b      	beq.n	8012be8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	2201      	movs	r2, #1
 8012bd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012bde:	f043 0201 	orr.w	r2, r3, #1
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012bec:	f003 0302 	and.w	r3, r3, #2
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d011      	beq.n	8012c18 <HAL_UART_IRQHandler+0xec>
 8012bf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012bf8:	f003 0301 	and.w	r3, r3, #1
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d00b      	beq.n	8012c18 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	2202      	movs	r2, #2
 8012c06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c0e:	f043 0204 	orr.w	r2, r3, #4
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c1c:	f003 0304 	and.w	r3, r3, #4
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d011      	beq.n	8012c48 <HAL_UART_IRQHandler+0x11c>
 8012c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012c28:	f003 0301 	and.w	r3, r3, #1
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d00b      	beq.n	8012c48 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	2204      	movs	r2, #4
 8012c36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c3e:	f043 0202 	orr.w	r2, r3, #2
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c4c:	f003 0308 	and.w	r3, r3, #8
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d017      	beq.n	8012c84 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8012c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c58:	f003 0320 	and.w	r3, r3, #32
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d105      	bne.n	8012c6c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8012c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012c64:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d00b      	beq.n	8012c84 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	2208      	movs	r2, #8
 8012c72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c7a:	f043 0208 	orr.w	r2, r3, #8
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d012      	beq.n	8012cb6 <HAL_UART_IRQHandler+0x18a>
 8012c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d00c      	beq.n	8012cb6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012ca4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012cac:	f043 0220 	orr.w	r2, r3, #32
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	f000 8209 	beq.w	80130d4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8012cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012cc6:	f003 0320 	and.w	r3, r3, #32
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d00d      	beq.n	8012cea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8012cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012cd2:	f003 0320 	and.w	r3, r3, #32
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d007      	beq.n	8012cea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d003      	beq.n	8012cea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012ce6:	6878      	ldr	r0, [r7, #4]
 8012ce8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012cf0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	689b      	ldr	r3, [r3, #8]
 8012cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012cfe:	2b40      	cmp	r3, #64	; 0x40
 8012d00:	d005      	beq.n	8012d0e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012d06:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d04f      	beq.n	8012dae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012d0e:	6878      	ldr	r0, [r7, #4]
 8012d10:	f000 fe3c 	bl	801398c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	689b      	ldr	r3, [r3, #8]
 8012d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d1e:	2b40      	cmp	r3, #64	; 0x40
 8012d20:	d141      	bne.n	8012da6 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	3308      	adds	r3, #8
 8012d28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012d30:	e853 3f00 	ldrex	r3, [r3]
 8012d34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8012d38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012d3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012d40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	3308      	adds	r3, #8
 8012d4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8012d4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8012d52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8012d5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8012d5e:	e841 2300 	strex	r3, r2, [r1]
 8012d62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8012d66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d1d9      	bne.n	8012d22 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d013      	beq.n	8012d9e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d7a:	4a13      	ldr	r2, [pc, #76]	; (8012dc8 <HAL_UART_IRQHandler+0x29c>)
 8012d7c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d82:	4618      	mov	r0, r3
 8012d84:	f7fd ff26 	bl	8010bd4 <HAL_DMA_Abort_IT>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d017      	beq.n	8012dbe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d94:	687a      	ldr	r2, [r7, #4]
 8012d96:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8012d98:	4610      	mov	r0, r2
 8012d9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012d9c:	e00f      	b.n	8012dbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012d9e:	6878      	ldr	r0, [r7, #4]
 8012da0:	f000 f9ac 	bl	80130fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012da4:	e00b      	b.n	8012dbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012da6:	6878      	ldr	r0, [r7, #4]
 8012da8:	f000 f9a8 	bl	80130fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012dac:	e007      	b.n	8012dbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012dae:	6878      	ldr	r0, [r7, #4]
 8012db0:	f000 f9a4 	bl	80130fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2200      	movs	r2, #0
 8012db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8012dbc:	e18a      	b.n	80130d4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012dbe:	bf00      	nop
    return;
 8012dc0:	e188      	b.n	80130d4 <HAL_UART_IRQHandler+0x5a8>
 8012dc2:	bf00      	nop
 8012dc4:	04000120 	.word	0x04000120
 8012dc8:	08013a53 	.word	0x08013a53

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012dd0:	2b01      	cmp	r3, #1
 8012dd2:	f040 8143 	bne.w	801305c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8012dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012dda:	f003 0310 	and.w	r3, r3, #16
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	f000 813c 	beq.w	801305c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012de8:	f003 0310 	and.w	r3, r3, #16
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	f000 8135 	beq.w	801305c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	2210      	movs	r2, #16
 8012df8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	689b      	ldr	r3, [r3, #8]
 8012e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e04:	2b40      	cmp	r3, #64	; 0x40
 8012e06:	f040 80b1 	bne.w	8012f6c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	685b      	ldr	r3, [r3, #4]
 8012e12:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012e16:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	f000 815c 	beq.w	80130d8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012e26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012e2a:	429a      	cmp	r2, r3
 8012e2c:	f080 8154 	bcs.w	80130d8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012e36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e3e:	699b      	ldr	r3, [r3, #24]
 8012e40:	2b20      	cmp	r3, #32
 8012e42:	f000 8085 	beq.w	8012f50 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012e52:	e853 3f00 	ldrex	r3, [r3]
 8012e56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8012e5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012e5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012e62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	461a      	mov	r2, r3
 8012e6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012e70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012e74:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e78:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8012e7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012e80:	e841 2300 	strex	r3, r2, [r1]
 8012e84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8012e88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d1da      	bne.n	8012e46 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	3308      	adds	r3, #8
 8012e96:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012e9a:	e853 3f00 	ldrex	r3, [r3]
 8012e9e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012ea0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012ea2:	f023 0301 	bic.w	r3, r3, #1
 8012ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	3308      	adds	r3, #8
 8012eb0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8012eb4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8012eb8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012eba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012ebc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012ec0:	e841 2300 	strex	r3, r2, [r1]
 8012ec4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012ec6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d1e1      	bne.n	8012e90 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	3308      	adds	r3, #8
 8012ed2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ed6:	e853 3f00 	ldrex	r3, [r3]
 8012eda:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	3308      	adds	r3, #8
 8012eec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8012ef0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012ef2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ef4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012ef6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012ef8:	e841 2300 	strex	r3, r2, [r1]
 8012efc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012efe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d1e3      	bne.n	8012ecc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	2220      	movs	r2, #32
 8012f08:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f18:	e853 3f00 	ldrex	r3, [r3]
 8012f1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f20:	f023 0310 	bic.w	r3, r3, #16
 8012f24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	461a      	mov	r2, r3
 8012f2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012f32:	65bb      	str	r3, [r7, #88]	; 0x58
 8012f34:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012f38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012f3a:	e841 2300 	strex	r3, r2, [r1]
 8012f3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012f40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d1e4      	bne.n	8012f10 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f7fd fe09 	bl	8010b62 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012f5c:	b29b      	uxth	r3, r3
 8012f5e:	1ad3      	subs	r3, r2, r3
 8012f60:	b29b      	uxth	r3, r3
 8012f62:	4619      	mov	r1, r3
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	f000 f8d3 	bl	8013110 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012f6a:	e0b5      	b.n	80130d8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012f78:	b29b      	uxth	r3, r3
 8012f7a:	1ad3      	subs	r3, r2, r3
 8012f7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012f86:	b29b      	uxth	r3, r3
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	f000 80a7 	beq.w	80130dc <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8012f8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	f000 80a2 	beq.w	80130dc <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fa0:	e853 3f00 	ldrex	r3, [r3]
 8012fa4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012fac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	461a      	mov	r2, r3
 8012fb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012fba:	647b      	str	r3, [r7, #68]	; 0x44
 8012fbc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012fc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012fc2:	e841 2300 	strex	r3, r2, [r1]
 8012fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d1e4      	bne.n	8012f98 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	3308      	adds	r3, #8
 8012fd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fd8:	e853 3f00 	ldrex	r3, [r3]
 8012fdc:	623b      	str	r3, [r7, #32]
   return(result);
 8012fde:	6a3b      	ldr	r3, [r7, #32]
 8012fe0:	f023 0301 	bic.w	r3, r3, #1
 8012fe4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	3308      	adds	r3, #8
 8012fee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8012ff2:	633a      	str	r2, [r7, #48]	; 0x30
 8012ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ffa:	e841 2300 	strex	r3, r2, [r1]
 8012ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013002:	2b00      	cmp	r3, #0
 8013004:	d1e3      	bne.n	8012fce <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	2220      	movs	r2, #32
 801300a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	2200      	movs	r2, #0
 8013010:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	2200      	movs	r2, #0
 8013016:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801301e:	693b      	ldr	r3, [r7, #16]
 8013020:	e853 3f00 	ldrex	r3, [r3]
 8013024:	60fb      	str	r3, [r7, #12]
   return(result);
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	f023 0310 	bic.w	r3, r3, #16
 801302c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	461a      	mov	r2, r3
 8013036:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801303a:	61fb      	str	r3, [r7, #28]
 801303c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801303e:	69b9      	ldr	r1, [r7, #24]
 8013040:	69fa      	ldr	r2, [r7, #28]
 8013042:	e841 2300 	strex	r3, r2, [r1]
 8013046:	617b      	str	r3, [r7, #20]
   return(result);
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d1e4      	bne.n	8013018 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801304e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8013052:	4619      	mov	r1, r3
 8013054:	6878      	ldr	r0, [r7, #4]
 8013056:	f000 f85b 	bl	8013110 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801305a:	e03f      	b.n	80130dc <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801305c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013064:	2b00      	cmp	r3, #0
 8013066:	d00e      	beq.n	8013086 <HAL_UART_IRQHandler+0x55a>
 8013068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801306c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013070:	2b00      	cmp	r3, #0
 8013072:	d008      	beq.n	8013086 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801307c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801307e:	6878      	ldr	r0, [r7, #4]
 8013080:	f000 ff3f 	bl	8013f02 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013084:	e02d      	b.n	80130e2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8013086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801308a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801308e:	2b00      	cmp	r3, #0
 8013090:	d00e      	beq.n	80130b0 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8013092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801309a:	2b00      	cmp	r3, #0
 801309c:	d008      	beq.n	80130b0 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d01c      	beq.n	80130e0 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80130aa:	6878      	ldr	r0, [r7, #4]
 80130ac:	4798      	blx	r3
    }
    return;
 80130ae:	e017      	b.n	80130e0 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80130b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80130b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d012      	beq.n	80130e2 <HAL_UART_IRQHandler+0x5b6>
 80130bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80130c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d00c      	beq.n	80130e2 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80130c8:	6878      	ldr	r0, [r7, #4]
 80130ca:	f000 fd94 	bl	8013bf6 <UART_EndTransmit_IT>
    return;
 80130ce:	e008      	b.n	80130e2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80130d0:	bf00      	nop
 80130d2:	e006      	b.n	80130e2 <HAL_UART_IRQHandler+0x5b6>
    return;
 80130d4:	bf00      	nop
 80130d6:	e004      	b.n	80130e2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80130d8:	bf00      	nop
 80130da:	e002      	b.n	80130e2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80130dc:	bf00      	nop
 80130de:	e000      	b.n	80130e2 <HAL_UART_IRQHandler+0x5b6>
    return;
 80130e0:	bf00      	nop
  }

}
 80130e2:	37e8      	adds	r7, #232	; 0xe8
 80130e4:	46bd      	mov	sp, r7
 80130e6:	bd80      	pop	{r7, pc}

080130e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80130e8:	b480      	push	{r7}
 80130ea:	b083      	sub	sp, #12
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80130f0:	bf00      	nop
 80130f2:	370c      	adds	r7, #12
 80130f4:	46bd      	mov	sp, r7
 80130f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fa:	4770      	bx	lr

080130fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80130fc:	b480      	push	{r7}
 80130fe:	b083      	sub	sp, #12
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8013104:	bf00      	nop
 8013106:	370c      	adds	r7, #12
 8013108:	46bd      	mov	sp, r7
 801310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310e:	4770      	bx	lr

08013110 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013110:	b480      	push	{r7}
 8013112:	b083      	sub	sp, #12
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
 8013118:	460b      	mov	r3, r1
 801311a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801311c:	bf00      	nop
 801311e:	370c      	adds	r7, #12
 8013120:	46bd      	mov	sp, r7
 8013122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013126:	4770      	bx	lr

08013128 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b088      	sub	sp, #32
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013130:	2300      	movs	r3, #0
 8013132:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	689a      	ldr	r2, [r3, #8]
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	691b      	ldr	r3, [r3, #16]
 801313c:	431a      	orrs	r2, r3
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	695b      	ldr	r3, [r3, #20]
 8013142:	431a      	orrs	r2, r3
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	69db      	ldr	r3, [r3, #28]
 8013148:	4313      	orrs	r3, r2
 801314a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	681a      	ldr	r2, [r3, #0]
 8013152:	4b92      	ldr	r3, [pc, #584]	; (801339c <UART_SetConfig+0x274>)
 8013154:	4013      	ands	r3, r2
 8013156:	687a      	ldr	r2, [r7, #4]
 8013158:	6812      	ldr	r2, [r2, #0]
 801315a:	6979      	ldr	r1, [r7, #20]
 801315c:	430b      	orrs	r3, r1
 801315e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	685b      	ldr	r3, [r3, #4]
 8013166:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	68da      	ldr	r2, [r3, #12]
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	430a      	orrs	r2, r1
 8013174:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	699b      	ldr	r3, [r3, #24]
 801317a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	6a1b      	ldr	r3, [r3, #32]
 8013180:	697a      	ldr	r2, [r7, #20]
 8013182:	4313      	orrs	r3, r2
 8013184:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	689b      	ldr	r3, [r3, #8]
 801318c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	697a      	ldr	r2, [r7, #20]
 8013196:	430a      	orrs	r2, r1
 8013198:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	4a80      	ldr	r2, [pc, #512]	; (80133a0 <UART_SetConfig+0x278>)
 80131a0:	4293      	cmp	r3, r2
 80131a2:	d120      	bne.n	80131e6 <UART_SetConfig+0xbe>
 80131a4:	4b7f      	ldr	r3, [pc, #508]	; (80133a4 <UART_SetConfig+0x27c>)
 80131a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131a8:	f003 0303 	and.w	r3, r3, #3
 80131ac:	2b03      	cmp	r3, #3
 80131ae:	d817      	bhi.n	80131e0 <UART_SetConfig+0xb8>
 80131b0:	a201      	add	r2, pc, #4	; (adr r2, 80131b8 <UART_SetConfig+0x90>)
 80131b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131b6:	bf00      	nop
 80131b8:	080131c9 	.word	0x080131c9
 80131bc:	080131d5 	.word	0x080131d5
 80131c0:	080131db 	.word	0x080131db
 80131c4:	080131cf 	.word	0x080131cf
 80131c8:	2301      	movs	r3, #1
 80131ca:	77fb      	strb	r3, [r7, #31]
 80131cc:	e0b5      	b.n	801333a <UART_SetConfig+0x212>
 80131ce:	2302      	movs	r3, #2
 80131d0:	77fb      	strb	r3, [r7, #31]
 80131d2:	e0b2      	b.n	801333a <UART_SetConfig+0x212>
 80131d4:	2304      	movs	r3, #4
 80131d6:	77fb      	strb	r3, [r7, #31]
 80131d8:	e0af      	b.n	801333a <UART_SetConfig+0x212>
 80131da:	2308      	movs	r3, #8
 80131dc:	77fb      	strb	r3, [r7, #31]
 80131de:	e0ac      	b.n	801333a <UART_SetConfig+0x212>
 80131e0:	2310      	movs	r3, #16
 80131e2:	77fb      	strb	r3, [r7, #31]
 80131e4:	e0a9      	b.n	801333a <UART_SetConfig+0x212>
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	4a6f      	ldr	r2, [pc, #444]	; (80133a8 <UART_SetConfig+0x280>)
 80131ec:	4293      	cmp	r3, r2
 80131ee:	d124      	bne.n	801323a <UART_SetConfig+0x112>
 80131f0:	4b6c      	ldr	r3, [pc, #432]	; (80133a4 <UART_SetConfig+0x27c>)
 80131f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80131f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80131fc:	d011      	beq.n	8013222 <UART_SetConfig+0xfa>
 80131fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8013202:	d817      	bhi.n	8013234 <UART_SetConfig+0x10c>
 8013204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013208:	d011      	beq.n	801322e <UART_SetConfig+0x106>
 801320a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801320e:	d811      	bhi.n	8013234 <UART_SetConfig+0x10c>
 8013210:	2b00      	cmp	r3, #0
 8013212:	d003      	beq.n	801321c <UART_SetConfig+0xf4>
 8013214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013218:	d006      	beq.n	8013228 <UART_SetConfig+0x100>
 801321a:	e00b      	b.n	8013234 <UART_SetConfig+0x10c>
 801321c:	2300      	movs	r3, #0
 801321e:	77fb      	strb	r3, [r7, #31]
 8013220:	e08b      	b.n	801333a <UART_SetConfig+0x212>
 8013222:	2302      	movs	r3, #2
 8013224:	77fb      	strb	r3, [r7, #31]
 8013226:	e088      	b.n	801333a <UART_SetConfig+0x212>
 8013228:	2304      	movs	r3, #4
 801322a:	77fb      	strb	r3, [r7, #31]
 801322c:	e085      	b.n	801333a <UART_SetConfig+0x212>
 801322e:	2308      	movs	r3, #8
 8013230:	77fb      	strb	r3, [r7, #31]
 8013232:	e082      	b.n	801333a <UART_SetConfig+0x212>
 8013234:	2310      	movs	r3, #16
 8013236:	77fb      	strb	r3, [r7, #31]
 8013238:	e07f      	b.n	801333a <UART_SetConfig+0x212>
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	4a5b      	ldr	r2, [pc, #364]	; (80133ac <UART_SetConfig+0x284>)
 8013240:	4293      	cmp	r3, r2
 8013242:	d124      	bne.n	801328e <UART_SetConfig+0x166>
 8013244:	4b57      	ldr	r3, [pc, #348]	; (80133a4 <UART_SetConfig+0x27c>)
 8013246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013248:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 801324c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8013250:	d011      	beq.n	8013276 <UART_SetConfig+0x14e>
 8013252:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8013256:	d817      	bhi.n	8013288 <UART_SetConfig+0x160>
 8013258:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801325c:	d011      	beq.n	8013282 <UART_SetConfig+0x15a>
 801325e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8013262:	d811      	bhi.n	8013288 <UART_SetConfig+0x160>
 8013264:	2b00      	cmp	r3, #0
 8013266:	d003      	beq.n	8013270 <UART_SetConfig+0x148>
 8013268:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801326c:	d006      	beq.n	801327c <UART_SetConfig+0x154>
 801326e:	e00b      	b.n	8013288 <UART_SetConfig+0x160>
 8013270:	2300      	movs	r3, #0
 8013272:	77fb      	strb	r3, [r7, #31]
 8013274:	e061      	b.n	801333a <UART_SetConfig+0x212>
 8013276:	2302      	movs	r3, #2
 8013278:	77fb      	strb	r3, [r7, #31]
 801327a:	e05e      	b.n	801333a <UART_SetConfig+0x212>
 801327c:	2304      	movs	r3, #4
 801327e:	77fb      	strb	r3, [r7, #31]
 8013280:	e05b      	b.n	801333a <UART_SetConfig+0x212>
 8013282:	2308      	movs	r3, #8
 8013284:	77fb      	strb	r3, [r7, #31]
 8013286:	e058      	b.n	801333a <UART_SetConfig+0x212>
 8013288:	2310      	movs	r3, #16
 801328a:	77fb      	strb	r3, [r7, #31]
 801328c:	e055      	b.n	801333a <UART_SetConfig+0x212>
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	4a47      	ldr	r2, [pc, #284]	; (80133b0 <UART_SetConfig+0x288>)
 8013294:	4293      	cmp	r3, r2
 8013296:	d124      	bne.n	80132e2 <UART_SetConfig+0x1ba>
 8013298:	4b42      	ldr	r3, [pc, #264]	; (80133a4 <UART_SetConfig+0x27c>)
 801329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801329c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80132a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80132a4:	d011      	beq.n	80132ca <UART_SetConfig+0x1a2>
 80132a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80132aa:	d817      	bhi.n	80132dc <UART_SetConfig+0x1b4>
 80132ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80132b0:	d011      	beq.n	80132d6 <UART_SetConfig+0x1ae>
 80132b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80132b6:	d811      	bhi.n	80132dc <UART_SetConfig+0x1b4>
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d003      	beq.n	80132c4 <UART_SetConfig+0x19c>
 80132bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80132c0:	d006      	beq.n	80132d0 <UART_SetConfig+0x1a8>
 80132c2:	e00b      	b.n	80132dc <UART_SetConfig+0x1b4>
 80132c4:	2300      	movs	r3, #0
 80132c6:	77fb      	strb	r3, [r7, #31]
 80132c8:	e037      	b.n	801333a <UART_SetConfig+0x212>
 80132ca:	2302      	movs	r3, #2
 80132cc:	77fb      	strb	r3, [r7, #31]
 80132ce:	e034      	b.n	801333a <UART_SetConfig+0x212>
 80132d0:	2304      	movs	r3, #4
 80132d2:	77fb      	strb	r3, [r7, #31]
 80132d4:	e031      	b.n	801333a <UART_SetConfig+0x212>
 80132d6:	2308      	movs	r3, #8
 80132d8:	77fb      	strb	r3, [r7, #31]
 80132da:	e02e      	b.n	801333a <UART_SetConfig+0x212>
 80132dc:	2310      	movs	r3, #16
 80132de:	77fb      	strb	r3, [r7, #31]
 80132e0:	e02b      	b.n	801333a <UART_SetConfig+0x212>
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	4a33      	ldr	r2, [pc, #204]	; (80133b4 <UART_SetConfig+0x28c>)
 80132e8:	4293      	cmp	r3, r2
 80132ea:	d124      	bne.n	8013336 <UART_SetConfig+0x20e>
 80132ec:	4b2d      	ldr	r3, [pc, #180]	; (80133a4 <UART_SetConfig+0x27c>)
 80132ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132f0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80132f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80132f8:	d011      	beq.n	801331e <UART_SetConfig+0x1f6>
 80132fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80132fe:	d817      	bhi.n	8013330 <UART_SetConfig+0x208>
 8013300:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013304:	d011      	beq.n	801332a <UART_SetConfig+0x202>
 8013306:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801330a:	d811      	bhi.n	8013330 <UART_SetConfig+0x208>
 801330c:	2b00      	cmp	r3, #0
 801330e:	d003      	beq.n	8013318 <UART_SetConfig+0x1f0>
 8013310:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013314:	d006      	beq.n	8013324 <UART_SetConfig+0x1fc>
 8013316:	e00b      	b.n	8013330 <UART_SetConfig+0x208>
 8013318:	2300      	movs	r3, #0
 801331a:	77fb      	strb	r3, [r7, #31]
 801331c:	e00d      	b.n	801333a <UART_SetConfig+0x212>
 801331e:	2302      	movs	r3, #2
 8013320:	77fb      	strb	r3, [r7, #31]
 8013322:	e00a      	b.n	801333a <UART_SetConfig+0x212>
 8013324:	2304      	movs	r3, #4
 8013326:	77fb      	strb	r3, [r7, #31]
 8013328:	e007      	b.n	801333a <UART_SetConfig+0x212>
 801332a:	2308      	movs	r3, #8
 801332c:	77fb      	strb	r3, [r7, #31]
 801332e:	e004      	b.n	801333a <UART_SetConfig+0x212>
 8013330:	2310      	movs	r3, #16
 8013332:	77fb      	strb	r3, [r7, #31]
 8013334:	e001      	b.n	801333a <UART_SetConfig+0x212>
 8013336:	2310      	movs	r3, #16
 8013338:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	69db      	ldr	r3, [r3, #28]
 801333e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013342:	d16c      	bne.n	801341e <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8013344:	7ffb      	ldrb	r3, [r7, #31]
 8013346:	2b08      	cmp	r3, #8
 8013348:	d838      	bhi.n	80133bc <UART_SetConfig+0x294>
 801334a:	a201      	add	r2, pc, #4	; (adr r2, 8013350 <UART_SetConfig+0x228>)
 801334c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013350:	08013375 	.word	0x08013375
 8013354:	0801337d 	.word	0x0801337d
 8013358:	08013385 	.word	0x08013385
 801335c:	080133bd 	.word	0x080133bd
 8013360:	0801338b 	.word	0x0801338b
 8013364:	080133bd 	.word	0x080133bd
 8013368:	080133bd 	.word	0x080133bd
 801336c:	080133bd 	.word	0x080133bd
 8013370:	08013393 	.word	0x08013393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013374:	f7ff f86e 	bl	8012454 <HAL_RCC_GetPCLK1Freq>
 8013378:	61b8      	str	r0, [r7, #24]
        break;
 801337a:	e024      	b.n	80133c6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801337c:	f7ff f88c 	bl	8012498 <HAL_RCC_GetPCLK2Freq>
 8013380:	61b8      	str	r0, [r7, #24]
        break;
 8013382:	e020      	b.n	80133c6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013384:	4b0c      	ldr	r3, [pc, #48]	; (80133b8 <UART_SetConfig+0x290>)
 8013386:	61bb      	str	r3, [r7, #24]
        break;
 8013388:	e01d      	b.n	80133c6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801338a:	f7fe ffed 	bl	8012368 <HAL_RCC_GetSysClockFreq>
 801338e:	61b8      	str	r0, [r7, #24]
        break;
 8013390:	e019      	b.n	80133c6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013396:	61bb      	str	r3, [r7, #24]
        break;
 8013398:	e015      	b.n	80133c6 <UART_SetConfig+0x29e>
 801339a:	bf00      	nop
 801339c:	efff69f3 	.word	0xefff69f3
 80133a0:	40013800 	.word	0x40013800
 80133a4:	40021000 	.word	0x40021000
 80133a8:	40004400 	.word	0x40004400
 80133ac:	40004800 	.word	0x40004800
 80133b0:	40004c00 	.word	0x40004c00
 80133b4:	40005000 	.word	0x40005000
 80133b8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80133bc:	2300      	movs	r3, #0
 80133be:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80133c0:	2301      	movs	r3, #1
 80133c2:	77bb      	strb	r3, [r7, #30]
        break;
 80133c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80133c6:	69bb      	ldr	r3, [r7, #24]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d075      	beq.n	80134b8 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80133cc:	69bb      	ldr	r3, [r7, #24]
 80133ce:	005a      	lsls	r2, r3, #1
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	685b      	ldr	r3, [r3, #4]
 80133d4:	085b      	lsrs	r3, r3, #1
 80133d6:	441a      	add	r2, r3
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	685b      	ldr	r3, [r3, #4]
 80133dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80133e0:	b29b      	uxth	r3, r3
 80133e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80133e4:	693b      	ldr	r3, [r7, #16]
 80133e6:	2b0f      	cmp	r3, #15
 80133e8:	d916      	bls.n	8013418 <UART_SetConfig+0x2f0>
 80133ea:	693b      	ldr	r3, [r7, #16]
 80133ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80133f0:	d212      	bcs.n	8013418 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80133f2:	693b      	ldr	r3, [r7, #16]
 80133f4:	b29b      	uxth	r3, r3
 80133f6:	f023 030f 	bic.w	r3, r3, #15
 80133fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	085b      	lsrs	r3, r3, #1
 8013400:	b29b      	uxth	r3, r3
 8013402:	f003 0307 	and.w	r3, r3, #7
 8013406:	b29a      	uxth	r2, r3
 8013408:	89fb      	ldrh	r3, [r7, #14]
 801340a:	4313      	orrs	r3, r2
 801340c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	89fa      	ldrh	r2, [r7, #14]
 8013414:	60da      	str	r2, [r3, #12]
 8013416:	e04f      	b.n	80134b8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8013418:	2301      	movs	r3, #1
 801341a:	77bb      	strb	r3, [r7, #30]
 801341c:	e04c      	b.n	80134b8 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 801341e:	7ffb      	ldrb	r3, [r7, #31]
 8013420:	2b08      	cmp	r3, #8
 8013422:	d828      	bhi.n	8013476 <UART_SetConfig+0x34e>
 8013424:	a201      	add	r2, pc, #4	; (adr r2, 801342c <UART_SetConfig+0x304>)
 8013426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801342a:	bf00      	nop
 801342c:	08013451 	.word	0x08013451
 8013430:	08013459 	.word	0x08013459
 8013434:	08013461 	.word	0x08013461
 8013438:	08013477 	.word	0x08013477
 801343c:	08013467 	.word	0x08013467
 8013440:	08013477 	.word	0x08013477
 8013444:	08013477 	.word	0x08013477
 8013448:	08013477 	.word	0x08013477
 801344c:	0801346f 	.word	0x0801346f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013450:	f7ff f800 	bl	8012454 <HAL_RCC_GetPCLK1Freq>
 8013454:	61b8      	str	r0, [r7, #24]
        break;
 8013456:	e013      	b.n	8013480 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013458:	f7ff f81e 	bl	8012498 <HAL_RCC_GetPCLK2Freq>
 801345c:	61b8      	str	r0, [r7, #24]
        break;
 801345e:	e00f      	b.n	8013480 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013460:	4b1b      	ldr	r3, [pc, #108]	; (80134d0 <UART_SetConfig+0x3a8>)
 8013462:	61bb      	str	r3, [r7, #24]
        break;
 8013464:	e00c      	b.n	8013480 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013466:	f7fe ff7f 	bl	8012368 <HAL_RCC_GetSysClockFreq>
 801346a:	61b8      	str	r0, [r7, #24]
        break;
 801346c:	e008      	b.n	8013480 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801346e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013472:	61bb      	str	r3, [r7, #24]
        break;
 8013474:	e004      	b.n	8013480 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8013476:	2300      	movs	r3, #0
 8013478:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801347a:	2301      	movs	r3, #1
 801347c:	77bb      	strb	r3, [r7, #30]
        break;
 801347e:	bf00      	nop
    }

    if (pclk != 0U)
 8013480:	69bb      	ldr	r3, [r7, #24]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d018      	beq.n	80134b8 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	685b      	ldr	r3, [r3, #4]
 801348a:	085a      	lsrs	r2, r3, #1
 801348c:	69bb      	ldr	r3, [r7, #24]
 801348e:	441a      	add	r2, r3
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	685b      	ldr	r3, [r3, #4]
 8013494:	fbb2 f3f3 	udiv	r3, r2, r3
 8013498:	b29b      	uxth	r3, r3
 801349a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801349c:	693b      	ldr	r3, [r7, #16]
 801349e:	2b0f      	cmp	r3, #15
 80134a0:	d908      	bls.n	80134b4 <UART_SetConfig+0x38c>
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80134a8:	d204      	bcs.n	80134b4 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	693a      	ldr	r2, [r7, #16]
 80134b0:	60da      	str	r2, [r3, #12]
 80134b2:	e001      	b.n	80134b8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80134b4:	2301      	movs	r3, #1
 80134b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	2200      	movs	r2, #0
 80134bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	2200      	movs	r2, #0
 80134c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80134c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80134c6:	4618      	mov	r0, r3
 80134c8:	3720      	adds	r7, #32
 80134ca:	46bd      	mov	sp, r7
 80134cc:	bd80      	pop	{r7, pc}
 80134ce:	bf00      	nop
 80134d0:	007a1200 	.word	0x007a1200

080134d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80134d4:	b480      	push	{r7}
 80134d6:	b083      	sub	sp, #12
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134e0:	f003 0301 	and.w	r3, r3, #1
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d00a      	beq.n	80134fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	685b      	ldr	r3, [r3, #4]
 80134ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	430a      	orrs	r2, r1
 80134fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013502:	f003 0302 	and.w	r3, r3, #2
 8013506:	2b00      	cmp	r3, #0
 8013508:	d00a      	beq.n	8013520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	685b      	ldr	r3, [r3, #4]
 8013510:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	430a      	orrs	r2, r1
 801351e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013524:	f003 0304 	and.w	r3, r3, #4
 8013528:	2b00      	cmp	r3, #0
 801352a:	d00a      	beq.n	8013542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	685b      	ldr	r3, [r3, #4]
 8013532:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	430a      	orrs	r2, r1
 8013540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013546:	f003 0308 	and.w	r3, r3, #8
 801354a:	2b00      	cmp	r3, #0
 801354c:	d00a      	beq.n	8013564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	685b      	ldr	r3, [r3, #4]
 8013554:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	430a      	orrs	r2, r1
 8013562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013568:	f003 0310 	and.w	r3, r3, #16
 801356c:	2b00      	cmp	r3, #0
 801356e:	d00a      	beq.n	8013586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	689b      	ldr	r3, [r3, #8]
 8013576:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	430a      	orrs	r2, r1
 8013584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801358a:	f003 0320 	and.w	r3, r3, #32
 801358e:	2b00      	cmp	r3, #0
 8013590:	d00a      	beq.n	80135a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	689b      	ldr	r3, [r3, #8]
 8013598:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	430a      	orrs	r2, r1
 80135a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d01a      	beq.n	80135ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	685b      	ldr	r3, [r3, #4]
 80135ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	430a      	orrs	r2, r1
 80135c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80135d2:	d10a      	bne.n	80135ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	685b      	ldr	r3, [r3, #4]
 80135da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	430a      	orrs	r2, r1
 80135e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d00a      	beq.n	801360c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	685b      	ldr	r3, [r3, #4]
 80135fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	430a      	orrs	r2, r1
 801360a:	605a      	str	r2, [r3, #4]
  }
}
 801360c:	bf00      	nop
 801360e:	370c      	adds	r7, #12
 8013610:	46bd      	mov	sp, r7
 8013612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013616:	4770      	bx	lr

08013618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b086      	sub	sp, #24
 801361c:	af02      	add	r7, sp, #8
 801361e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	2200      	movs	r2, #0
 8013624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013628:	f7fd f95a 	bl	80108e0 <HAL_GetTick>
 801362c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	f003 0308 	and.w	r3, r3, #8
 8013638:	2b08      	cmp	r3, #8
 801363a:	d10e      	bne.n	801365a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801363c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013640:	9300      	str	r3, [sp, #0]
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	2200      	movs	r2, #0
 8013646:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801364a:	6878      	ldr	r0, [r7, #4]
 801364c:	f000 f82d 	bl	80136aa <UART_WaitOnFlagUntilTimeout>
 8013650:	4603      	mov	r3, r0
 8013652:	2b00      	cmp	r3, #0
 8013654:	d001      	beq.n	801365a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013656:	2303      	movs	r3, #3
 8013658:	e023      	b.n	80136a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	f003 0304 	and.w	r3, r3, #4
 8013664:	2b04      	cmp	r3, #4
 8013666:	d10e      	bne.n	8013686 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013668:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801366c:	9300      	str	r3, [sp, #0]
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	2200      	movs	r2, #0
 8013672:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013676:	6878      	ldr	r0, [r7, #4]
 8013678:	f000 f817 	bl	80136aa <UART_WaitOnFlagUntilTimeout>
 801367c:	4603      	mov	r3, r0
 801367e:	2b00      	cmp	r3, #0
 8013680:	d001      	beq.n	8013686 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013682:	2303      	movs	r3, #3
 8013684:	e00d      	b.n	80136a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	2220      	movs	r2, #32
 801368a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	2220      	movs	r2, #32
 8013690:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	2200      	movs	r2, #0
 8013696:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	2200      	movs	r2, #0
 801369c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80136a0:	2300      	movs	r3, #0
}
 80136a2:	4618      	mov	r0, r3
 80136a4:	3710      	adds	r7, #16
 80136a6:	46bd      	mov	sp, r7
 80136a8:	bd80      	pop	{r7, pc}

080136aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80136aa:	b580      	push	{r7, lr}
 80136ac:	b09c      	sub	sp, #112	; 0x70
 80136ae:	af00      	add	r7, sp, #0
 80136b0:	60f8      	str	r0, [r7, #12]
 80136b2:	60b9      	str	r1, [r7, #8]
 80136b4:	603b      	str	r3, [r7, #0]
 80136b6:	4613      	mov	r3, r2
 80136b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80136ba:	e0a5      	b.n	8013808 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80136bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80136be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136c2:	f000 80a1 	beq.w	8013808 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80136c6:	f7fd f90b 	bl	80108e0 <HAL_GetTick>
 80136ca:	4602      	mov	r2, r0
 80136cc:	683b      	ldr	r3, [r7, #0]
 80136ce:	1ad3      	subs	r3, r2, r3
 80136d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80136d2:	429a      	cmp	r2, r3
 80136d4:	d302      	bcc.n	80136dc <UART_WaitOnFlagUntilTimeout+0x32>
 80136d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d13e      	bne.n	801375a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136e4:	e853 3f00 	ldrex	r3, [r3]
 80136e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80136ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80136f0:	667b      	str	r3, [r7, #100]	; 0x64
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	461a      	mov	r2, r3
 80136f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80136fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80136fc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013700:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013702:	e841 2300 	strex	r3, r2, [r1]
 8013706:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8013708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801370a:	2b00      	cmp	r3, #0
 801370c:	d1e6      	bne.n	80136dc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	3308      	adds	r3, #8
 8013714:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013718:	e853 3f00 	ldrex	r3, [r3]
 801371c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801371e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013720:	f023 0301 	bic.w	r3, r3, #1
 8013724:	663b      	str	r3, [r7, #96]	; 0x60
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	3308      	adds	r3, #8
 801372c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801372e:	64ba      	str	r2, [r7, #72]	; 0x48
 8013730:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013732:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013734:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013736:	e841 2300 	strex	r3, r2, [r1]
 801373a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801373c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801373e:	2b00      	cmp	r3, #0
 8013740:	d1e5      	bne.n	801370e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	2220      	movs	r2, #32
 8013746:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	2220      	movs	r2, #32
 801374c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	2200      	movs	r2, #0
 8013752:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8013756:	2303      	movs	r3, #3
 8013758:	e067      	b.n	801382a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	f003 0304 	and.w	r3, r3, #4
 8013764:	2b00      	cmp	r3, #0
 8013766:	d04f      	beq.n	8013808 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	69db      	ldr	r3, [r3, #28]
 801376e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013776:	d147      	bne.n	8013808 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013780:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801378a:	e853 3f00 	ldrex	r3, [r3]
 801378e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013792:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013796:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	461a      	mov	r2, r3
 801379e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80137a0:	637b      	str	r3, [r7, #52]	; 0x34
 80137a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80137a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80137a8:	e841 2300 	strex	r3, r2, [r1]
 80137ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80137ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d1e6      	bne.n	8013782 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	3308      	adds	r3, #8
 80137ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137bc:	697b      	ldr	r3, [r7, #20]
 80137be:	e853 3f00 	ldrex	r3, [r3]
 80137c2:	613b      	str	r3, [r7, #16]
   return(result);
 80137c4:	693b      	ldr	r3, [r7, #16]
 80137c6:	f023 0301 	bic.w	r3, r3, #1
 80137ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	3308      	adds	r3, #8
 80137d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80137d4:	623a      	str	r2, [r7, #32]
 80137d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137d8:	69f9      	ldr	r1, [r7, #28]
 80137da:	6a3a      	ldr	r2, [r7, #32]
 80137dc:	e841 2300 	strex	r3, r2, [r1]
 80137e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80137e2:	69bb      	ldr	r3, [r7, #24]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d1e5      	bne.n	80137b4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	2220      	movs	r2, #32
 80137ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	2220      	movs	r2, #32
 80137f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	2220      	movs	r2, #32
 80137f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	2200      	movs	r2, #0
 8013800:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8013804:	2303      	movs	r3, #3
 8013806:	e010      	b.n	801382a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	69da      	ldr	r2, [r3, #28]
 801380e:	68bb      	ldr	r3, [r7, #8]
 8013810:	4013      	ands	r3, r2
 8013812:	68ba      	ldr	r2, [r7, #8]
 8013814:	429a      	cmp	r2, r3
 8013816:	bf0c      	ite	eq
 8013818:	2301      	moveq	r3, #1
 801381a:	2300      	movne	r3, #0
 801381c:	b2db      	uxtb	r3, r3
 801381e:	461a      	mov	r2, r3
 8013820:	79fb      	ldrb	r3, [r7, #7]
 8013822:	429a      	cmp	r2, r3
 8013824:	f43f af4a 	beq.w	80136bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013828:	2300      	movs	r3, #0
}
 801382a:	4618      	mov	r0, r3
 801382c:	3770      	adds	r7, #112	; 0x70
 801382e:	46bd      	mov	sp, r7
 8013830:	bd80      	pop	{r7, pc}
	...

08013834 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013834:	b480      	push	{r7}
 8013836:	b091      	sub	sp, #68	; 0x44
 8013838:	af00      	add	r7, sp, #0
 801383a:	60f8      	str	r0, [r7, #12]
 801383c:	60b9      	str	r1, [r7, #8]
 801383e:	4613      	mov	r3, r2
 8013840:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	68ba      	ldr	r2, [r7, #8]
 8013846:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	88fa      	ldrh	r2, [r7, #6]
 801384c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	88fa      	ldrh	r2, [r7, #6]
 8013854:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	2200      	movs	r2, #0
 801385c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	689b      	ldr	r3, [r3, #8]
 8013862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013866:	d10e      	bne.n	8013886 <UART_Start_Receive_IT+0x52>
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	691b      	ldr	r3, [r3, #16]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d105      	bne.n	801387c <UART_Start_Receive_IT+0x48>
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	f240 12ff 	movw	r2, #511	; 0x1ff
 8013876:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801387a:	e02d      	b.n	80138d8 <UART_Start_Receive_IT+0xa4>
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	22ff      	movs	r2, #255	; 0xff
 8013880:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8013884:	e028      	b.n	80138d8 <UART_Start_Receive_IT+0xa4>
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	689b      	ldr	r3, [r3, #8]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d10d      	bne.n	80138aa <UART_Start_Receive_IT+0x76>
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	691b      	ldr	r3, [r3, #16]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d104      	bne.n	80138a0 <UART_Start_Receive_IT+0x6c>
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	22ff      	movs	r2, #255	; 0xff
 801389a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801389e:	e01b      	b.n	80138d8 <UART_Start_Receive_IT+0xa4>
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	227f      	movs	r2, #127	; 0x7f
 80138a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80138a8:	e016      	b.n	80138d8 <UART_Start_Receive_IT+0xa4>
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	689b      	ldr	r3, [r3, #8]
 80138ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80138b2:	d10d      	bne.n	80138d0 <UART_Start_Receive_IT+0x9c>
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	691b      	ldr	r3, [r3, #16]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d104      	bne.n	80138c6 <UART_Start_Receive_IT+0x92>
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	227f      	movs	r2, #127	; 0x7f
 80138c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80138c4:	e008      	b.n	80138d8 <UART_Start_Receive_IT+0xa4>
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	223f      	movs	r2, #63	; 0x3f
 80138ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80138ce:	e003      	b.n	80138d8 <UART_Start_Receive_IT+0xa4>
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	2200      	movs	r2, #0
 80138d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	2200      	movs	r2, #0
 80138dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	2222      	movs	r2, #34	; 0x22
 80138e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	3308      	adds	r3, #8
 80138ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138f0:	e853 3f00 	ldrex	r3, [r3]
 80138f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80138f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138f8:	f043 0301 	orr.w	r3, r3, #1
 80138fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	3308      	adds	r3, #8
 8013904:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013906:	637a      	str	r2, [r7, #52]	; 0x34
 8013908:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801390a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801390c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801390e:	e841 2300 	strex	r3, r2, [r1]
 8013912:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013916:	2b00      	cmp	r3, #0
 8013918:	d1e5      	bne.n	80138e6 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	689b      	ldr	r3, [r3, #8]
 801391e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013922:	d107      	bne.n	8013934 <UART_Start_Receive_IT+0x100>
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	691b      	ldr	r3, [r3, #16]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d103      	bne.n	8013934 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	4a15      	ldr	r2, [pc, #84]	; (8013984 <UART_Start_Receive_IT+0x150>)
 8013930:	665a      	str	r2, [r3, #100]	; 0x64
 8013932:	e002      	b.n	801393a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	4a14      	ldr	r2, [pc, #80]	; (8013988 <UART_Start_Receive_IT+0x154>)
 8013938:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	2200      	movs	r2, #0
 801393e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013948:	697b      	ldr	r3, [r7, #20]
 801394a:	e853 3f00 	ldrex	r3, [r3]
 801394e:	613b      	str	r3, [r7, #16]
   return(result);
 8013950:	693b      	ldr	r3, [r7, #16]
 8013952:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8013956:	63bb      	str	r3, [r7, #56]	; 0x38
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	461a      	mov	r2, r3
 801395e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013960:	623b      	str	r3, [r7, #32]
 8013962:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013964:	69f9      	ldr	r1, [r7, #28]
 8013966:	6a3a      	ldr	r2, [r7, #32]
 8013968:	e841 2300 	strex	r3, r2, [r1]
 801396c:	61bb      	str	r3, [r7, #24]
   return(result);
 801396e:	69bb      	ldr	r3, [r7, #24]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d1e6      	bne.n	8013942 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8013974:	2300      	movs	r3, #0
}
 8013976:	4618      	mov	r0, r3
 8013978:	3744      	adds	r7, #68	; 0x44
 801397a:	46bd      	mov	sp, r7
 801397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013980:	4770      	bx	lr
 8013982:	bf00      	nop
 8013984:	08013da7 	.word	0x08013da7
 8013988:	08013c4b 	.word	0x08013c4b

0801398c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801398c:	b480      	push	{r7}
 801398e:	b095      	sub	sp, #84	; 0x54
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801399a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801399c:	e853 3f00 	ldrex	r3, [r3]
 80139a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80139a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80139a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	461a      	mov	r2, r3
 80139b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139b2:	643b      	str	r3, [r7, #64]	; 0x40
 80139b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80139b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80139ba:	e841 2300 	strex	r3, r2, [r1]
 80139be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80139c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d1e6      	bne.n	8013994 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	3308      	adds	r3, #8
 80139cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139ce:	6a3b      	ldr	r3, [r7, #32]
 80139d0:	e853 3f00 	ldrex	r3, [r3]
 80139d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80139d6:	69fb      	ldr	r3, [r7, #28]
 80139d8:	f023 0301 	bic.w	r3, r3, #1
 80139dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	3308      	adds	r3, #8
 80139e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80139e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80139e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80139ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139ee:	e841 2300 	strex	r3, r2, [r1]
 80139f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80139f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d1e5      	bne.n	80139c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80139fe:	2b01      	cmp	r3, #1
 8013a00:	d118      	bne.n	8013a34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	e853 3f00 	ldrex	r3, [r3]
 8013a0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8013a10:	68bb      	ldr	r3, [r7, #8]
 8013a12:	f023 0310 	bic.w	r3, r3, #16
 8013a16:	647b      	str	r3, [r7, #68]	; 0x44
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	461a      	mov	r2, r3
 8013a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a20:	61bb      	str	r3, [r7, #24]
 8013a22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a24:	6979      	ldr	r1, [r7, #20]
 8013a26:	69ba      	ldr	r2, [r7, #24]
 8013a28:	e841 2300 	strex	r3, r2, [r1]
 8013a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8013a2e:	693b      	ldr	r3, [r7, #16]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d1e6      	bne.n	8013a02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	2220      	movs	r2, #32
 8013a38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	2200      	movs	r2, #0
 8013a44:	665a      	str	r2, [r3, #100]	; 0x64
}
 8013a46:	bf00      	nop
 8013a48:	3754      	adds	r7, #84	; 0x54
 8013a4a:	46bd      	mov	sp, r7
 8013a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a50:	4770      	bx	lr

08013a52 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013a52:	b580      	push	{r7, lr}
 8013a54:	b084      	sub	sp, #16
 8013a56:	af00      	add	r7, sp, #0
 8013a58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	2200      	movs	r2, #0
 8013a64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013a70:	68f8      	ldr	r0, [r7, #12]
 8013a72:	f7ff fb43 	bl	80130fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013a76:	bf00      	nop
 8013a78:	3710      	adds	r7, #16
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	bd80      	pop	{r7, pc}

08013a7e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8013a7e:	b480      	push	{r7}
 8013a80:	b08f      	sub	sp, #60	; 0x3c
 8013a82:	af00      	add	r7, sp, #0
 8013a84:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013a8a:	2b21      	cmp	r3, #33	; 0x21
 8013a8c:	d14d      	bne.n	8013b2a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8013a94:	b29b      	uxth	r3, r3
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d132      	bne.n	8013b00 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013aa0:	6a3b      	ldr	r3, [r7, #32]
 8013aa2:	e853 3f00 	ldrex	r3, [r3]
 8013aa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8013aa8:	69fb      	ldr	r3, [r7, #28]
 8013aaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013aae:	637b      	str	r3, [r7, #52]	; 0x34
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	461a      	mov	r2, r3
 8013ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013aba:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013abc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ac0:	e841 2300 	strex	r3, r2, [r1]
 8013ac4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d1e6      	bne.n	8013a9a <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	e853 3f00 	ldrex	r3, [r3]
 8013ad8:	60bb      	str	r3, [r7, #8]
   return(result);
 8013ada:	68bb      	ldr	r3, [r7, #8]
 8013adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	461a      	mov	r2, r3
 8013ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aea:	61bb      	str	r3, [r7, #24]
 8013aec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013aee:	6979      	ldr	r1, [r7, #20]
 8013af0:	69ba      	ldr	r2, [r7, #24]
 8013af2:	e841 2300 	strex	r3, r2, [r1]
 8013af6:	613b      	str	r3, [r7, #16]
   return(result);
 8013af8:	693b      	ldr	r3, [r7, #16]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d1e6      	bne.n	8013acc <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8013afe:	e014      	b.n	8013b2a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b04:	781a      	ldrb	r2, [r3, #0]
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	b292      	uxth	r2, r2
 8013b0c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b12:	1c5a      	adds	r2, r3, #1
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8013b1e:	b29b      	uxth	r3, r3
 8013b20:	3b01      	subs	r3, #1
 8013b22:	b29a      	uxth	r2, r3
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8013b2a:	bf00      	nop
 8013b2c:	373c      	adds	r7, #60	; 0x3c
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b34:	4770      	bx	lr

08013b36 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8013b36:	b480      	push	{r7}
 8013b38:	b091      	sub	sp, #68	; 0x44
 8013b3a:	af00      	add	r7, sp, #0
 8013b3c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b42:	2b21      	cmp	r3, #33	; 0x21
 8013b44:	d151      	bne.n	8013bea <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8013b4c:	b29b      	uxth	r3, r3
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d132      	bne.n	8013bb8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b5a:	e853 3f00 	ldrex	r3, [r3]
 8013b5e:	623b      	str	r3, [r7, #32]
   return(result);
 8013b60:	6a3b      	ldr	r3, [r7, #32]
 8013b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013b66:	63bb      	str	r3, [r7, #56]	; 0x38
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	461a      	mov	r2, r3
 8013b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b70:	633b      	str	r3, [r7, #48]	; 0x30
 8013b72:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b78:	e841 2300 	strex	r3, r2, [r1]
 8013b7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d1e6      	bne.n	8013b52 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b8a:	693b      	ldr	r3, [r7, #16]
 8013b8c:	e853 3f00 	ldrex	r3, [r3]
 8013b90:	60fb      	str	r3, [r7, #12]
   return(result);
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b98:	637b      	str	r3, [r7, #52]	; 0x34
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	461a      	mov	r2, r3
 8013ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ba2:	61fb      	str	r3, [r7, #28]
 8013ba4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ba6:	69b9      	ldr	r1, [r7, #24]
 8013ba8:	69fa      	ldr	r2, [r7, #28]
 8013baa:	e841 2300 	strex	r3, r2, [r1]
 8013bae:	617b      	str	r3, [r7, #20]
   return(result);
 8013bb0:	697b      	ldr	r3, [r7, #20]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d1e6      	bne.n	8013b84 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8013bb6:	e018      	b.n	8013bea <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8013bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bc0:	881a      	ldrh	r2, [r3, #0]
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013bca:	b292      	uxth	r2, r2
 8013bcc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013bd2:	1c9a      	adds	r2, r3, #2
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8013bde:	b29b      	uxth	r3, r3
 8013be0:	3b01      	subs	r3, #1
 8013be2:	b29a      	uxth	r2, r3
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8013bea:	bf00      	nop
 8013bec:	3744      	adds	r7, #68	; 0x44
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf4:	4770      	bx	lr

08013bf6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013bf6:	b580      	push	{r7, lr}
 8013bf8:	b088      	sub	sp, #32
 8013bfa:	af00      	add	r7, sp, #0
 8013bfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	e853 3f00 	ldrex	r3, [r3]
 8013c0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8013c0c:	68bb      	ldr	r3, [r7, #8]
 8013c0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013c12:	61fb      	str	r3, [r7, #28]
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	461a      	mov	r2, r3
 8013c1a:	69fb      	ldr	r3, [r7, #28]
 8013c1c:	61bb      	str	r3, [r7, #24]
 8013c1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c20:	6979      	ldr	r1, [r7, #20]
 8013c22:	69ba      	ldr	r2, [r7, #24]
 8013c24:	e841 2300 	strex	r3, r2, [r1]
 8013c28:	613b      	str	r3, [r7, #16]
   return(result);
 8013c2a:	693b      	ldr	r3, [r7, #16]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d1e6      	bne.n	8013bfe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	2220      	movs	r2, #32
 8013c34:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	2200      	movs	r2, #0
 8013c3a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013c3c:	6878      	ldr	r0, [r7, #4]
 8013c3e:	f7ff fa53 	bl	80130e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013c42:	bf00      	nop
 8013c44:	3720      	adds	r7, #32
 8013c46:	46bd      	mov	sp, r7
 8013c48:	bd80      	pop	{r7, pc}

08013c4a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8013c4a:	b580      	push	{r7, lr}
 8013c4c:	b096      	sub	sp, #88	; 0x58
 8013c4e:	af00      	add	r7, sp, #0
 8013c50:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013c58:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013c60:	2b22      	cmp	r3, #34	; 0x22
 8013c62:	f040 8094 	bne.w	8013d8e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013c6c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013c70:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8013c74:	b2d9      	uxtb	r1, r3
 8013c76:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013c7a:	b2da      	uxtb	r2, r3
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c80:	400a      	ands	r2, r1
 8013c82:	b2d2      	uxtb	r2, r2
 8013c84:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c8a:	1c5a      	adds	r2, r3, #1
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8013c96:	b29b      	uxth	r3, r3
 8013c98:	3b01      	subs	r3, #1
 8013c9a:	b29a      	uxth	r2, r3
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8013ca8:	b29b      	uxth	r3, r3
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d177      	bne.n	8013d9e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cb6:	e853 3f00 	ldrex	r3, [r3]
 8013cba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013cc2:	653b      	str	r3, [r7, #80]	; 0x50
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	461a      	mov	r2, r3
 8013cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8013cce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013cd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013cd4:	e841 2300 	strex	r3, r2, [r1]
 8013cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d1e6      	bne.n	8013cae <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	3308      	adds	r3, #8
 8013ce6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cea:	e853 3f00 	ldrex	r3, [r3]
 8013cee:	623b      	str	r3, [r7, #32]
   return(result);
 8013cf0:	6a3b      	ldr	r3, [r7, #32]
 8013cf2:	f023 0301 	bic.w	r3, r3, #1
 8013cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	3308      	adds	r3, #8
 8013cfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013d00:	633a      	str	r2, [r7, #48]	; 0x30
 8013d02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013d06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d08:	e841 2300 	strex	r3, r2, [r1]
 8013d0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d1e5      	bne.n	8013ce0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	2220      	movs	r2, #32
 8013d18:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013d24:	2b01      	cmp	r3, #1
 8013d26:	d12e      	bne.n	8013d86 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d34:	693b      	ldr	r3, [r7, #16]
 8013d36:	e853 3f00 	ldrex	r3, [r3]
 8013d3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	f023 0310 	bic.w	r3, r3, #16
 8013d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	461a      	mov	r2, r3
 8013d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d4c:	61fb      	str	r3, [r7, #28]
 8013d4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d50:	69b9      	ldr	r1, [r7, #24]
 8013d52:	69fa      	ldr	r2, [r7, #28]
 8013d54:	e841 2300 	strex	r3, r2, [r1]
 8013d58:	617b      	str	r3, [r7, #20]
   return(result);
 8013d5a:	697b      	ldr	r3, [r7, #20]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d1e6      	bne.n	8013d2e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	69db      	ldr	r3, [r3, #28]
 8013d66:	f003 0310 	and.w	r3, r3, #16
 8013d6a:	2b10      	cmp	r3, #16
 8013d6c:	d103      	bne.n	8013d76 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	2210      	movs	r2, #16
 8013d74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8013d7c:	4619      	mov	r1, r3
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	f7ff f9c6 	bl	8013110 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013d84:	e00b      	b.n	8013d9e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8013d86:	6878      	ldr	r0, [r7, #4]
 8013d88:	f7fc fa90 	bl	80102ac <HAL_UART_RxCpltCallback>
}
 8013d8c:	e007      	b.n	8013d9e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	699a      	ldr	r2, [r3, #24]
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	f042 0208 	orr.w	r2, r2, #8
 8013d9c:	619a      	str	r2, [r3, #24]
}
 8013d9e:	bf00      	nop
 8013da0:	3758      	adds	r7, #88	; 0x58
 8013da2:	46bd      	mov	sp, r7
 8013da4:	bd80      	pop	{r7, pc}

08013da6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8013da6:	b580      	push	{r7, lr}
 8013da8:	b096      	sub	sp, #88	; 0x58
 8013daa:	af00      	add	r7, sp, #0
 8013dac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013db4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013dbc:	2b22      	cmp	r3, #34	; 0x22
 8013dbe:	f040 8094 	bne.w	8013eea <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013dc8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013dd0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8013dd2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8013dd6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013dda:	4013      	ands	r3, r2
 8013ddc:	b29a      	uxth	r2, r3
 8013dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013de0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013de6:	1c9a      	adds	r2, r3, #2
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8013df2:	b29b      	uxth	r3, r3
 8013df4:	3b01      	subs	r3, #1
 8013df6:	b29a      	uxth	r2, r3
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8013e04:	b29b      	uxth	r3, r3
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d177      	bne.n	8013efa <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e12:	e853 3f00 	ldrex	r3, [r3]
 8013e16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	461a      	mov	r2, r3
 8013e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e28:	643b      	str	r3, [r7, #64]	; 0x40
 8013e2a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013e2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013e30:	e841 2300 	strex	r3, r2, [r1]
 8013e34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d1e6      	bne.n	8013e0a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	3308      	adds	r3, #8
 8013e42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e44:	6a3b      	ldr	r3, [r7, #32]
 8013e46:	e853 3f00 	ldrex	r3, [r3]
 8013e4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8013e4c:	69fb      	ldr	r3, [r7, #28]
 8013e4e:	f023 0301 	bic.w	r3, r3, #1
 8013e52:	64bb      	str	r3, [r7, #72]	; 0x48
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	3308      	adds	r3, #8
 8013e5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013e5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013e5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e64:	e841 2300 	strex	r3, r2, [r1]
 8013e68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d1e5      	bne.n	8013e3c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	2220      	movs	r2, #32
 8013e74:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	2200      	movs	r2, #0
 8013e7a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013e80:	2b01      	cmp	r3, #1
 8013e82:	d12e      	bne.n	8013ee2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2200      	movs	r2, #0
 8013e88:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	e853 3f00 	ldrex	r3, [r3]
 8013e96:	60bb      	str	r3, [r7, #8]
   return(result);
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	f023 0310 	bic.w	r3, r3, #16
 8013e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	461a      	mov	r2, r3
 8013ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ea8:	61bb      	str	r3, [r7, #24]
 8013eaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013eac:	6979      	ldr	r1, [r7, #20]
 8013eae:	69ba      	ldr	r2, [r7, #24]
 8013eb0:	e841 2300 	strex	r3, r2, [r1]
 8013eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8013eb6:	693b      	ldr	r3, [r7, #16]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d1e6      	bne.n	8013e8a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	69db      	ldr	r3, [r3, #28]
 8013ec2:	f003 0310 	and.w	r3, r3, #16
 8013ec6:	2b10      	cmp	r3, #16
 8013ec8:	d103      	bne.n	8013ed2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	2210      	movs	r2, #16
 8013ed0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8013ed8:	4619      	mov	r1, r3
 8013eda:	6878      	ldr	r0, [r7, #4]
 8013edc:	f7ff f918 	bl	8013110 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013ee0:	e00b      	b.n	8013efa <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	f7fc f9e2 	bl	80102ac <HAL_UART_RxCpltCallback>
}
 8013ee8:	e007      	b.n	8013efa <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	699a      	ldr	r2, [r3, #24]
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	f042 0208 	orr.w	r2, r2, #8
 8013ef8:	619a      	str	r2, [r3, #24]
}
 8013efa:	bf00      	nop
 8013efc:	3758      	adds	r7, #88	; 0x58
 8013efe:	46bd      	mov	sp, r7
 8013f00:	bd80      	pop	{r7, pc}

08013f02 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013f02:	b480      	push	{r7}
 8013f04:	b083      	sub	sp, #12
 8013f06:	af00      	add	r7, sp, #0
 8013f08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013f0a:	bf00      	nop
 8013f0c:	370c      	adds	r7, #12
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f14:	4770      	bx	lr
	...

08013f18 <__errno>:
 8013f18:	4b01      	ldr	r3, [pc, #4]	; (8013f20 <__errno+0x8>)
 8013f1a:	6818      	ldr	r0, [r3, #0]
 8013f1c:	4770      	bx	lr
 8013f1e:	bf00      	nop
 8013f20:	2000000c 	.word	0x2000000c

08013f24 <__libc_init_array>:
 8013f24:	b570      	push	{r4, r5, r6, lr}
 8013f26:	4d0d      	ldr	r5, [pc, #52]	; (8013f5c <__libc_init_array+0x38>)
 8013f28:	4c0d      	ldr	r4, [pc, #52]	; (8013f60 <__libc_init_array+0x3c>)
 8013f2a:	1b64      	subs	r4, r4, r5
 8013f2c:	10a4      	asrs	r4, r4, #2
 8013f2e:	2600      	movs	r6, #0
 8013f30:	42a6      	cmp	r6, r4
 8013f32:	d109      	bne.n	8013f48 <__libc_init_array+0x24>
 8013f34:	4d0b      	ldr	r5, [pc, #44]	; (8013f64 <__libc_init_array+0x40>)
 8013f36:	4c0c      	ldr	r4, [pc, #48]	; (8013f68 <__libc_init_array+0x44>)
 8013f38:	f000 fc8e 	bl	8014858 <_init>
 8013f3c:	1b64      	subs	r4, r4, r5
 8013f3e:	10a4      	asrs	r4, r4, #2
 8013f40:	2600      	movs	r6, #0
 8013f42:	42a6      	cmp	r6, r4
 8013f44:	d105      	bne.n	8013f52 <__libc_init_array+0x2e>
 8013f46:	bd70      	pop	{r4, r5, r6, pc}
 8013f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f4c:	4798      	blx	r3
 8013f4e:	3601      	adds	r6, #1
 8013f50:	e7ee      	b.n	8013f30 <__libc_init_array+0xc>
 8013f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f56:	4798      	blx	r3
 8013f58:	3601      	adds	r6, #1
 8013f5a:	e7f2      	b.n	8013f42 <__libc_init_array+0x1e>
 8013f5c:	080148e8 	.word	0x080148e8
 8013f60:	080148e8 	.word	0x080148e8
 8013f64:	080148e8 	.word	0x080148e8
 8013f68:	080148ec 	.word	0x080148ec

08013f6c <memset>:
 8013f6c:	4402      	add	r2, r0
 8013f6e:	4603      	mov	r3, r0
 8013f70:	4293      	cmp	r3, r2
 8013f72:	d100      	bne.n	8013f76 <memset+0xa>
 8013f74:	4770      	bx	lr
 8013f76:	f803 1b01 	strb.w	r1, [r3], #1
 8013f7a:	e7f9      	b.n	8013f70 <memset+0x4>

08013f7c <siprintf>:
 8013f7c:	b40e      	push	{r1, r2, r3}
 8013f7e:	b500      	push	{lr}
 8013f80:	b09c      	sub	sp, #112	; 0x70
 8013f82:	ab1d      	add	r3, sp, #116	; 0x74
 8013f84:	9002      	str	r0, [sp, #8]
 8013f86:	9006      	str	r0, [sp, #24]
 8013f88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013f8c:	4809      	ldr	r0, [pc, #36]	; (8013fb4 <siprintf+0x38>)
 8013f8e:	9107      	str	r1, [sp, #28]
 8013f90:	9104      	str	r1, [sp, #16]
 8013f92:	4909      	ldr	r1, [pc, #36]	; (8013fb8 <siprintf+0x3c>)
 8013f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f98:	9105      	str	r1, [sp, #20]
 8013f9a:	6800      	ldr	r0, [r0, #0]
 8013f9c:	9301      	str	r3, [sp, #4]
 8013f9e:	a902      	add	r1, sp, #8
 8013fa0:	f000 f868 	bl	8014074 <_svfiprintf_r>
 8013fa4:	9b02      	ldr	r3, [sp, #8]
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	701a      	strb	r2, [r3, #0]
 8013faa:	b01c      	add	sp, #112	; 0x70
 8013fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8013fb0:	b003      	add	sp, #12
 8013fb2:	4770      	bx	lr
 8013fb4:	2000000c 	.word	0x2000000c
 8013fb8:	ffff0208 	.word	0xffff0208

08013fbc <__ssputs_r>:
 8013fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fc0:	688e      	ldr	r6, [r1, #8]
 8013fc2:	429e      	cmp	r6, r3
 8013fc4:	4682      	mov	sl, r0
 8013fc6:	460c      	mov	r4, r1
 8013fc8:	4690      	mov	r8, r2
 8013fca:	461f      	mov	r7, r3
 8013fcc:	d838      	bhi.n	8014040 <__ssputs_r+0x84>
 8013fce:	898a      	ldrh	r2, [r1, #12]
 8013fd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013fd4:	d032      	beq.n	801403c <__ssputs_r+0x80>
 8013fd6:	6825      	ldr	r5, [r4, #0]
 8013fd8:	6909      	ldr	r1, [r1, #16]
 8013fda:	eba5 0901 	sub.w	r9, r5, r1
 8013fde:	6965      	ldr	r5, [r4, #20]
 8013fe0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013fe4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013fe8:	3301      	adds	r3, #1
 8013fea:	444b      	add	r3, r9
 8013fec:	106d      	asrs	r5, r5, #1
 8013fee:	429d      	cmp	r5, r3
 8013ff0:	bf38      	it	cc
 8013ff2:	461d      	movcc	r5, r3
 8013ff4:	0553      	lsls	r3, r2, #21
 8013ff6:	d531      	bpl.n	801405c <__ssputs_r+0xa0>
 8013ff8:	4629      	mov	r1, r5
 8013ffa:	f000 fb63 	bl	80146c4 <_malloc_r>
 8013ffe:	4606      	mov	r6, r0
 8014000:	b950      	cbnz	r0, 8014018 <__ssputs_r+0x5c>
 8014002:	230c      	movs	r3, #12
 8014004:	f8ca 3000 	str.w	r3, [sl]
 8014008:	89a3      	ldrh	r3, [r4, #12]
 801400a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801400e:	81a3      	strh	r3, [r4, #12]
 8014010:	f04f 30ff 	mov.w	r0, #4294967295
 8014014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014018:	6921      	ldr	r1, [r4, #16]
 801401a:	464a      	mov	r2, r9
 801401c:	f000 fabe 	bl	801459c <memcpy>
 8014020:	89a3      	ldrh	r3, [r4, #12]
 8014022:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801402a:	81a3      	strh	r3, [r4, #12]
 801402c:	6126      	str	r6, [r4, #16]
 801402e:	6165      	str	r5, [r4, #20]
 8014030:	444e      	add	r6, r9
 8014032:	eba5 0509 	sub.w	r5, r5, r9
 8014036:	6026      	str	r6, [r4, #0]
 8014038:	60a5      	str	r5, [r4, #8]
 801403a:	463e      	mov	r6, r7
 801403c:	42be      	cmp	r6, r7
 801403e:	d900      	bls.n	8014042 <__ssputs_r+0x86>
 8014040:	463e      	mov	r6, r7
 8014042:	6820      	ldr	r0, [r4, #0]
 8014044:	4632      	mov	r2, r6
 8014046:	4641      	mov	r1, r8
 8014048:	f000 fab6 	bl	80145b8 <memmove>
 801404c:	68a3      	ldr	r3, [r4, #8]
 801404e:	1b9b      	subs	r3, r3, r6
 8014050:	60a3      	str	r3, [r4, #8]
 8014052:	6823      	ldr	r3, [r4, #0]
 8014054:	4433      	add	r3, r6
 8014056:	6023      	str	r3, [r4, #0]
 8014058:	2000      	movs	r0, #0
 801405a:	e7db      	b.n	8014014 <__ssputs_r+0x58>
 801405c:	462a      	mov	r2, r5
 801405e:	f000 fba5 	bl	80147ac <_realloc_r>
 8014062:	4606      	mov	r6, r0
 8014064:	2800      	cmp	r0, #0
 8014066:	d1e1      	bne.n	801402c <__ssputs_r+0x70>
 8014068:	6921      	ldr	r1, [r4, #16]
 801406a:	4650      	mov	r0, sl
 801406c:	f000 fabe 	bl	80145ec <_free_r>
 8014070:	e7c7      	b.n	8014002 <__ssputs_r+0x46>
	...

08014074 <_svfiprintf_r>:
 8014074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014078:	4698      	mov	r8, r3
 801407a:	898b      	ldrh	r3, [r1, #12]
 801407c:	061b      	lsls	r3, r3, #24
 801407e:	b09d      	sub	sp, #116	; 0x74
 8014080:	4607      	mov	r7, r0
 8014082:	460d      	mov	r5, r1
 8014084:	4614      	mov	r4, r2
 8014086:	d50e      	bpl.n	80140a6 <_svfiprintf_r+0x32>
 8014088:	690b      	ldr	r3, [r1, #16]
 801408a:	b963      	cbnz	r3, 80140a6 <_svfiprintf_r+0x32>
 801408c:	2140      	movs	r1, #64	; 0x40
 801408e:	f000 fb19 	bl	80146c4 <_malloc_r>
 8014092:	6028      	str	r0, [r5, #0]
 8014094:	6128      	str	r0, [r5, #16]
 8014096:	b920      	cbnz	r0, 80140a2 <_svfiprintf_r+0x2e>
 8014098:	230c      	movs	r3, #12
 801409a:	603b      	str	r3, [r7, #0]
 801409c:	f04f 30ff 	mov.w	r0, #4294967295
 80140a0:	e0d1      	b.n	8014246 <_svfiprintf_r+0x1d2>
 80140a2:	2340      	movs	r3, #64	; 0x40
 80140a4:	616b      	str	r3, [r5, #20]
 80140a6:	2300      	movs	r3, #0
 80140a8:	9309      	str	r3, [sp, #36]	; 0x24
 80140aa:	2320      	movs	r3, #32
 80140ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80140b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80140b4:	2330      	movs	r3, #48	; 0x30
 80140b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014260 <_svfiprintf_r+0x1ec>
 80140ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80140be:	f04f 0901 	mov.w	r9, #1
 80140c2:	4623      	mov	r3, r4
 80140c4:	469a      	mov	sl, r3
 80140c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80140ca:	b10a      	cbz	r2, 80140d0 <_svfiprintf_r+0x5c>
 80140cc:	2a25      	cmp	r2, #37	; 0x25
 80140ce:	d1f9      	bne.n	80140c4 <_svfiprintf_r+0x50>
 80140d0:	ebba 0b04 	subs.w	fp, sl, r4
 80140d4:	d00b      	beq.n	80140ee <_svfiprintf_r+0x7a>
 80140d6:	465b      	mov	r3, fp
 80140d8:	4622      	mov	r2, r4
 80140da:	4629      	mov	r1, r5
 80140dc:	4638      	mov	r0, r7
 80140de:	f7ff ff6d 	bl	8013fbc <__ssputs_r>
 80140e2:	3001      	adds	r0, #1
 80140e4:	f000 80aa 	beq.w	801423c <_svfiprintf_r+0x1c8>
 80140e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80140ea:	445a      	add	r2, fp
 80140ec:	9209      	str	r2, [sp, #36]	; 0x24
 80140ee:	f89a 3000 	ldrb.w	r3, [sl]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	f000 80a2 	beq.w	801423c <_svfiprintf_r+0x1c8>
 80140f8:	2300      	movs	r3, #0
 80140fa:	f04f 32ff 	mov.w	r2, #4294967295
 80140fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014102:	f10a 0a01 	add.w	sl, sl, #1
 8014106:	9304      	str	r3, [sp, #16]
 8014108:	9307      	str	r3, [sp, #28]
 801410a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801410e:	931a      	str	r3, [sp, #104]	; 0x68
 8014110:	4654      	mov	r4, sl
 8014112:	2205      	movs	r2, #5
 8014114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014118:	4851      	ldr	r0, [pc, #324]	; (8014260 <_svfiprintf_r+0x1ec>)
 801411a:	f7fc f861 	bl	80101e0 <memchr>
 801411e:	9a04      	ldr	r2, [sp, #16]
 8014120:	b9d8      	cbnz	r0, 801415a <_svfiprintf_r+0xe6>
 8014122:	06d0      	lsls	r0, r2, #27
 8014124:	bf44      	itt	mi
 8014126:	2320      	movmi	r3, #32
 8014128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801412c:	0711      	lsls	r1, r2, #28
 801412e:	bf44      	itt	mi
 8014130:	232b      	movmi	r3, #43	; 0x2b
 8014132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014136:	f89a 3000 	ldrb.w	r3, [sl]
 801413a:	2b2a      	cmp	r3, #42	; 0x2a
 801413c:	d015      	beq.n	801416a <_svfiprintf_r+0xf6>
 801413e:	9a07      	ldr	r2, [sp, #28]
 8014140:	4654      	mov	r4, sl
 8014142:	2000      	movs	r0, #0
 8014144:	f04f 0c0a 	mov.w	ip, #10
 8014148:	4621      	mov	r1, r4
 801414a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801414e:	3b30      	subs	r3, #48	; 0x30
 8014150:	2b09      	cmp	r3, #9
 8014152:	d94e      	bls.n	80141f2 <_svfiprintf_r+0x17e>
 8014154:	b1b0      	cbz	r0, 8014184 <_svfiprintf_r+0x110>
 8014156:	9207      	str	r2, [sp, #28]
 8014158:	e014      	b.n	8014184 <_svfiprintf_r+0x110>
 801415a:	eba0 0308 	sub.w	r3, r0, r8
 801415e:	fa09 f303 	lsl.w	r3, r9, r3
 8014162:	4313      	orrs	r3, r2
 8014164:	9304      	str	r3, [sp, #16]
 8014166:	46a2      	mov	sl, r4
 8014168:	e7d2      	b.n	8014110 <_svfiprintf_r+0x9c>
 801416a:	9b03      	ldr	r3, [sp, #12]
 801416c:	1d19      	adds	r1, r3, #4
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	9103      	str	r1, [sp, #12]
 8014172:	2b00      	cmp	r3, #0
 8014174:	bfbb      	ittet	lt
 8014176:	425b      	neglt	r3, r3
 8014178:	f042 0202 	orrlt.w	r2, r2, #2
 801417c:	9307      	strge	r3, [sp, #28]
 801417e:	9307      	strlt	r3, [sp, #28]
 8014180:	bfb8      	it	lt
 8014182:	9204      	strlt	r2, [sp, #16]
 8014184:	7823      	ldrb	r3, [r4, #0]
 8014186:	2b2e      	cmp	r3, #46	; 0x2e
 8014188:	d10c      	bne.n	80141a4 <_svfiprintf_r+0x130>
 801418a:	7863      	ldrb	r3, [r4, #1]
 801418c:	2b2a      	cmp	r3, #42	; 0x2a
 801418e:	d135      	bne.n	80141fc <_svfiprintf_r+0x188>
 8014190:	9b03      	ldr	r3, [sp, #12]
 8014192:	1d1a      	adds	r2, r3, #4
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	9203      	str	r2, [sp, #12]
 8014198:	2b00      	cmp	r3, #0
 801419a:	bfb8      	it	lt
 801419c:	f04f 33ff 	movlt.w	r3, #4294967295
 80141a0:	3402      	adds	r4, #2
 80141a2:	9305      	str	r3, [sp, #20]
 80141a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014270 <_svfiprintf_r+0x1fc>
 80141a8:	7821      	ldrb	r1, [r4, #0]
 80141aa:	2203      	movs	r2, #3
 80141ac:	4650      	mov	r0, sl
 80141ae:	f7fc f817 	bl	80101e0 <memchr>
 80141b2:	b140      	cbz	r0, 80141c6 <_svfiprintf_r+0x152>
 80141b4:	2340      	movs	r3, #64	; 0x40
 80141b6:	eba0 000a 	sub.w	r0, r0, sl
 80141ba:	fa03 f000 	lsl.w	r0, r3, r0
 80141be:	9b04      	ldr	r3, [sp, #16]
 80141c0:	4303      	orrs	r3, r0
 80141c2:	3401      	adds	r4, #1
 80141c4:	9304      	str	r3, [sp, #16]
 80141c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141ca:	4826      	ldr	r0, [pc, #152]	; (8014264 <_svfiprintf_r+0x1f0>)
 80141cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80141d0:	2206      	movs	r2, #6
 80141d2:	f7fc f805 	bl	80101e0 <memchr>
 80141d6:	2800      	cmp	r0, #0
 80141d8:	d038      	beq.n	801424c <_svfiprintf_r+0x1d8>
 80141da:	4b23      	ldr	r3, [pc, #140]	; (8014268 <_svfiprintf_r+0x1f4>)
 80141dc:	bb1b      	cbnz	r3, 8014226 <_svfiprintf_r+0x1b2>
 80141de:	9b03      	ldr	r3, [sp, #12]
 80141e0:	3307      	adds	r3, #7
 80141e2:	f023 0307 	bic.w	r3, r3, #7
 80141e6:	3308      	adds	r3, #8
 80141e8:	9303      	str	r3, [sp, #12]
 80141ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141ec:	4433      	add	r3, r6
 80141ee:	9309      	str	r3, [sp, #36]	; 0x24
 80141f0:	e767      	b.n	80140c2 <_svfiprintf_r+0x4e>
 80141f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80141f6:	460c      	mov	r4, r1
 80141f8:	2001      	movs	r0, #1
 80141fa:	e7a5      	b.n	8014148 <_svfiprintf_r+0xd4>
 80141fc:	2300      	movs	r3, #0
 80141fe:	3401      	adds	r4, #1
 8014200:	9305      	str	r3, [sp, #20]
 8014202:	4619      	mov	r1, r3
 8014204:	f04f 0c0a 	mov.w	ip, #10
 8014208:	4620      	mov	r0, r4
 801420a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801420e:	3a30      	subs	r2, #48	; 0x30
 8014210:	2a09      	cmp	r2, #9
 8014212:	d903      	bls.n	801421c <_svfiprintf_r+0x1a8>
 8014214:	2b00      	cmp	r3, #0
 8014216:	d0c5      	beq.n	80141a4 <_svfiprintf_r+0x130>
 8014218:	9105      	str	r1, [sp, #20]
 801421a:	e7c3      	b.n	80141a4 <_svfiprintf_r+0x130>
 801421c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014220:	4604      	mov	r4, r0
 8014222:	2301      	movs	r3, #1
 8014224:	e7f0      	b.n	8014208 <_svfiprintf_r+0x194>
 8014226:	ab03      	add	r3, sp, #12
 8014228:	9300      	str	r3, [sp, #0]
 801422a:	462a      	mov	r2, r5
 801422c:	4b0f      	ldr	r3, [pc, #60]	; (801426c <_svfiprintf_r+0x1f8>)
 801422e:	a904      	add	r1, sp, #16
 8014230:	4638      	mov	r0, r7
 8014232:	f3af 8000 	nop.w
 8014236:	1c42      	adds	r2, r0, #1
 8014238:	4606      	mov	r6, r0
 801423a:	d1d6      	bne.n	80141ea <_svfiprintf_r+0x176>
 801423c:	89ab      	ldrh	r3, [r5, #12]
 801423e:	065b      	lsls	r3, r3, #25
 8014240:	f53f af2c 	bmi.w	801409c <_svfiprintf_r+0x28>
 8014244:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014246:	b01d      	add	sp, #116	; 0x74
 8014248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801424c:	ab03      	add	r3, sp, #12
 801424e:	9300      	str	r3, [sp, #0]
 8014250:	462a      	mov	r2, r5
 8014252:	4b06      	ldr	r3, [pc, #24]	; (801426c <_svfiprintf_r+0x1f8>)
 8014254:	a904      	add	r1, sp, #16
 8014256:	4638      	mov	r0, r7
 8014258:	f000 f87a 	bl	8014350 <_printf_i>
 801425c:	e7eb      	b.n	8014236 <_svfiprintf_r+0x1c2>
 801425e:	bf00      	nop
 8014260:	080148b4 	.word	0x080148b4
 8014264:	080148be 	.word	0x080148be
 8014268:	00000000 	.word	0x00000000
 801426c:	08013fbd 	.word	0x08013fbd
 8014270:	080148ba 	.word	0x080148ba

08014274 <_printf_common>:
 8014274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014278:	4616      	mov	r6, r2
 801427a:	4699      	mov	r9, r3
 801427c:	688a      	ldr	r2, [r1, #8]
 801427e:	690b      	ldr	r3, [r1, #16]
 8014280:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014284:	4293      	cmp	r3, r2
 8014286:	bfb8      	it	lt
 8014288:	4613      	movlt	r3, r2
 801428a:	6033      	str	r3, [r6, #0]
 801428c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014290:	4607      	mov	r7, r0
 8014292:	460c      	mov	r4, r1
 8014294:	b10a      	cbz	r2, 801429a <_printf_common+0x26>
 8014296:	3301      	adds	r3, #1
 8014298:	6033      	str	r3, [r6, #0]
 801429a:	6823      	ldr	r3, [r4, #0]
 801429c:	0699      	lsls	r1, r3, #26
 801429e:	bf42      	ittt	mi
 80142a0:	6833      	ldrmi	r3, [r6, #0]
 80142a2:	3302      	addmi	r3, #2
 80142a4:	6033      	strmi	r3, [r6, #0]
 80142a6:	6825      	ldr	r5, [r4, #0]
 80142a8:	f015 0506 	ands.w	r5, r5, #6
 80142ac:	d106      	bne.n	80142bc <_printf_common+0x48>
 80142ae:	f104 0a19 	add.w	sl, r4, #25
 80142b2:	68e3      	ldr	r3, [r4, #12]
 80142b4:	6832      	ldr	r2, [r6, #0]
 80142b6:	1a9b      	subs	r3, r3, r2
 80142b8:	42ab      	cmp	r3, r5
 80142ba:	dc26      	bgt.n	801430a <_printf_common+0x96>
 80142bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80142c0:	1e13      	subs	r3, r2, #0
 80142c2:	6822      	ldr	r2, [r4, #0]
 80142c4:	bf18      	it	ne
 80142c6:	2301      	movne	r3, #1
 80142c8:	0692      	lsls	r2, r2, #26
 80142ca:	d42b      	bmi.n	8014324 <_printf_common+0xb0>
 80142cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80142d0:	4649      	mov	r1, r9
 80142d2:	4638      	mov	r0, r7
 80142d4:	47c0      	blx	r8
 80142d6:	3001      	adds	r0, #1
 80142d8:	d01e      	beq.n	8014318 <_printf_common+0xa4>
 80142da:	6823      	ldr	r3, [r4, #0]
 80142dc:	68e5      	ldr	r5, [r4, #12]
 80142de:	6832      	ldr	r2, [r6, #0]
 80142e0:	f003 0306 	and.w	r3, r3, #6
 80142e4:	2b04      	cmp	r3, #4
 80142e6:	bf08      	it	eq
 80142e8:	1aad      	subeq	r5, r5, r2
 80142ea:	68a3      	ldr	r3, [r4, #8]
 80142ec:	6922      	ldr	r2, [r4, #16]
 80142ee:	bf0c      	ite	eq
 80142f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80142f4:	2500      	movne	r5, #0
 80142f6:	4293      	cmp	r3, r2
 80142f8:	bfc4      	itt	gt
 80142fa:	1a9b      	subgt	r3, r3, r2
 80142fc:	18ed      	addgt	r5, r5, r3
 80142fe:	2600      	movs	r6, #0
 8014300:	341a      	adds	r4, #26
 8014302:	42b5      	cmp	r5, r6
 8014304:	d11a      	bne.n	801433c <_printf_common+0xc8>
 8014306:	2000      	movs	r0, #0
 8014308:	e008      	b.n	801431c <_printf_common+0xa8>
 801430a:	2301      	movs	r3, #1
 801430c:	4652      	mov	r2, sl
 801430e:	4649      	mov	r1, r9
 8014310:	4638      	mov	r0, r7
 8014312:	47c0      	blx	r8
 8014314:	3001      	adds	r0, #1
 8014316:	d103      	bne.n	8014320 <_printf_common+0xac>
 8014318:	f04f 30ff 	mov.w	r0, #4294967295
 801431c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014320:	3501      	adds	r5, #1
 8014322:	e7c6      	b.n	80142b2 <_printf_common+0x3e>
 8014324:	18e1      	adds	r1, r4, r3
 8014326:	1c5a      	adds	r2, r3, #1
 8014328:	2030      	movs	r0, #48	; 0x30
 801432a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801432e:	4422      	add	r2, r4
 8014330:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014334:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014338:	3302      	adds	r3, #2
 801433a:	e7c7      	b.n	80142cc <_printf_common+0x58>
 801433c:	2301      	movs	r3, #1
 801433e:	4622      	mov	r2, r4
 8014340:	4649      	mov	r1, r9
 8014342:	4638      	mov	r0, r7
 8014344:	47c0      	blx	r8
 8014346:	3001      	adds	r0, #1
 8014348:	d0e6      	beq.n	8014318 <_printf_common+0xa4>
 801434a:	3601      	adds	r6, #1
 801434c:	e7d9      	b.n	8014302 <_printf_common+0x8e>
	...

08014350 <_printf_i>:
 8014350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014354:	7e0f      	ldrb	r7, [r1, #24]
 8014356:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014358:	2f78      	cmp	r7, #120	; 0x78
 801435a:	4691      	mov	r9, r2
 801435c:	4680      	mov	r8, r0
 801435e:	460c      	mov	r4, r1
 8014360:	469a      	mov	sl, r3
 8014362:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014366:	d807      	bhi.n	8014378 <_printf_i+0x28>
 8014368:	2f62      	cmp	r7, #98	; 0x62
 801436a:	d80a      	bhi.n	8014382 <_printf_i+0x32>
 801436c:	2f00      	cmp	r7, #0
 801436e:	f000 80d8 	beq.w	8014522 <_printf_i+0x1d2>
 8014372:	2f58      	cmp	r7, #88	; 0x58
 8014374:	f000 80a3 	beq.w	80144be <_printf_i+0x16e>
 8014378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801437c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014380:	e03a      	b.n	80143f8 <_printf_i+0xa8>
 8014382:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014386:	2b15      	cmp	r3, #21
 8014388:	d8f6      	bhi.n	8014378 <_printf_i+0x28>
 801438a:	a101      	add	r1, pc, #4	; (adr r1, 8014390 <_printf_i+0x40>)
 801438c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014390:	080143e9 	.word	0x080143e9
 8014394:	080143fd 	.word	0x080143fd
 8014398:	08014379 	.word	0x08014379
 801439c:	08014379 	.word	0x08014379
 80143a0:	08014379 	.word	0x08014379
 80143a4:	08014379 	.word	0x08014379
 80143a8:	080143fd 	.word	0x080143fd
 80143ac:	08014379 	.word	0x08014379
 80143b0:	08014379 	.word	0x08014379
 80143b4:	08014379 	.word	0x08014379
 80143b8:	08014379 	.word	0x08014379
 80143bc:	08014509 	.word	0x08014509
 80143c0:	0801442d 	.word	0x0801442d
 80143c4:	080144eb 	.word	0x080144eb
 80143c8:	08014379 	.word	0x08014379
 80143cc:	08014379 	.word	0x08014379
 80143d0:	0801452b 	.word	0x0801452b
 80143d4:	08014379 	.word	0x08014379
 80143d8:	0801442d 	.word	0x0801442d
 80143dc:	08014379 	.word	0x08014379
 80143e0:	08014379 	.word	0x08014379
 80143e4:	080144f3 	.word	0x080144f3
 80143e8:	682b      	ldr	r3, [r5, #0]
 80143ea:	1d1a      	adds	r2, r3, #4
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	602a      	str	r2, [r5, #0]
 80143f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80143f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80143f8:	2301      	movs	r3, #1
 80143fa:	e0a3      	b.n	8014544 <_printf_i+0x1f4>
 80143fc:	6820      	ldr	r0, [r4, #0]
 80143fe:	6829      	ldr	r1, [r5, #0]
 8014400:	0606      	lsls	r6, r0, #24
 8014402:	f101 0304 	add.w	r3, r1, #4
 8014406:	d50a      	bpl.n	801441e <_printf_i+0xce>
 8014408:	680e      	ldr	r6, [r1, #0]
 801440a:	602b      	str	r3, [r5, #0]
 801440c:	2e00      	cmp	r6, #0
 801440e:	da03      	bge.n	8014418 <_printf_i+0xc8>
 8014410:	232d      	movs	r3, #45	; 0x2d
 8014412:	4276      	negs	r6, r6
 8014414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014418:	485e      	ldr	r0, [pc, #376]	; (8014594 <_printf_i+0x244>)
 801441a:	230a      	movs	r3, #10
 801441c:	e019      	b.n	8014452 <_printf_i+0x102>
 801441e:	680e      	ldr	r6, [r1, #0]
 8014420:	602b      	str	r3, [r5, #0]
 8014422:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014426:	bf18      	it	ne
 8014428:	b236      	sxthne	r6, r6
 801442a:	e7ef      	b.n	801440c <_printf_i+0xbc>
 801442c:	682b      	ldr	r3, [r5, #0]
 801442e:	6820      	ldr	r0, [r4, #0]
 8014430:	1d19      	adds	r1, r3, #4
 8014432:	6029      	str	r1, [r5, #0]
 8014434:	0601      	lsls	r1, r0, #24
 8014436:	d501      	bpl.n	801443c <_printf_i+0xec>
 8014438:	681e      	ldr	r6, [r3, #0]
 801443a:	e002      	b.n	8014442 <_printf_i+0xf2>
 801443c:	0646      	lsls	r6, r0, #25
 801443e:	d5fb      	bpl.n	8014438 <_printf_i+0xe8>
 8014440:	881e      	ldrh	r6, [r3, #0]
 8014442:	4854      	ldr	r0, [pc, #336]	; (8014594 <_printf_i+0x244>)
 8014444:	2f6f      	cmp	r7, #111	; 0x6f
 8014446:	bf0c      	ite	eq
 8014448:	2308      	moveq	r3, #8
 801444a:	230a      	movne	r3, #10
 801444c:	2100      	movs	r1, #0
 801444e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014452:	6865      	ldr	r5, [r4, #4]
 8014454:	60a5      	str	r5, [r4, #8]
 8014456:	2d00      	cmp	r5, #0
 8014458:	bfa2      	ittt	ge
 801445a:	6821      	ldrge	r1, [r4, #0]
 801445c:	f021 0104 	bicge.w	r1, r1, #4
 8014460:	6021      	strge	r1, [r4, #0]
 8014462:	b90e      	cbnz	r6, 8014468 <_printf_i+0x118>
 8014464:	2d00      	cmp	r5, #0
 8014466:	d04d      	beq.n	8014504 <_printf_i+0x1b4>
 8014468:	4615      	mov	r5, r2
 801446a:	fbb6 f1f3 	udiv	r1, r6, r3
 801446e:	fb03 6711 	mls	r7, r3, r1, r6
 8014472:	5dc7      	ldrb	r7, [r0, r7]
 8014474:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014478:	4637      	mov	r7, r6
 801447a:	42bb      	cmp	r3, r7
 801447c:	460e      	mov	r6, r1
 801447e:	d9f4      	bls.n	801446a <_printf_i+0x11a>
 8014480:	2b08      	cmp	r3, #8
 8014482:	d10b      	bne.n	801449c <_printf_i+0x14c>
 8014484:	6823      	ldr	r3, [r4, #0]
 8014486:	07de      	lsls	r6, r3, #31
 8014488:	d508      	bpl.n	801449c <_printf_i+0x14c>
 801448a:	6923      	ldr	r3, [r4, #16]
 801448c:	6861      	ldr	r1, [r4, #4]
 801448e:	4299      	cmp	r1, r3
 8014490:	bfde      	ittt	le
 8014492:	2330      	movle	r3, #48	; 0x30
 8014494:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014498:	f105 35ff 	addle.w	r5, r5, #4294967295
 801449c:	1b52      	subs	r2, r2, r5
 801449e:	6122      	str	r2, [r4, #16]
 80144a0:	f8cd a000 	str.w	sl, [sp]
 80144a4:	464b      	mov	r3, r9
 80144a6:	aa03      	add	r2, sp, #12
 80144a8:	4621      	mov	r1, r4
 80144aa:	4640      	mov	r0, r8
 80144ac:	f7ff fee2 	bl	8014274 <_printf_common>
 80144b0:	3001      	adds	r0, #1
 80144b2:	d14c      	bne.n	801454e <_printf_i+0x1fe>
 80144b4:	f04f 30ff 	mov.w	r0, #4294967295
 80144b8:	b004      	add	sp, #16
 80144ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144be:	4835      	ldr	r0, [pc, #212]	; (8014594 <_printf_i+0x244>)
 80144c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80144c4:	6829      	ldr	r1, [r5, #0]
 80144c6:	6823      	ldr	r3, [r4, #0]
 80144c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80144cc:	6029      	str	r1, [r5, #0]
 80144ce:	061d      	lsls	r5, r3, #24
 80144d0:	d514      	bpl.n	80144fc <_printf_i+0x1ac>
 80144d2:	07df      	lsls	r7, r3, #31
 80144d4:	bf44      	itt	mi
 80144d6:	f043 0320 	orrmi.w	r3, r3, #32
 80144da:	6023      	strmi	r3, [r4, #0]
 80144dc:	b91e      	cbnz	r6, 80144e6 <_printf_i+0x196>
 80144de:	6823      	ldr	r3, [r4, #0]
 80144e0:	f023 0320 	bic.w	r3, r3, #32
 80144e4:	6023      	str	r3, [r4, #0]
 80144e6:	2310      	movs	r3, #16
 80144e8:	e7b0      	b.n	801444c <_printf_i+0xfc>
 80144ea:	6823      	ldr	r3, [r4, #0]
 80144ec:	f043 0320 	orr.w	r3, r3, #32
 80144f0:	6023      	str	r3, [r4, #0]
 80144f2:	2378      	movs	r3, #120	; 0x78
 80144f4:	4828      	ldr	r0, [pc, #160]	; (8014598 <_printf_i+0x248>)
 80144f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80144fa:	e7e3      	b.n	80144c4 <_printf_i+0x174>
 80144fc:	0659      	lsls	r1, r3, #25
 80144fe:	bf48      	it	mi
 8014500:	b2b6      	uxthmi	r6, r6
 8014502:	e7e6      	b.n	80144d2 <_printf_i+0x182>
 8014504:	4615      	mov	r5, r2
 8014506:	e7bb      	b.n	8014480 <_printf_i+0x130>
 8014508:	682b      	ldr	r3, [r5, #0]
 801450a:	6826      	ldr	r6, [r4, #0]
 801450c:	6961      	ldr	r1, [r4, #20]
 801450e:	1d18      	adds	r0, r3, #4
 8014510:	6028      	str	r0, [r5, #0]
 8014512:	0635      	lsls	r5, r6, #24
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	d501      	bpl.n	801451c <_printf_i+0x1cc>
 8014518:	6019      	str	r1, [r3, #0]
 801451a:	e002      	b.n	8014522 <_printf_i+0x1d2>
 801451c:	0670      	lsls	r0, r6, #25
 801451e:	d5fb      	bpl.n	8014518 <_printf_i+0x1c8>
 8014520:	8019      	strh	r1, [r3, #0]
 8014522:	2300      	movs	r3, #0
 8014524:	6123      	str	r3, [r4, #16]
 8014526:	4615      	mov	r5, r2
 8014528:	e7ba      	b.n	80144a0 <_printf_i+0x150>
 801452a:	682b      	ldr	r3, [r5, #0]
 801452c:	1d1a      	adds	r2, r3, #4
 801452e:	602a      	str	r2, [r5, #0]
 8014530:	681d      	ldr	r5, [r3, #0]
 8014532:	6862      	ldr	r2, [r4, #4]
 8014534:	2100      	movs	r1, #0
 8014536:	4628      	mov	r0, r5
 8014538:	f7fb fe52 	bl	80101e0 <memchr>
 801453c:	b108      	cbz	r0, 8014542 <_printf_i+0x1f2>
 801453e:	1b40      	subs	r0, r0, r5
 8014540:	6060      	str	r0, [r4, #4]
 8014542:	6863      	ldr	r3, [r4, #4]
 8014544:	6123      	str	r3, [r4, #16]
 8014546:	2300      	movs	r3, #0
 8014548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801454c:	e7a8      	b.n	80144a0 <_printf_i+0x150>
 801454e:	6923      	ldr	r3, [r4, #16]
 8014550:	462a      	mov	r2, r5
 8014552:	4649      	mov	r1, r9
 8014554:	4640      	mov	r0, r8
 8014556:	47d0      	blx	sl
 8014558:	3001      	adds	r0, #1
 801455a:	d0ab      	beq.n	80144b4 <_printf_i+0x164>
 801455c:	6823      	ldr	r3, [r4, #0]
 801455e:	079b      	lsls	r3, r3, #30
 8014560:	d413      	bmi.n	801458a <_printf_i+0x23a>
 8014562:	68e0      	ldr	r0, [r4, #12]
 8014564:	9b03      	ldr	r3, [sp, #12]
 8014566:	4298      	cmp	r0, r3
 8014568:	bfb8      	it	lt
 801456a:	4618      	movlt	r0, r3
 801456c:	e7a4      	b.n	80144b8 <_printf_i+0x168>
 801456e:	2301      	movs	r3, #1
 8014570:	4632      	mov	r2, r6
 8014572:	4649      	mov	r1, r9
 8014574:	4640      	mov	r0, r8
 8014576:	47d0      	blx	sl
 8014578:	3001      	adds	r0, #1
 801457a:	d09b      	beq.n	80144b4 <_printf_i+0x164>
 801457c:	3501      	adds	r5, #1
 801457e:	68e3      	ldr	r3, [r4, #12]
 8014580:	9903      	ldr	r1, [sp, #12]
 8014582:	1a5b      	subs	r3, r3, r1
 8014584:	42ab      	cmp	r3, r5
 8014586:	dcf2      	bgt.n	801456e <_printf_i+0x21e>
 8014588:	e7eb      	b.n	8014562 <_printf_i+0x212>
 801458a:	2500      	movs	r5, #0
 801458c:	f104 0619 	add.w	r6, r4, #25
 8014590:	e7f5      	b.n	801457e <_printf_i+0x22e>
 8014592:	bf00      	nop
 8014594:	080148c5 	.word	0x080148c5
 8014598:	080148d6 	.word	0x080148d6

0801459c <memcpy>:
 801459c:	440a      	add	r2, r1
 801459e:	4291      	cmp	r1, r2
 80145a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80145a4:	d100      	bne.n	80145a8 <memcpy+0xc>
 80145a6:	4770      	bx	lr
 80145a8:	b510      	push	{r4, lr}
 80145aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80145ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80145b2:	4291      	cmp	r1, r2
 80145b4:	d1f9      	bne.n	80145aa <memcpy+0xe>
 80145b6:	bd10      	pop	{r4, pc}

080145b8 <memmove>:
 80145b8:	4288      	cmp	r0, r1
 80145ba:	b510      	push	{r4, lr}
 80145bc:	eb01 0402 	add.w	r4, r1, r2
 80145c0:	d902      	bls.n	80145c8 <memmove+0x10>
 80145c2:	4284      	cmp	r4, r0
 80145c4:	4623      	mov	r3, r4
 80145c6:	d807      	bhi.n	80145d8 <memmove+0x20>
 80145c8:	1e43      	subs	r3, r0, #1
 80145ca:	42a1      	cmp	r1, r4
 80145cc:	d008      	beq.n	80145e0 <memmove+0x28>
 80145ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80145d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80145d6:	e7f8      	b.n	80145ca <memmove+0x12>
 80145d8:	4402      	add	r2, r0
 80145da:	4601      	mov	r1, r0
 80145dc:	428a      	cmp	r2, r1
 80145de:	d100      	bne.n	80145e2 <memmove+0x2a>
 80145e0:	bd10      	pop	{r4, pc}
 80145e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80145e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80145ea:	e7f7      	b.n	80145dc <memmove+0x24>

080145ec <_free_r>:
 80145ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80145ee:	2900      	cmp	r1, #0
 80145f0:	d044      	beq.n	801467c <_free_r+0x90>
 80145f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80145f6:	9001      	str	r0, [sp, #4]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	f1a1 0404 	sub.w	r4, r1, #4
 80145fe:	bfb8      	it	lt
 8014600:	18e4      	addlt	r4, r4, r3
 8014602:	f000 f913 	bl	801482c <__malloc_lock>
 8014606:	4a1e      	ldr	r2, [pc, #120]	; (8014680 <_free_r+0x94>)
 8014608:	9801      	ldr	r0, [sp, #4]
 801460a:	6813      	ldr	r3, [r2, #0]
 801460c:	b933      	cbnz	r3, 801461c <_free_r+0x30>
 801460e:	6063      	str	r3, [r4, #4]
 8014610:	6014      	str	r4, [r2, #0]
 8014612:	b003      	add	sp, #12
 8014614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014618:	f000 b90e 	b.w	8014838 <__malloc_unlock>
 801461c:	42a3      	cmp	r3, r4
 801461e:	d908      	bls.n	8014632 <_free_r+0x46>
 8014620:	6825      	ldr	r5, [r4, #0]
 8014622:	1961      	adds	r1, r4, r5
 8014624:	428b      	cmp	r3, r1
 8014626:	bf01      	itttt	eq
 8014628:	6819      	ldreq	r1, [r3, #0]
 801462a:	685b      	ldreq	r3, [r3, #4]
 801462c:	1949      	addeq	r1, r1, r5
 801462e:	6021      	streq	r1, [r4, #0]
 8014630:	e7ed      	b.n	801460e <_free_r+0x22>
 8014632:	461a      	mov	r2, r3
 8014634:	685b      	ldr	r3, [r3, #4]
 8014636:	b10b      	cbz	r3, 801463c <_free_r+0x50>
 8014638:	42a3      	cmp	r3, r4
 801463a:	d9fa      	bls.n	8014632 <_free_r+0x46>
 801463c:	6811      	ldr	r1, [r2, #0]
 801463e:	1855      	adds	r5, r2, r1
 8014640:	42a5      	cmp	r5, r4
 8014642:	d10b      	bne.n	801465c <_free_r+0x70>
 8014644:	6824      	ldr	r4, [r4, #0]
 8014646:	4421      	add	r1, r4
 8014648:	1854      	adds	r4, r2, r1
 801464a:	42a3      	cmp	r3, r4
 801464c:	6011      	str	r1, [r2, #0]
 801464e:	d1e0      	bne.n	8014612 <_free_r+0x26>
 8014650:	681c      	ldr	r4, [r3, #0]
 8014652:	685b      	ldr	r3, [r3, #4]
 8014654:	6053      	str	r3, [r2, #4]
 8014656:	4421      	add	r1, r4
 8014658:	6011      	str	r1, [r2, #0]
 801465a:	e7da      	b.n	8014612 <_free_r+0x26>
 801465c:	d902      	bls.n	8014664 <_free_r+0x78>
 801465e:	230c      	movs	r3, #12
 8014660:	6003      	str	r3, [r0, #0]
 8014662:	e7d6      	b.n	8014612 <_free_r+0x26>
 8014664:	6825      	ldr	r5, [r4, #0]
 8014666:	1961      	adds	r1, r4, r5
 8014668:	428b      	cmp	r3, r1
 801466a:	bf04      	itt	eq
 801466c:	6819      	ldreq	r1, [r3, #0]
 801466e:	685b      	ldreq	r3, [r3, #4]
 8014670:	6063      	str	r3, [r4, #4]
 8014672:	bf04      	itt	eq
 8014674:	1949      	addeq	r1, r1, r5
 8014676:	6021      	streq	r1, [r4, #0]
 8014678:	6054      	str	r4, [r2, #4]
 801467a:	e7ca      	b.n	8014612 <_free_r+0x26>
 801467c:	b003      	add	sp, #12
 801467e:	bd30      	pop	{r4, r5, pc}
 8014680:	200001a0 	.word	0x200001a0

08014684 <sbrk_aligned>:
 8014684:	b570      	push	{r4, r5, r6, lr}
 8014686:	4e0e      	ldr	r6, [pc, #56]	; (80146c0 <sbrk_aligned+0x3c>)
 8014688:	460c      	mov	r4, r1
 801468a:	6831      	ldr	r1, [r6, #0]
 801468c:	4605      	mov	r5, r0
 801468e:	b911      	cbnz	r1, 8014696 <sbrk_aligned+0x12>
 8014690:	f000 f8bc 	bl	801480c <_sbrk_r>
 8014694:	6030      	str	r0, [r6, #0]
 8014696:	4621      	mov	r1, r4
 8014698:	4628      	mov	r0, r5
 801469a:	f000 f8b7 	bl	801480c <_sbrk_r>
 801469e:	1c43      	adds	r3, r0, #1
 80146a0:	d00a      	beq.n	80146b8 <sbrk_aligned+0x34>
 80146a2:	1cc4      	adds	r4, r0, #3
 80146a4:	f024 0403 	bic.w	r4, r4, #3
 80146a8:	42a0      	cmp	r0, r4
 80146aa:	d007      	beq.n	80146bc <sbrk_aligned+0x38>
 80146ac:	1a21      	subs	r1, r4, r0
 80146ae:	4628      	mov	r0, r5
 80146b0:	f000 f8ac 	bl	801480c <_sbrk_r>
 80146b4:	3001      	adds	r0, #1
 80146b6:	d101      	bne.n	80146bc <sbrk_aligned+0x38>
 80146b8:	f04f 34ff 	mov.w	r4, #4294967295
 80146bc:	4620      	mov	r0, r4
 80146be:	bd70      	pop	{r4, r5, r6, pc}
 80146c0:	200001a4 	.word	0x200001a4

080146c4 <_malloc_r>:
 80146c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146c8:	1ccd      	adds	r5, r1, #3
 80146ca:	f025 0503 	bic.w	r5, r5, #3
 80146ce:	3508      	adds	r5, #8
 80146d0:	2d0c      	cmp	r5, #12
 80146d2:	bf38      	it	cc
 80146d4:	250c      	movcc	r5, #12
 80146d6:	2d00      	cmp	r5, #0
 80146d8:	4607      	mov	r7, r0
 80146da:	db01      	blt.n	80146e0 <_malloc_r+0x1c>
 80146dc:	42a9      	cmp	r1, r5
 80146de:	d905      	bls.n	80146ec <_malloc_r+0x28>
 80146e0:	230c      	movs	r3, #12
 80146e2:	603b      	str	r3, [r7, #0]
 80146e4:	2600      	movs	r6, #0
 80146e6:	4630      	mov	r0, r6
 80146e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146ec:	4e2e      	ldr	r6, [pc, #184]	; (80147a8 <_malloc_r+0xe4>)
 80146ee:	f000 f89d 	bl	801482c <__malloc_lock>
 80146f2:	6833      	ldr	r3, [r6, #0]
 80146f4:	461c      	mov	r4, r3
 80146f6:	bb34      	cbnz	r4, 8014746 <_malloc_r+0x82>
 80146f8:	4629      	mov	r1, r5
 80146fa:	4638      	mov	r0, r7
 80146fc:	f7ff ffc2 	bl	8014684 <sbrk_aligned>
 8014700:	1c43      	adds	r3, r0, #1
 8014702:	4604      	mov	r4, r0
 8014704:	d14d      	bne.n	80147a2 <_malloc_r+0xde>
 8014706:	6834      	ldr	r4, [r6, #0]
 8014708:	4626      	mov	r6, r4
 801470a:	2e00      	cmp	r6, #0
 801470c:	d140      	bne.n	8014790 <_malloc_r+0xcc>
 801470e:	6823      	ldr	r3, [r4, #0]
 8014710:	4631      	mov	r1, r6
 8014712:	4638      	mov	r0, r7
 8014714:	eb04 0803 	add.w	r8, r4, r3
 8014718:	f000 f878 	bl	801480c <_sbrk_r>
 801471c:	4580      	cmp	r8, r0
 801471e:	d13a      	bne.n	8014796 <_malloc_r+0xd2>
 8014720:	6821      	ldr	r1, [r4, #0]
 8014722:	3503      	adds	r5, #3
 8014724:	1a6d      	subs	r5, r5, r1
 8014726:	f025 0503 	bic.w	r5, r5, #3
 801472a:	3508      	adds	r5, #8
 801472c:	2d0c      	cmp	r5, #12
 801472e:	bf38      	it	cc
 8014730:	250c      	movcc	r5, #12
 8014732:	4629      	mov	r1, r5
 8014734:	4638      	mov	r0, r7
 8014736:	f7ff ffa5 	bl	8014684 <sbrk_aligned>
 801473a:	3001      	adds	r0, #1
 801473c:	d02b      	beq.n	8014796 <_malloc_r+0xd2>
 801473e:	6823      	ldr	r3, [r4, #0]
 8014740:	442b      	add	r3, r5
 8014742:	6023      	str	r3, [r4, #0]
 8014744:	e00e      	b.n	8014764 <_malloc_r+0xa0>
 8014746:	6822      	ldr	r2, [r4, #0]
 8014748:	1b52      	subs	r2, r2, r5
 801474a:	d41e      	bmi.n	801478a <_malloc_r+0xc6>
 801474c:	2a0b      	cmp	r2, #11
 801474e:	d916      	bls.n	801477e <_malloc_r+0xba>
 8014750:	1961      	adds	r1, r4, r5
 8014752:	42a3      	cmp	r3, r4
 8014754:	6025      	str	r5, [r4, #0]
 8014756:	bf18      	it	ne
 8014758:	6059      	strne	r1, [r3, #4]
 801475a:	6863      	ldr	r3, [r4, #4]
 801475c:	bf08      	it	eq
 801475e:	6031      	streq	r1, [r6, #0]
 8014760:	5162      	str	r2, [r4, r5]
 8014762:	604b      	str	r3, [r1, #4]
 8014764:	4638      	mov	r0, r7
 8014766:	f104 060b 	add.w	r6, r4, #11
 801476a:	f000 f865 	bl	8014838 <__malloc_unlock>
 801476e:	f026 0607 	bic.w	r6, r6, #7
 8014772:	1d23      	adds	r3, r4, #4
 8014774:	1af2      	subs	r2, r6, r3
 8014776:	d0b6      	beq.n	80146e6 <_malloc_r+0x22>
 8014778:	1b9b      	subs	r3, r3, r6
 801477a:	50a3      	str	r3, [r4, r2]
 801477c:	e7b3      	b.n	80146e6 <_malloc_r+0x22>
 801477e:	6862      	ldr	r2, [r4, #4]
 8014780:	42a3      	cmp	r3, r4
 8014782:	bf0c      	ite	eq
 8014784:	6032      	streq	r2, [r6, #0]
 8014786:	605a      	strne	r2, [r3, #4]
 8014788:	e7ec      	b.n	8014764 <_malloc_r+0xa0>
 801478a:	4623      	mov	r3, r4
 801478c:	6864      	ldr	r4, [r4, #4]
 801478e:	e7b2      	b.n	80146f6 <_malloc_r+0x32>
 8014790:	4634      	mov	r4, r6
 8014792:	6876      	ldr	r6, [r6, #4]
 8014794:	e7b9      	b.n	801470a <_malloc_r+0x46>
 8014796:	230c      	movs	r3, #12
 8014798:	603b      	str	r3, [r7, #0]
 801479a:	4638      	mov	r0, r7
 801479c:	f000 f84c 	bl	8014838 <__malloc_unlock>
 80147a0:	e7a1      	b.n	80146e6 <_malloc_r+0x22>
 80147a2:	6025      	str	r5, [r4, #0]
 80147a4:	e7de      	b.n	8014764 <_malloc_r+0xa0>
 80147a6:	bf00      	nop
 80147a8:	200001a0 	.word	0x200001a0

080147ac <_realloc_r>:
 80147ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147b0:	4680      	mov	r8, r0
 80147b2:	4614      	mov	r4, r2
 80147b4:	460e      	mov	r6, r1
 80147b6:	b921      	cbnz	r1, 80147c2 <_realloc_r+0x16>
 80147b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147bc:	4611      	mov	r1, r2
 80147be:	f7ff bf81 	b.w	80146c4 <_malloc_r>
 80147c2:	b92a      	cbnz	r2, 80147d0 <_realloc_r+0x24>
 80147c4:	f7ff ff12 	bl	80145ec <_free_r>
 80147c8:	4625      	mov	r5, r4
 80147ca:	4628      	mov	r0, r5
 80147cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147d0:	f000 f838 	bl	8014844 <_malloc_usable_size_r>
 80147d4:	4284      	cmp	r4, r0
 80147d6:	4607      	mov	r7, r0
 80147d8:	d802      	bhi.n	80147e0 <_realloc_r+0x34>
 80147da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80147de:	d812      	bhi.n	8014806 <_realloc_r+0x5a>
 80147e0:	4621      	mov	r1, r4
 80147e2:	4640      	mov	r0, r8
 80147e4:	f7ff ff6e 	bl	80146c4 <_malloc_r>
 80147e8:	4605      	mov	r5, r0
 80147ea:	2800      	cmp	r0, #0
 80147ec:	d0ed      	beq.n	80147ca <_realloc_r+0x1e>
 80147ee:	42bc      	cmp	r4, r7
 80147f0:	4622      	mov	r2, r4
 80147f2:	4631      	mov	r1, r6
 80147f4:	bf28      	it	cs
 80147f6:	463a      	movcs	r2, r7
 80147f8:	f7ff fed0 	bl	801459c <memcpy>
 80147fc:	4631      	mov	r1, r6
 80147fe:	4640      	mov	r0, r8
 8014800:	f7ff fef4 	bl	80145ec <_free_r>
 8014804:	e7e1      	b.n	80147ca <_realloc_r+0x1e>
 8014806:	4635      	mov	r5, r6
 8014808:	e7df      	b.n	80147ca <_realloc_r+0x1e>
	...

0801480c <_sbrk_r>:
 801480c:	b538      	push	{r3, r4, r5, lr}
 801480e:	4d06      	ldr	r5, [pc, #24]	; (8014828 <_sbrk_r+0x1c>)
 8014810:	2300      	movs	r3, #0
 8014812:	4604      	mov	r4, r0
 8014814:	4608      	mov	r0, r1
 8014816:	602b      	str	r3, [r5, #0]
 8014818:	f7fb ff92 	bl	8010740 <_sbrk>
 801481c:	1c43      	adds	r3, r0, #1
 801481e:	d102      	bne.n	8014826 <_sbrk_r+0x1a>
 8014820:	682b      	ldr	r3, [r5, #0]
 8014822:	b103      	cbz	r3, 8014826 <_sbrk_r+0x1a>
 8014824:	6023      	str	r3, [r4, #0]
 8014826:	bd38      	pop	{r3, r4, r5, pc}
 8014828:	200001a8 	.word	0x200001a8

0801482c <__malloc_lock>:
 801482c:	4801      	ldr	r0, [pc, #4]	; (8014834 <__malloc_lock+0x8>)
 801482e:	f000 b811 	b.w	8014854 <__retarget_lock_acquire_recursive>
 8014832:	bf00      	nop
 8014834:	200001ac 	.word	0x200001ac

08014838 <__malloc_unlock>:
 8014838:	4801      	ldr	r0, [pc, #4]	; (8014840 <__malloc_unlock+0x8>)
 801483a:	f000 b80c 	b.w	8014856 <__retarget_lock_release_recursive>
 801483e:	bf00      	nop
 8014840:	200001ac 	.word	0x200001ac

08014844 <_malloc_usable_size_r>:
 8014844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014848:	1f18      	subs	r0, r3, #4
 801484a:	2b00      	cmp	r3, #0
 801484c:	bfbc      	itt	lt
 801484e:	580b      	ldrlt	r3, [r1, r0]
 8014850:	18c0      	addlt	r0, r0, r3
 8014852:	4770      	bx	lr

08014854 <__retarget_lock_acquire_recursive>:
 8014854:	4770      	bx	lr

08014856 <__retarget_lock_release_recursive>:
 8014856:	4770      	bx	lr

08014858 <_init>:
 8014858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801485a:	bf00      	nop
 801485c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801485e:	bc08      	pop	{r3}
 8014860:	469e      	mov	lr, r3
 8014862:	4770      	bx	lr

08014864 <_fini>:
 8014864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014866:	bf00      	nop
 8014868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801486a:	bc08      	pop	{r3}
 801486c:	469e      	mov	lr, r3
 801486e:	4770      	bx	lr
