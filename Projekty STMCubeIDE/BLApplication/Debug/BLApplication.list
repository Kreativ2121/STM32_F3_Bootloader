
BLApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bbc  08010194  08010194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08012d50  08012d50  00012d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012d88  08012d88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08012d88  08012d88  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012d88  08012d88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012d88  08012d88  00012d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012d8c  08012d8c  00012d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08012d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000a4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b0  200000b0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008fd2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001444  00000000  00000000  0002900e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000658  00000000  00000000  0002a458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005e0  00000000  00000000  0002aab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ecb2  00000000  00000000  0002b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009264  00000000  00000000  00049d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbfdf  00000000  00000000  00052fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010ef85  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001898  00000000  00000000  0010efd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010194 <__do_global_dtors_aux>:
 8010194:	b510      	push	{r4, lr}
 8010196:	4c05      	ldr	r4, [pc, #20]	; (80101ac <__do_global_dtors_aux+0x18>)
 8010198:	7823      	ldrb	r3, [r4, #0]
 801019a:	b933      	cbnz	r3, 80101aa <__do_global_dtors_aux+0x16>
 801019c:	4b04      	ldr	r3, [pc, #16]	; (80101b0 <__do_global_dtors_aux+0x1c>)
 801019e:	b113      	cbz	r3, 80101a6 <__do_global_dtors_aux+0x12>
 80101a0:	4804      	ldr	r0, [pc, #16]	; (80101b4 <__do_global_dtors_aux+0x20>)
 80101a2:	f3af 8000 	nop.w
 80101a6:	2301      	movs	r3, #1
 80101a8:	7023      	strb	r3, [r4, #0]
 80101aa:	bd10      	pop	{r4, pc}
 80101ac:	2000000c 	.word	0x2000000c
 80101b0:	00000000 	.word	0x00000000
 80101b4:	08012d38 	.word	0x08012d38

080101b8 <frame_dummy>:
 80101b8:	b508      	push	{r3, lr}
 80101ba:	4b03      	ldr	r3, [pc, #12]	; (80101c8 <frame_dummy+0x10>)
 80101bc:	b11b      	cbz	r3, 80101c6 <frame_dummy+0xe>
 80101be:	4903      	ldr	r1, [pc, #12]	; (80101cc <frame_dummy+0x14>)
 80101c0:	4803      	ldr	r0, [pc, #12]	; (80101d0 <frame_dummy+0x18>)
 80101c2:	f3af 8000 	nop.w
 80101c6:	bd08      	pop	{r3, pc}
 80101c8:	00000000 	.word	0x00000000
 80101cc:	20000010 	.word	0x20000010
 80101d0:	08012d38 	.word	0x08012d38

080101d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80101d8:	f000 f9da 	bl	8010590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80101dc:	f000 f80d 	bl	80101fa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80101e0:	f000 f89a 	bl	8010318 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80101e4:	f000 f868 	bl	80102b8 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 80101e8:	2120      	movs	r1, #32
 80101ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80101ee:	f000 fce1 	bl	8010bb4 <HAL_GPIO_TogglePin>
	  HAL_Delay (150);   /* Insert delay 100 ms */
 80101f2:	2096      	movs	r0, #150	; 0x96
 80101f4:	f000 fa32 	bl	801065c <HAL_Delay>
	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 80101f8:	e7f6      	b.n	80101e8 <main+0x14>

080101fa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80101fa:	b580      	push	{r7, lr}
 80101fc:	b0a6      	sub	sp, #152	; 0x98
 80101fe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010200:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010204:	2228      	movs	r2, #40	; 0x28
 8010206:	2100      	movs	r1, #0
 8010208:	4618      	mov	r0, r3
 801020a:	f002 fd8d 	bl	8012d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801020e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010212:	2200      	movs	r2, #0
 8010214:	601a      	str	r2, [r3, #0]
 8010216:	605a      	str	r2, [r3, #4]
 8010218:	609a      	str	r2, [r3, #8]
 801021a:	60da      	str	r2, [r3, #12]
 801021c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801021e:	1d3b      	adds	r3, r7, #4
 8010220:	2258      	movs	r2, #88	; 0x58
 8010222:	2100      	movs	r1, #0
 8010224:	4618      	mov	r0, r3
 8010226:	f002 fd7f 	bl	8012d28 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 801022a:	2302      	movs	r3, #2
 801022c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801022e:	2301      	movs	r3, #1
 8010230:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8010232:	2310      	movs	r3, #16
 8010234:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010238:	2302      	movs	r3, #2
 801023a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 801023e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010242:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8010246:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 801024a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 801024e:	2300      	movs	r3, #0
 8010250:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010254:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010258:	4618      	mov	r0, r3
 801025a:	f000 fcc5 	bl	8010be8 <HAL_RCC_OscConfig>
 801025e:	4603      	mov	r3, r0
 8010260:	2b00      	cmp	r3, #0
 8010262:	d001      	beq.n	8010268 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8010264:	f000 f8be 	bl	80103e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010268:	230f      	movs	r3, #15
 801026a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801026c:	2302      	movs	r3, #2
 801026e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010270:	2300      	movs	r3, #0
 8010272:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8010274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010278:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801027a:	2300      	movs	r3, #0
 801027c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 801027e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010282:	2102      	movs	r1, #2
 8010284:	4618      	mov	r0, r3
 8010286:	f001 fd03 	bl	8011c90 <HAL_RCC_ClockConfig>
 801028a:	4603      	mov	r3, r0
 801028c:	2b00      	cmp	r3, #0
 801028e:	d001      	beq.n	8010294 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8010290:	f000 f8a8 	bl	80103e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8010294:	2302      	movs	r3, #2
 8010296:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8010298:	2300      	movs	r3, #0
 801029a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801029c:	1d3b      	adds	r3, r7, #4
 801029e:	4618      	mov	r0, r3
 80102a0:	f001 ff2c 	bl	80120fc <HAL_RCCEx_PeriphCLKConfig>
 80102a4:	4603      	mov	r3, r0
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d001      	beq.n	80102ae <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80102aa:	f000 f89b 	bl	80103e4 <Error_Handler>
  }
}
 80102ae:	bf00      	nop
 80102b0:	3798      	adds	r7, #152	; 0x98
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
	...

080102b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80102bc:	4b14      	ldr	r3, [pc, #80]	; (8010310 <MX_USART2_UART_Init+0x58>)
 80102be:	4a15      	ldr	r2, [pc, #84]	; (8010314 <MX_USART2_UART_Init+0x5c>)
 80102c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80102c2:	4b13      	ldr	r3, [pc, #76]	; (8010310 <MX_USART2_UART_Init+0x58>)
 80102c4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80102c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80102ca:	4b11      	ldr	r3, [pc, #68]	; (8010310 <MX_USART2_UART_Init+0x58>)
 80102cc:	2200      	movs	r2, #0
 80102ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80102d0:	4b0f      	ldr	r3, [pc, #60]	; (8010310 <MX_USART2_UART_Init+0x58>)
 80102d2:	2200      	movs	r2, #0
 80102d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80102d6:	4b0e      	ldr	r3, [pc, #56]	; (8010310 <MX_USART2_UART_Init+0x58>)
 80102d8:	2200      	movs	r2, #0
 80102da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80102dc:	4b0c      	ldr	r3, [pc, #48]	; (8010310 <MX_USART2_UART_Init+0x58>)
 80102de:	220c      	movs	r2, #12
 80102e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80102e2:	4b0b      	ldr	r3, [pc, #44]	; (8010310 <MX_USART2_UART_Init+0x58>)
 80102e4:	2200      	movs	r2, #0
 80102e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80102e8:	4b09      	ldr	r3, [pc, #36]	; (8010310 <MX_USART2_UART_Init+0x58>)
 80102ea:	2200      	movs	r2, #0
 80102ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80102ee:	4b08      	ldr	r3, [pc, #32]	; (8010310 <MX_USART2_UART_Init+0x58>)
 80102f0:	2200      	movs	r2, #0
 80102f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80102f4:	4b06      	ldr	r3, [pc, #24]	; (8010310 <MX_USART2_UART_Init+0x58>)
 80102f6:	2200      	movs	r2, #0
 80102f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80102fa:	4805      	ldr	r0, [pc, #20]	; (8010310 <MX_USART2_UART_Init+0x58>)
 80102fc:	f002 f91c 	bl	8012538 <HAL_UART_Init>
 8010300:	4603      	mov	r3, r0
 8010302:	2b00      	cmp	r3, #0
 8010304:	d001      	beq.n	801030a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8010306:	f000 f86d 	bl	80103e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 801030a:	bf00      	nop
 801030c:	bd80      	pop	{r7, pc}
 801030e:	bf00      	nop
 8010310:	20000028 	.word	0x20000028
 8010314:	40004400 	.word	0x40004400

08010318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b08a      	sub	sp, #40	; 0x28
 801031c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801031e:	f107 0314 	add.w	r3, r7, #20
 8010322:	2200      	movs	r2, #0
 8010324:	601a      	str	r2, [r3, #0]
 8010326:	605a      	str	r2, [r3, #4]
 8010328:	609a      	str	r2, [r3, #8]
 801032a:	60da      	str	r2, [r3, #12]
 801032c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801032e:	4b2b      	ldr	r3, [pc, #172]	; (80103dc <MX_GPIO_Init+0xc4>)
 8010330:	695b      	ldr	r3, [r3, #20]
 8010332:	4a2a      	ldr	r2, [pc, #168]	; (80103dc <MX_GPIO_Init+0xc4>)
 8010334:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010338:	6153      	str	r3, [r2, #20]
 801033a:	4b28      	ldr	r3, [pc, #160]	; (80103dc <MX_GPIO_Init+0xc4>)
 801033c:	695b      	ldr	r3, [r3, #20]
 801033e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010342:	613b      	str	r3, [r7, #16]
 8010344:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8010346:	4b25      	ldr	r3, [pc, #148]	; (80103dc <MX_GPIO_Init+0xc4>)
 8010348:	695b      	ldr	r3, [r3, #20]
 801034a:	4a24      	ldr	r2, [pc, #144]	; (80103dc <MX_GPIO_Init+0xc4>)
 801034c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010350:	6153      	str	r3, [r2, #20]
 8010352:	4b22      	ldr	r3, [pc, #136]	; (80103dc <MX_GPIO_Init+0xc4>)
 8010354:	695b      	ldr	r3, [r3, #20]
 8010356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801035a:	60fb      	str	r3, [r7, #12]
 801035c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801035e:	4b1f      	ldr	r3, [pc, #124]	; (80103dc <MX_GPIO_Init+0xc4>)
 8010360:	695b      	ldr	r3, [r3, #20]
 8010362:	4a1e      	ldr	r2, [pc, #120]	; (80103dc <MX_GPIO_Init+0xc4>)
 8010364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010368:	6153      	str	r3, [r2, #20]
 801036a:	4b1c      	ldr	r3, [pc, #112]	; (80103dc <MX_GPIO_Init+0xc4>)
 801036c:	695b      	ldr	r3, [r3, #20]
 801036e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010372:	60bb      	str	r3, [r7, #8]
 8010374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010376:	4b19      	ldr	r3, [pc, #100]	; (80103dc <MX_GPIO_Init+0xc4>)
 8010378:	695b      	ldr	r3, [r3, #20]
 801037a:	4a18      	ldr	r2, [pc, #96]	; (80103dc <MX_GPIO_Init+0xc4>)
 801037c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010380:	6153      	str	r3, [r2, #20]
 8010382:	4b16      	ldr	r3, [pc, #88]	; (80103dc <MX_GPIO_Init+0xc4>)
 8010384:	695b      	ldr	r3, [r3, #20]
 8010386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801038a:	607b      	str	r3, [r7, #4]
 801038c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 801038e:	2200      	movs	r2, #0
 8010390:	2120      	movs	r1, #32
 8010392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010396:	f000 fbf5 	bl	8010b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 801039a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801039e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80103a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80103a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103a6:	2300      	movs	r3, #0
 80103a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80103aa:	f107 0314 	add.w	r3, r7, #20
 80103ae:	4619      	mov	r1, r3
 80103b0:	480b      	ldr	r0, [pc, #44]	; (80103e0 <MX_GPIO_Init+0xc8>)
 80103b2:	f000 fa5d 	bl	8010870 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80103b6:	2320      	movs	r3, #32
 80103b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80103ba:	2301      	movs	r3, #1
 80103bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103be:	2300      	movs	r3, #0
 80103c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80103c2:	2300      	movs	r3, #0
 80103c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80103c6:	f107 0314 	add.w	r3, r7, #20
 80103ca:	4619      	mov	r1, r3
 80103cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80103d0:	f000 fa4e 	bl	8010870 <HAL_GPIO_Init>

}
 80103d4:	bf00      	nop
 80103d6:	3728      	adds	r7, #40	; 0x28
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}
 80103dc:	40021000 	.word	0x40021000
 80103e0:	48000800 	.word	0x48000800

080103e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80103e4:	b480      	push	{r7}
 80103e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80103e8:	b672      	cpsid	i
}
 80103ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80103ec:	e7fe      	b.n	80103ec <Error_Handler+0x8>
	...

080103f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b082      	sub	sp, #8
 80103f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80103f6:	4b0f      	ldr	r3, [pc, #60]	; (8010434 <HAL_MspInit+0x44>)
 80103f8:	699b      	ldr	r3, [r3, #24]
 80103fa:	4a0e      	ldr	r2, [pc, #56]	; (8010434 <HAL_MspInit+0x44>)
 80103fc:	f043 0301 	orr.w	r3, r3, #1
 8010400:	6193      	str	r3, [r2, #24]
 8010402:	4b0c      	ldr	r3, [pc, #48]	; (8010434 <HAL_MspInit+0x44>)
 8010404:	699b      	ldr	r3, [r3, #24]
 8010406:	f003 0301 	and.w	r3, r3, #1
 801040a:	607b      	str	r3, [r7, #4]
 801040c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801040e:	4b09      	ldr	r3, [pc, #36]	; (8010434 <HAL_MspInit+0x44>)
 8010410:	69db      	ldr	r3, [r3, #28]
 8010412:	4a08      	ldr	r2, [pc, #32]	; (8010434 <HAL_MspInit+0x44>)
 8010414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010418:	61d3      	str	r3, [r2, #28]
 801041a:	4b06      	ldr	r3, [pc, #24]	; (8010434 <HAL_MspInit+0x44>)
 801041c:	69db      	ldr	r3, [r3, #28]
 801041e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010422:	603b      	str	r3, [r7, #0]
 8010424:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8010426:	2007      	movs	r0, #7
 8010428:	f000 f9ee 	bl	8010808 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801042c:	bf00      	nop
 801042e:	3708      	adds	r7, #8
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}
 8010434:	40021000 	.word	0x40021000

08010438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b08a      	sub	sp, #40	; 0x28
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010440:	f107 0314 	add.w	r3, r7, #20
 8010444:	2200      	movs	r2, #0
 8010446:	601a      	str	r2, [r3, #0]
 8010448:	605a      	str	r2, [r3, #4]
 801044a:	609a      	str	r2, [r3, #8]
 801044c:	60da      	str	r2, [r3, #12]
 801044e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	4a17      	ldr	r2, [pc, #92]	; (80104b4 <HAL_UART_MspInit+0x7c>)
 8010456:	4293      	cmp	r3, r2
 8010458:	d128      	bne.n	80104ac <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 801045a:	4b17      	ldr	r3, [pc, #92]	; (80104b8 <HAL_UART_MspInit+0x80>)
 801045c:	69db      	ldr	r3, [r3, #28]
 801045e:	4a16      	ldr	r2, [pc, #88]	; (80104b8 <HAL_UART_MspInit+0x80>)
 8010460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010464:	61d3      	str	r3, [r2, #28]
 8010466:	4b14      	ldr	r3, [pc, #80]	; (80104b8 <HAL_UART_MspInit+0x80>)
 8010468:	69db      	ldr	r3, [r3, #28]
 801046a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801046e:	613b      	str	r3, [r7, #16]
 8010470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010472:	4b11      	ldr	r3, [pc, #68]	; (80104b8 <HAL_UART_MspInit+0x80>)
 8010474:	695b      	ldr	r3, [r3, #20]
 8010476:	4a10      	ldr	r2, [pc, #64]	; (80104b8 <HAL_UART_MspInit+0x80>)
 8010478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801047c:	6153      	str	r3, [r2, #20]
 801047e:	4b0e      	ldr	r3, [pc, #56]	; (80104b8 <HAL_UART_MspInit+0x80>)
 8010480:	695b      	ldr	r3, [r3, #20]
 8010482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010486:	60fb      	str	r3, [r7, #12]
 8010488:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 801048a:	230c      	movs	r3, #12
 801048c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801048e:	2302      	movs	r3, #2
 8010490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010492:	2300      	movs	r3, #0
 8010494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010496:	2300      	movs	r3, #0
 8010498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801049a:	2307      	movs	r3, #7
 801049c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801049e:	f107 0314 	add.w	r3, r7, #20
 80104a2:	4619      	mov	r1, r3
 80104a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80104a8:	f000 f9e2 	bl	8010870 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80104ac:	bf00      	nop
 80104ae:	3728      	adds	r7, #40	; 0x28
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}
 80104b4:	40004400 	.word	0x40004400
 80104b8:	40021000 	.word	0x40021000

080104bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80104bc:	b480      	push	{r7}
 80104be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80104c0:	e7fe      	b.n	80104c0 <NMI_Handler+0x4>

080104c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80104c2:	b480      	push	{r7}
 80104c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80104c6:	e7fe      	b.n	80104c6 <HardFault_Handler+0x4>

080104c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80104c8:	b480      	push	{r7}
 80104ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80104cc:	e7fe      	b.n	80104cc <MemManage_Handler+0x4>

080104ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80104ce:	b480      	push	{r7}
 80104d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80104d2:	e7fe      	b.n	80104d2 <BusFault_Handler+0x4>

080104d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80104d4:	b480      	push	{r7}
 80104d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80104d8:	e7fe      	b.n	80104d8 <UsageFault_Handler+0x4>

080104da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80104da:	b480      	push	{r7}
 80104dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80104de:	bf00      	nop
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr

080104e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80104e8:	b480      	push	{r7}
 80104ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80104ec:	bf00      	nop
 80104ee:	46bd      	mov	sp, r7
 80104f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f4:	4770      	bx	lr

080104f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80104f6:	b480      	push	{r7}
 80104f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80104fa:	bf00      	nop
 80104fc:	46bd      	mov	sp, r7
 80104fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010502:	4770      	bx	lr

08010504 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010508:	f000 f888 	bl	801061c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801050c:	bf00      	nop
 801050e:	bd80      	pop	{r7, pc}

08010510 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010510:	b480      	push	{r7}
 8010512:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010514:	4b07      	ldr	r3, [pc, #28]	; (8010534 <SystemInit+0x24>)
 8010516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801051a:	4a06      	ldr	r2, [pc, #24]	; (8010534 <SystemInit+0x24>)
 801051c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8010524:	4b03      	ldr	r3, [pc, #12]	; (8010534 <SystemInit+0x24>)
 8010526:	4a04      	ldr	r2, [pc, #16]	; (8010538 <SystemInit+0x28>)
 8010528:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 801052a:	bf00      	nop
 801052c:	46bd      	mov	sp, r7
 801052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010532:	4770      	bx	lr
 8010534:	e000ed00 	.word	0xe000ed00
 8010538:	08010000 	.word	0x08010000

0801053c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 801053c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010574 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8010540:	480d      	ldr	r0, [pc, #52]	; (8010578 <LoopForever+0x6>)
  ldr r1, =_edata
 8010542:	490e      	ldr	r1, [pc, #56]	; (801057c <LoopForever+0xa>)
  ldr r2, =_sidata
 8010544:	4a0e      	ldr	r2, [pc, #56]	; (8010580 <LoopForever+0xe>)
  movs r3, #0
 8010546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010548:	e002      	b.n	8010550 <LoopCopyDataInit>

0801054a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801054a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801054c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801054e:	3304      	adds	r3, #4

08010550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010554:	d3f9      	bcc.n	801054a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010556:	4a0b      	ldr	r2, [pc, #44]	; (8010584 <LoopForever+0x12>)
  ldr r4, =_ebss
 8010558:	4c0b      	ldr	r4, [pc, #44]	; (8010588 <LoopForever+0x16>)
  movs r3, #0
 801055a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801055c:	e001      	b.n	8010562 <LoopFillZerobss>

0801055e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801055e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010560:	3204      	adds	r2, #4

08010562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010564:	d3fb      	bcc.n	801055e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8010566:	f7ff ffd3 	bl	8010510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801056a:	f002 fbb9 	bl	8012ce0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801056e:	f7ff fe31 	bl	80101d4 <main>

08010572 <LoopForever>:

LoopForever:
    b LoopForever
 8010572:	e7fe      	b.n	8010572 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8010574:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8010578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801057c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8010580:	08012d90 	.word	0x08012d90
  ldr r2, =_sbss
 8010584:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8010588:	200000b0 	.word	0x200000b0

0801058c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801058c:	e7fe      	b.n	801058c <ADC1_2_IRQHandler>
	...

08010590 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010594:	4b08      	ldr	r3, [pc, #32]	; (80105b8 <HAL_Init+0x28>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	4a07      	ldr	r2, [pc, #28]	; (80105b8 <HAL_Init+0x28>)
 801059a:	f043 0310 	orr.w	r3, r3, #16
 801059e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80105a0:	2003      	movs	r0, #3
 80105a2:	f000 f931 	bl	8010808 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80105a6:	2000      	movs	r0, #0
 80105a8:	f000 f808 	bl	80105bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80105ac:	f7ff ff20 	bl	80103f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80105b0:	2300      	movs	r3, #0
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	bf00      	nop
 80105b8:	40022000 	.word	0x40022000

080105bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b082      	sub	sp, #8
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80105c4:	4b12      	ldr	r3, [pc, #72]	; (8010610 <HAL_InitTick+0x54>)
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	4b12      	ldr	r3, [pc, #72]	; (8010614 <HAL_InitTick+0x58>)
 80105ca:	781b      	ldrb	r3, [r3, #0]
 80105cc:	4619      	mov	r1, r3
 80105ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80105d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80105d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80105da:	4618      	mov	r0, r3
 80105dc:	f000 f93b 	bl	8010856 <HAL_SYSTICK_Config>
 80105e0:	4603      	mov	r3, r0
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d001      	beq.n	80105ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80105e6:	2301      	movs	r3, #1
 80105e8:	e00e      	b.n	8010608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2b0f      	cmp	r3, #15
 80105ee:	d80a      	bhi.n	8010606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80105f0:	2200      	movs	r2, #0
 80105f2:	6879      	ldr	r1, [r7, #4]
 80105f4:	f04f 30ff 	mov.w	r0, #4294967295
 80105f8:	f000 f911 	bl	801081e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80105fc:	4a06      	ldr	r2, [pc, #24]	; (8010618 <HAL_InitTick+0x5c>)
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8010602:	2300      	movs	r3, #0
 8010604:	e000      	b.n	8010608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8010606:	2301      	movs	r3, #1
}
 8010608:	4618      	mov	r0, r3
 801060a:	3708      	adds	r7, #8
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}
 8010610:	20000000 	.word	0x20000000
 8010614:	20000008 	.word	0x20000008
 8010618:	20000004 	.word	0x20000004

0801061c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801061c:	b480      	push	{r7}
 801061e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010620:	4b06      	ldr	r3, [pc, #24]	; (801063c <HAL_IncTick+0x20>)
 8010622:	781b      	ldrb	r3, [r3, #0]
 8010624:	461a      	mov	r2, r3
 8010626:	4b06      	ldr	r3, [pc, #24]	; (8010640 <HAL_IncTick+0x24>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	4413      	add	r3, r2
 801062c:	4a04      	ldr	r2, [pc, #16]	; (8010640 <HAL_IncTick+0x24>)
 801062e:	6013      	str	r3, [r2, #0]
}
 8010630:	bf00      	nop
 8010632:	46bd      	mov	sp, r7
 8010634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010638:	4770      	bx	lr
 801063a:	bf00      	nop
 801063c:	20000008 	.word	0x20000008
 8010640:	200000ac 	.word	0x200000ac

08010644 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010644:	b480      	push	{r7}
 8010646:	af00      	add	r7, sp, #0
  return uwTick;  
 8010648:	4b03      	ldr	r3, [pc, #12]	; (8010658 <HAL_GetTick+0x14>)
 801064a:	681b      	ldr	r3, [r3, #0]
}
 801064c:	4618      	mov	r0, r3
 801064e:	46bd      	mov	sp, r7
 8010650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010654:	4770      	bx	lr
 8010656:	bf00      	nop
 8010658:	200000ac 	.word	0x200000ac

0801065c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b084      	sub	sp, #16
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010664:	f7ff ffee 	bl	8010644 <HAL_GetTick>
 8010668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010674:	d005      	beq.n	8010682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010676:	4b0a      	ldr	r3, [pc, #40]	; (80106a0 <HAL_Delay+0x44>)
 8010678:	781b      	ldrb	r3, [r3, #0]
 801067a:	461a      	mov	r2, r3
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	4413      	add	r3, r2
 8010680:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8010682:	bf00      	nop
 8010684:	f7ff ffde 	bl	8010644 <HAL_GetTick>
 8010688:	4602      	mov	r2, r0
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	1ad3      	subs	r3, r2, r3
 801068e:	68fa      	ldr	r2, [r7, #12]
 8010690:	429a      	cmp	r2, r3
 8010692:	d8f7      	bhi.n	8010684 <HAL_Delay+0x28>
  {
  }
}
 8010694:	bf00      	nop
 8010696:	bf00      	nop
 8010698:	3710      	adds	r7, #16
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}
 801069e:	bf00      	nop
 80106a0:	20000008 	.word	0x20000008

080106a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80106a4:	b480      	push	{r7}
 80106a6:	b085      	sub	sp, #20
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f003 0307 	and.w	r3, r3, #7
 80106b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80106b4:	4b0c      	ldr	r3, [pc, #48]	; (80106e8 <__NVIC_SetPriorityGrouping+0x44>)
 80106b6:	68db      	ldr	r3, [r3, #12]
 80106b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80106ba:	68ba      	ldr	r2, [r7, #8]
 80106bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80106c0:	4013      	ands	r3, r2
 80106c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80106cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80106d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80106d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80106d6:	4a04      	ldr	r2, [pc, #16]	; (80106e8 <__NVIC_SetPriorityGrouping+0x44>)
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	60d3      	str	r3, [r2, #12]
}
 80106dc:	bf00      	nop
 80106de:	3714      	adds	r7, #20
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr
 80106e8:	e000ed00 	.word	0xe000ed00

080106ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80106ec:	b480      	push	{r7}
 80106ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80106f0:	4b04      	ldr	r3, [pc, #16]	; (8010704 <__NVIC_GetPriorityGrouping+0x18>)
 80106f2:	68db      	ldr	r3, [r3, #12]
 80106f4:	0a1b      	lsrs	r3, r3, #8
 80106f6:	f003 0307 	and.w	r3, r3, #7
}
 80106fa:	4618      	mov	r0, r3
 80106fc:	46bd      	mov	sp, r7
 80106fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010702:	4770      	bx	lr
 8010704:	e000ed00 	.word	0xe000ed00

08010708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010708:	b480      	push	{r7}
 801070a:	b083      	sub	sp, #12
 801070c:	af00      	add	r7, sp, #0
 801070e:	4603      	mov	r3, r0
 8010710:	6039      	str	r1, [r7, #0]
 8010712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010718:	2b00      	cmp	r3, #0
 801071a:	db0a      	blt.n	8010732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	b2da      	uxtb	r2, r3
 8010720:	490c      	ldr	r1, [pc, #48]	; (8010754 <__NVIC_SetPriority+0x4c>)
 8010722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010726:	0112      	lsls	r2, r2, #4
 8010728:	b2d2      	uxtb	r2, r2
 801072a:	440b      	add	r3, r1
 801072c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010730:	e00a      	b.n	8010748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	b2da      	uxtb	r2, r3
 8010736:	4908      	ldr	r1, [pc, #32]	; (8010758 <__NVIC_SetPriority+0x50>)
 8010738:	79fb      	ldrb	r3, [r7, #7]
 801073a:	f003 030f 	and.w	r3, r3, #15
 801073e:	3b04      	subs	r3, #4
 8010740:	0112      	lsls	r2, r2, #4
 8010742:	b2d2      	uxtb	r2, r2
 8010744:	440b      	add	r3, r1
 8010746:	761a      	strb	r2, [r3, #24]
}
 8010748:	bf00      	nop
 801074a:	370c      	adds	r7, #12
 801074c:	46bd      	mov	sp, r7
 801074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010752:	4770      	bx	lr
 8010754:	e000e100 	.word	0xe000e100
 8010758:	e000ed00 	.word	0xe000ed00

0801075c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801075c:	b480      	push	{r7}
 801075e:	b089      	sub	sp, #36	; 0x24
 8010760:	af00      	add	r7, sp, #0
 8010762:	60f8      	str	r0, [r7, #12]
 8010764:	60b9      	str	r1, [r7, #8]
 8010766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	f003 0307 	and.w	r3, r3, #7
 801076e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010770:	69fb      	ldr	r3, [r7, #28]
 8010772:	f1c3 0307 	rsb	r3, r3, #7
 8010776:	2b04      	cmp	r3, #4
 8010778:	bf28      	it	cs
 801077a:	2304      	movcs	r3, #4
 801077c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801077e:	69fb      	ldr	r3, [r7, #28]
 8010780:	3304      	adds	r3, #4
 8010782:	2b06      	cmp	r3, #6
 8010784:	d902      	bls.n	801078c <NVIC_EncodePriority+0x30>
 8010786:	69fb      	ldr	r3, [r7, #28]
 8010788:	3b03      	subs	r3, #3
 801078a:	e000      	b.n	801078e <NVIC_EncodePriority+0x32>
 801078c:	2300      	movs	r3, #0
 801078e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010790:	f04f 32ff 	mov.w	r2, #4294967295
 8010794:	69bb      	ldr	r3, [r7, #24]
 8010796:	fa02 f303 	lsl.w	r3, r2, r3
 801079a:	43da      	mvns	r2, r3
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	401a      	ands	r2, r3
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80107a4:	f04f 31ff 	mov.w	r1, #4294967295
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	fa01 f303 	lsl.w	r3, r1, r3
 80107ae:	43d9      	mvns	r1, r3
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80107b4:	4313      	orrs	r3, r2
         );
}
 80107b6:	4618      	mov	r0, r3
 80107b8:	3724      	adds	r7, #36	; 0x24
 80107ba:	46bd      	mov	sp, r7
 80107bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c0:	4770      	bx	lr
	...

080107c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b082      	sub	sp, #8
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	3b01      	subs	r3, #1
 80107d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80107d4:	d301      	bcc.n	80107da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80107d6:	2301      	movs	r3, #1
 80107d8:	e00f      	b.n	80107fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80107da:	4a0a      	ldr	r2, [pc, #40]	; (8010804 <SysTick_Config+0x40>)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	3b01      	subs	r3, #1
 80107e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80107e2:	210f      	movs	r1, #15
 80107e4:	f04f 30ff 	mov.w	r0, #4294967295
 80107e8:	f7ff ff8e 	bl	8010708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80107ec:	4b05      	ldr	r3, [pc, #20]	; (8010804 <SysTick_Config+0x40>)
 80107ee:	2200      	movs	r2, #0
 80107f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80107f2:	4b04      	ldr	r3, [pc, #16]	; (8010804 <SysTick_Config+0x40>)
 80107f4:	2207      	movs	r2, #7
 80107f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80107f8:	2300      	movs	r3, #0
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	3708      	adds	r7, #8
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}
 8010802:	bf00      	nop
 8010804:	e000e010 	.word	0xe000e010

08010808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b082      	sub	sp, #8
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f7ff ff47 	bl	80106a4 <__NVIC_SetPriorityGrouping>
}
 8010816:	bf00      	nop
 8010818:	3708      	adds	r7, #8
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}

0801081e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801081e:	b580      	push	{r7, lr}
 8010820:	b086      	sub	sp, #24
 8010822:	af00      	add	r7, sp, #0
 8010824:	4603      	mov	r3, r0
 8010826:	60b9      	str	r1, [r7, #8]
 8010828:	607a      	str	r2, [r7, #4]
 801082a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801082c:	2300      	movs	r3, #0
 801082e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010830:	f7ff ff5c 	bl	80106ec <__NVIC_GetPriorityGrouping>
 8010834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010836:	687a      	ldr	r2, [r7, #4]
 8010838:	68b9      	ldr	r1, [r7, #8]
 801083a:	6978      	ldr	r0, [r7, #20]
 801083c:	f7ff ff8e 	bl	801075c <NVIC_EncodePriority>
 8010840:	4602      	mov	r2, r0
 8010842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010846:	4611      	mov	r1, r2
 8010848:	4618      	mov	r0, r3
 801084a:	f7ff ff5d 	bl	8010708 <__NVIC_SetPriority>
}
 801084e:	bf00      	nop
 8010850:	3718      	adds	r7, #24
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}

08010856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010856:	b580      	push	{r7, lr}
 8010858:	b082      	sub	sp, #8
 801085a:	af00      	add	r7, sp, #0
 801085c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f7ff ffb0 	bl	80107c4 <SysTick_Config>
 8010864:	4603      	mov	r3, r0
}
 8010866:	4618      	mov	r0, r3
 8010868:	3708      	adds	r7, #8
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
	...

08010870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010870:	b480      	push	{r7}
 8010872:	b087      	sub	sp, #28
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
 8010878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801087a:	2300      	movs	r3, #0
 801087c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801087e:	e160      	b.n	8010b42 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	681a      	ldr	r2, [r3, #0]
 8010884:	2101      	movs	r1, #1
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	fa01 f303 	lsl.w	r3, r1, r3
 801088c:	4013      	ands	r3, r2
 801088e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	2b00      	cmp	r3, #0
 8010894:	f000 8152 	beq.w	8010b3c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	685b      	ldr	r3, [r3, #4]
 801089c:	f003 0303 	and.w	r3, r3, #3
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	d005      	beq.n	80108b0 <HAL_GPIO_Init+0x40>
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	685b      	ldr	r3, [r3, #4]
 80108a8:	f003 0303 	and.w	r3, r3, #3
 80108ac:	2b02      	cmp	r3, #2
 80108ae:	d130      	bne.n	8010912 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	689b      	ldr	r3, [r3, #8]
 80108b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	005b      	lsls	r3, r3, #1
 80108ba:	2203      	movs	r2, #3
 80108bc:	fa02 f303 	lsl.w	r3, r2, r3
 80108c0:	43db      	mvns	r3, r3
 80108c2:	693a      	ldr	r2, [r7, #16]
 80108c4:	4013      	ands	r3, r2
 80108c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80108c8:	683b      	ldr	r3, [r7, #0]
 80108ca:	68da      	ldr	r2, [r3, #12]
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	005b      	lsls	r3, r3, #1
 80108d0:	fa02 f303 	lsl.w	r3, r2, r3
 80108d4:	693a      	ldr	r2, [r7, #16]
 80108d6:	4313      	orrs	r3, r2
 80108d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	693a      	ldr	r2, [r7, #16]
 80108de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	685b      	ldr	r3, [r3, #4]
 80108e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80108e6:	2201      	movs	r2, #1
 80108e8:	697b      	ldr	r3, [r7, #20]
 80108ea:	fa02 f303 	lsl.w	r3, r2, r3
 80108ee:	43db      	mvns	r3, r3
 80108f0:	693a      	ldr	r2, [r7, #16]
 80108f2:	4013      	ands	r3, r2
 80108f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	685b      	ldr	r3, [r3, #4]
 80108fa:	091b      	lsrs	r3, r3, #4
 80108fc:	f003 0201 	and.w	r2, r3, #1
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	fa02 f303 	lsl.w	r3, r2, r3
 8010906:	693a      	ldr	r2, [r7, #16]
 8010908:	4313      	orrs	r3, r2
 801090a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	693a      	ldr	r2, [r7, #16]
 8010910:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	f003 0303 	and.w	r3, r3, #3
 801091a:	2b03      	cmp	r3, #3
 801091c:	d017      	beq.n	801094e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	68db      	ldr	r3, [r3, #12]
 8010922:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8010924:	697b      	ldr	r3, [r7, #20]
 8010926:	005b      	lsls	r3, r3, #1
 8010928:	2203      	movs	r2, #3
 801092a:	fa02 f303 	lsl.w	r3, r2, r3
 801092e:	43db      	mvns	r3, r3
 8010930:	693a      	ldr	r2, [r7, #16]
 8010932:	4013      	ands	r3, r2
 8010934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	689a      	ldr	r2, [r3, #8]
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	005b      	lsls	r3, r3, #1
 801093e:	fa02 f303 	lsl.w	r3, r2, r3
 8010942:	693a      	ldr	r2, [r7, #16]
 8010944:	4313      	orrs	r3, r2
 8010946:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	693a      	ldr	r2, [r7, #16]
 801094c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	f003 0303 	and.w	r3, r3, #3
 8010956:	2b02      	cmp	r3, #2
 8010958:	d123      	bne.n	80109a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	08da      	lsrs	r2, r3, #3
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	3208      	adds	r2, #8
 8010962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010966:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8010968:	697b      	ldr	r3, [r7, #20]
 801096a:	f003 0307 	and.w	r3, r3, #7
 801096e:	009b      	lsls	r3, r3, #2
 8010970:	220f      	movs	r2, #15
 8010972:	fa02 f303 	lsl.w	r3, r2, r3
 8010976:	43db      	mvns	r3, r3
 8010978:	693a      	ldr	r2, [r7, #16]
 801097a:	4013      	ands	r3, r2
 801097c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 801097e:	683b      	ldr	r3, [r7, #0]
 8010980:	691a      	ldr	r2, [r3, #16]
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	f003 0307 	and.w	r3, r3, #7
 8010988:	009b      	lsls	r3, r3, #2
 801098a:	fa02 f303 	lsl.w	r3, r2, r3
 801098e:	693a      	ldr	r2, [r7, #16]
 8010990:	4313      	orrs	r3, r2
 8010992:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8010994:	697b      	ldr	r3, [r7, #20]
 8010996:	08da      	lsrs	r2, r3, #3
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	3208      	adds	r2, #8
 801099c:	6939      	ldr	r1, [r7, #16]
 801099e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80109a8:	697b      	ldr	r3, [r7, #20]
 80109aa:	005b      	lsls	r3, r3, #1
 80109ac:	2203      	movs	r2, #3
 80109ae:	fa02 f303 	lsl.w	r3, r2, r3
 80109b2:	43db      	mvns	r3, r3
 80109b4:	693a      	ldr	r2, [r7, #16]
 80109b6:	4013      	ands	r3, r2
 80109b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	685b      	ldr	r3, [r3, #4]
 80109be:	f003 0203 	and.w	r2, r3, #3
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	005b      	lsls	r3, r3, #1
 80109c6:	fa02 f303 	lsl.w	r3, r2, r3
 80109ca:	693a      	ldr	r2, [r7, #16]
 80109cc:	4313      	orrs	r3, r2
 80109ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	693a      	ldr	r2, [r7, #16]
 80109d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	685b      	ldr	r3, [r3, #4]
 80109da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80109de:	2b00      	cmp	r3, #0
 80109e0:	f000 80ac 	beq.w	8010b3c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80109e4:	4b5e      	ldr	r3, [pc, #376]	; (8010b60 <HAL_GPIO_Init+0x2f0>)
 80109e6:	699b      	ldr	r3, [r3, #24]
 80109e8:	4a5d      	ldr	r2, [pc, #372]	; (8010b60 <HAL_GPIO_Init+0x2f0>)
 80109ea:	f043 0301 	orr.w	r3, r3, #1
 80109ee:	6193      	str	r3, [r2, #24]
 80109f0:	4b5b      	ldr	r3, [pc, #364]	; (8010b60 <HAL_GPIO_Init+0x2f0>)
 80109f2:	699b      	ldr	r3, [r3, #24]
 80109f4:	f003 0301 	and.w	r3, r3, #1
 80109f8:	60bb      	str	r3, [r7, #8]
 80109fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80109fc:	4a59      	ldr	r2, [pc, #356]	; (8010b64 <HAL_GPIO_Init+0x2f4>)
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	089b      	lsrs	r3, r3, #2
 8010a02:	3302      	adds	r3, #2
 8010a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8010a0a:	697b      	ldr	r3, [r7, #20]
 8010a0c:	f003 0303 	and.w	r3, r3, #3
 8010a10:	009b      	lsls	r3, r3, #2
 8010a12:	220f      	movs	r2, #15
 8010a14:	fa02 f303 	lsl.w	r3, r2, r3
 8010a18:	43db      	mvns	r3, r3
 8010a1a:	693a      	ldr	r2, [r7, #16]
 8010a1c:	4013      	ands	r3, r2
 8010a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8010a26:	d025      	beq.n	8010a74 <HAL_GPIO_Init+0x204>
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	4a4f      	ldr	r2, [pc, #316]	; (8010b68 <HAL_GPIO_Init+0x2f8>)
 8010a2c:	4293      	cmp	r3, r2
 8010a2e:	d01f      	beq.n	8010a70 <HAL_GPIO_Init+0x200>
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	4a4e      	ldr	r2, [pc, #312]	; (8010b6c <HAL_GPIO_Init+0x2fc>)
 8010a34:	4293      	cmp	r3, r2
 8010a36:	d019      	beq.n	8010a6c <HAL_GPIO_Init+0x1fc>
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	4a4d      	ldr	r2, [pc, #308]	; (8010b70 <HAL_GPIO_Init+0x300>)
 8010a3c:	4293      	cmp	r3, r2
 8010a3e:	d013      	beq.n	8010a68 <HAL_GPIO_Init+0x1f8>
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	4a4c      	ldr	r2, [pc, #304]	; (8010b74 <HAL_GPIO_Init+0x304>)
 8010a44:	4293      	cmp	r3, r2
 8010a46:	d00d      	beq.n	8010a64 <HAL_GPIO_Init+0x1f4>
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	4a4b      	ldr	r2, [pc, #300]	; (8010b78 <HAL_GPIO_Init+0x308>)
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d007      	beq.n	8010a60 <HAL_GPIO_Init+0x1f0>
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	4a4a      	ldr	r2, [pc, #296]	; (8010b7c <HAL_GPIO_Init+0x30c>)
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d101      	bne.n	8010a5c <HAL_GPIO_Init+0x1ec>
 8010a58:	2306      	movs	r3, #6
 8010a5a:	e00c      	b.n	8010a76 <HAL_GPIO_Init+0x206>
 8010a5c:	2307      	movs	r3, #7
 8010a5e:	e00a      	b.n	8010a76 <HAL_GPIO_Init+0x206>
 8010a60:	2305      	movs	r3, #5
 8010a62:	e008      	b.n	8010a76 <HAL_GPIO_Init+0x206>
 8010a64:	2304      	movs	r3, #4
 8010a66:	e006      	b.n	8010a76 <HAL_GPIO_Init+0x206>
 8010a68:	2303      	movs	r3, #3
 8010a6a:	e004      	b.n	8010a76 <HAL_GPIO_Init+0x206>
 8010a6c:	2302      	movs	r3, #2
 8010a6e:	e002      	b.n	8010a76 <HAL_GPIO_Init+0x206>
 8010a70:	2301      	movs	r3, #1
 8010a72:	e000      	b.n	8010a76 <HAL_GPIO_Init+0x206>
 8010a74:	2300      	movs	r3, #0
 8010a76:	697a      	ldr	r2, [r7, #20]
 8010a78:	f002 0203 	and.w	r2, r2, #3
 8010a7c:	0092      	lsls	r2, r2, #2
 8010a7e:	4093      	lsls	r3, r2
 8010a80:	693a      	ldr	r2, [r7, #16]
 8010a82:	4313      	orrs	r3, r2
 8010a84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8010a86:	4937      	ldr	r1, [pc, #220]	; (8010b64 <HAL_GPIO_Init+0x2f4>)
 8010a88:	697b      	ldr	r3, [r7, #20]
 8010a8a:	089b      	lsrs	r3, r3, #2
 8010a8c:	3302      	adds	r3, #2
 8010a8e:	693a      	ldr	r2, [r7, #16]
 8010a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010a94:	4b3a      	ldr	r3, [pc, #232]	; (8010b80 <HAL_GPIO_Init+0x310>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	43db      	mvns	r3, r3
 8010a9e:	693a      	ldr	r2, [r7, #16]
 8010aa0:	4013      	ands	r3, r2
 8010aa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	685b      	ldr	r3, [r3, #4]
 8010aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d003      	beq.n	8010ab8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8010ab0:	693a      	ldr	r2, [r7, #16]
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	4313      	orrs	r3, r2
 8010ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8010ab8:	4a31      	ldr	r2, [pc, #196]	; (8010b80 <HAL_GPIO_Init+0x310>)
 8010aba:	693b      	ldr	r3, [r7, #16]
 8010abc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8010abe:	4b30      	ldr	r3, [pc, #192]	; (8010b80 <HAL_GPIO_Init+0x310>)
 8010ac0:	685b      	ldr	r3, [r3, #4]
 8010ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	43db      	mvns	r3, r3
 8010ac8:	693a      	ldr	r2, [r7, #16]
 8010aca:	4013      	ands	r3, r2
 8010acc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	685b      	ldr	r3, [r3, #4]
 8010ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d003      	beq.n	8010ae2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8010ada:	693a      	ldr	r2, [r7, #16]
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	4313      	orrs	r3, r2
 8010ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8010ae2:	4a27      	ldr	r2, [pc, #156]	; (8010b80 <HAL_GPIO_Init+0x310>)
 8010ae4:	693b      	ldr	r3, [r7, #16]
 8010ae6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010ae8:	4b25      	ldr	r3, [pc, #148]	; (8010b80 <HAL_GPIO_Init+0x310>)
 8010aea:	689b      	ldr	r3, [r3, #8]
 8010aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	43db      	mvns	r3, r3
 8010af2:	693a      	ldr	r2, [r7, #16]
 8010af4:	4013      	ands	r3, r2
 8010af6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	685b      	ldr	r3, [r3, #4]
 8010afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d003      	beq.n	8010b0c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8010b04:	693a      	ldr	r2, [r7, #16]
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	4313      	orrs	r3, r2
 8010b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8010b0c:	4a1c      	ldr	r2, [pc, #112]	; (8010b80 <HAL_GPIO_Init+0x310>)
 8010b0e:	693b      	ldr	r3, [r7, #16]
 8010b10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010b12:	4b1b      	ldr	r3, [pc, #108]	; (8010b80 <HAL_GPIO_Init+0x310>)
 8010b14:	68db      	ldr	r3, [r3, #12]
 8010b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	43db      	mvns	r3, r3
 8010b1c:	693a      	ldr	r2, [r7, #16]
 8010b1e:	4013      	ands	r3, r2
 8010b20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	685b      	ldr	r3, [r3, #4]
 8010b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d003      	beq.n	8010b36 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8010b2e:	693a      	ldr	r2, [r7, #16]
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	4313      	orrs	r3, r2
 8010b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8010b36:	4a12      	ldr	r2, [pc, #72]	; (8010b80 <HAL_GPIO_Init+0x310>)
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8010b3c:	697b      	ldr	r3, [r7, #20]
 8010b3e:	3301      	adds	r3, #1
 8010b40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	681a      	ldr	r2, [r3, #0]
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	fa22 f303 	lsr.w	r3, r2, r3
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	f47f ae97 	bne.w	8010880 <HAL_GPIO_Init+0x10>
  }
}
 8010b52:	bf00      	nop
 8010b54:	bf00      	nop
 8010b56:	371c      	adds	r7, #28
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5e:	4770      	bx	lr
 8010b60:	40021000 	.word	0x40021000
 8010b64:	40010000 	.word	0x40010000
 8010b68:	48000400 	.word	0x48000400
 8010b6c:	48000800 	.word	0x48000800
 8010b70:	48000c00 	.word	0x48000c00
 8010b74:	48001000 	.word	0x48001000
 8010b78:	48001400 	.word	0x48001400
 8010b7c:	48001800 	.word	0x48001800
 8010b80:	40010400 	.word	0x40010400

08010b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010b84:	b480      	push	{r7}
 8010b86:	b083      	sub	sp, #12
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
 8010b8c:	460b      	mov	r3, r1
 8010b8e:	807b      	strh	r3, [r7, #2]
 8010b90:	4613      	mov	r3, r2
 8010b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010b94:	787b      	ldrb	r3, [r7, #1]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d003      	beq.n	8010ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8010b9a:	887a      	ldrh	r2, [r7, #2]
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8010ba0:	e002      	b.n	8010ba8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8010ba2:	887a      	ldrh	r2, [r7, #2]
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010ba8:	bf00      	nop
 8010baa:	370c      	adds	r7, #12
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr

08010bb4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b085      	sub	sp, #20
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	460b      	mov	r3, r1
 8010bbe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	695b      	ldr	r3, [r3, #20]
 8010bc4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8010bc6:	887a      	ldrh	r2, [r7, #2]
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	4013      	ands	r3, r2
 8010bcc:	041a      	lsls	r2, r3, #16
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	43d9      	mvns	r1, r3
 8010bd2:	887b      	ldrh	r3, [r7, #2]
 8010bd4:	400b      	ands	r3, r1
 8010bd6:	431a      	orrs	r2, r3
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	619a      	str	r2, [r3, #24]
}
 8010bdc:	bf00      	nop
 8010bde:	3714      	adds	r7, #20
 8010be0:	46bd      	mov	sp, r7
 8010be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be6:	4770      	bx	lr

08010be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8010bee:	af00      	add	r7, sp, #0
 8010bf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8010bf4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8010bf8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010bfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8010bfe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d102      	bne.n	8010c0e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8010c08:	2301      	movs	r3, #1
 8010c0a:	f001 b83a 	b.w	8011c82 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010c0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8010c12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	f003 0301 	and.w	r3, r3, #1
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	f000 816f 	beq.w	8010f02 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8010c24:	4bb5      	ldr	r3, [pc, #724]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010c26:	685b      	ldr	r3, [r3, #4]
 8010c28:	f003 030c 	and.w	r3, r3, #12
 8010c2c:	2b04      	cmp	r3, #4
 8010c2e:	d00c      	beq.n	8010c4a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8010c30:	4bb2      	ldr	r3, [pc, #712]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010c32:	685b      	ldr	r3, [r3, #4]
 8010c34:	f003 030c 	and.w	r3, r3, #12
 8010c38:	2b08      	cmp	r3, #8
 8010c3a:	d15c      	bne.n	8010cf6 <HAL_RCC_OscConfig+0x10e>
 8010c3c:	4baf      	ldr	r3, [pc, #700]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010c3e:	685b      	ldr	r3, [r3, #4]
 8010c40:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8010c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c48:	d155      	bne.n	8010cf6 <HAL_RCC_OscConfig+0x10e>
 8010c4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010c4e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010c52:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8010c56:	fa93 f3a3 	rbit	r3, r3
 8010c5a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8010c5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010c62:	fab3 f383 	clz	r3, r3
 8010c66:	b2db      	uxtb	r3, r3
 8010c68:	095b      	lsrs	r3, r3, #5
 8010c6a:	b2db      	uxtb	r3, r3
 8010c6c:	f043 0301 	orr.w	r3, r3, #1
 8010c70:	b2db      	uxtb	r3, r3
 8010c72:	2b01      	cmp	r3, #1
 8010c74:	d102      	bne.n	8010c7c <HAL_RCC_OscConfig+0x94>
 8010c76:	4ba1      	ldr	r3, [pc, #644]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	e015      	b.n	8010ca8 <HAL_RCC_OscConfig+0xc0>
 8010c7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010c80:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010c84:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8010c88:	fa93 f3a3 	rbit	r3, r3
 8010c8c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8010c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010c94:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8010c98:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8010c9c:	fa93 f3a3 	rbit	r3, r3
 8010ca0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8010ca4:	4b95      	ldr	r3, [pc, #596]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ca8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010cac:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8010cb0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8010cb4:	fa92 f2a2 	rbit	r2, r2
 8010cb8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8010cbc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8010cc0:	fab2 f282 	clz	r2, r2
 8010cc4:	b2d2      	uxtb	r2, r2
 8010cc6:	f042 0220 	orr.w	r2, r2, #32
 8010cca:	b2d2      	uxtb	r2, r2
 8010ccc:	f002 021f 	and.w	r2, r2, #31
 8010cd0:	2101      	movs	r1, #1
 8010cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8010cd6:	4013      	ands	r3, r2
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	f000 8111 	beq.w	8010f00 <HAL_RCC_OscConfig+0x318>
 8010cde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8010ce2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	685b      	ldr	r3, [r3, #4]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	f040 8108 	bne.w	8010f00 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	f000 bfc6 	b.w	8011c82 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010cf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8010cfa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	685b      	ldr	r3, [r3, #4]
 8010d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d06:	d106      	bne.n	8010d16 <HAL_RCC_OscConfig+0x12e>
 8010d08:	4b7c      	ldr	r3, [pc, #496]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	4a7b      	ldr	r2, [pc, #492]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010d12:	6013      	str	r3, [r2, #0]
 8010d14:	e036      	b.n	8010d84 <HAL_RCC_OscConfig+0x19c>
 8010d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8010d1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	685b      	ldr	r3, [r3, #4]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d10c      	bne.n	8010d40 <HAL_RCC_OscConfig+0x158>
 8010d26:	4b75      	ldr	r3, [pc, #468]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	4a74      	ldr	r2, [pc, #464]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010d30:	6013      	str	r3, [r2, #0]
 8010d32:	4b72      	ldr	r3, [pc, #456]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	4a71      	ldr	r2, [pc, #452]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010d3c:	6013      	str	r3, [r2, #0]
 8010d3e:	e021      	b.n	8010d84 <HAL_RCC_OscConfig+0x19c>
 8010d40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8010d44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	685b      	ldr	r3, [r3, #4]
 8010d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010d50:	d10c      	bne.n	8010d6c <HAL_RCC_OscConfig+0x184>
 8010d52:	4b6a      	ldr	r3, [pc, #424]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	4a69      	ldr	r2, [pc, #420]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010d5c:	6013      	str	r3, [r2, #0]
 8010d5e:	4b67      	ldr	r3, [pc, #412]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	4a66      	ldr	r2, [pc, #408]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010d68:	6013      	str	r3, [r2, #0]
 8010d6a:	e00b      	b.n	8010d84 <HAL_RCC_OscConfig+0x19c>
 8010d6c:	4b63      	ldr	r3, [pc, #396]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	4a62      	ldr	r2, [pc, #392]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010d76:	6013      	str	r3, [r2, #0]
 8010d78:	4b60      	ldr	r3, [pc, #384]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	4a5f      	ldr	r2, [pc, #380]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010d82:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8010d88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	685b      	ldr	r3, [r3, #4]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d059      	beq.n	8010e48 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010d94:	f7ff fc56 	bl	8010644 <HAL_GetTick>
 8010d98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010d9c:	e00a      	b.n	8010db4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010d9e:	f7ff fc51 	bl	8010644 <HAL_GetTick>
 8010da2:	4602      	mov	r2, r0
 8010da4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8010da8:	1ad3      	subs	r3, r2, r3
 8010daa:	2b64      	cmp	r3, #100	; 0x64
 8010dac:	d902      	bls.n	8010db4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8010dae:	2303      	movs	r3, #3
 8010db0:	f000 bf67 	b.w	8011c82 <HAL_RCC_OscConfig+0x109a>
 8010db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010db8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010dbc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8010dc0:	fa93 f3a3 	rbit	r3, r3
 8010dc4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8010dc8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010dcc:	fab3 f383 	clz	r3, r3
 8010dd0:	b2db      	uxtb	r3, r3
 8010dd2:	095b      	lsrs	r3, r3, #5
 8010dd4:	b2db      	uxtb	r3, r3
 8010dd6:	f043 0301 	orr.w	r3, r3, #1
 8010dda:	b2db      	uxtb	r3, r3
 8010ddc:	2b01      	cmp	r3, #1
 8010dde:	d102      	bne.n	8010de6 <HAL_RCC_OscConfig+0x1fe>
 8010de0:	4b46      	ldr	r3, [pc, #280]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	e015      	b.n	8010e12 <HAL_RCC_OscConfig+0x22a>
 8010de6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010dea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010dee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8010df2:	fa93 f3a3 	rbit	r3, r3
 8010df6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8010dfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010dfe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8010e02:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8010e06:	fa93 f3a3 	rbit	r3, r3
 8010e0a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8010e0e:	4b3b      	ldr	r3, [pc, #236]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010e16:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8010e1a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8010e1e:	fa92 f2a2 	rbit	r2, r2
 8010e22:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8010e26:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8010e2a:	fab2 f282 	clz	r2, r2
 8010e2e:	b2d2      	uxtb	r2, r2
 8010e30:	f042 0220 	orr.w	r2, r2, #32
 8010e34:	b2d2      	uxtb	r2, r2
 8010e36:	f002 021f 	and.w	r2, r2, #31
 8010e3a:	2101      	movs	r1, #1
 8010e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8010e40:	4013      	ands	r3, r2
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d0ab      	beq.n	8010d9e <HAL_RCC_OscConfig+0x1b6>
 8010e46:	e05c      	b.n	8010f02 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010e48:	f7ff fbfc 	bl	8010644 <HAL_GetTick>
 8010e4c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010e50:	e00a      	b.n	8010e68 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010e52:	f7ff fbf7 	bl	8010644 <HAL_GetTick>
 8010e56:	4602      	mov	r2, r0
 8010e58:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8010e5c:	1ad3      	subs	r3, r2, r3
 8010e5e:	2b64      	cmp	r3, #100	; 0x64
 8010e60:	d902      	bls.n	8010e68 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8010e62:	2303      	movs	r3, #3
 8010e64:	f000 bf0d 	b.w	8011c82 <HAL_RCC_OscConfig+0x109a>
 8010e68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010e6c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010e70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8010e74:	fa93 f3a3 	rbit	r3, r3
 8010e78:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8010e7c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010e80:	fab3 f383 	clz	r3, r3
 8010e84:	b2db      	uxtb	r3, r3
 8010e86:	095b      	lsrs	r3, r3, #5
 8010e88:	b2db      	uxtb	r3, r3
 8010e8a:	f043 0301 	orr.w	r3, r3, #1
 8010e8e:	b2db      	uxtb	r3, r3
 8010e90:	2b01      	cmp	r3, #1
 8010e92:	d102      	bne.n	8010e9a <HAL_RCC_OscConfig+0x2b2>
 8010e94:	4b19      	ldr	r3, [pc, #100]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	e015      	b.n	8010ec6 <HAL_RCC_OscConfig+0x2de>
 8010e9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010e9e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010ea2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8010ea6:	fa93 f3a3 	rbit	r3, r3
 8010eaa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8010eae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010eb2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8010eb6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8010eba:	fa93 f3a3 	rbit	r3, r3
 8010ebe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8010ec2:	4b0e      	ldr	r3, [pc, #56]	; (8010efc <HAL_RCC_OscConfig+0x314>)
 8010ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ec6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010eca:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8010ece:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8010ed2:	fa92 f2a2 	rbit	r2, r2
 8010ed6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8010eda:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8010ede:	fab2 f282 	clz	r2, r2
 8010ee2:	b2d2      	uxtb	r2, r2
 8010ee4:	f042 0220 	orr.w	r2, r2, #32
 8010ee8:	b2d2      	uxtb	r2, r2
 8010eea:	f002 021f 	and.w	r2, r2, #31
 8010eee:	2101      	movs	r1, #1
 8010ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8010ef4:	4013      	ands	r3, r2
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d1ab      	bne.n	8010e52 <HAL_RCC_OscConfig+0x26a>
 8010efa:	e002      	b.n	8010f02 <HAL_RCC_OscConfig+0x31a>
 8010efc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010f02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8010f06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	f003 0302 	and.w	r3, r3, #2
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	f000 817f 	beq.w	8011216 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8010f18:	4ba7      	ldr	r3, [pc, #668]	; (80111b8 <HAL_RCC_OscConfig+0x5d0>)
 8010f1a:	685b      	ldr	r3, [r3, #4]
 8010f1c:	f003 030c 	and.w	r3, r3, #12
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d00c      	beq.n	8010f3e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8010f24:	4ba4      	ldr	r3, [pc, #656]	; (80111b8 <HAL_RCC_OscConfig+0x5d0>)
 8010f26:	685b      	ldr	r3, [r3, #4]
 8010f28:	f003 030c 	and.w	r3, r3, #12
 8010f2c:	2b08      	cmp	r3, #8
 8010f2e:	d173      	bne.n	8011018 <HAL_RCC_OscConfig+0x430>
 8010f30:	4ba1      	ldr	r3, [pc, #644]	; (80111b8 <HAL_RCC_OscConfig+0x5d0>)
 8010f32:	685b      	ldr	r3, [r3, #4]
 8010f34:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8010f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010f3c:	d16c      	bne.n	8011018 <HAL_RCC_OscConfig+0x430>
 8010f3e:	2302      	movs	r3, #2
 8010f40:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010f44:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8010f48:	fa93 f3a3 	rbit	r3, r3
 8010f4c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8010f50:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010f54:	fab3 f383 	clz	r3, r3
 8010f58:	b2db      	uxtb	r3, r3
 8010f5a:	095b      	lsrs	r3, r3, #5
 8010f5c:	b2db      	uxtb	r3, r3
 8010f5e:	f043 0301 	orr.w	r3, r3, #1
 8010f62:	b2db      	uxtb	r3, r3
 8010f64:	2b01      	cmp	r3, #1
 8010f66:	d102      	bne.n	8010f6e <HAL_RCC_OscConfig+0x386>
 8010f68:	4b93      	ldr	r3, [pc, #588]	; (80111b8 <HAL_RCC_OscConfig+0x5d0>)
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	e013      	b.n	8010f96 <HAL_RCC_OscConfig+0x3ae>
 8010f6e:	2302      	movs	r3, #2
 8010f70:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010f74:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8010f78:	fa93 f3a3 	rbit	r3, r3
 8010f7c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8010f80:	2302      	movs	r3, #2
 8010f82:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8010f86:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8010f8a:	fa93 f3a3 	rbit	r3, r3
 8010f8e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8010f92:	4b89      	ldr	r3, [pc, #548]	; (80111b8 <HAL_RCC_OscConfig+0x5d0>)
 8010f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f96:	2202      	movs	r2, #2
 8010f98:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8010f9c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8010fa0:	fa92 f2a2 	rbit	r2, r2
 8010fa4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8010fa8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8010fac:	fab2 f282 	clz	r2, r2
 8010fb0:	b2d2      	uxtb	r2, r2
 8010fb2:	f042 0220 	orr.w	r2, r2, #32
 8010fb6:	b2d2      	uxtb	r2, r2
 8010fb8:	f002 021f 	and.w	r2, r2, #31
 8010fbc:	2101      	movs	r1, #1
 8010fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8010fc2:	4013      	ands	r3, r2
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d00a      	beq.n	8010fde <HAL_RCC_OscConfig+0x3f6>
 8010fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8010fcc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	68db      	ldr	r3, [r3, #12]
 8010fd4:	2b01      	cmp	r3, #1
 8010fd6:	d002      	beq.n	8010fde <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8010fd8:	2301      	movs	r3, #1
 8010fda:	f000 be52 	b.w	8011c82 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010fde:	4b76      	ldr	r3, [pc, #472]	; (80111b8 <HAL_RCC_OscConfig+0x5d0>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010fe6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8010fea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	691b      	ldr	r3, [r3, #16]
 8010ff2:	21f8      	movs	r1, #248	; 0xf8
 8010ff4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010ff8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8010ffc:	fa91 f1a1 	rbit	r1, r1
 8011000:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8011004:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8011008:	fab1 f181 	clz	r1, r1
 801100c:	b2c9      	uxtb	r1, r1
 801100e:	408b      	lsls	r3, r1
 8011010:	4969      	ldr	r1, [pc, #420]	; (80111b8 <HAL_RCC_OscConfig+0x5d0>)
 8011012:	4313      	orrs	r3, r2
 8011014:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011016:	e0fe      	b.n	8011216 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8011018:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801101c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	68db      	ldr	r3, [r3, #12]
 8011024:	2b00      	cmp	r3, #0
 8011026:	f000 8088 	beq.w	801113a <HAL_RCC_OscConfig+0x552>
 801102a:	2301      	movs	r3, #1
 801102c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011030:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8011034:	fa93 f3a3 	rbit	r3, r3
 8011038:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 801103c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011040:	fab3 f383 	clz	r3, r3
 8011044:	b2db      	uxtb	r3, r3
 8011046:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 801104a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 801104e:	009b      	lsls	r3, r3, #2
 8011050:	461a      	mov	r2, r3
 8011052:	2301      	movs	r3, #1
 8011054:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011056:	f7ff faf5 	bl	8010644 <HAL_GetTick>
 801105a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801105e:	e00a      	b.n	8011076 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011060:	f7ff faf0 	bl	8010644 <HAL_GetTick>
 8011064:	4602      	mov	r2, r0
 8011066:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801106a:	1ad3      	subs	r3, r2, r3
 801106c:	2b02      	cmp	r3, #2
 801106e:	d902      	bls.n	8011076 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8011070:	2303      	movs	r3, #3
 8011072:	f000 be06 	b.w	8011c82 <HAL_RCC_OscConfig+0x109a>
 8011076:	2302      	movs	r3, #2
 8011078:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801107c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8011080:	fa93 f3a3 	rbit	r3, r3
 8011084:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8011088:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801108c:	fab3 f383 	clz	r3, r3
 8011090:	b2db      	uxtb	r3, r3
 8011092:	095b      	lsrs	r3, r3, #5
 8011094:	b2db      	uxtb	r3, r3
 8011096:	f043 0301 	orr.w	r3, r3, #1
 801109a:	b2db      	uxtb	r3, r3
 801109c:	2b01      	cmp	r3, #1
 801109e:	d102      	bne.n	80110a6 <HAL_RCC_OscConfig+0x4be>
 80110a0:	4b45      	ldr	r3, [pc, #276]	; (80111b8 <HAL_RCC_OscConfig+0x5d0>)
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	e013      	b.n	80110ce <HAL_RCC_OscConfig+0x4e6>
 80110a6:	2302      	movs	r3, #2
 80110a8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80110ac:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80110b0:	fa93 f3a3 	rbit	r3, r3
 80110b4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80110b8:	2302      	movs	r3, #2
 80110ba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80110be:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80110c2:	fa93 f3a3 	rbit	r3, r3
 80110c6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80110ca:	4b3b      	ldr	r3, [pc, #236]	; (80111b8 <HAL_RCC_OscConfig+0x5d0>)
 80110cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110ce:	2202      	movs	r2, #2
 80110d0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80110d4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80110d8:	fa92 f2a2 	rbit	r2, r2
 80110dc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80110e0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80110e4:	fab2 f282 	clz	r2, r2
 80110e8:	b2d2      	uxtb	r2, r2
 80110ea:	f042 0220 	orr.w	r2, r2, #32
 80110ee:	b2d2      	uxtb	r2, r2
 80110f0:	f002 021f 	and.w	r2, r2, #31
 80110f4:	2101      	movs	r1, #1
 80110f6:	fa01 f202 	lsl.w	r2, r1, r2
 80110fa:	4013      	ands	r3, r2
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d0af      	beq.n	8011060 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011100:	4b2d      	ldr	r3, [pc, #180]	; (80111b8 <HAL_RCC_OscConfig+0x5d0>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011108:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801110c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	691b      	ldr	r3, [r3, #16]
 8011114:	21f8      	movs	r1, #248	; 0xf8
 8011116:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801111a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 801111e:	fa91 f1a1 	rbit	r1, r1
 8011122:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8011126:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 801112a:	fab1 f181 	clz	r1, r1
 801112e:	b2c9      	uxtb	r1, r1
 8011130:	408b      	lsls	r3, r1
 8011132:	4921      	ldr	r1, [pc, #132]	; (80111b8 <HAL_RCC_OscConfig+0x5d0>)
 8011134:	4313      	orrs	r3, r2
 8011136:	600b      	str	r3, [r1, #0]
 8011138:	e06d      	b.n	8011216 <HAL_RCC_OscConfig+0x62e>
 801113a:	2301      	movs	r3, #1
 801113c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011140:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8011144:	fa93 f3a3 	rbit	r3, r3
 8011148:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 801114c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011150:	fab3 f383 	clz	r3, r3
 8011154:	b2db      	uxtb	r3, r3
 8011156:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 801115a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 801115e:	009b      	lsls	r3, r3, #2
 8011160:	461a      	mov	r2, r3
 8011162:	2300      	movs	r3, #0
 8011164:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011166:	f7ff fa6d 	bl	8010644 <HAL_GetTick>
 801116a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801116e:	e00a      	b.n	8011186 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011170:	f7ff fa68 	bl	8010644 <HAL_GetTick>
 8011174:	4602      	mov	r2, r0
 8011176:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801117a:	1ad3      	subs	r3, r2, r3
 801117c:	2b02      	cmp	r3, #2
 801117e:	d902      	bls.n	8011186 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8011180:	2303      	movs	r3, #3
 8011182:	f000 bd7e 	b.w	8011c82 <HAL_RCC_OscConfig+0x109a>
 8011186:	2302      	movs	r3, #2
 8011188:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801118c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011190:	fa93 f3a3 	rbit	r3, r3
 8011194:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8011198:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801119c:	fab3 f383 	clz	r3, r3
 80111a0:	b2db      	uxtb	r3, r3
 80111a2:	095b      	lsrs	r3, r3, #5
 80111a4:	b2db      	uxtb	r3, r3
 80111a6:	f043 0301 	orr.w	r3, r3, #1
 80111aa:	b2db      	uxtb	r3, r3
 80111ac:	2b01      	cmp	r3, #1
 80111ae:	d105      	bne.n	80111bc <HAL_RCC_OscConfig+0x5d4>
 80111b0:	4b01      	ldr	r3, [pc, #4]	; (80111b8 <HAL_RCC_OscConfig+0x5d0>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	e016      	b.n	80111e4 <HAL_RCC_OscConfig+0x5fc>
 80111b6:	bf00      	nop
 80111b8:	40021000 	.word	0x40021000
 80111bc:	2302      	movs	r3, #2
 80111be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80111c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80111c6:	fa93 f3a3 	rbit	r3, r3
 80111ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80111ce:	2302      	movs	r3, #2
 80111d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80111d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80111d8:	fa93 f3a3 	rbit	r3, r3
 80111dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80111e0:	4bbf      	ldr	r3, [pc, #764]	; (80114e0 <HAL_RCC_OscConfig+0x8f8>)
 80111e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111e4:	2202      	movs	r2, #2
 80111e6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80111ea:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80111ee:	fa92 f2a2 	rbit	r2, r2
 80111f2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80111f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80111fa:	fab2 f282 	clz	r2, r2
 80111fe:	b2d2      	uxtb	r2, r2
 8011200:	f042 0220 	orr.w	r2, r2, #32
 8011204:	b2d2      	uxtb	r2, r2
 8011206:	f002 021f 	and.w	r2, r2, #31
 801120a:	2101      	movs	r1, #1
 801120c:	fa01 f202 	lsl.w	r2, r1, r2
 8011210:	4013      	ands	r3, r2
 8011212:	2b00      	cmp	r3, #0
 8011214:	d1ac      	bne.n	8011170 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011216:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801121a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	f003 0308 	and.w	r3, r3, #8
 8011226:	2b00      	cmp	r3, #0
 8011228:	f000 8113 	beq.w	8011452 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801122c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011230:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	695b      	ldr	r3, [r3, #20]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d07c      	beq.n	8011336 <HAL_RCC_OscConfig+0x74e>
 801123c:	2301      	movs	r3, #1
 801123e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011246:	fa93 f3a3 	rbit	r3, r3
 801124a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 801124e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011252:	fab3 f383 	clz	r3, r3
 8011256:	b2db      	uxtb	r3, r3
 8011258:	461a      	mov	r2, r3
 801125a:	4ba2      	ldr	r3, [pc, #648]	; (80114e4 <HAL_RCC_OscConfig+0x8fc>)
 801125c:	4413      	add	r3, r2
 801125e:	009b      	lsls	r3, r3, #2
 8011260:	461a      	mov	r2, r3
 8011262:	2301      	movs	r3, #1
 8011264:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011266:	f7ff f9ed 	bl	8010644 <HAL_GetTick>
 801126a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801126e:	e00a      	b.n	8011286 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011270:	f7ff f9e8 	bl	8010644 <HAL_GetTick>
 8011274:	4602      	mov	r2, r0
 8011276:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801127a:	1ad3      	subs	r3, r2, r3
 801127c:	2b02      	cmp	r3, #2
 801127e:	d902      	bls.n	8011286 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8011280:	2303      	movs	r3, #3
 8011282:	f000 bcfe 	b.w	8011c82 <HAL_RCC_OscConfig+0x109a>
 8011286:	2302      	movs	r3, #2
 8011288:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801128c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011290:	fa93 f2a3 	rbit	r2, r3
 8011294:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011298:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801129c:	601a      	str	r2, [r3, #0]
 801129e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80112a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112a6:	2202      	movs	r2, #2
 80112a8:	601a      	str	r2, [r3, #0]
 80112aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80112ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	fa93 f2a3 	rbit	r2, r3
 80112b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80112bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112c0:	601a      	str	r2, [r3, #0]
 80112c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80112c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80112ca:	2202      	movs	r2, #2
 80112cc:	601a      	str	r2, [r3, #0]
 80112ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80112d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	fa93 f2a3 	rbit	r2, r3
 80112dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80112e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80112e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80112e6:	4b7e      	ldr	r3, [pc, #504]	; (80114e0 <HAL_RCC_OscConfig+0x8f8>)
 80112e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80112ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80112ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80112f2:	2102      	movs	r1, #2
 80112f4:	6019      	str	r1, [r3, #0]
 80112f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80112fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	fa93 f1a3 	rbit	r1, r3
 8011304:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011308:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801130c:	6019      	str	r1, [r3, #0]
  return result;
 801130e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011312:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	fab3 f383 	clz	r3, r3
 801131c:	b2db      	uxtb	r3, r3
 801131e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8011322:	b2db      	uxtb	r3, r3
 8011324:	f003 031f 	and.w	r3, r3, #31
 8011328:	2101      	movs	r1, #1
 801132a:	fa01 f303 	lsl.w	r3, r1, r3
 801132e:	4013      	ands	r3, r2
 8011330:	2b00      	cmp	r3, #0
 8011332:	d09d      	beq.n	8011270 <HAL_RCC_OscConfig+0x688>
 8011334:	e08d      	b.n	8011452 <HAL_RCC_OscConfig+0x86a>
 8011336:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801133a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801133e:	2201      	movs	r2, #1
 8011340:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011342:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011346:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	fa93 f2a3 	rbit	r2, r3
 8011350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011354:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8011358:	601a      	str	r2, [r3, #0]
  return result;
 801135a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801135e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8011362:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011364:	fab3 f383 	clz	r3, r3
 8011368:	b2db      	uxtb	r3, r3
 801136a:	461a      	mov	r2, r3
 801136c:	4b5d      	ldr	r3, [pc, #372]	; (80114e4 <HAL_RCC_OscConfig+0x8fc>)
 801136e:	4413      	add	r3, r2
 8011370:	009b      	lsls	r3, r3, #2
 8011372:	461a      	mov	r2, r3
 8011374:	2300      	movs	r3, #0
 8011376:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011378:	f7ff f964 	bl	8010644 <HAL_GetTick>
 801137c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011380:	e00a      	b.n	8011398 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011382:	f7ff f95f 	bl	8010644 <HAL_GetTick>
 8011386:	4602      	mov	r2, r0
 8011388:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801138c:	1ad3      	subs	r3, r2, r3
 801138e:	2b02      	cmp	r3, #2
 8011390:	d902      	bls.n	8011398 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8011392:	2303      	movs	r3, #3
 8011394:	f000 bc75 	b.w	8011c82 <HAL_RCC_OscConfig+0x109a>
 8011398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801139c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80113a0:	2202      	movs	r2, #2
 80113a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80113a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80113a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	fa93 f2a3 	rbit	r2, r3
 80113b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80113b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80113ba:	601a      	str	r2, [r3, #0]
 80113bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80113c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80113c4:	2202      	movs	r2, #2
 80113c6:	601a      	str	r2, [r3, #0]
 80113c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80113cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	fa93 f2a3 	rbit	r2, r3
 80113d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80113da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80113de:	601a      	str	r2, [r3, #0]
 80113e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80113e4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80113e8:	2202      	movs	r2, #2
 80113ea:	601a      	str	r2, [r3, #0]
 80113ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80113f0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	fa93 f2a3 	rbit	r2, r3
 80113fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80113fe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8011402:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011404:	4b36      	ldr	r3, [pc, #216]	; (80114e0 <HAL_RCC_OscConfig+0x8f8>)
 8011406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801140c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8011410:	2102      	movs	r1, #2
 8011412:	6019      	str	r1, [r3, #0]
 8011414:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011418:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	fa93 f1a3 	rbit	r1, r3
 8011422:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011426:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801142a:	6019      	str	r1, [r3, #0]
  return result;
 801142c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011430:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	fab3 f383 	clz	r3, r3
 801143a:	b2db      	uxtb	r3, r3
 801143c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8011440:	b2db      	uxtb	r3, r3
 8011442:	f003 031f 	and.w	r3, r3, #31
 8011446:	2101      	movs	r1, #1
 8011448:	fa01 f303 	lsl.w	r3, r1, r3
 801144c:	4013      	ands	r3, r2
 801144e:	2b00      	cmp	r3, #0
 8011450:	d197      	bne.n	8011382 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011452:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011456:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	f003 0304 	and.w	r3, r3, #4
 8011462:	2b00      	cmp	r3, #0
 8011464:	f000 81a5 	beq.w	80117b2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011468:	2300      	movs	r3, #0
 801146a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801146e:	4b1c      	ldr	r3, [pc, #112]	; (80114e0 <HAL_RCC_OscConfig+0x8f8>)
 8011470:	69db      	ldr	r3, [r3, #28]
 8011472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011476:	2b00      	cmp	r3, #0
 8011478:	d116      	bne.n	80114a8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801147a:	4b19      	ldr	r3, [pc, #100]	; (80114e0 <HAL_RCC_OscConfig+0x8f8>)
 801147c:	69db      	ldr	r3, [r3, #28]
 801147e:	4a18      	ldr	r2, [pc, #96]	; (80114e0 <HAL_RCC_OscConfig+0x8f8>)
 8011480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011484:	61d3      	str	r3, [r2, #28]
 8011486:	4b16      	ldr	r3, [pc, #88]	; (80114e0 <HAL_RCC_OscConfig+0x8f8>)
 8011488:	69db      	ldr	r3, [r3, #28]
 801148a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 801148e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011492:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8011496:	601a      	str	r2, [r3, #0]
 8011498:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801149c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80114a0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80114a2:	2301      	movs	r3, #1
 80114a4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80114a8:	4b0f      	ldr	r3, [pc, #60]	; (80114e8 <HAL_RCC_OscConfig+0x900>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d121      	bne.n	80114f8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80114b4:	4b0c      	ldr	r3, [pc, #48]	; (80114e8 <HAL_RCC_OscConfig+0x900>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	4a0b      	ldr	r2, [pc, #44]	; (80114e8 <HAL_RCC_OscConfig+0x900>)
 80114ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80114be:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80114c0:	f7ff f8c0 	bl	8010644 <HAL_GetTick>
 80114c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80114c8:	e010      	b.n	80114ec <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80114ca:	f7ff f8bb 	bl	8010644 <HAL_GetTick>
 80114ce:	4602      	mov	r2, r0
 80114d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80114d4:	1ad3      	subs	r3, r2, r3
 80114d6:	2b64      	cmp	r3, #100	; 0x64
 80114d8:	d908      	bls.n	80114ec <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80114da:	2303      	movs	r3, #3
 80114dc:	e3d1      	b.n	8011c82 <HAL_RCC_OscConfig+0x109a>
 80114de:	bf00      	nop
 80114e0:	40021000 	.word	0x40021000
 80114e4:	10908120 	.word	0x10908120
 80114e8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80114ec:	4b8d      	ldr	r3, [pc, #564]	; (8011724 <HAL_RCC_OscConfig+0xb3c>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d0e8      	beq.n	80114ca <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80114f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80114fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	689b      	ldr	r3, [r3, #8]
 8011504:	2b01      	cmp	r3, #1
 8011506:	d106      	bne.n	8011516 <HAL_RCC_OscConfig+0x92e>
 8011508:	4b87      	ldr	r3, [pc, #540]	; (8011728 <HAL_RCC_OscConfig+0xb40>)
 801150a:	6a1b      	ldr	r3, [r3, #32]
 801150c:	4a86      	ldr	r2, [pc, #536]	; (8011728 <HAL_RCC_OscConfig+0xb40>)
 801150e:	f043 0301 	orr.w	r3, r3, #1
 8011512:	6213      	str	r3, [r2, #32]
 8011514:	e035      	b.n	8011582 <HAL_RCC_OscConfig+0x99a>
 8011516:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801151a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	689b      	ldr	r3, [r3, #8]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d10c      	bne.n	8011540 <HAL_RCC_OscConfig+0x958>
 8011526:	4b80      	ldr	r3, [pc, #512]	; (8011728 <HAL_RCC_OscConfig+0xb40>)
 8011528:	6a1b      	ldr	r3, [r3, #32]
 801152a:	4a7f      	ldr	r2, [pc, #508]	; (8011728 <HAL_RCC_OscConfig+0xb40>)
 801152c:	f023 0301 	bic.w	r3, r3, #1
 8011530:	6213      	str	r3, [r2, #32]
 8011532:	4b7d      	ldr	r3, [pc, #500]	; (8011728 <HAL_RCC_OscConfig+0xb40>)
 8011534:	6a1b      	ldr	r3, [r3, #32]
 8011536:	4a7c      	ldr	r2, [pc, #496]	; (8011728 <HAL_RCC_OscConfig+0xb40>)
 8011538:	f023 0304 	bic.w	r3, r3, #4
 801153c:	6213      	str	r3, [r2, #32]
 801153e:	e020      	b.n	8011582 <HAL_RCC_OscConfig+0x99a>
 8011540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011544:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	689b      	ldr	r3, [r3, #8]
 801154c:	2b05      	cmp	r3, #5
 801154e:	d10c      	bne.n	801156a <HAL_RCC_OscConfig+0x982>
 8011550:	4b75      	ldr	r3, [pc, #468]	; (8011728 <HAL_RCC_OscConfig+0xb40>)
 8011552:	6a1b      	ldr	r3, [r3, #32]
 8011554:	4a74      	ldr	r2, [pc, #464]	; (8011728 <HAL_RCC_OscConfig+0xb40>)
 8011556:	f043 0304 	orr.w	r3, r3, #4
 801155a:	6213      	str	r3, [r2, #32]
 801155c:	4b72      	ldr	r3, [pc, #456]	; (8011728 <HAL_RCC_OscConfig+0xb40>)
 801155e:	6a1b      	ldr	r3, [r3, #32]
 8011560:	4a71      	ldr	r2, [pc, #452]	; (8011728 <HAL_RCC_OscConfig+0xb40>)
 8011562:	f043 0301 	orr.w	r3, r3, #1
 8011566:	6213      	str	r3, [r2, #32]
 8011568:	e00b      	b.n	8011582 <HAL_RCC_OscConfig+0x99a>
 801156a:	4b6f      	ldr	r3, [pc, #444]	; (8011728 <HAL_RCC_OscConfig+0xb40>)
 801156c:	6a1b      	ldr	r3, [r3, #32]
 801156e:	4a6e      	ldr	r2, [pc, #440]	; (8011728 <HAL_RCC_OscConfig+0xb40>)
 8011570:	f023 0301 	bic.w	r3, r3, #1
 8011574:	6213      	str	r3, [r2, #32]
 8011576:	4b6c      	ldr	r3, [pc, #432]	; (8011728 <HAL_RCC_OscConfig+0xb40>)
 8011578:	6a1b      	ldr	r3, [r3, #32]
 801157a:	4a6b      	ldr	r2, [pc, #428]	; (8011728 <HAL_RCC_OscConfig+0xb40>)
 801157c:	f023 0304 	bic.w	r3, r3, #4
 8011580:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011582:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011586:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	689b      	ldr	r3, [r3, #8]
 801158e:	2b00      	cmp	r3, #0
 8011590:	f000 8081 	beq.w	8011696 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011594:	f7ff f856 	bl	8010644 <HAL_GetTick>
 8011598:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801159c:	e00b      	b.n	80115b6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801159e:	f7ff f851 	bl	8010644 <HAL_GetTick>
 80115a2:	4602      	mov	r2, r0
 80115a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80115a8:	1ad3      	subs	r3, r2, r3
 80115aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80115ae:	4293      	cmp	r3, r2
 80115b0:	d901      	bls.n	80115b6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80115b2:	2303      	movs	r3, #3
 80115b4:	e365      	b.n	8011c82 <HAL_RCC_OscConfig+0x109a>
 80115b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80115ba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80115be:	2202      	movs	r2, #2
 80115c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80115c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80115c6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	fa93 f2a3 	rbit	r2, r3
 80115d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80115d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80115d8:	601a      	str	r2, [r3, #0]
 80115da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80115de:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80115e2:	2202      	movs	r2, #2
 80115e4:	601a      	str	r2, [r3, #0]
 80115e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80115ea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	fa93 f2a3 	rbit	r2, r3
 80115f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80115f8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80115fc:	601a      	str	r2, [r3, #0]
  return result;
 80115fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011602:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8011606:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011608:	fab3 f383 	clz	r3, r3
 801160c:	b2db      	uxtb	r3, r3
 801160e:	095b      	lsrs	r3, r3, #5
 8011610:	b2db      	uxtb	r3, r3
 8011612:	f043 0302 	orr.w	r3, r3, #2
 8011616:	b2db      	uxtb	r3, r3
 8011618:	2b02      	cmp	r3, #2
 801161a:	d102      	bne.n	8011622 <HAL_RCC_OscConfig+0xa3a>
 801161c:	4b42      	ldr	r3, [pc, #264]	; (8011728 <HAL_RCC_OscConfig+0xb40>)
 801161e:	6a1b      	ldr	r3, [r3, #32]
 8011620:	e013      	b.n	801164a <HAL_RCC_OscConfig+0xa62>
 8011622:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011626:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801162a:	2202      	movs	r2, #2
 801162c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801162e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011632:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	fa93 f2a3 	rbit	r2, r3
 801163c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011640:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8011644:	601a      	str	r2, [r3, #0]
 8011646:	4b38      	ldr	r3, [pc, #224]	; (8011728 <HAL_RCC_OscConfig+0xb40>)
 8011648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801164a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801164e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8011652:	2102      	movs	r1, #2
 8011654:	6011      	str	r1, [r2, #0]
 8011656:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801165a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 801165e:	6812      	ldr	r2, [r2, #0]
 8011660:	fa92 f1a2 	rbit	r1, r2
 8011664:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011668:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 801166c:	6011      	str	r1, [r2, #0]
  return result;
 801166e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011672:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8011676:	6812      	ldr	r2, [r2, #0]
 8011678:	fab2 f282 	clz	r2, r2
 801167c:	b2d2      	uxtb	r2, r2
 801167e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011682:	b2d2      	uxtb	r2, r2
 8011684:	f002 021f 	and.w	r2, r2, #31
 8011688:	2101      	movs	r1, #1
 801168a:	fa01 f202 	lsl.w	r2, r1, r2
 801168e:	4013      	ands	r3, r2
 8011690:	2b00      	cmp	r3, #0
 8011692:	d084      	beq.n	801159e <HAL_RCC_OscConfig+0x9b6>
 8011694:	e083      	b.n	801179e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011696:	f7fe ffd5 	bl	8010644 <HAL_GetTick>
 801169a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801169e:	e00b      	b.n	80116b8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80116a0:	f7fe ffd0 	bl	8010644 <HAL_GetTick>
 80116a4:	4602      	mov	r2, r0
 80116a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80116aa:	1ad3      	subs	r3, r2, r3
 80116ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80116b0:	4293      	cmp	r3, r2
 80116b2:	d901      	bls.n	80116b8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80116b4:	2303      	movs	r3, #3
 80116b6:	e2e4      	b.n	8011c82 <HAL_RCC_OscConfig+0x109a>
 80116b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80116bc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80116c0:	2202      	movs	r2, #2
 80116c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80116c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80116c8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	fa93 f2a3 	rbit	r2, r3
 80116d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80116d6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80116da:	601a      	str	r2, [r3, #0]
 80116dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80116e0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80116e4:	2202      	movs	r2, #2
 80116e6:	601a      	str	r2, [r3, #0]
 80116e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80116ec:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	fa93 f2a3 	rbit	r2, r3
 80116f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80116fa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80116fe:	601a      	str	r2, [r3, #0]
  return result;
 8011700:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011704:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8011708:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801170a:	fab3 f383 	clz	r3, r3
 801170e:	b2db      	uxtb	r3, r3
 8011710:	095b      	lsrs	r3, r3, #5
 8011712:	b2db      	uxtb	r3, r3
 8011714:	f043 0302 	orr.w	r3, r3, #2
 8011718:	b2db      	uxtb	r3, r3
 801171a:	2b02      	cmp	r3, #2
 801171c:	d106      	bne.n	801172c <HAL_RCC_OscConfig+0xb44>
 801171e:	4b02      	ldr	r3, [pc, #8]	; (8011728 <HAL_RCC_OscConfig+0xb40>)
 8011720:	6a1b      	ldr	r3, [r3, #32]
 8011722:	e017      	b.n	8011754 <HAL_RCC_OscConfig+0xb6c>
 8011724:	40007000 	.word	0x40007000
 8011728:	40021000 	.word	0x40021000
 801172c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011730:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8011734:	2202      	movs	r2, #2
 8011736:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011738:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801173c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	fa93 f2a3 	rbit	r2, r3
 8011746:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801174a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 801174e:	601a      	str	r2, [r3, #0]
 8011750:	4bb3      	ldr	r3, [pc, #716]	; (8011a20 <HAL_RCC_OscConfig+0xe38>)
 8011752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011754:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011758:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 801175c:	2102      	movs	r1, #2
 801175e:	6011      	str	r1, [r2, #0]
 8011760:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011764:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8011768:	6812      	ldr	r2, [r2, #0]
 801176a:	fa92 f1a2 	rbit	r1, r2
 801176e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011772:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8011776:	6011      	str	r1, [r2, #0]
  return result;
 8011778:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801177c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8011780:	6812      	ldr	r2, [r2, #0]
 8011782:	fab2 f282 	clz	r2, r2
 8011786:	b2d2      	uxtb	r2, r2
 8011788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801178c:	b2d2      	uxtb	r2, r2
 801178e:	f002 021f 	and.w	r2, r2, #31
 8011792:	2101      	movs	r1, #1
 8011794:	fa01 f202 	lsl.w	r2, r1, r2
 8011798:	4013      	ands	r3, r2
 801179a:	2b00      	cmp	r3, #0
 801179c:	d180      	bne.n	80116a0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801179e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80117a2:	2b01      	cmp	r3, #1
 80117a4:	d105      	bne.n	80117b2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80117a6:	4b9e      	ldr	r3, [pc, #632]	; (8011a20 <HAL_RCC_OscConfig+0xe38>)
 80117a8:	69db      	ldr	r3, [r3, #28]
 80117aa:	4a9d      	ldr	r2, [pc, #628]	; (8011a20 <HAL_RCC_OscConfig+0xe38>)
 80117ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80117b0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80117b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80117b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	699b      	ldr	r3, [r3, #24]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	f000 825e 	beq.w	8011c80 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80117c4:	4b96      	ldr	r3, [pc, #600]	; (8011a20 <HAL_RCC_OscConfig+0xe38>)
 80117c6:	685b      	ldr	r3, [r3, #4]
 80117c8:	f003 030c 	and.w	r3, r3, #12
 80117cc:	2b08      	cmp	r3, #8
 80117ce:	f000 821f 	beq.w	8011c10 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80117d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80117d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	699b      	ldr	r3, [r3, #24]
 80117de:	2b02      	cmp	r3, #2
 80117e0:	f040 8170 	bne.w	8011ac4 <HAL_RCC_OscConfig+0xedc>
 80117e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80117e8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80117ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80117f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80117f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80117f6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	fa93 f2a3 	rbit	r2, r3
 8011800:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011804:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8011808:	601a      	str	r2, [r3, #0]
  return result;
 801180a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801180e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8011812:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011814:	fab3 f383 	clz	r3, r3
 8011818:	b2db      	uxtb	r3, r3
 801181a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 801181e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8011822:	009b      	lsls	r3, r3, #2
 8011824:	461a      	mov	r2, r3
 8011826:	2300      	movs	r3, #0
 8011828:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801182a:	f7fe ff0b 	bl	8010644 <HAL_GetTick>
 801182e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011832:	e009      	b.n	8011848 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011834:	f7fe ff06 	bl	8010644 <HAL_GetTick>
 8011838:	4602      	mov	r2, r0
 801183a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801183e:	1ad3      	subs	r3, r2, r3
 8011840:	2b02      	cmp	r3, #2
 8011842:	d901      	bls.n	8011848 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8011844:	2303      	movs	r3, #3
 8011846:	e21c      	b.n	8011c82 <HAL_RCC_OscConfig+0x109a>
 8011848:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801184c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8011850:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8011854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011856:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801185a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	fa93 f2a3 	rbit	r2, r3
 8011864:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011868:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801186c:	601a      	str	r2, [r3, #0]
  return result;
 801186e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011872:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8011876:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011878:	fab3 f383 	clz	r3, r3
 801187c:	b2db      	uxtb	r3, r3
 801187e:	095b      	lsrs	r3, r3, #5
 8011880:	b2db      	uxtb	r3, r3
 8011882:	f043 0301 	orr.w	r3, r3, #1
 8011886:	b2db      	uxtb	r3, r3
 8011888:	2b01      	cmp	r3, #1
 801188a:	d102      	bne.n	8011892 <HAL_RCC_OscConfig+0xcaa>
 801188c:	4b64      	ldr	r3, [pc, #400]	; (8011a20 <HAL_RCC_OscConfig+0xe38>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	e027      	b.n	80118e2 <HAL_RCC_OscConfig+0xcfa>
 8011892:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011896:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801189a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801189e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80118a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80118a4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	fa93 f2a3 	rbit	r2, r3
 80118ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80118b2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80118b6:	601a      	str	r2, [r3, #0]
 80118b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80118bc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80118c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80118c4:	601a      	str	r2, [r3, #0]
 80118c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80118ca:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	fa93 f2a3 	rbit	r2, r3
 80118d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80118d8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80118dc:	601a      	str	r2, [r3, #0]
 80118de:	4b50      	ldr	r3, [pc, #320]	; (8011a20 <HAL_RCC_OscConfig+0xe38>)
 80118e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80118e6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80118ea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80118ee:	6011      	str	r1, [r2, #0]
 80118f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80118f4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80118f8:	6812      	ldr	r2, [r2, #0]
 80118fa:	fa92 f1a2 	rbit	r1, r2
 80118fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011902:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8011906:	6011      	str	r1, [r2, #0]
  return result;
 8011908:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801190c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8011910:	6812      	ldr	r2, [r2, #0]
 8011912:	fab2 f282 	clz	r2, r2
 8011916:	b2d2      	uxtb	r2, r2
 8011918:	f042 0220 	orr.w	r2, r2, #32
 801191c:	b2d2      	uxtb	r2, r2
 801191e:	f002 021f 	and.w	r2, r2, #31
 8011922:	2101      	movs	r1, #1
 8011924:	fa01 f202 	lsl.w	r2, r1, r2
 8011928:	4013      	ands	r3, r2
 801192a:	2b00      	cmp	r3, #0
 801192c:	d182      	bne.n	8011834 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801192e:	4b3c      	ldr	r3, [pc, #240]	; (8011a20 <HAL_RCC_OscConfig+0xe38>)
 8011930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011932:	f023 020f 	bic.w	r2, r3, #15
 8011936:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801193a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011942:	4937      	ldr	r1, [pc, #220]	; (8011a20 <HAL_RCC_OscConfig+0xe38>)
 8011944:	4313      	orrs	r3, r2
 8011946:	62cb      	str	r3, [r1, #44]	; 0x2c
 8011948:	4b35      	ldr	r3, [pc, #212]	; (8011a20 <HAL_RCC_OscConfig+0xe38>)
 801194a:	685b      	ldr	r3, [r3, #4]
 801194c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8011950:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011954:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	6a19      	ldr	r1, [r3, #32]
 801195c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011960:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	69db      	ldr	r3, [r3, #28]
 8011968:	430b      	orrs	r3, r1
 801196a:	492d      	ldr	r1, [pc, #180]	; (8011a20 <HAL_RCC_OscConfig+0xe38>)
 801196c:	4313      	orrs	r3, r2
 801196e:	604b      	str	r3, [r1, #4]
 8011970:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011974:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8011978:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801197c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801197e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011982:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	fa93 f2a3 	rbit	r2, r3
 801198c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011990:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8011994:	601a      	str	r2, [r3, #0]
  return result;
 8011996:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801199a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 801199e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80119a0:	fab3 f383 	clz	r3, r3
 80119a4:	b2db      	uxtb	r3, r3
 80119a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80119aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80119ae:	009b      	lsls	r3, r3, #2
 80119b0:	461a      	mov	r2, r3
 80119b2:	2301      	movs	r3, #1
 80119b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80119b6:	f7fe fe45 	bl	8010644 <HAL_GetTick>
 80119ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80119be:	e009      	b.n	80119d4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80119c0:	f7fe fe40 	bl	8010644 <HAL_GetTick>
 80119c4:	4602      	mov	r2, r0
 80119c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80119ca:	1ad3      	subs	r3, r2, r3
 80119cc:	2b02      	cmp	r3, #2
 80119ce:	d901      	bls.n	80119d4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80119d0:	2303      	movs	r3, #3
 80119d2:	e156      	b.n	8011c82 <HAL_RCC_OscConfig+0x109a>
 80119d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80119d8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80119dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80119e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80119e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80119e6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	fa93 f2a3 	rbit	r2, r3
 80119f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80119f4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80119f8:	601a      	str	r2, [r3, #0]
  return result;
 80119fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80119fe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8011a02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011a04:	fab3 f383 	clz	r3, r3
 8011a08:	b2db      	uxtb	r3, r3
 8011a0a:	095b      	lsrs	r3, r3, #5
 8011a0c:	b2db      	uxtb	r3, r3
 8011a0e:	f043 0301 	orr.w	r3, r3, #1
 8011a12:	b2db      	uxtb	r3, r3
 8011a14:	2b01      	cmp	r3, #1
 8011a16:	d105      	bne.n	8011a24 <HAL_RCC_OscConfig+0xe3c>
 8011a18:	4b01      	ldr	r3, [pc, #4]	; (8011a20 <HAL_RCC_OscConfig+0xe38>)
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	e02a      	b.n	8011a74 <HAL_RCC_OscConfig+0xe8c>
 8011a1e:	bf00      	nop
 8011a20:	40021000 	.word	0x40021000
 8011a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011a28:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011a2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8011a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011a32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011a36:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	fa93 f2a3 	rbit	r2, r3
 8011a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011a44:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8011a48:	601a      	str	r2, [r3, #0]
 8011a4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011a4e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8011a52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8011a56:	601a      	str	r2, [r3, #0]
 8011a58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011a5c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	fa93 f2a3 	rbit	r2, r3
 8011a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011a6a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8011a6e:	601a      	str	r2, [r3, #0]
 8011a70:	4b86      	ldr	r3, [pc, #536]	; (8011c8c <HAL_RCC_OscConfig+0x10a4>)
 8011a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a74:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011a78:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8011a7c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8011a80:	6011      	str	r1, [r2, #0]
 8011a82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011a86:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8011a8a:	6812      	ldr	r2, [r2, #0]
 8011a8c:	fa92 f1a2 	rbit	r1, r2
 8011a90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011a94:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8011a98:	6011      	str	r1, [r2, #0]
  return result;
 8011a9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011a9e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8011aa2:	6812      	ldr	r2, [r2, #0]
 8011aa4:	fab2 f282 	clz	r2, r2
 8011aa8:	b2d2      	uxtb	r2, r2
 8011aaa:	f042 0220 	orr.w	r2, r2, #32
 8011aae:	b2d2      	uxtb	r2, r2
 8011ab0:	f002 021f 	and.w	r2, r2, #31
 8011ab4:	2101      	movs	r1, #1
 8011ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8011aba:	4013      	ands	r3, r2
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	f43f af7f 	beq.w	80119c0 <HAL_RCC_OscConfig+0xdd8>
 8011ac2:	e0dd      	b.n	8011c80 <HAL_RCC_OscConfig+0x1098>
 8011ac4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011ac8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8011acc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011ad2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011ad6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	fa93 f2a3 	rbit	r2, r3
 8011ae0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011ae4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8011ae8:	601a      	str	r2, [r3, #0]
  return result;
 8011aea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011aee:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8011af2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011af4:	fab3 f383 	clz	r3, r3
 8011af8:	b2db      	uxtb	r3, r3
 8011afa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8011afe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8011b02:	009b      	lsls	r3, r3, #2
 8011b04:	461a      	mov	r2, r3
 8011b06:	2300      	movs	r3, #0
 8011b08:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011b0a:	f7fe fd9b 	bl	8010644 <HAL_GetTick>
 8011b0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011b12:	e009      	b.n	8011b28 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011b14:	f7fe fd96 	bl	8010644 <HAL_GetTick>
 8011b18:	4602      	mov	r2, r0
 8011b1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011b1e:	1ad3      	subs	r3, r2, r3
 8011b20:	2b02      	cmp	r3, #2
 8011b22:	d901      	bls.n	8011b28 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8011b24:	2303      	movs	r3, #3
 8011b26:	e0ac      	b.n	8011c82 <HAL_RCC_OscConfig+0x109a>
 8011b28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011b2c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8011b30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8011b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011b36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011b3a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	fa93 f2a3 	rbit	r2, r3
 8011b44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011b48:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8011b4c:	601a      	str	r2, [r3, #0]
  return result;
 8011b4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011b52:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8011b56:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011b58:	fab3 f383 	clz	r3, r3
 8011b5c:	b2db      	uxtb	r3, r3
 8011b5e:	095b      	lsrs	r3, r3, #5
 8011b60:	b2db      	uxtb	r3, r3
 8011b62:	f043 0301 	orr.w	r3, r3, #1
 8011b66:	b2db      	uxtb	r3, r3
 8011b68:	2b01      	cmp	r3, #1
 8011b6a:	d102      	bne.n	8011b72 <HAL_RCC_OscConfig+0xf8a>
 8011b6c:	4b47      	ldr	r3, [pc, #284]	; (8011c8c <HAL_RCC_OscConfig+0x10a4>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	e027      	b.n	8011bc2 <HAL_RCC_OscConfig+0xfda>
 8011b72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011b76:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8011b7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8011b7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011b80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011b84:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	fa93 f2a3 	rbit	r2, r3
 8011b8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011b92:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8011b96:	601a      	str	r2, [r3, #0]
 8011b98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011b9c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011ba0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8011ba4:	601a      	str	r2, [r3, #0]
 8011ba6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011baa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	fa93 f2a3 	rbit	r2, r3
 8011bb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011bb8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8011bbc:	601a      	str	r2, [r3, #0]
 8011bbe:	4b33      	ldr	r3, [pc, #204]	; (8011c8c <HAL_RCC_OscConfig+0x10a4>)
 8011bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bc2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011bc6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8011bca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8011bce:	6011      	str	r1, [r2, #0]
 8011bd0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011bd4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8011bd8:	6812      	ldr	r2, [r2, #0]
 8011bda:	fa92 f1a2 	rbit	r1, r2
 8011bde:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011be2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8011be6:	6011      	str	r1, [r2, #0]
  return result;
 8011be8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011bec:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8011bf0:	6812      	ldr	r2, [r2, #0]
 8011bf2:	fab2 f282 	clz	r2, r2
 8011bf6:	b2d2      	uxtb	r2, r2
 8011bf8:	f042 0220 	orr.w	r2, r2, #32
 8011bfc:	b2d2      	uxtb	r2, r2
 8011bfe:	f002 021f 	and.w	r2, r2, #31
 8011c02:	2101      	movs	r1, #1
 8011c04:	fa01 f202 	lsl.w	r2, r1, r2
 8011c08:	4013      	ands	r3, r2
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d182      	bne.n	8011b14 <HAL_RCC_OscConfig+0xf2c>
 8011c0e:	e037      	b.n	8011c80 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011c10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011c14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	699b      	ldr	r3, [r3, #24]
 8011c1c:	2b01      	cmp	r3, #1
 8011c1e:	d101      	bne.n	8011c24 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8011c20:	2301      	movs	r3, #1
 8011c22:	e02e      	b.n	8011c82 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8011c24:	4b19      	ldr	r3, [pc, #100]	; (8011c8c <HAL_RCC_OscConfig+0x10a4>)
 8011c26:	685b      	ldr	r3, [r3, #4]
 8011c28:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8011c2c:	4b17      	ldr	r3, [pc, #92]	; (8011c8c <HAL_RCC_OscConfig+0x10a4>)
 8011c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c30:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8011c34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011c38:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8011c3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011c40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	69db      	ldr	r3, [r3, #28]
 8011c48:	429a      	cmp	r2, r3
 8011c4a:	d117      	bne.n	8011c7c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8011c4c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011c50:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8011c54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011c58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8011c60:	429a      	cmp	r2, r3
 8011c62:	d10b      	bne.n	8011c7c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8011c64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8011c68:	f003 020f 	and.w	r2, r3, #15
 8011c6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011c70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8011c78:	429a      	cmp	r2, r3
 8011c7a:	d001      	beq.n	8011c80 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	e000      	b.n	8011c82 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8011c80:	2300      	movs	r3, #0
}
 8011c82:	4618      	mov	r0, r3
 8011c84:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}
 8011c8c:	40021000 	.word	0x40021000

08011c90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b09e      	sub	sp, #120	; 0x78
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
 8011c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d101      	bne.n	8011ca8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	e162      	b.n	8011f6e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011ca8:	4b90      	ldr	r3, [pc, #576]	; (8011eec <HAL_RCC_ClockConfig+0x25c>)
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	f003 0307 	and.w	r3, r3, #7
 8011cb0:	683a      	ldr	r2, [r7, #0]
 8011cb2:	429a      	cmp	r2, r3
 8011cb4:	d910      	bls.n	8011cd8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011cb6:	4b8d      	ldr	r3, [pc, #564]	; (8011eec <HAL_RCC_ClockConfig+0x25c>)
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	f023 0207 	bic.w	r2, r3, #7
 8011cbe:	498b      	ldr	r1, [pc, #556]	; (8011eec <HAL_RCC_ClockConfig+0x25c>)
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	4313      	orrs	r3, r2
 8011cc4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011cc6:	4b89      	ldr	r3, [pc, #548]	; (8011eec <HAL_RCC_ClockConfig+0x25c>)
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	f003 0307 	and.w	r3, r3, #7
 8011cce:	683a      	ldr	r2, [r7, #0]
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	d001      	beq.n	8011cd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8011cd4:	2301      	movs	r3, #1
 8011cd6:	e14a      	b.n	8011f6e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	f003 0302 	and.w	r3, r3, #2
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d008      	beq.n	8011cf6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011ce4:	4b82      	ldr	r3, [pc, #520]	; (8011ef0 <HAL_RCC_ClockConfig+0x260>)
 8011ce6:	685b      	ldr	r3, [r3, #4]
 8011ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	689b      	ldr	r3, [r3, #8]
 8011cf0:	497f      	ldr	r1, [pc, #508]	; (8011ef0 <HAL_RCC_ClockConfig+0x260>)
 8011cf2:	4313      	orrs	r3, r2
 8011cf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	f003 0301 	and.w	r3, r3, #1
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	f000 80dc 	beq.w	8011ebc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	685b      	ldr	r3, [r3, #4]
 8011d08:	2b01      	cmp	r3, #1
 8011d0a:	d13c      	bne.n	8011d86 <HAL_RCC_ClockConfig+0xf6>
 8011d0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011d10:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011d14:	fa93 f3a3 	rbit	r3, r3
 8011d18:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8011d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011d1c:	fab3 f383 	clz	r3, r3
 8011d20:	b2db      	uxtb	r3, r3
 8011d22:	095b      	lsrs	r3, r3, #5
 8011d24:	b2db      	uxtb	r3, r3
 8011d26:	f043 0301 	orr.w	r3, r3, #1
 8011d2a:	b2db      	uxtb	r3, r3
 8011d2c:	2b01      	cmp	r3, #1
 8011d2e:	d102      	bne.n	8011d36 <HAL_RCC_ClockConfig+0xa6>
 8011d30:	4b6f      	ldr	r3, [pc, #444]	; (8011ef0 <HAL_RCC_ClockConfig+0x260>)
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	e00f      	b.n	8011d56 <HAL_RCC_ClockConfig+0xc6>
 8011d36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011d3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011d3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011d3e:	fa93 f3a3 	rbit	r3, r3
 8011d42:	667b      	str	r3, [r7, #100]	; 0x64
 8011d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011d48:	663b      	str	r3, [r7, #96]	; 0x60
 8011d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011d4c:	fa93 f3a3 	rbit	r3, r3
 8011d50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011d52:	4b67      	ldr	r3, [pc, #412]	; (8011ef0 <HAL_RCC_ClockConfig+0x260>)
 8011d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8011d5a:	65ba      	str	r2, [r7, #88]	; 0x58
 8011d5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011d5e:	fa92 f2a2 	rbit	r2, r2
 8011d62:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8011d64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011d66:	fab2 f282 	clz	r2, r2
 8011d6a:	b2d2      	uxtb	r2, r2
 8011d6c:	f042 0220 	orr.w	r2, r2, #32
 8011d70:	b2d2      	uxtb	r2, r2
 8011d72:	f002 021f 	and.w	r2, r2, #31
 8011d76:	2101      	movs	r1, #1
 8011d78:	fa01 f202 	lsl.w	r2, r1, r2
 8011d7c:	4013      	ands	r3, r2
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d17b      	bne.n	8011e7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8011d82:	2301      	movs	r3, #1
 8011d84:	e0f3      	b.n	8011f6e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	685b      	ldr	r3, [r3, #4]
 8011d8a:	2b02      	cmp	r3, #2
 8011d8c:	d13c      	bne.n	8011e08 <HAL_RCC_ClockConfig+0x178>
 8011d8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011d92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d96:	fa93 f3a3 	rbit	r3, r3
 8011d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8011d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011d9e:	fab3 f383 	clz	r3, r3
 8011da2:	b2db      	uxtb	r3, r3
 8011da4:	095b      	lsrs	r3, r3, #5
 8011da6:	b2db      	uxtb	r3, r3
 8011da8:	f043 0301 	orr.w	r3, r3, #1
 8011dac:	b2db      	uxtb	r3, r3
 8011dae:	2b01      	cmp	r3, #1
 8011db0:	d102      	bne.n	8011db8 <HAL_RCC_ClockConfig+0x128>
 8011db2:	4b4f      	ldr	r3, [pc, #316]	; (8011ef0 <HAL_RCC_ClockConfig+0x260>)
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	e00f      	b.n	8011dd8 <HAL_RCC_ClockConfig+0x148>
 8011db8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011dbc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011dc0:	fa93 f3a3 	rbit	r3, r3
 8011dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8011dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011dca:	643b      	str	r3, [r7, #64]	; 0x40
 8011dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011dce:	fa93 f3a3 	rbit	r3, r3
 8011dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011dd4:	4b46      	ldr	r3, [pc, #280]	; (8011ef0 <HAL_RCC_ClockConfig+0x260>)
 8011dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8011ddc:	63ba      	str	r2, [r7, #56]	; 0x38
 8011dde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011de0:	fa92 f2a2 	rbit	r2, r2
 8011de4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8011de6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011de8:	fab2 f282 	clz	r2, r2
 8011dec:	b2d2      	uxtb	r2, r2
 8011dee:	f042 0220 	orr.w	r2, r2, #32
 8011df2:	b2d2      	uxtb	r2, r2
 8011df4:	f002 021f 	and.w	r2, r2, #31
 8011df8:	2101      	movs	r1, #1
 8011dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8011dfe:	4013      	ands	r3, r2
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d13a      	bne.n	8011e7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8011e04:	2301      	movs	r3, #1
 8011e06:	e0b2      	b.n	8011f6e <HAL_RCC_ClockConfig+0x2de>
 8011e08:	2302      	movs	r3, #2
 8011e0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e0e:	fa93 f3a3 	rbit	r3, r3
 8011e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8011e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011e16:	fab3 f383 	clz	r3, r3
 8011e1a:	b2db      	uxtb	r3, r3
 8011e1c:	095b      	lsrs	r3, r3, #5
 8011e1e:	b2db      	uxtb	r3, r3
 8011e20:	f043 0301 	orr.w	r3, r3, #1
 8011e24:	b2db      	uxtb	r3, r3
 8011e26:	2b01      	cmp	r3, #1
 8011e28:	d102      	bne.n	8011e30 <HAL_RCC_ClockConfig+0x1a0>
 8011e2a:	4b31      	ldr	r3, [pc, #196]	; (8011ef0 <HAL_RCC_ClockConfig+0x260>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	e00d      	b.n	8011e4c <HAL_RCC_ClockConfig+0x1bc>
 8011e30:	2302      	movs	r3, #2
 8011e32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e36:	fa93 f3a3 	rbit	r3, r3
 8011e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8011e3c:	2302      	movs	r3, #2
 8011e3e:	623b      	str	r3, [r7, #32]
 8011e40:	6a3b      	ldr	r3, [r7, #32]
 8011e42:	fa93 f3a3 	rbit	r3, r3
 8011e46:	61fb      	str	r3, [r7, #28]
 8011e48:	4b29      	ldr	r3, [pc, #164]	; (8011ef0 <HAL_RCC_ClockConfig+0x260>)
 8011e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e4c:	2202      	movs	r2, #2
 8011e4e:	61ba      	str	r2, [r7, #24]
 8011e50:	69ba      	ldr	r2, [r7, #24]
 8011e52:	fa92 f2a2 	rbit	r2, r2
 8011e56:	617a      	str	r2, [r7, #20]
  return result;
 8011e58:	697a      	ldr	r2, [r7, #20]
 8011e5a:	fab2 f282 	clz	r2, r2
 8011e5e:	b2d2      	uxtb	r2, r2
 8011e60:	f042 0220 	orr.w	r2, r2, #32
 8011e64:	b2d2      	uxtb	r2, r2
 8011e66:	f002 021f 	and.w	r2, r2, #31
 8011e6a:	2101      	movs	r1, #1
 8011e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8011e70:	4013      	ands	r3, r2
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d101      	bne.n	8011e7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8011e76:	2301      	movs	r3, #1
 8011e78:	e079      	b.n	8011f6e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011e7a:	4b1d      	ldr	r3, [pc, #116]	; (8011ef0 <HAL_RCC_ClockConfig+0x260>)
 8011e7c:	685b      	ldr	r3, [r3, #4]
 8011e7e:	f023 0203 	bic.w	r2, r3, #3
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	685b      	ldr	r3, [r3, #4]
 8011e86:	491a      	ldr	r1, [pc, #104]	; (8011ef0 <HAL_RCC_ClockConfig+0x260>)
 8011e88:	4313      	orrs	r3, r2
 8011e8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011e8c:	f7fe fbda 	bl	8010644 <HAL_GetTick>
 8011e90:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011e92:	e00a      	b.n	8011eaa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011e94:	f7fe fbd6 	bl	8010644 <HAL_GetTick>
 8011e98:	4602      	mov	r2, r0
 8011e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011e9c:	1ad3      	subs	r3, r2, r3
 8011e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ea2:	4293      	cmp	r3, r2
 8011ea4:	d901      	bls.n	8011eaa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8011ea6:	2303      	movs	r3, #3
 8011ea8:	e061      	b.n	8011f6e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011eaa:	4b11      	ldr	r3, [pc, #68]	; (8011ef0 <HAL_RCC_ClockConfig+0x260>)
 8011eac:	685b      	ldr	r3, [r3, #4]
 8011eae:	f003 020c 	and.w	r2, r3, #12
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	685b      	ldr	r3, [r3, #4]
 8011eb6:	009b      	lsls	r3, r3, #2
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d1eb      	bne.n	8011e94 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011ebc:	4b0b      	ldr	r3, [pc, #44]	; (8011eec <HAL_RCC_ClockConfig+0x25c>)
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	f003 0307 	and.w	r3, r3, #7
 8011ec4:	683a      	ldr	r2, [r7, #0]
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	d214      	bcs.n	8011ef4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011eca:	4b08      	ldr	r3, [pc, #32]	; (8011eec <HAL_RCC_ClockConfig+0x25c>)
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	f023 0207 	bic.w	r2, r3, #7
 8011ed2:	4906      	ldr	r1, [pc, #24]	; (8011eec <HAL_RCC_ClockConfig+0x25c>)
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	4313      	orrs	r3, r2
 8011ed8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011eda:	4b04      	ldr	r3, [pc, #16]	; (8011eec <HAL_RCC_ClockConfig+0x25c>)
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	f003 0307 	and.w	r3, r3, #7
 8011ee2:	683a      	ldr	r2, [r7, #0]
 8011ee4:	429a      	cmp	r2, r3
 8011ee6:	d005      	beq.n	8011ef4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8011ee8:	2301      	movs	r3, #1
 8011eea:	e040      	b.n	8011f6e <HAL_RCC_ClockConfig+0x2de>
 8011eec:	40022000 	.word	0x40022000
 8011ef0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	f003 0304 	and.w	r3, r3, #4
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d008      	beq.n	8011f12 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011f00:	4b1d      	ldr	r3, [pc, #116]	; (8011f78 <HAL_RCC_ClockConfig+0x2e8>)
 8011f02:	685b      	ldr	r3, [r3, #4]
 8011f04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	68db      	ldr	r3, [r3, #12]
 8011f0c:	491a      	ldr	r1, [pc, #104]	; (8011f78 <HAL_RCC_ClockConfig+0x2e8>)
 8011f0e:	4313      	orrs	r3, r2
 8011f10:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	f003 0308 	and.w	r3, r3, #8
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d009      	beq.n	8011f32 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011f1e:	4b16      	ldr	r3, [pc, #88]	; (8011f78 <HAL_RCC_ClockConfig+0x2e8>)
 8011f20:	685b      	ldr	r3, [r3, #4]
 8011f22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	691b      	ldr	r3, [r3, #16]
 8011f2a:	00db      	lsls	r3, r3, #3
 8011f2c:	4912      	ldr	r1, [pc, #72]	; (8011f78 <HAL_RCC_ClockConfig+0x2e8>)
 8011f2e:	4313      	orrs	r3, r2
 8011f30:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8011f32:	f000 f829 	bl	8011f88 <HAL_RCC_GetSysClockFreq>
 8011f36:	4601      	mov	r1, r0
 8011f38:	4b0f      	ldr	r3, [pc, #60]	; (8011f78 <HAL_RCC_ClockConfig+0x2e8>)
 8011f3a:	685b      	ldr	r3, [r3, #4]
 8011f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011f40:	22f0      	movs	r2, #240	; 0xf0
 8011f42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011f44:	693a      	ldr	r2, [r7, #16]
 8011f46:	fa92 f2a2 	rbit	r2, r2
 8011f4a:	60fa      	str	r2, [r7, #12]
  return result;
 8011f4c:	68fa      	ldr	r2, [r7, #12]
 8011f4e:	fab2 f282 	clz	r2, r2
 8011f52:	b2d2      	uxtb	r2, r2
 8011f54:	40d3      	lsrs	r3, r2
 8011f56:	4a09      	ldr	r2, [pc, #36]	; (8011f7c <HAL_RCC_ClockConfig+0x2ec>)
 8011f58:	5cd3      	ldrb	r3, [r2, r3]
 8011f5a:	fa21 f303 	lsr.w	r3, r1, r3
 8011f5e:	4a08      	ldr	r2, [pc, #32]	; (8011f80 <HAL_RCC_ClockConfig+0x2f0>)
 8011f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8011f62:	4b08      	ldr	r3, [pc, #32]	; (8011f84 <HAL_RCC_ClockConfig+0x2f4>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	4618      	mov	r0, r3
 8011f68:	f7fe fb28 	bl	80105bc <HAL_InitTick>
  
  return HAL_OK;
 8011f6c:	2300      	movs	r3, #0
}
 8011f6e:	4618      	mov	r0, r3
 8011f70:	3778      	adds	r7, #120	; 0x78
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}
 8011f76:	bf00      	nop
 8011f78:	40021000 	.word	0x40021000
 8011f7c:	08012d50 	.word	0x08012d50
 8011f80:	20000000 	.word	0x20000000
 8011f84:	20000004 	.word	0x20000004

08011f88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011f88:	b480      	push	{r7}
 8011f8a:	b08b      	sub	sp, #44	; 0x2c
 8011f8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8011f8e:	2300      	movs	r3, #0
 8011f90:	61fb      	str	r3, [r7, #28]
 8011f92:	2300      	movs	r3, #0
 8011f94:	61bb      	str	r3, [r7, #24]
 8011f96:	2300      	movs	r3, #0
 8011f98:	627b      	str	r3, [r7, #36]	; 0x24
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8011fa2:	4b2a      	ldr	r3, [pc, #168]	; (801204c <HAL_RCC_GetSysClockFreq+0xc4>)
 8011fa4:	685b      	ldr	r3, [r3, #4]
 8011fa6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8011fa8:	69fb      	ldr	r3, [r7, #28]
 8011faa:	f003 030c 	and.w	r3, r3, #12
 8011fae:	2b04      	cmp	r3, #4
 8011fb0:	d002      	beq.n	8011fb8 <HAL_RCC_GetSysClockFreq+0x30>
 8011fb2:	2b08      	cmp	r3, #8
 8011fb4:	d003      	beq.n	8011fbe <HAL_RCC_GetSysClockFreq+0x36>
 8011fb6:	e03f      	b.n	8012038 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8011fb8:	4b25      	ldr	r3, [pc, #148]	; (8012050 <HAL_RCC_GetSysClockFreq+0xc8>)
 8011fba:	623b      	str	r3, [r7, #32]
      break;
 8011fbc:	e03f      	b.n	801203e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8011fbe:	69fb      	ldr	r3, [r7, #28]
 8011fc0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8011fc4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8011fc8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011fca:	68ba      	ldr	r2, [r7, #8]
 8011fcc:	fa92 f2a2 	rbit	r2, r2
 8011fd0:	607a      	str	r2, [r7, #4]
  return result;
 8011fd2:	687a      	ldr	r2, [r7, #4]
 8011fd4:	fab2 f282 	clz	r2, r2
 8011fd8:	b2d2      	uxtb	r2, r2
 8011fda:	40d3      	lsrs	r3, r2
 8011fdc:	4a1d      	ldr	r2, [pc, #116]	; (8012054 <HAL_RCC_GetSysClockFreq+0xcc>)
 8011fde:	5cd3      	ldrb	r3, [r2, r3]
 8011fe0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8011fe2:	4b1a      	ldr	r3, [pc, #104]	; (801204c <HAL_RCC_GetSysClockFreq+0xc4>)
 8011fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fe6:	f003 030f 	and.w	r3, r3, #15
 8011fea:	220f      	movs	r2, #15
 8011fec:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011fee:	693a      	ldr	r2, [r7, #16]
 8011ff0:	fa92 f2a2 	rbit	r2, r2
 8011ff4:	60fa      	str	r2, [r7, #12]
  return result;
 8011ff6:	68fa      	ldr	r2, [r7, #12]
 8011ff8:	fab2 f282 	clz	r2, r2
 8011ffc:	b2d2      	uxtb	r2, r2
 8011ffe:	40d3      	lsrs	r3, r2
 8012000:	4a15      	ldr	r2, [pc, #84]	; (8012058 <HAL_RCC_GetSysClockFreq+0xd0>)
 8012002:	5cd3      	ldrb	r3, [r2, r3]
 8012004:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8012006:	69fb      	ldr	r3, [r7, #28]
 8012008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801200c:	2b00      	cmp	r3, #0
 801200e:	d008      	beq.n	8012022 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8012010:	4a0f      	ldr	r2, [pc, #60]	; (8012050 <HAL_RCC_GetSysClockFreq+0xc8>)
 8012012:	69bb      	ldr	r3, [r7, #24]
 8012014:	fbb2 f2f3 	udiv	r2, r2, r3
 8012018:	697b      	ldr	r3, [r7, #20]
 801201a:	fb02 f303 	mul.w	r3, r2, r3
 801201e:	627b      	str	r3, [r7, #36]	; 0x24
 8012020:	e007      	b.n	8012032 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8012022:	4a0b      	ldr	r2, [pc, #44]	; (8012050 <HAL_RCC_GetSysClockFreq+0xc8>)
 8012024:	69bb      	ldr	r3, [r7, #24]
 8012026:	fbb2 f2f3 	udiv	r2, r2, r3
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	fb02 f303 	mul.w	r3, r2, r3
 8012030:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8012032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012034:	623b      	str	r3, [r7, #32]
      break;
 8012036:	e002      	b.n	801203e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8012038:	4b05      	ldr	r3, [pc, #20]	; (8012050 <HAL_RCC_GetSysClockFreq+0xc8>)
 801203a:	623b      	str	r3, [r7, #32]
      break;
 801203c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801203e:	6a3b      	ldr	r3, [r7, #32]
}
 8012040:	4618      	mov	r0, r3
 8012042:	372c      	adds	r7, #44	; 0x2c
 8012044:	46bd      	mov	sp, r7
 8012046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204a:	4770      	bx	lr
 801204c:	40021000 	.word	0x40021000
 8012050:	007a1200 	.word	0x007a1200
 8012054:	08012d68 	.word	0x08012d68
 8012058:	08012d78 	.word	0x08012d78

0801205c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801205c:	b480      	push	{r7}
 801205e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012060:	4b03      	ldr	r3, [pc, #12]	; (8012070 <HAL_RCC_GetHCLKFreq+0x14>)
 8012062:	681b      	ldr	r3, [r3, #0]
}
 8012064:	4618      	mov	r0, r3
 8012066:	46bd      	mov	sp, r7
 8012068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206c:	4770      	bx	lr
 801206e:	bf00      	nop
 8012070:	20000000 	.word	0x20000000

08012074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b082      	sub	sp, #8
 8012078:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 801207a:	f7ff ffef 	bl	801205c <HAL_RCC_GetHCLKFreq>
 801207e:	4601      	mov	r1, r0
 8012080:	4b0b      	ldr	r3, [pc, #44]	; (80120b0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8012082:	685b      	ldr	r3, [r3, #4]
 8012084:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012088:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 801208c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801208e:	687a      	ldr	r2, [r7, #4]
 8012090:	fa92 f2a2 	rbit	r2, r2
 8012094:	603a      	str	r2, [r7, #0]
  return result;
 8012096:	683a      	ldr	r2, [r7, #0]
 8012098:	fab2 f282 	clz	r2, r2
 801209c:	b2d2      	uxtb	r2, r2
 801209e:	40d3      	lsrs	r3, r2
 80120a0:	4a04      	ldr	r2, [pc, #16]	; (80120b4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80120a2:	5cd3      	ldrb	r3, [r2, r3]
 80120a4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80120a8:	4618      	mov	r0, r3
 80120aa:	3708      	adds	r7, #8
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd80      	pop	{r7, pc}
 80120b0:	40021000 	.word	0x40021000
 80120b4:	08012d60 	.word	0x08012d60

080120b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b082      	sub	sp, #8
 80120bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80120be:	f7ff ffcd 	bl	801205c <HAL_RCC_GetHCLKFreq>
 80120c2:	4601      	mov	r1, r0
 80120c4:	4b0b      	ldr	r3, [pc, #44]	; (80120f4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80120c6:	685b      	ldr	r3, [r3, #4]
 80120c8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80120cc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80120d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80120d2:	687a      	ldr	r2, [r7, #4]
 80120d4:	fa92 f2a2 	rbit	r2, r2
 80120d8:	603a      	str	r2, [r7, #0]
  return result;
 80120da:	683a      	ldr	r2, [r7, #0]
 80120dc:	fab2 f282 	clz	r2, r2
 80120e0:	b2d2      	uxtb	r2, r2
 80120e2:	40d3      	lsrs	r3, r2
 80120e4:	4a04      	ldr	r2, [pc, #16]	; (80120f8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80120e6:	5cd3      	ldrb	r3, [r2, r3]
 80120e8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80120ec:	4618      	mov	r0, r3
 80120ee:	3708      	adds	r7, #8
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd80      	pop	{r7, pc}
 80120f4:	40021000 	.word	0x40021000
 80120f8:	08012d60 	.word	0x08012d60

080120fc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b092      	sub	sp, #72	; 0x48
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8012104:	2300      	movs	r3, #0
 8012106:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8012108:	2300      	movs	r3, #0
 801210a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 801210c:	2300      	movs	r3, #0
 801210e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801211a:	2b00      	cmp	r3, #0
 801211c:	f000 80d4 	beq.w	80122c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012120:	4b4e      	ldr	r3, [pc, #312]	; (801225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8012122:	69db      	ldr	r3, [r3, #28]
 8012124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012128:	2b00      	cmp	r3, #0
 801212a:	d10e      	bne.n	801214a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801212c:	4b4b      	ldr	r3, [pc, #300]	; (801225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801212e:	69db      	ldr	r3, [r3, #28]
 8012130:	4a4a      	ldr	r2, [pc, #296]	; (801225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8012132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012136:	61d3      	str	r3, [r2, #28]
 8012138:	4b48      	ldr	r3, [pc, #288]	; (801225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801213a:	69db      	ldr	r3, [r3, #28]
 801213c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012140:	60bb      	str	r3, [r7, #8]
 8012142:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012144:	2301      	movs	r3, #1
 8012146:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801214a:	4b45      	ldr	r3, [pc, #276]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012152:	2b00      	cmp	r3, #0
 8012154:	d118      	bne.n	8012188 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012156:	4b42      	ldr	r3, [pc, #264]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	4a41      	ldr	r2, [pc, #260]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 801215c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012160:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012162:	f7fe fa6f 	bl	8010644 <HAL_GetTick>
 8012166:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012168:	e008      	b.n	801217c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801216a:	f7fe fa6b 	bl	8010644 <HAL_GetTick>
 801216e:	4602      	mov	r2, r0
 8012170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012172:	1ad3      	subs	r3, r2, r3
 8012174:	2b64      	cmp	r3, #100	; 0x64
 8012176:	d901      	bls.n	801217c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8012178:	2303      	movs	r3, #3
 801217a:	e1d6      	b.n	801252a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801217c:	4b38      	ldr	r3, [pc, #224]	; (8012260 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012184:	2b00      	cmp	r3, #0
 8012186:	d0f0      	beq.n	801216a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8012188:	4b34      	ldr	r3, [pc, #208]	; (801225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801218a:	6a1b      	ldr	r3, [r3, #32]
 801218c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012190:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8012192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012194:	2b00      	cmp	r3, #0
 8012196:	f000 8084 	beq.w	80122a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	685b      	ldr	r3, [r3, #4]
 801219e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80121a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80121a4:	429a      	cmp	r2, r3
 80121a6:	d07c      	beq.n	80122a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80121a8:	4b2c      	ldr	r3, [pc, #176]	; (801225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80121aa:	6a1b      	ldr	r3, [r3, #32]
 80121ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80121b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80121b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80121b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80121b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ba:	fa93 f3a3 	rbit	r3, r3
 80121be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80121c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80121c2:	fab3 f383 	clz	r3, r3
 80121c6:	b2db      	uxtb	r3, r3
 80121c8:	461a      	mov	r2, r3
 80121ca:	4b26      	ldr	r3, [pc, #152]	; (8012264 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80121cc:	4413      	add	r3, r2
 80121ce:	009b      	lsls	r3, r3, #2
 80121d0:	461a      	mov	r2, r3
 80121d2:	2301      	movs	r3, #1
 80121d4:	6013      	str	r3, [r2, #0]
 80121d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80121da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80121dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121de:	fa93 f3a3 	rbit	r3, r3
 80121e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80121e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80121e6:	fab3 f383 	clz	r3, r3
 80121ea:	b2db      	uxtb	r3, r3
 80121ec:	461a      	mov	r2, r3
 80121ee:	4b1d      	ldr	r3, [pc, #116]	; (8012264 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80121f0:	4413      	add	r3, r2
 80121f2:	009b      	lsls	r3, r3, #2
 80121f4:	461a      	mov	r2, r3
 80121f6:	2300      	movs	r3, #0
 80121f8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80121fa:	4a18      	ldr	r2, [pc, #96]	; (801225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80121fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121fe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8012200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012202:	f003 0301 	and.w	r3, r3, #1
 8012206:	2b00      	cmp	r3, #0
 8012208:	d04b      	beq.n	80122a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801220a:	f7fe fa1b 	bl	8010644 <HAL_GetTick>
 801220e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012210:	e00a      	b.n	8012228 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012212:	f7fe fa17 	bl	8010644 <HAL_GetTick>
 8012216:	4602      	mov	r2, r0
 8012218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801221a:	1ad3      	subs	r3, r2, r3
 801221c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012220:	4293      	cmp	r3, r2
 8012222:	d901      	bls.n	8012228 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8012224:	2303      	movs	r3, #3
 8012226:	e180      	b.n	801252a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8012228:	2302      	movs	r3, #2
 801222a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801222c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801222e:	fa93 f3a3 	rbit	r3, r3
 8012232:	627b      	str	r3, [r7, #36]	; 0x24
 8012234:	2302      	movs	r3, #2
 8012236:	623b      	str	r3, [r7, #32]
 8012238:	6a3b      	ldr	r3, [r7, #32]
 801223a:	fa93 f3a3 	rbit	r3, r3
 801223e:	61fb      	str	r3, [r7, #28]
  return result;
 8012240:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012242:	fab3 f383 	clz	r3, r3
 8012246:	b2db      	uxtb	r3, r3
 8012248:	095b      	lsrs	r3, r3, #5
 801224a:	b2db      	uxtb	r3, r3
 801224c:	f043 0302 	orr.w	r3, r3, #2
 8012250:	b2db      	uxtb	r3, r3
 8012252:	2b02      	cmp	r3, #2
 8012254:	d108      	bne.n	8012268 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8012256:	4b01      	ldr	r3, [pc, #4]	; (801225c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8012258:	6a1b      	ldr	r3, [r3, #32]
 801225a:	e00d      	b.n	8012278 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 801225c:	40021000 	.word	0x40021000
 8012260:	40007000 	.word	0x40007000
 8012264:	10908100 	.word	0x10908100
 8012268:	2302      	movs	r3, #2
 801226a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801226c:	69bb      	ldr	r3, [r7, #24]
 801226e:	fa93 f3a3 	rbit	r3, r3
 8012272:	617b      	str	r3, [r7, #20]
 8012274:	4b9a      	ldr	r3, [pc, #616]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012278:	2202      	movs	r2, #2
 801227a:	613a      	str	r2, [r7, #16]
 801227c:	693a      	ldr	r2, [r7, #16]
 801227e:	fa92 f2a2 	rbit	r2, r2
 8012282:	60fa      	str	r2, [r7, #12]
  return result;
 8012284:	68fa      	ldr	r2, [r7, #12]
 8012286:	fab2 f282 	clz	r2, r2
 801228a:	b2d2      	uxtb	r2, r2
 801228c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012290:	b2d2      	uxtb	r2, r2
 8012292:	f002 021f 	and.w	r2, r2, #31
 8012296:	2101      	movs	r1, #1
 8012298:	fa01 f202 	lsl.w	r2, r1, r2
 801229c:	4013      	ands	r3, r2
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d0b7      	beq.n	8012212 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80122a2:	4b8f      	ldr	r3, [pc, #572]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80122a4:	6a1b      	ldr	r3, [r3, #32]
 80122a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	685b      	ldr	r3, [r3, #4]
 80122ae:	498c      	ldr	r1, [pc, #560]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80122b0:	4313      	orrs	r3, r2
 80122b2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80122b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80122b8:	2b01      	cmp	r3, #1
 80122ba:	d105      	bne.n	80122c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80122bc:	4b88      	ldr	r3, [pc, #544]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80122be:	69db      	ldr	r3, [r3, #28]
 80122c0:	4a87      	ldr	r2, [pc, #540]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80122c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80122c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	f003 0301 	and.w	r3, r3, #1
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d008      	beq.n	80122e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80122d4:	4b82      	ldr	r3, [pc, #520]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80122d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122d8:	f023 0203 	bic.w	r2, r3, #3
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	689b      	ldr	r3, [r3, #8]
 80122e0:	497f      	ldr	r1, [pc, #508]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80122e2:	4313      	orrs	r3, r2
 80122e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	f003 0302 	and.w	r3, r3, #2
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d008      	beq.n	8012304 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80122f2:	4b7b      	ldr	r3, [pc, #492]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80122f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	68db      	ldr	r3, [r3, #12]
 80122fe:	4978      	ldr	r1, [pc, #480]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012300:	4313      	orrs	r3, r2
 8012302:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	f003 0304 	and.w	r3, r3, #4
 801230c:	2b00      	cmp	r3, #0
 801230e:	d008      	beq.n	8012322 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8012310:	4b73      	ldr	r3, [pc, #460]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012314:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	691b      	ldr	r3, [r3, #16]
 801231c:	4970      	ldr	r1, [pc, #448]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801231e:	4313      	orrs	r3, r2
 8012320:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	f003 0320 	and.w	r3, r3, #32
 801232a:	2b00      	cmp	r3, #0
 801232c:	d008      	beq.n	8012340 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801232e:	4b6c      	ldr	r3, [pc, #432]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012332:	f023 0210 	bic.w	r2, r3, #16
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	69db      	ldr	r3, [r3, #28]
 801233a:	4969      	ldr	r1, [pc, #420]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801233c:	4313      	orrs	r3, r2
 801233e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012348:	2b00      	cmp	r3, #0
 801234a:	d008      	beq.n	801235e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 801234c:	4b64      	ldr	r3, [pc, #400]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801234e:	685b      	ldr	r3, [r3, #4]
 8012350:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012358:	4961      	ldr	r1, [pc, #388]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801235a:	4313      	orrs	r3, r2
 801235c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012366:	2b00      	cmp	r3, #0
 8012368:	d008      	beq.n	801237c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801236a:	4b5d      	ldr	r3, [pc, #372]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801236e:	f023 0220 	bic.w	r2, r3, #32
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	6a1b      	ldr	r3, [r3, #32]
 8012376:	495a      	ldr	r1, [pc, #360]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012378:	4313      	orrs	r3, r2
 801237a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012384:	2b00      	cmp	r3, #0
 8012386:	d008      	beq.n	801239a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8012388:	4b55      	ldr	r3, [pc, #340]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801238c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012394:	4952      	ldr	r1, [pc, #328]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012396:	4313      	orrs	r3, r2
 8012398:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	f003 0308 	and.w	r3, r3, #8
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d008      	beq.n	80123b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80123a6:	4b4e      	ldr	r3, [pc, #312]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80123a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	695b      	ldr	r3, [r3, #20]
 80123b2:	494b      	ldr	r1, [pc, #300]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80123b4:	4313      	orrs	r3, r2
 80123b6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	f003 0310 	and.w	r3, r3, #16
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d008      	beq.n	80123d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80123c4:	4b46      	ldr	r3, [pc, #280]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80123c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	699b      	ldr	r3, [r3, #24]
 80123d0:	4943      	ldr	r1, [pc, #268]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80123d2:	4313      	orrs	r3, r2
 80123d4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d008      	beq.n	80123f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80123e2:	4b3f      	ldr	r3, [pc, #252]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80123e4:	685b      	ldr	r3, [r3, #4]
 80123e6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123ee:	493c      	ldr	r1, [pc, #240]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80123f0:	4313      	orrs	r3, r2
 80123f2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d008      	beq.n	8012412 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8012400:	4b37      	ldr	r3, [pc, #220]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012404:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801240c:	4934      	ldr	r1, [pc, #208]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801240e:	4313      	orrs	r3, r2
 8012410:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801241a:	2b00      	cmp	r3, #0
 801241c:	d008      	beq.n	8012430 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 801241e:	4b30      	ldr	r3, [pc, #192]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012422:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801242a:	492d      	ldr	r1, [pc, #180]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801242c:	4313      	orrs	r3, r2
 801242e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012438:	2b00      	cmp	r3, #0
 801243a:	d008      	beq.n	801244e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 801243c:	4b28      	ldr	r3, [pc, #160]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012440:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012448:	4925      	ldr	r1, [pc, #148]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801244a:	4313      	orrs	r3, r2
 801244c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012456:	2b00      	cmp	r3, #0
 8012458:	d008      	beq.n	801246c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 801245a:	4b21      	ldr	r3, [pc, #132]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801245e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012466:	491e      	ldr	r1, [pc, #120]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012468:	4313      	orrs	r3, r2
 801246a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012474:	2b00      	cmp	r3, #0
 8012476:	d008      	beq.n	801248a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8012478:	4b19      	ldr	r3, [pc, #100]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 801247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801247c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012484:	4916      	ldr	r1, [pc, #88]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012486:	4313      	orrs	r3, r2
 8012488:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012492:	2b00      	cmp	r3, #0
 8012494:	d008      	beq.n	80124a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8012496:	4b12      	ldr	r3, [pc, #72]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8012498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801249a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124a2:	490f      	ldr	r1, [pc, #60]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80124a4:	4313      	orrs	r3, r2
 80124a6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d008      	beq.n	80124c6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80124b4:	4b0a      	ldr	r3, [pc, #40]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80124b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124b8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80124c0:	4907      	ldr	r1, [pc, #28]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80124c2:	4313      	orrs	r3, r2
 80124c4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d00c      	beq.n	80124ec <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80124d2:	4b03      	ldr	r3, [pc, #12]	; (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80124d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124d6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	e002      	b.n	80124e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80124de:	bf00      	nop
 80124e0:	40021000 	.word	0x40021000
 80124e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80124e6:	4913      	ldr	r1, [pc, #76]	; (8012534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80124e8:	4313      	orrs	r3, r2
 80124ea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d008      	beq.n	801250a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80124f8:	4b0e      	ldr	r3, [pc, #56]	; (8012534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80124fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012504:	490b      	ldr	r1, [pc, #44]	; (8012534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8012506:	4313      	orrs	r3, r2
 8012508:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012512:	2b00      	cmp	r3, #0
 8012514:	d008      	beq.n	8012528 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8012516:	4b07      	ldr	r3, [pc, #28]	; (8012534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8012518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801251a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012522:	4904      	ldr	r1, [pc, #16]	; (8012534 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8012524:	4313      	orrs	r3, r2
 8012526:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8012528:	2300      	movs	r3, #0
}
 801252a:	4618      	mov	r0, r3
 801252c:	3748      	adds	r7, #72	; 0x48
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}
 8012532:	bf00      	nop
 8012534:	40021000 	.word	0x40021000

08012538 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b082      	sub	sp, #8
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d101      	bne.n	801254a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012546:	2301      	movs	r3, #1
 8012548:	e040      	b.n	80125cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801254e:	2b00      	cmp	r3, #0
 8012550:	d106      	bne.n	8012560 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	2200      	movs	r2, #0
 8012556:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f7fd ff6c 	bl	8010438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	2224      	movs	r2, #36	; 0x24
 8012564:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	681a      	ldr	r2, [r3, #0]
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	f022 0201 	bic.w	r2, r2, #1
 8012574:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012576:	6878      	ldr	r0, [r7, #4]
 8012578:	f000 f82c 	bl	80125d4 <UART_SetConfig>
 801257c:	4603      	mov	r3, r0
 801257e:	2b01      	cmp	r3, #1
 8012580:	d101      	bne.n	8012586 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8012582:	2301      	movs	r3, #1
 8012584:	e022      	b.n	80125cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801258a:	2b00      	cmp	r3, #0
 801258c:	d002      	beq.n	8012594 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f000 f9f6 	bl	8012980 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	685a      	ldr	r2, [r3, #4]
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80125a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	689a      	ldr	r2, [r3, #8]
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80125b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	681a      	ldr	r2, [r3, #0]
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	f042 0201 	orr.w	r2, r2, #1
 80125c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f000 fa7d 	bl	8012ac4 <UART_CheckIdleState>
 80125ca:	4603      	mov	r3, r0
}
 80125cc:	4618      	mov	r0, r3
 80125ce:	3708      	adds	r7, #8
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bd80      	pop	{r7, pc}

080125d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b088      	sub	sp, #32
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80125dc:	2300      	movs	r3, #0
 80125de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	689a      	ldr	r2, [r3, #8]
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	691b      	ldr	r3, [r3, #16]
 80125e8:	431a      	orrs	r2, r3
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	695b      	ldr	r3, [r3, #20]
 80125ee:	431a      	orrs	r2, r3
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	69db      	ldr	r3, [r3, #28]
 80125f4:	4313      	orrs	r3, r2
 80125f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	681a      	ldr	r2, [r3, #0]
 80125fe:	4b92      	ldr	r3, [pc, #584]	; (8012848 <UART_SetConfig+0x274>)
 8012600:	4013      	ands	r3, r2
 8012602:	687a      	ldr	r2, [r7, #4]
 8012604:	6812      	ldr	r2, [r2, #0]
 8012606:	6979      	ldr	r1, [r7, #20]
 8012608:	430b      	orrs	r3, r1
 801260a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	685b      	ldr	r3, [r3, #4]
 8012612:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	68da      	ldr	r2, [r3, #12]
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	430a      	orrs	r2, r1
 8012620:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	699b      	ldr	r3, [r3, #24]
 8012626:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	6a1b      	ldr	r3, [r3, #32]
 801262c:	697a      	ldr	r2, [r7, #20]
 801262e:	4313      	orrs	r3, r2
 8012630:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	689b      	ldr	r3, [r3, #8]
 8012638:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	697a      	ldr	r2, [r7, #20]
 8012642:	430a      	orrs	r2, r1
 8012644:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	4a80      	ldr	r2, [pc, #512]	; (801284c <UART_SetConfig+0x278>)
 801264c:	4293      	cmp	r3, r2
 801264e:	d120      	bne.n	8012692 <UART_SetConfig+0xbe>
 8012650:	4b7f      	ldr	r3, [pc, #508]	; (8012850 <UART_SetConfig+0x27c>)
 8012652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012654:	f003 0303 	and.w	r3, r3, #3
 8012658:	2b03      	cmp	r3, #3
 801265a:	d817      	bhi.n	801268c <UART_SetConfig+0xb8>
 801265c:	a201      	add	r2, pc, #4	; (adr r2, 8012664 <UART_SetConfig+0x90>)
 801265e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012662:	bf00      	nop
 8012664:	08012675 	.word	0x08012675
 8012668:	08012681 	.word	0x08012681
 801266c:	08012687 	.word	0x08012687
 8012670:	0801267b 	.word	0x0801267b
 8012674:	2301      	movs	r3, #1
 8012676:	77fb      	strb	r3, [r7, #31]
 8012678:	e0b5      	b.n	80127e6 <UART_SetConfig+0x212>
 801267a:	2302      	movs	r3, #2
 801267c:	77fb      	strb	r3, [r7, #31]
 801267e:	e0b2      	b.n	80127e6 <UART_SetConfig+0x212>
 8012680:	2304      	movs	r3, #4
 8012682:	77fb      	strb	r3, [r7, #31]
 8012684:	e0af      	b.n	80127e6 <UART_SetConfig+0x212>
 8012686:	2308      	movs	r3, #8
 8012688:	77fb      	strb	r3, [r7, #31]
 801268a:	e0ac      	b.n	80127e6 <UART_SetConfig+0x212>
 801268c:	2310      	movs	r3, #16
 801268e:	77fb      	strb	r3, [r7, #31]
 8012690:	e0a9      	b.n	80127e6 <UART_SetConfig+0x212>
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	4a6f      	ldr	r2, [pc, #444]	; (8012854 <UART_SetConfig+0x280>)
 8012698:	4293      	cmp	r3, r2
 801269a:	d124      	bne.n	80126e6 <UART_SetConfig+0x112>
 801269c:	4b6c      	ldr	r3, [pc, #432]	; (8012850 <UART_SetConfig+0x27c>)
 801269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80126a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80126a8:	d011      	beq.n	80126ce <UART_SetConfig+0xfa>
 80126aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80126ae:	d817      	bhi.n	80126e0 <UART_SetConfig+0x10c>
 80126b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80126b4:	d011      	beq.n	80126da <UART_SetConfig+0x106>
 80126b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80126ba:	d811      	bhi.n	80126e0 <UART_SetConfig+0x10c>
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d003      	beq.n	80126c8 <UART_SetConfig+0xf4>
 80126c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80126c4:	d006      	beq.n	80126d4 <UART_SetConfig+0x100>
 80126c6:	e00b      	b.n	80126e0 <UART_SetConfig+0x10c>
 80126c8:	2300      	movs	r3, #0
 80126ca:	77fb      	strb	r3, [r7, #31]
 80126cc:	e08b      	b.n	80127e6 <UART_SetConfig+0x212>
 80126ce:	2302      	movs	r3, #2
 80126d0:	77fb      	strb	r3, [r7, #31]
 80126d2:	e088      	b.n	80127e6 <UART_SetConfig+0x212>
 80126d4:	2304      	movs	r3, #4
 80126d6:	77fb      	strb	r3, [r7, #31]
 80126d8:	e085      	b.n	80127e6 <UART_SetConfig+0x212>
 80126da:	2308      	movs	r3, #8
 80126dc:	77fb      	strb	r3, [r7, #31]
 80126de:	e082      	b.n	80127e6 <UART_SetConfig+0x212>
 80126e0:	2310      	movs	r3, #16
 80126e2:	77fb      	strb	r3, [r7, #31]
 80126e4:	e07f      	b.n	80127e6 <UART_SetConfig+0x212>
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	4a5b      	ldr	r2, [pc, #364]	; (8012858 <UART_SetConfig+0x284>)
 80126ec:	4293      	cmp	r3, r2
 80126ee:	d124      	bne.n	801273a <UART_SetConfig+0x166>
 80126f0:	4b57      	ldr	r3, [pc, #348]	; (8012850 <UART_SetConfig+0x27c>)
 80126f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126f4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80126f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80126fc:	d011      	beq.n	8012722 <UART_SetConfig+0x14e>
 80126fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8012702:	d817      	bhi.n	8012734 <UART_SetConfig+0x160>
 8012704:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8012708:	d011      	beq.n	801272e <UART_SetConfig+0x15a>
 801270a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801270e:	d811      	bhi.n	8012734 <UART_SetConfig+0x160>
 8012710:	2b00      	cmp	r3, #0
 8012712:	d003      	beq.n	801271c <UART_SetConfig+0x148>
 8012714:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012718:	d006      	beq.n	8012728 <UART_SetConfig+0x154>
 801271a:	e00b      	b.n	8012734 <UART_SetConfig+0x160>
 801271c:	2300      	movs	r3, #0
 801271e:	77fb      	strb	r3, [r7, #31]
 8012720:	e061      	b.n	80127e6 <UART_SetConfig+0x212>
 8012722:	2302      	movs	r3, #2
 8012724:	77fb      	strb	r3, [r7, #31]
 8012726:	e05e      	b.n	80127e6 <UART_SetConfig+0x212>
 8012728:	2304      	movs	r3, #4
 801272a:	77fb      	strb	r3, [r7, #31]
 801272c:	e05b      	b.n	80127e6 <UART_SetConfig+0x212>
 801272e:	2308      	movs	r3, #8
 8012730:	77fb      	strb	r3, [r7, #31]
 8012732:	e058      	b.n	80127e6 <UART_SetConfig+0x212>
 8012734:	2310      	movs	r3, #16
 8012736:	77fb      	strb	r3, [r7, #31]
 8012738:	e055      	b.n	80127e6 <UART_SetConfig+0x212>
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	4a47      	ldr	r2, [pc, #284]	; (801285c <UART_SetConfig+0x288>)
 8012740:	4293      	cmp	r3, r2
 8012742:	d124      	bne.n	801278e <UART_SetConfig+0x1ba>
 8012744:	4b42      	ldr	r3, [pc, #264]	; (8012850 <UART_SetConfig+0x27c>)
 8012746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012748:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 801274c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012750:	d011      	beq.n	8012776 <UART_SetConfig+0x1a2>
 8012752:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012756:	d817      	bhi.n	8012788 <UART_SetConfig+0x1b4>
 8012758:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801275c:	d011      	beq.n	8012782 <UART_SetConfig+0x1ae>
 801275e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012762:	d811      	bhi.n	8012788 <UART_SetConfig+0x1b4>
 8012764:	2b00      	cmp	r3, #0
 8012766:	d003      	beq.n	8012770 <UART_SetConfig+0x19c>
 8012768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801276c:	d006      	beq.n	801277c <UART_SetConfig+0x1a8>
 801276e:	e00b      	b.n	8012788 <UART_SetConfig+0x1b4>
 8012770:	2300      	movs	r3, #0
 8012772:	77fb      	strb	r3, [r7, #31]
 8012774:	e037      	b.n	80127e6 <UART_SetConfig+0x212>
 8012776:	2302      	movs	r3, #2
 8012778:	77fb      	strb	r3, [r7, #31]
 801277a:	e034      	b.n	80127e6 <UART_SetConfig+0x212>
 801277c:	2304      	movs	r3, #4
 801277e:	77fb      	strb	r3, [r7, #31]
 8012780:	e031      	b.n	80127e6 <UART_SetConfig+0x212>
 8012782:	2308      	movs	r3, #8
 8012784:	77fb      	strb	r3, [r7, #31]
 8012786:	e02e      	b.n	80127e6 <UART_SetConfig+0x212>
 8012788:	2310      	movs	r3, #16
 801278a:	77fb      	strb	r3, [r7, #31]
 801278c:	e02b      	b.n	80127e6 <UART_SetConfig+0x212>
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	4a33      	ldr	r2, [pc, #204]	; (8012860 <UART_SetConfig+0x28c>)
 8012794:	4293      	cmp	r3, r2
 8012796:	d124      	bne.n	80127e2 <UART_SetConfig+0x20e>
 8012798:	4b2d      	ldr	r3, [pc, #180]	; (8012850 <UART_SetConfig+0x27c>)
 801279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801279c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80127a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80127a4:	d011      	beq.n	80127ca <UART_SetConfig+0x1f6>
 80127a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80127aa:	d817      	bhi.n	80127dc <UART_SetConfig+0x208>
 80127ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80127b0:	d011      	beq.n	80127d6 <UART_SetConfig+0x202>
 80127b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80127b6:	d811      	bhi.n	80127dc <UART_SetConfig+0x208>
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d003      	beq.n	80127c4 <UART_SetConfig+0x1f0>
 80127bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80127c0:	d006      	beq.n	80127d0 <UART_SetConfig+0x1fc>
 80127c2:	e00b      	b.n	80127dc <UART_SetConfig+0x208>
 80127c4:	2300      	movs	r3, #0
 80127c6:	77fb      	strb	r3, [r7, #31]
 80127c8:	e00d      	b.n	80127e6 <UART_SetConfig+0x212>
 80127ca:	2302      	movs	r3, #2
 80127cc:	77fb      	strb	r3, [r7, #31]
 80127ce:	e00a      	b.n	80127e6 <UART_SetConfig+0x212>
 80127d0:	2304      	movs	r3, #4
 80127d2:	77fb      	strb	r3, [r7, #31]
 80127d4:	e007      	b.n	80127e6 <UART_SetConfig+0x212>
 80127d6:	2308      	movs	r3, #8
 80127d8:	77fb      	strb	r3, [r7, #31]
 80127da:	e004      	b.n	80127e6 <UART_SetConfig+0x212>
 80127dc:	2310      	movs	r3, #16
 80127de:	77fb      	strb	r3, [r7, #31]
 80127e0:	e001      	b.n	80127e6 <UART_SetConfig+0x212>
 80127e2:	2310      	movs	r3, #16
 80127e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	69db      	ldr	r3, [r3, #28]
 80127ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80127ee:	d16c      	bne.n	80128ca <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80127f0:	7ffb      	ldrb	r3, [r7, #31]
 80127f2:	2b08      	cmp	r3, #8
 80127f4:	d838      	bhi.n	8012868 <UART_SetConfig+0x294>
 80127f6:	a201      	add	r2, pc, #4	; (adr r2, 80127fc <UART_SetConfig+0x228>)
 80127f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127fc:	08012821 	.word	0x08012821
 8012800:	08012829 	.word	0x08012829
 8012804:	08012831 	.word	0x08012831
 8012808:	08012869 	.word	0x08012869
 801280c:	08012837 	.word	0x08012837
 8012810:	08012869 	.word	0x08012869
 8012814:	08012869 	.word	0x08012869
 8012818:	08012869 	.word	0x08012869
 801281c:	0801283f 	.word	0x0801283f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012820:	f7ff fc28 	bl	8012074 <HAL_RCC_GetPCLK1Freq>
 8012824:	61b8      	str	r0, [r7, #24]
        break;
 8012826:	e024      	b.n	8012872 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012828:	f7ff fc46 	bl	80120b8 <HAL_RCC_GetPCLK2Freq>
 801282c:	61b8      	str	r0, [r7, #24]
        break;
 801282e:	e020      	b.n	8012872 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012830:	4b0c      	ldr	r3, [pc, #48]	; (8012864 <UART_SetConfig+0x290>)
 8012832:	61bb      	str	r3, [r7, #24]
        break;
 8012834:	e01d      	b.n	8012872 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012836:	f7ff fba7 	bl	8011f88 <HAL_RCC_GetSysClockFreq>
 801283a:	61b8      	str	r0, [r7, #24]
        break;
 801283c:	e019      	b.n	8012872 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801283e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012842:	61bb      	str	r3, [r7, #24]
        break;
 8012844:	e015      	b.n	8012872 <UART_SetConfig+0x29e>
 8012846:	bf00      	nop
 8012848:	efff69f3 	.word	0xefff69f3
 801284c:	40013800 	.word	0x40013800
 8012850:	40021000 	.word	0x40021000
 8012854:	40004400 	.word	0x40004400
 8012858:	40004800 	.word	0x40004800
 801285c:	40004c00 	.word	0x40004c00
 8012860:	40005000 	.word	0x40005000
 8012864:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8012868:	2300      	movs	r3, #0
 801286a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801286c:	2301      	movs	r3, #1
 801286e:	77bb      	strb	r3, [r7, #30]
        break;
 8012870:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012872:	69bb      	ldr	r3, [r7, #24]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d075      	beq.n	8012964 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012878:	69bb      	ldr	r3, [r7, #24]
 801287a:	005a      	lsls	r2, r3, #1
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	685b      	ldr	r3, [r3, #4]
 8012880:	085b      	lsrs	r3, r3, #1
 8012882:	441a      	add	r2, r3
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	685b      	ldr	r3, [r3, #4]
 8012888:	fbb2 f3f3 	udiv	r3, r2, r3
 801288c:	b29b      	uxth	r3, r3
 801288e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	2b0f      	cmp	r3, #15
 8012894:	d916      	bls.n	80128c4 <UART_SetConfig+0x2f0>
 8012896:	693b      	ldr	r3, [r7, #16]
 8012898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801289c:	d212      	bcs.n	80128c4 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801289e:	693b      	ldr	r3, [r7, #16]
 80128a0:	b29b      	uxth	r3, r3
 80128a2:	f023 030f 	bic.w	r3, r3, #15
 80128a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80128a8:	693b      	ldr	r3, [r7, #16]
 80128aa:	085b      	lsrs	r3, r3, #1
 80128ac:	b29b      	uxth	r3, r3
 80128ae:	f003 0307 	and.w	r3, r3, #7
 80128b2:	b29a      	uxth	r2, r3
 80128b4:	89fb      	ldrh	r3, [r7, #14]
 80128b6:	4313      	orrs	r3, r2
 80128b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	89fa      	ldrh	r2, [r7, #14]
 80128c0:	60da      	str	r2, [r3, #12]
 80128c2:	e04f      	b.n	8012964 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80128c4:	2301      	movs	r3, #1
 80128c6:	77bb      	strb	r3, [r7, #30]
 80128c8:	e04c      	b.n	8012964 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80128ca:	7ffb      	ldrb	r3, [r7, #31]
 80128cc:	2b08      	cmp	r3, #8
 80128ce:	d828      	bhi.n	8012922 <UART_SetConfig+0x34e>
 80128d0:	a201      	add	r2, pc, #4	; (adr r2, 80128d8 <UART_SetConfig+0x304>)
 80128d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128d6:	bf00      	nop
 80128d8:	080128fd 	.word	0x080128fd
 80128dc:	08012905 	.word	0x08012905
 80128e0:	0801290d 	.word	0x0801290d
 80128e4:	08012923 	.word	0x08012923
 80128e8:	08012913 	.word	0x08012913
 80128ec:	08012923 	.word	0x08012923
 80128f0:	08012923 	.word	0x08012923
 80128f4:	08012923 	.word	0x08012923
 80128f8:	0801291b 	.word	0x0801291b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80128fc:	f7ff fbba 	bl	8012074 <HAL_RCC_GetPCLK1Freq>
 8012900:	61b8      	str	r0, [r7, #24]
        break;
 8012902:	e013      	b.n	801292c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012904:	f7ff fbd8 	bl	80120b8 <HAL_RCC_GetPCLK2Freq>
 8012908:	61b8      	str	r0, [r7, #24]
        break;
 801290a:	e00f      	b.n	801292c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801290c:	4b1b      	ldr	r3, [pc, #108]	; (801297c <UART_SetConfig+0x3a8>)
 801290e:	61bb      	str	r3, [r7, #24]
        break;
 8012910:	e00c      	b.n	801292c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012912:	f7ff fb39 	bl	8011f88 <HAL_RCC_GetSysClockFreq>
 8012916:	61b8      	str	r0, [r7, #24]
        break;
 8012918:	e008      	b.n	801292c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801291a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801291e:	61bb      	str	r3, [r7, #24]
        break;
 8012920:	e004      	b.n	801292c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8012922:	2300      	movs	r3, #0
 8012924:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8012926:	2301      	movs	r3, #1
 8012928:	77bb      	strb	r3, [r7, #30]
        break;
 801292a:	bf00      	nop
    }

    if (pclk != 0U)
 801292c:	69bb      	ldr	r3, [r7, #24]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d018      	beq.n	8012964 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	685b      	ldr	r3, [r3, #4]
 8012936:	085a      	lsrs	r2, r3, #1
 8012938:	69bb      	ldr	r3, [r7, #24]
 801293a:	441a      	add	r2, r3
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	685b      	ldr	r3, [r3, #4]
 8012940:	fbb2 f3f3 	udiv	r3, r2, r3
 8012944:	b29b      	uxth	r3, r3
 8012946:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012948:	693b      	ldr	r3, [r7, #16]
 801294a:	2b0f      	cmp	r3, #15
 801294c:	d908      	bls.n	8012960 <UART_SetConfig+0x38c>
 801294e:	693b      	ldr	r3, [r7, #16]
 8012950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012954:	d204      	bcs.n	8012960 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	693a      	ldr	r2, [r7, #16]
 801295c:	60da      	str	r2, [r3, #12]
 801295e:	e001      	b.n	8012964 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8012960:	2301      	movs	r3, #1
 8012962:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	2200      	movs	r2, #0
 8012968:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	2200      	movs	r2, #0
 801296e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8012970:	7fbb      	ldrb	r3, [r7, #30]
}
 8012972:	4618      	mov	r0, r3
 8012974:	3720      	adds	r7, #32
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}
 801297a:	bf00      	nop
 801297c:	007a1200 	.word	0x007a1200

08012980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012980:	b480      	push	{r7}
 8012982:	b083      	sub	sp, #12
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801298c:	f003 0301 	and.w	r3, r3, #1
 8012990:	2b00      	cmp	r3, #0
 8012992:	d00a      	beq.n	80129aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	685b      	ldr	r3, [r3, #4]
 801299a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	430a      	orrs	r2, r1
 80129a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129ae:	f003 0302 	and.w	r3, r3, #2
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d00a      	beq.n	80129cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	685b      	ldr	r3, [r3, #4]
 80129bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	430a      	orrs	r2, r1
 80129ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129d0:	f003 0304 	and.w	r3, r3, #4
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d00a      	beq.n	80129ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	685b      	ldr	r3, [r3, #4]
 80129de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	430a      	orrs	r2, r1
 80129ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129f2:	f003 0308 	and.w	r3, r3, #8
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d00a      	beq.n	8012a10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	685b      	ldr	r3, [r3, #4]
 8012a00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	430a      	orrs	r2, r1
 8012a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a14:	f003 0310 	and.w	r3, r3, #16
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d00a      	beq.n	8012a32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	689b      	ldr	r3, [r3, #8]
 8012a22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	430a      	orrs	r2, r1
 8012a30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a36:	f003 0320 	and.w	r3, r3, #32
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d00a      	beq.n	8012a54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	689b      	ldr	r3, [r3, #8]
 8012a44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	430a      	orrs	r2, r1
 8012a52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d01a      	beq.n	8012a96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	685b      	ldr	r3, [r3, #4]
 8012a66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	430a      	orrs	r2, r1
 8012a74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012a7e:	d10a      	bne.n	8012a96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	685b      	ldr	r3, [r3, #4]
 8012a86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	430a      	orrs	r2, r1
 8012a94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d00a      	beq.n	8012ab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	685b      	ldr	r3, [r3, #4]
 8012aa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	430a      	orrs	r2, r1
 8012ab6:	605a      	str	r2, [r3, #4]
  }
}
 8012ab8:	bf00      	nop
 8012aba:	370c      	adds	r7, #12
 8012abc:	46bd      	mov	sp, r7
 8012abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac2:	4770      	bx	lr

08012ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b086      	sub	sp, #24
 8012ac8:	af02      	add	r7, sp, #8
 8012aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	2200      	movs	r2, #0
 8012ad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012ad4:	f7fd fdb6 	bl	8010644 <HAL_GetTick>
 8012ad8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	f003 0308 	and.w	r3, r3, #8
 8012ae4:	2b08      	cmp	r3, #8
 8012ae6:	d10e      	bne.n	8012b06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012ae8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012aec:	9300      	str	r3, [sp, #0]
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	2200      	movs	r2, #0
 8012af2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f000 f82d 	bl	8012b56 <UART_WaitOnFlagUntilTimeout>
 8012afc:	4603      	mov	r3, r0
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d001      	beq.n	8012b06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012b02:	2303      	movs	r3, #3
 8012b04:	e023      	b.n	8012b4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	f003 0304 	and.w	r3, r3, #4
 8012b10:	2b04      	cmp	r3, #4
 8012b12:	d10e      	bne.n	8012b32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012b14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012b18:	9300      	str	r3, [sp, #0]
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012b22:	6878      	ldr	r0, [r7, #4]
 8012b24:	f000 f817 	bl	8012b56 <UART_WaitOnFlagUntilTimeout>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d001      	beq.n	8012b32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012b2e:	2303      	movs	r3, #3
 8012b30:	e00d      	b.n	8012b4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	2220      	movs	r2, #32
 8012b36:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	2220      	movs	r2, #32
 8012b3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	2200      	movs	r2, #0
 8012b42:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2200      	movs	r2, #0
 8012b48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8012b4c:	2300      	movs	r3, #0
}
 8012b4e:	4618      	mov	r0, r3
 8012b50:	3710      	adds	r7, #16
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd80      	pop	{r7, pc}

08012b56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012b56:	b580      	push	{r7, lr}
 8012b58:	b09c      	sub	sp, #112	; 0x70
 8012b5a:	af00      	add	r7, sp, #0
 8012b5c:	60f8      	str	r0, [r7, #12]
 8012b5e:	60b9      	str	r1, [r7, #8]
 8012b60:	603b      	str	r3, [r7, #0]
 8012b62:	4613      	mov	r3, r2
 8012b64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012b66:	e0a5      	b.n	8012cb4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012b68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b6e:	f000 80a1 	beq.w	8012cb4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012b72:	f7fd fd67 	bl	8010644 <HAL_GetTick>
 8012b76:	4602      	mov	r2, r0
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	1ad3      	subs	r3, r2, r3
 8012b7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012b7e:	429a      	cmp	r2, r3
 8012b80:	d302      	bcc.n	8012b88 <UART_WaitOnFlagUntilTimeout+0x32>
 8012b82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d13e      	bne.n	8012c06 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b90:	e853 3f00 	ldrex	r3, [r3]
 8012b94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8012b9c:	667b      	str	r3, [r7, #100]	; 0x64
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	461a      	mov	r2, r3
 8012ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012ba8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012baa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012bac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012bae:	e841 2300 	strex	r3, r2, [r1]
 8012bb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8012bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d1e6      	bne.n	8012b88 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	3308      	adds	r3, #8
 8012bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bc4:	e853 3f00 	ldrex	r3, [r3]
 8012bc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bcc:	f023 0301 	bic.w	r3, r3, #1
 8012bd0:	663b      	str	r3, [r7, #96]	; 0x60
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	3308      	adds	r3, #8
 8012bd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012bda:	64ba      	str	r2, [r7, #72]	; 0x48
 8012bdc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012be0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012be2:	e841 2300 	strex	r3, r2, [r1]
 8012be6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8012be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d1e5      	bne.n	8012bba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	2220      	movs	r2, #32
 8012bf2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	2220      	movs	r2, #32
 8012bf8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8012c02:	2303      	movs	r3, #3
 8012c04:	e067      	b.n	8012cd6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	f003 0304 	and.w	r3, r3, #4
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d04f      	beq.n	8012cb4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	69db      	ldr	r3, [r3, #28]
 8012c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012c22:	d147      	bne.n	8012cb4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012c2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c36:	e853 3f00 	ldrex	r3, [r3]
 8012c3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8012c42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	461a      	mov	r2, r3
 8012c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8012c4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012c52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c54:	e841 2300 	strex	r3, r2, [r1]
 8012c58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8012c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d1e6      	bne.n	8012c2e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	3308      	adds	r3, #8
 8012c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c68:	697b      	ldr	r3, [r7, #20]
 8012c6a:	e853 3f00 	ldrex	r3, [r3]
 8012c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8012c70:	693b      	ldr	r3, [r7, #16]
 8012c72:	f023 0301 	bic.w	r3, r3, #1
 8012c76:	66bb      	str	r3, [r7, #104]	; 0x68
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	3308      	adds	r3, #8
 8012c7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012c80:	623a      	str	r2, [r7, #32]
 8012c82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c84:	69f9      	ldr	r1, [r7, #28]
 8012c86:	6a3a      	ldr	r2, [r7, #32]
 8012c88:	e841 2300 	strex	r3, r2, [r1]
 8012c8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8012c8e:	69bb      	ldr	r3, [r7, #24]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d1e5      	bne.n	8012c60 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	2220      	movs	r2, #32
 8012c98:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	2220      	movs	r2, #32
 8012c9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	2220      	movs	r2, #32
 8012ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	2200      	movs	r2, #0
 8012cac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8012cb0:	2303      	movs	r3, #3
 8012cb2:	e010      	b.n	8012cd6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	69da      	ldr	r2, [r3, #28]
 8012cba:	68bb      	ldr	r3, [r7, #8]
 8012cbc:	4013      	ands	r3, r2
 8012cbe:	68ba      	ldr	r2, [r7, #8]
 8012cc0:	429a      	cmp	r2, r3
 8012cc2:	bf0c      	ite	eq
 8012cc4:	2301      	moveq	r3, #1
 8012cc6:	2300      	movne	r3, #0
 8012cc8:	b2db      	uxtb	r3, r3
 8012cca:	461a      	mov	r2, r3
 8012ccc:	79fb      	ldrb	r3, [r7, #7]
 8012cce:	429a      	cmp	r2, r3
 8012cd0:	f43f af4a 	beq.w	8012b68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012cd4:	2300      	movs	r3, #0
}
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	3770      	adds	r7, #112	; 0x70
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	bd80      	pop	{r7, pc}
	...

08012ce0 <__libc_init_array>:
 8012ce0:	b570      	push	{r4, r5, r6, lr}
 8012ce2:	4d0d      	ldr	r5, [pc, #52]	; (8012d18 <__libc_init_array+0x38>)
 8012ce4:	4c0d      	ldr	r4, [pc, #52]	; (8012d1c <__libc_init_array+0x3c>)
 8012ce6:	1b64      	subs	r4, r4, r5
 8012ce8:	10a4      	asrs	r4, r4, #2
 8012cea:	2600      	movs	r6, #0
 8012cec:	42a6      	cmp	r6, r4
 8012cee:	d109      	bne.n	8012d04 <__libc_init_array+0x24>
 8012cf0:	4d0b      	ldr	r5, [pc, #44]	; (8012d20 <__libc_init_array+0x40>)
 8012cf2:	4c0c      	ldr	r4, [pc, #48]	; (8012d24 <__libc_init_array+0x44>)
 8012cf4:	f000 f820 	bl	8012d38 <_init>
 8012cf8:	1b64      	subs	r4, r4, r5
 8012cfa:	10a4      	asrs	r4, r4, #2
 8012cfc:	2600      	movs	r6, #0
 8012cfe:	42a6      	cmp	r6, r4
 8012d00:	d105      	bne.n	8012d0e <__libc_init_array+0x2e>
 8012d02:	bd70      	pop	{r4, r5, r6, pc}
 8012d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8012d08:	4798      	blx	r3
 8012d0a:	3601      	adds	r6, #1
 8012d0c:	e7ee      	b.n	8012cec <__libc_init_array+0xc>
 8012d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012d12:	4798      	blx	r3
 8012d14:	3601      	adds	r6, #1
 8012d16:	e7f2      	b.n	8012cfe <__libc_init_array+0x1e>
 8012d18:	08012d88 	.word	0x08012d88
 8012d1c:	08012d88 	.word	0x08012d88
 8012d20:	08012d88 	.word	0x08012d88
 8012d24:	08012d8c 	.word	0x08012d8c

08012d28 <memset>:
 8012d28:	4402      	add	r2, r0
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	4293      	cmp	r3, r2
 8012d2e:	d100      	bne.n	8012d32 <memset+0xa>
 8012d30:	4770      	bx	lr
 8012d32:	f803 1b01 	strb.w	r1, [r3], #1
 8012d36:	e7f9      	b.n	8012d2c <memset+0x4>

08012d38 <_init>:
 8012d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d3a:	bf00      	nop
 8012d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d3e:	bc08      	pop	{r3}
 8012d40:	469e      	mov	lr, r3
 8012d42:	4770      	bx	lr

08012d44 <_fini>:
 8012d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d46:	bf00      	nop
 8012d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d4a:	bc08      	pop	{r3}
 8012d4c:	469e      	mov	lr, r3
 8012d4e:	4770      	bx	lr
