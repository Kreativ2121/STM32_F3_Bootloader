
WAA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006480  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006610  08006610  00016610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066fc  080066fc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080066fc  080066fc  000166fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006704  08006704  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006704  08006704  00016704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006708  08006708  00016708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800670c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004bb8  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004c2c  20004c2c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dbfa  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004155  00000000  00000000  0003dc9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001820  00000000  00000000  00041df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001678  00000000  00000000  00043618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002397c  00000000  00000000  00044c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ed67  00000000  00000000  0006860c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8e21  00000000  00000000  00087373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00160194  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006774  00000000  00000000  001601e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065f8 	.word	0x080065f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080065f8 	.word	0x080065f8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004da:	463b      	mov	r3, r7
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004e6:	4b21      	ldr	r3, [pc, #132]	; (800056c <MX_ADC1_Init+0x98>)
 80004e8:	4a21      	ldr	r2, [pc, #132]	; (8000570 <MX_ADC1_Init+0x9c>)
 80004ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004ec:	4b1f      	ldr	r3, [pc, #124]	; (800056c <MX_ADC1_Init+0x98>)
 80004ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f4:	4b1d      	ldr	r3, [pc, #116]	; (800056c <MX_ADC1_Init+0x98>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004fa:	4b1c      	ldr	r3, [pc, #112]	; (800056c <MX_ADC1_Init+0x98>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000500:	4b1a      	ldr	r3, [pc, #104]	; (800056c <MX_ADC1_Init+0x98>)
 8000502:	2200      	movs	r2, #0
 8000504:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000506:	4b19      	ldr	r3, [pc, #100]	; (800056c <MX_ADC1_Init+0x98>)
 8000508:	2200      	movs	r2, #0
 800050a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <MX_ADC1_Init+0x98>)
 8000510:	2200      	movs	r2, #0
 8000512:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <MX_ADC1_Init+0x98>)
 8000516:	4a17      	ldr	r2, [pc, #92]	; (8000574 <MX_ADC1_Init+0xa0>)
 8000518:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <MX_ADC1_Init+0x98>)
 800051c:	2200      	movs	r2, #0
 800051e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <MX_ADC1_Init+0x98>)
 8000522:	2201      	movs	r2, #1
 8000524:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <MX_ADC1_Init+0x98>)
 8000528:	2200      	movs	r2, #0
 800052a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_ADC1_Init+0x98>)
 8000530:	2201      	movs	r2, #1
 8000532:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000534:	480d      	ldr	r0, [pc, #52]	; (800056c <MX_ADC1_Init+0x98>)
 8000536:	f000 fca7 	bl	8000e88 <HAL_ADC_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000540:	f000 f9fe 	bl	8000940 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000544:	2301      	movs	r3, #1
 8000546:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000548:	2301      	movs	r3, #1
 800054a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000550:	463b      	mov	r3, r7
 8000552:	4619      	mov	r1, r3
 8000554:	4805      	ldr	r0, [pc, #20]	; (800056c <MX_ADC1_Init+0x98>)
 8000556:	f000 fcdb 	bl	8000f10 <HAL_ADC_ConfigChannel>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000560:	f000 f9ee 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000564:	bf00      	nop
 8000566:	3710      	adds	r7, #16
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000090 	.word	0x20000090
 8000570:	40012000 	.word	0x40012000
 8000574:	0f000001 	.word	0x0f000001

08000578 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a17      	ldr	r2, [pc, #92]	; (80005f4 <HAL_ADC_MspInit+0x7c>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d127      	bne.n	80005ea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
 800059e:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <HAL_ADC_MspInit+0x80>)
 80005a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a2:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <HAL_ADC_MspInit+0x80>)
 80005a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a8:	6453      	str	r3, [r2, #68]	; 0x44
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <HAL_ADC_MspInit+0x80>)
 80005ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <HAL_ADC_MspInit+0x80>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <HAL_ADC_MspInit+0x80>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <HAL_ADC_MspInit+0x80>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80005d2:	2306      	movs	r3, #6
 80005d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d6:	2303      	movs	r3, #3
 80005d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	4619      	mov	r1, r3
 80005e4:	4805      	ldr	r0, [pc, #20]	; (80005fc <HAL_ADC_MspInit+0x84>)
 80005e6:	f001 f841 	bl	800166c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005ea:	bf00      	nop
 80005ec:	3728      	adds	r7, #40	; 0x28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40012000 	.word	0x40012000
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40020000 	.word	0x40020000

08000600 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_CRC_Init+0x20>)
 8000606:	4a07      	ldr	r2, [pc, #28]	; (8000624 <MX_CRC_Init+0x24>)
 8000608:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <MX_CRC_Init+0x20>)
 800060c:	f000 ff80 	bl	8001510 <HAL_CRC_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000616:	f000 f993 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200000d8 	.word	0x200000d8
 8000624:	40023000 	.word	0x40023000

08000628 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <HAL_CRC_MspInit+0x3c>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d10d      	bne.n	8000656 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <HAL_CRC_MspInit+0x40>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a09      	ldr	r2, [pc, #36]	; (8000668 <HAL_CRC_MspInit+0x40>)
 8000644:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b07      	ldr	r3, [pc, #28]	; (8000668 <HAL_CRC_MspInit+0x40>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000656:	bf00      	nop
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40023000 	.word	0x40023000
 8000668:	40023800 	.word	0x40023800

0800066c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000670:	4a08      	ldr	r2, [pc, #32]	; (8000694 <MX_FREERTOS_Init+0x28>)
 8000672:	2100      	movs	r1, #0
 8000674:	4808      	ldr	r0, [pc, #32]	; (8000698 <MX_FREERTOS_Init+0x2c>)
 8000676:	f003 f98d 	bl	8003994 <osThreadNew>
 800067a:	4603      	mov	r3, r0
 800067c:	4a07      	ldr	r2, [pc, #28]	; (800069c <MX_FREERTOS_Init+0x30>)
 800067e:	6013      	str	r3, [r2, #0]

  /* creation of LEDTask */
  LEDTaskHandle = osThreadNew(LED_Blink, NULL, &LEDTask_attributes);
 8000680:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <MX_FREERTOS_Init+0x34>)
 8000682:	2100      	movs	r1, #0
 8000684:	4807      	ldr	r0, [pc, #28]	; (80006a4 <MX_FREERTOS_Init+0x38>)
 8000686:	f003 f985 	bl	8003994 <osThreadNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <MX_FREERTOS_Init+0x3c>)
 800068e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	0800663c 	.word	0x0800663c
 8000698:	080006ad 	.word	0x080006ad
 800069c:	200000e0 	.word	0x200000e0
 80006a0:	08006660 	.word	0x08006660
 80006a4:	080006cd 	.word	0x080006cd
 80006a8:	200000e4 	.word	0x200000e4

080006ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin (LED_CARD_GPIO_Port, LED_CARD_Pin);
 80006b4:	2120      	movs	r1, #32
 80006b6:	4804      	ldr	r0, [pc, #16]	; (80006c8 <StartDefaultTask+0x1c>)
 80006b8:	f001 f98d 	bl	80019d6 <HAL_GPIO_TogglePin>
    osDelay(2000);
 80006bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006c0:	f003 f9fa 	bl	8003ab8 <osDelay>
	HAL_GPIO_TogglePin (LED_CARD_GPIO_Port, LED_CARD_Pin);
 80006c4:	e7f6      	b.n	80006b4 <StartDefaultTask+0x8>
 80006c6:	bf00      	nop
 80006c8:	40020800 	.word	0x40020800

080006cc <LED_Blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED_Blink */
void LED_Blink(void *argument)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LED_Blink */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006d4:	2001      	movs	r0, #1
 80006d6:	f003 f9ef 	bl	8003ab8 <osDelay>
 80006da:	e7fb      	b.n	80006d4 <LED_Blink+0x8>

080006dc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB5   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	4b43      	ldr	r3, [pc, #268]	; (8000804 <MX_GPIO_Init+0x128>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a42      	ldr	r2, [pc, #264]	; (8000804 <MX_GPIO_Init+0x128>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b40      	ldr	r3, [pc, #256]	; (8000804 <MX_GPIO_Init+0x128>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	4b3c      	ldr	r3, [pc, #240]	; (8000804 <MX_GPIO_Init+0x128>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a3b      	ldr	r2, [pc, #236]	; (8000804 <MX_GPIO_Init+0x128>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b39      	ldr	r3, [pc, #228]	; (8000804 <MX_GPIO_Init+0x128>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	4b35      	ldr	r3, [pc, #212]	; (8000804 <MX_GPIO_Init+0x128>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a34      	ldr	r2, [pc, #208]	; (8000804 <MX_GPIO_Init+0x128>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b32      	ldr	r3, [pc, #200]	; (8000804 <MX_GPIO_Init+0x128>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b2e      	ldr	r3, [pc, #184]	; (8000804 <MX_GPIO_Init+0x128>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a2d      	ldr	r2, [pc, #180]	; (8000804 <MX_GPIO_Init+0x128>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <MX_GPIO_Init+0x128>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MA4_WCLK_Pin|DFKOM_CS_Pin|MA4_D_DE_Pin|WDTR_Pin
 8000762:	2200      	movs	r2, #0
 8000764:	f641 1109 	movw	r1, #6409	; 0x1909
 8000768:	4827      	ldr	r0, [pc, #156]	; (8000808 <MX_GPIO_Init+0x12c>)
 800076a:	f001 f91b 	bl	80019a4 <HAL_GPIO_WritePin>
                          |MA4_WDTRST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CARD_Pin|P48FN_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000774:	4825      	ldr	r0, [pc, #148]	; (800080c <MX_GPIO_Init+0x130>)
 8000776:	f001 f915 	bl	80019a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MA4_RAT_Pin|MA4_BYP_Pin|MA4_GPIO0_Pin|MA4_BYP0_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2147      	movs	r1, #71	; 0x47
 800077e:	4824      	ldr	r0, [pc, #144]	; (8000810 <MX_GPIO_Init+0x134>)
 8000780:	f001 f910 	bl	80019a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = MA4_WCLK_Pin|DFKOM_CS_Pin|MA4_D_DE_Pin|WDTR_Pin
 8000784:	f641 1309 	movw	r3, #6409	; 0x1909
 8000788:	617b      	str	r3, [r7, #20]
                          |MA4_WDTRST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	481a      	ldr	r0, [pc, #104]	; (8000808 <MX_GPIO_Init+0x12c>)
 800079e:	f000 ff65 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_CARD_Pin|P48FN_Pin;
 80007a2:	f44f 7308 	mov.w	r3, #544	; 0x220
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	4619      	mov	r1, r3
 80007ba:	4814      	ldr	r0, [pc, #80]	; (800080c <MX_GPIO_Init+0x130>)
 80007bc:	f000 ff56 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MA4_RAT_Pin|MA4_BYP_Pin|MA4_GPIO0_Pin|MA4_BYP0_Pin;
 80007c0:	2347      	movs	r3, #71	; 0x47
 80007c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <MX_GPIO_Init+0x134>)
 80007d8:	f000 ff48 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007dc:	2320      	movs	r3, #32
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007ec:	2306      	movs	r3, #6
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	4806      	ldr	r0, [pc, #24]	; (8000810 <MX_GPIO_Init+0x134>)
 80007f8:	f000 ff38 	bl	800166c <HAL_GPIO_Init>

}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	; 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40020000 	.word	0x40020000
 800080c:	40020800 	.word	0x40020800
 8000810:	40020400 	.word	0x40020400

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000818:	f000 faf4 	bl	8000e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081c:	f000 f814 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000820:	f7ff ff5c 	bl	80006dc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000824:	f7ff fe56 	bl	80004d4 <MX_ADC1_Init>
  MX_CRC_Init();
 8000828:	f7ff feea 	bl	8000600 <MX_CRC_Init>
  MX_SPI1_Init();
 800082c:	f000 f88e 	bl	800094c <MX_SPI1_Init>
  MX_UART4_Init();
 8000830:	f000 f9d6 	bl	8000be0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000834:	f000 fa00 	bl	8000c38 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000838:	f003 f862 	bl	8003900 <osKernelInitialize>
  MX_FREERTOS_Init();
 800083c:	f7ff ff16 	bl	800066c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000840:	f003 f882 	bl	8003948 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000844:	e7fe      	b.n	8000844 <main+0x30>
	...

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b094      	sub	sp, #80	; 0x50
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0320 	add.w	r3, r7, #32
 8000852:	2230      	movs	r2, #48	; 0x30
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f005 fe04 	bl	8006464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	4b28      	ldr	r3, [pc, #160]	; (8000914 <SystemClock_Config+0xcc>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	4a27      	ldr	r2, [pc, #156]	; (8000914 <SystemClock_Config+0xcc>)
 8000876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087a:	6413      	str	r3, [r2, #64]	; 0x40
 800087c:	4b25      	ldr	r3, [pc, #148]	; (8000914 <SystemClock_Config+0xcc>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <SystemClock_Config+0xd0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a21      	ldr	r2, [pc, #132]	; (8000918 <SystemClock_Config+0xd0>)
 8000892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <SystemClock_Config+0xd0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008b8:	2304      	movs	r3, #4
 80008ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008bc:	23a8      	movs	r3, #168	; 0xa8
 80008be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c4:	2304      	movs	r3, #4
 80008c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 f89d 	bl	8001a0c <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008d8:	f000 f832 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008dc:	230f      	movs	r3, #15
 80008de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e0:	2302      	movs	r3, #2
 80008e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	2105      	movs	r1, #5
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 fafe 	bl	8001efc <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000906:	f000 f81b 	bl	8000940 <Error_Handler>
  }
}
 800090a:	bf00      	nop
 800090c:	3750      	adds	r7, #80	; 0x50
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	40007000 	.word	0x40007000

0800091c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d101      	bne.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092e:	f000 fa8b 	bl	8000e48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40000400 	.word	0x40000400

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	e7fe      	b.n	8000948 <Error_Handler+0x8>
	...

0800094c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_SPI1_Init+0x64>)
 8000952:	4a18      	ldr	r2, [pc, #96]	; (80009b4 <MX_SPI1_Init+0x68>)
 8000954:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_SPI1_Init+0x64>)
 8000958:	f44f 7282 	mov.w	r2, #260	; 0x104
 800095c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_SPI1_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_SPI1_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_SPI1_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_SPI1_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_SPI1_Init+0x64>)
 8000978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800097c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_SPI1_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MX_SPI1_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_SPI1_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_SPI1_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_SPI1_Init+0x64>)
 8000998:	220a      	movs	r2, #10
 800099a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_SPI1_Init+0x64>)
 800099e:	f001 fcff 	bl	80023a0 <HAL_SPI_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009a8:	f7ff ffca 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200000e8 	.word	0x200000e8
 80009b4:	40013000 	.word	0x40013000

080009b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <HAL_SPI_MspInit+0x84>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d12b      	bne.n	8000a32 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <HAL_SPI_MspInit+0x88>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	4a17      	ldr	r2, [pc, #92]	; (8000a40 <HAL_SPI_MspInit+0x88>)
 80009e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009e8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <HAL_SPI_MspInit+0x88>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <HAL_SPI_MspInit+0x88>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a10      	ldr	r2, [pc, #64]	; (8000a40 <HAL_SPI_MspInit+0x88>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <HAL_SPI_MspInit+0x88>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8000a12:	23e0      	movs	r3, #224	; 0xe0
 8000a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a22:	2305      	movs	r3, #5
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <HAL_SPI_MspInit+0x8c>)
 8000a2e:	f000 fe1d 	bl	800166c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a32:	bf00      	nop
 8000a34:	3728      	adds	r7, #40	; 0x28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40013000 	.word	0x40013000
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020000 	.word	0x40020000

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <HAL_MspInit+0x54>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	4a11      	ldr	r2, [pc, #68]	; (8000a9c <HAL_MspInit+0x54>)
 8000a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HAL_MspInit+0x54>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <HAL_MspInit+0x54>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <HAL_MspInit+0x54>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_MspInit+0x54>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	210f      	movs	r1, #15
 8000a8a:	f06f 0001 	mvn.w	r0, #1
 8000a8e:	f000 fd15 	bl	80014bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08c      	sub	sp, #48	; 0x30
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	201d      	movs	r0, #29
 8000ab6:	f000 fd01 	bl	80014bc <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000aba:	201d      	movs	r0, #29
 8000abc:	f000 fd1a 	bl	80014f4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <HAL_InitTick+0xa4>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	4a1e      	ldr	r2, [pc, #120]	; (8000b44 <HAL_InitTick+0xa4>)
 8000aca:	f043 0302 	orr.w	r3, r3, #2
 8000ace:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <HAL_InitTick+0xa4>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000adc:	f107 0210 	add.w	r2, r7, #16
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 fc28 	bl	800233c <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000aec:	f001 fbfe 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8000af0:	4603      	mov	r3, r0
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af8:	4a13      	ldr	r2, [pc, #76]	; (8000b48 <HAL_InitTick+0xa8>)
 8000afa:	fba2 2303 	umull	r2, r3, r2, r3
 8000afe:	0c9b      	lsrs	r3, r3, #18
 8000b00:	3b01      	subs	r3, #1
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <HAL_InitTick+0xac>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <HAL_InitTick+0xb0>)
 8000b08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <HAL_InitTick+0xac>)
 8000b0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b10:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000b12:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <HAL_InitTick+0xac>)
 8000b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b16:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <HAL_InitTick+0xac>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_InitTick+0xac>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8000b24:	4809      	ldr	r0, [pc, #36]	; (8000b4c <HAL_InitTick+0xac>)
 8000b26:	f001 fcc4 	bl	80024b2 <HAL_TIM_Base_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d104      	bne.n	8000b3a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8000b30:	4806      	ldr	r0, [pc, #24]	; (8000b4c <HAL_InitTick+0xac>)
 8000b32:	f001 fd17 	bl	8002564 <HAL_TIM_Base_Start_IT>
 8000b36:	4603      	mov	r3, r0
 8000b38:	e000      	b.n	8000b3c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3730      	adds	r7, #48	; 0x30
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800
 8000b48:	431bde83 	.word	0x431bde83
 8000b4c:	20000140 	.word	0x20000140
 8000b50:	40000400 	.word	0x40000400

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <NMI_Handler+0x4>

08000b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <MemManage_Handler+0x4>

08000b66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <TIM3_IRQHandler+0x10>)
 8000b86:	f001 fd5d 	bl	8002644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000140 	.word	0x20000140

08000b94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <USART1_IRQHandler+0x10>)
 8000b9a:	f001 ffa7 	bl	8002aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200001cc 	.word	0x200001cc

08000ba8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <UART4_IRQHandler+0x10>)
 8000bae:	f001 ff9d 	bl	8002aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000188 	.word	0x20000188

08000bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <SystemInit+0x20>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <SystemInit+0x20>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <MX_UART4_Init+0x50>)
 8000be6:	4a13      	ldr	r2, [pc, #76]	; (8000c34 <MX_UART4_Init+0x54>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_UART4_Init+0x50>)
 8000bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <MX_UART4_Init+0x50>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <MX_UART4_Init+0x50>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <MX_UART4_Init+0x50>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <MX_UART4_Init+0x50>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <MX_UART4_Init+0x50>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <MX_UART4_Init+0x50>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart4, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_UART4_Init+0x50>)
 8000c1c:	f001 fef6 	bl	8002a0c <HAL_MultiProcessor_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_UART4_Init+0x4a>
  {
    Error_Handler();
 8000c26:	f7ff fe8b 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000188 	.word	0x20000188
 8000c34:	40004c00 	.word	0x40004c00

08000c38 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <MX_USART1_UART_Init+0x50>)
 8000c3e:	4a13      	ldr	r2, [pc, #76]	; (8000c8c <MX_USART1_UART_Init+0x54>)
 8000c40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_USART1_UART_Init+0x50>)
 8000c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_USART1_UART_Init+0x50>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c50:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <MX_USART1_UART_Init+0x50>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_USART1_UART_Init+0x50>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <MX_USART1_UART_Init+0x50>)
 8000c5e:	220c      	movs	r2, #12
 8000c60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_USART1_UART_Init+0x50>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <MX_USART1_UART_Init+0x50>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_USART1_UART_Init+0x50>)
 8000c74:	f001 feca 	bl	8002a0c <HAL_MultiProcessor_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000c7e:	f7ff fe5f 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200001cc 	.word	0x200001cc
 8000c8c:	40011000 	.word	0x40011000

08000c90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	; 0x30
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a3b      	ldr	r2, [pc, #236]	; (8000d9c <HAL_UART_MspInit+0x10c>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d135      	bne.n	8000d1e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
 8000cb6:	4b3a      	ldr	r3, [pc, #232]	; (8000da0 <HAL_UART_MspInit+0x110>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a39      	ldr	r2, [pc, #228]	; (8000da0 <HAL_UART_MspInit+0x110>)
 8000cbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b37      	ldr	r3, [pc, #220]	; (8000da0 <HAL_UART_MspInit+0x110>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cca:	61bb      	str	r3, [r7, #24]
 8000ccc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	4b33      	ldr	r3, [pc, #204]	; (8000da0 <HAL_UART_MspInit+0x110>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a32      	ldr	r2, [pc, #200]	; (8000da0 <HAL_UART_MspInit+0x110>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b30      	ldr	r3, [pc, #192]	; (8000da0 <HAL_UART_MspInit+0x110>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = SRV_TXDO_Pin|SRV_RXDI_Pin;
 8000cea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	4827      	ldr	r0, [pc, #156]	; (8000da4 <HAL_UART_MspInit+0x114>)
 8000d08:	f000 fcb0 	bl	800166c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 3, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2103      	movs	r1, #3
 8000d10:	2034      	movs	r0, #52	; 0x34
 8000d12:	f000 fbd3 	bl	80014bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000d16:	2034      	movs	r0, #52	; 0x34
 8000d18:	f000 fbec 	bl	80014f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d1c:	e039      	b.n	8000d92 <HAL_UART_MspInit+0x102>
  else if(uartHandle->Instance==USART1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a21      	ldr	r2, [pc, #132]	; (8000da8 <HAL_UART_MspInit+0x118>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d134      	bne.n	8000d92 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <HAL_UART_MspInit+0x110>)
 8000d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d30:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <HAL_UART_MspInit+0x110>)
 8000d32:	f043 0310 	orr.w	r3, r3, #16
 8000d36:	6453      	str	r3, [r2, #68]	; 0x44
 8000d38:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_UART_MspInit+0x110>)
 8000d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_UART_MspInit+0x110>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <HAL_UART_MspInit+0x110>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	6313      	str	r3, [r2, #48]	; 0x30
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_UART_MspInit+0x110>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MA4_TXDO_Pin|MA4_RXDI_Pin;
 8000d60:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d72:	2307      	movs	r3, #7
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <HAL_UART_MspInit+0x11c>)
 8000d7e:	f000 fc75 	bl	800166c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2103      	movs	r1, #3
 8000d86:	2025      	movs	r0, #37	; 0x25
 8000d88:	f000 fb98 	bl	80014bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d8c:	2025      	movs	r0, #37	; 0x25
 8000d8e:	f000 fbb1 	bl	80014f4 <HAL_NVIC_EnableIRQ>
}
 8000d92:	bf00      	nop
 8000d94:	3730      	adds	r7, #48	; 0x30
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40004c00 	.word	0x40004c00
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020800 	.word	0x40020800
 8000da8:	40011000 	.word	0x40011000
 8000dac:	40020000 	.word	0x40020000

08000db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db4:	480d      	ldr	r0, [pc, #52]	; (8000dec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000db6:	490e      	ldr	r1, [pc, #56]	; (8000df0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000db8:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dcc:	4c0b      	ldr	r4, [pc, #44]	; (8000dfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dda:	f7ff feef 	bl	8000bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dde:	f005 fb0d 	bl	80063fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de2:	f7ff fd17 	bl	8000814 <main>
  bx  lr    
 8000de6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000df4:	0800670c 	.word	0x0800670c
  ldr r2, =_sbss
 8000df8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000dfc:	20004c2c 	.word	0x20004c2c

08000e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC_IRQHandler>
	...

08000e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <HAL_Init+0x40>)
 8000e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <HAL_Init+0x40>)
 8000e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <HAL_Init+0x40>)
 8000e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	f000 fb3a 	bl	80014a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e32:	200f      	movs	r0, #15
 8000e34:	f7ff fe34 	bl	8000aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e38:	f7ff fe06 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023c00 	.word	0x40023c00

08000e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_IncTick+0x20>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_IncTick+0x24>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <HAL_IncTick+0x24>)
 8000e5a:	6013      	str	r3, [r2, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	20000210 	.word	0x20000210

08000e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return uwTick;
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <HAL_GetTick+0x14>)
 8000e76:	681b      	ldr	r3, [r3, #0]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000210 	.word	0x20000210

08000e88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e033      	b.n	8000f06 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d109      	bne.n	8000eba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff fb66 	bl	8000578 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f003 0310 	and.w	r3, r3, #16
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d118      	bne.n	8000ef8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ece:	f023 0302 	bic.w	r3, r3, #2
 8000ed2:	f043 0202 	orr.w	r2, r3, #2
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 f93a 	bl	8001154 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f023 0303 	bic.w	r3, r3, #3
 8000eee:	f043 0201 	orr.w	r2, r3, #1
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ef6:	e001      	b.n	8000efc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d101      	bne.n	8000f2c <HAL_ADC_ConfigChannel+0x1c>
 8000f28:	2302      	movs	r3, #2
 8000f2a:	e105      	b.n	8001138 <HAL_ADC_ConfigChannel+0x228>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b09      	cmp	r3, #9
 8000f3a:	d925      	bls.n	8000f88 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68d9      	ldr	r1, [r3, #12]
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	3b1e      	subs	r3, #30
 8000f52:	2207      	movs	r2, #7
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43da      	mvns	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	400a      	ands	r2, r1
 8000f60:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68d9      	ldr	r1, [r3, #12]
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	4603      	mov	r3, r0
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4403      	add	r3, r0
 8000f7a:	3b1e      	subs	r3, #30
 8000f7c:	409a      	lsls	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	430a      	orrs	r2, r1
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	e022      	b.n	8000fce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6919      	ldr	r1, [r3, #16]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	461a      	mov	r2, r3
 8000f96:	4613      	mov	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	400a      	ands	r2, r1
 8000faa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6919      	ldr	r1, [r3, #16]
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	689a      	ldr	r2, [r3, #8]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4403      	add	r3, r0
 8000fc4:	409a      	lsls	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d824      	bhi.n	8001020 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3b05      	subs	r3, #5
 8000fe8:	221f      	movs	r2, #31
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	400a      	ands	r2, r1
 8000ff6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	b29b      	uxth	r3, r3
 8001004:	4618      	mov	r0, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	3b05      	subs	r3, #5
 8001012:	fa00 f203 	lsl.w	r2, r0, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	430a      	orrs	r2, r1
 800101c:	635a      	str	r2, [r3, #52]	; 0x34
 800101e:	e04c      	b.n	80010ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b0c      	cmp	r3, #12
 8001026:	d824      	bhi.n	8001072 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	3b23      	subs	r3, #35	; 0x23
 800103a:	221f      	movs	r2, #31
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43da      	mvns	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	400a      	ands	r2, r1
 8001048:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	b29b      	uxth	r3, r3
 8001056:	4618      	mov	r0, r3
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	3b23      	subs	r3, #35	; 0x23
 8001064:	fa00 f203 	lsl.w	r2, r0, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	430a      	orrs	r2, r1
 800106e:	631a      	str	r2, [r3, #48]	; 0x30
 8001070:	e023      	b.n	80010ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	3b41      	subs	r3, #65	; 0x41
 8001084:	221f      	movs	r2, #31
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	400a      	ands	r2, r1
 8001092:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	3b41      	subs	r3, #65	; 0x41
 80010ae:	fa00 f203 	lsl.w	r2, r0, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010ba:	4b22      	ldr	r3, [pc, #136]	; (8001144 <HAL_ADC_ConfigChannel+0x234>)
 80010bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a21      	ldr	r2, [pc, #132]	; (8001148 <HAL_ADC_ConfigChannel+0x238>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d109      	bne.n	80010dc <HAL_ADC_ConfigChannel+0x1cc>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b12      	cmp	r3, #18
 80010ce:	d105      	bne.n	80010dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a19      	ldr	r2, [pc, #100]	; (8001148 <HAL_ADC_ConfigChannel+0x238>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d123      	bne.n	800112e <HAL_ADC_ConfigChannel+0x21e>
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b10      	cmp	r3, #16
 80010ec:	d003      	beq.n	80010f6 <HAL_ADC_ConfigChannel+0x1e6>
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b11      	cmp	r3, #17
 80010f4:	d11b      	bne.n	800112e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b10      	cmp	r3, #16
 8001108:	d111      	bne.n	800112e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <HAL_ADC_ConfigChannel+0x23c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a10      	ldr	r2, [pc, #64]	; (8001150 <HAL_ADC_ConfigChannel+0x240>)
 8001110:	fba2 2303 	umull	r2, r3, r2, r3
 8001114:	0c9a      	lsrs	r2, r3, #18
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001120:	e002      	b.n	8001128 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	3b01      	subs	r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f9      	bne.n	8001122 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	40012300 	.word	0x40012300
 8001148:	40012000 	.word	0x40012000
 800114c:	20000000 	.word	0x20000000
 8001150:	431bde83 	.word	0x431bde83

08001154 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800115c:	4b79      	ldr	r3, [pc, #484]	; (8001344 <ADC_Init+0x1f0>)
 800115e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	431a      	orrs	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001188:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6859      	ldr	r1, [r3, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	021a      	lsls	r2, r3, #8
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	430a      	orrs	r2, r1
 800119c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80011ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	6859      	ldr	r1, [r3, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	430a      	orrs	r2, r1
 80011be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6899      	ldr	r1, [r3, #8]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	430a      	orrs	r2, r1
 80011e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e6:	4a58      	ldr	r2, [pc, #352]	; (8001348 <ADC_Init+0x1f4>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d022      	beq.n	8001232 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6899      	ldr	r1, [r3, #8]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	430a      	orrs	r2, r1
 800120c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800121c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6899      	ldr	r1, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	430a      	orrs	r2, r1
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	e00f      	b.n	8001252 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001240:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001250:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0202 	bic.w	r2, r2, #2
 8001260:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6899      	ldr	r1, [r3, #8]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	7e1b      	ldrb	r3, [r3, #24]
 800126c:	005a      	lsls	r2, r3, #1
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3020 	ldrb.w	r3, [r3, #32]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d01b      	beq.n	80012b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800128e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800129e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6859      	ldr	r1, [r3, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	3b01      	subs	r3, #1
 80012ac:	035a      	lsls	r2, r3, #13
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	e007      	b.n	80012c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	051a      	lsls	r2, r3, #20
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6899      	ldr	r1, [r3, #8]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800130a:	025a      	lsls	r2, r3, #9
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	430a      	orrs	r2, r1
 8001312:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001322:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6899      	ldr	r1, [r3, #8]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	029a      	lsls	r2, r3, #10
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	430a      	orrs	r2, r1
 8001336:	609a      	str	r2, [r3, #8]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	40012300 	.word	0x40012300
 8001348:	0f000001 	.word	0x0f000001

0800134c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001368:	4013      	ands	r3, r2
 800136a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800137c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137e:	4a04      	ldr	r2, [pc, #16]	; (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	60d3      	str	r3, [r2, #12]
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <__NVIC_GetPriorityGrouping+0x18>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	f003 0307 	and.w	r3, r3, #7
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db0b      	blt.n	80013da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f003 021f 	and.w	r2, r3, #31
 80013c8:	4907      	ldr	r1, [pc, #28]	; (80013e8 <__NVIC_EnableIRQ+0x38>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	095b      	lsrs	r3, r3, #5
 80013d0:	2001      	movs	r0, #1
 80013d2:	fa00 f202 	lsl.w	r2, r0, r2
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000e100 	.word	0xe000e100

080013ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	db0a      	blt.n	8001416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	490c      	ldr	r1, [pc, #48]	; (8001438 <__NVIC_SetPriority+0x4c>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	0112      	lsls	r2, r2, #4
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	440b      	add	r3, r1
 8001410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001414:	e00a      	b.n	800142c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4908      	ldr	r1, [pc, #32]	; (800143c <__NVIC_SetPriority+0x50>)
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	3b04      	subs	r3, #4
 8001424:	0112      	lsls	r2, r2, #4
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	440b      	add	r3, r1
 800142a:	761a      	strb	r2, [r3, #24]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000e100 	.word	0xe000e100
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f1c3 0307 	rsb	r3, r3, #7
 800145a:	2b04      	cmp	r3, #4
 800145c:	bf28      	it	cs
 800145e:	2304      	movcs	r3, #4
 8001460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3304      	adds	r3, #4
 8001466:	2b06      	cmp	r3, #6
 8001468:	d902      	bls.n	8001470 <NVIC_EncodePriority+0x30>
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3b03      	subs	r3, #3
 800146e:	e000      	b.n	8001472 <NVIC_EncodePriority+0x32>
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	f04f 32ff 	mov.w	r2, #4294967295
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	401a      	ands	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	43d9      	mvns	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	4313      	orrs	r3, r2
         );
}
 800149a:	4618      	mov	r0, r3
 800149c:	3724      	adds	r7, #36	; 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ff4c 	bl	800134c <__NVIC_SetPriorityGrouping>
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ce:	f7ff ff61 	bl	8001394 <__NVIC_GetPriorityGrouping>
 80014d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	68b9      	ldr	r1, [r7, #8]
 80014d8:	6978      	ldr	r0, [r7, #20]
 80014da:	f7ff ffb1 	bl	8001440 <NVIC_EncodePriority>
 80014de:	4602      	mov	r2, r0
 80014e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e4:	4611      	mov	r1, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff ff80 	bl	80013ec <__NVIC_SetPriority>
}
 80014ec:	bf00      	nop
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff ff54 	bl	80013b0 <__NVIC_EnableIRQ>
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	795b      	ldrb	r3, [r3, #5]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d105      	bne.n	8001538 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff f878 	bl	8000628 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001554:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001556:	f7ff fc8b 	bl	8000e70 <HAL_GetTick>
 800155a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d008      	beq.n	800157a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2280      	movs	r2, #128	; 0x80
 800156c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e052      	b.n	8001620 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0216 	bic.w	r2, r2, #22
 8001588:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	695a      	ldr	r2, [r3, #20]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001598:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d103      	bne.n	80015aa <HAL_DMA_Abort+0x62>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d007      	beq.n	80015ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0208 	bic.w	r2, r2, #8
 80015b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0201 	bic.w	r2, r2, #1
 80015c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ca:	e013      	b.n	80015f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015cc:	f7ff fc50 	bl	8000e70 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b05      	cmp	r3, #5
 80015d8:	d90c      	bls.n	80015f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2220      	movs	r2, #32
 80015de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2203      	movs	r2, #3
 80015e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e015      	b.n	8001620 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1e4      	bne.n	80015cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001606:	223f      	movs	r2, #63	; 0x3f
 8001608:	409a      	lsls	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d004      	beq.n	8001646 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2280      	movs	r2, #128	; 0x80
 8001640:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e00c      	b.n	8001660 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2205      	movs	r2, #5
 800164a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0201 	bic.w	r2, r2, #1
 800165c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	e16b      	b.n	8001960 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001688:	2201      	movs	r2, #1
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	f040 815a 	bne.w	800195a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d005      	beq.n	80016be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d130      	bne.n	8001720 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	2203      	movs	r2, #3
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f4:	2201      	movs	r2, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f003 0201 	and.w	r2, r3, #1
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b03      	cmp	r3, #3
 800172a:	d017      	beq.n	800175c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2203      	movs	r2, #3
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d123      	bne.n	80017b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	08da      	lsrs	r2, r3, #3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3208      	adds	r2, #8
 8001770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	220f      	movs	r2, #15
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	691a      	ldr	r2, [r3, #16]
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	08da      	lsrs	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3208      	adds	r2, #8
 80017aa:	69b9      	ldr	r1, [r7, #24]
 80017ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2203      	movs	r2, #3
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0203 	and.w	r2, r3, #3
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80b4 	beq.w	800195a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b60      	ldr	r3, [pc, #384]	; (8001978 <HAL_GPIO_Init+0x30c>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	4a5f      	ldr	r2, [pc, #380]	; (8001978 <HAL_GPIO_Init+0x30c>)
 80017fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001800:	6453      	str	r3, [r2, #68]	; 0x44
 8001802:	4b5d      	ldr	r3, [pc, #372]	; (8001978 <HAL_GPIO_Init+0x30c>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800180e:	4a5b      	ldr	r2, [pc, #364]	; (800197c <HAL_GPIO_Init+0x310>)
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	089b      	lsrs	r3, r3, #2
 8001814:	3302      	adds	r3, #2
 8001816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	220f      	movs	r2, #15
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a52      	ldr	r2, [pc, #328]	; (8001980 <HAL_GPIO_Init+0x314>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d02b      	beq.n	8001892 <HAL_GPIO_Init+0x226>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a51      	ldr	r2, [pc, #324]	; (8001984 <HAL_GPIO_Init+0x318>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d025      	beq.n	800188e <HAL_GPIO_Init+0x222>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a50      	ldr	r2, [pc, #320]	; (8001988 <HAL_GPIO_Init+0x31c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d01f      	beq.n	800188a <HAL_GPIO_Init+0x21e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a4f      	ldr	r2, [pc, #316]	; (800198c <HAL_GPIO_Init+0x320>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d019      	beq.n	8001886 <HAL_GPIO_Init+0x21a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4e      	ldr	r2, [pc, #312]	; (8001990 <HAL_GPIO_Init+0x324>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d013      	beq.n	8001882 <HAL_GPIO_Init+0x216>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4d      	ldr	r2, [pc, #308]	; (8001994 <HAL_GPIO_Init+0x328>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d00d      	beq.n	800187e <HAL_GPIO_Init+0x212>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4c      	ldr	r2, [pc, #304]	; (8001998 <HAL_GPIO_Init+0x32c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d007      	beq.n	800187a <HAL_GPIO_Init+0x20e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4b      	ldr	r2, [pc, #300]	; (800199c <HAL_GPIO_Init+0x330>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d101      	bne.n	8001876 <HAL_GPIO_Init+0x20a>
 8001872:	2307      	movs	r3, #7
 8001874:	e00e      	b.n	8001894 <HAL_GPIO_Init+0x228>
 8001876:	2308      	movs	r3, #8
 8001878:	e00c      	b.n	8001894 <HAL_GPIO_Init+0x228>
 800187a:	2306      	movs	r3, #6
 800187c:	e00a      	b.n	8001894 <HAL_GPIO_Init+0x228>
 800187e:	2305      	movs	r3, #5
 8001880:	e008      	b.n	8001894 <HAL_GPIO_Init+0x228>
 8001882:	2304      	movs	r3, #4
 8001884:	e006      	b.n	8001894 <HAL_GPIO_Init+0x228>
 8001886:	2303      	movs	r3, #3
 8001888:	e004      	b.n	8001894 <HAL_GPIO_Init+0x228>
 800188a:	2302      	movs	r3, #2
 800188c:	e002      	b.n	8001894 <HAL_GPIO_Init+0x228>
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <HAL_GPIO_Init+0x228>
 8001892:	2300      	movs	r3, #0
 8001894:	69fa      	ldr	r2, [r7, #28]
 8001896:	f002 0203 	and.w	r2, r2, #3
 800189a:	0092      	lsls	r2, r2, #2
 800189c:	4093      	lsls	r3, r2
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018a4:	4935      	ldr	r1, [pc, #212]	; (800197c <HAL_GPIO_Init+0x310>)
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	089b      	lsrs	r3, r3, #2
 80018aa:	3302      	adds	r3, #2
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018b2:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <HAL_GPIO_Init+0x334>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018d6:	4a32      	ldr	r2, [pc, #200]	; (80019a0 <HAL_GPIO_Init+0x334>)
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018dc:	4b30      	ldr	r3, [pc, #192]	; (80019a0 <HAL_GPIO_Init+0x334>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001900:	4a27      	ldr	r2, [pc, #156]	; (80019a0 <HAL_GPIO_Init+0x334>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001906:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <HAL_GPIO_Init+0x334>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800192a:	4a1d      	ldr	r2, [pc, #116]	; (80019a0 <HAL_GPIO_Init+0x334>)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <HAL_GPIO_Init+0x334>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001954:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <HAL_GPIO_Init+0x334>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3301      	adds	r3, #1
 800195e:	61fb      	str	r3, [r7, #28]
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	2b0f      	cmp	r3, #15
 8001964:	f67f ae90 	bls.w	8001688 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40013800 	.word	0x40013800
 8001980:	40020000 	.word	0x40020000
 8001984:	40020400 	.word	0x40020400
 8001988:	40020800 	.word	0x40020800
 800198c:	40020c00 	.word	0x40020c00
 8001990:	40021000 	.word	0x40021000
 8001994:	40021400 	.word	0x40021400
 8001998:	40021800 	.word	0x40021800
 800199c:	40021c00 	.word	0x40021c00
 80019a0:	40013c00 	.word	0x40013c00

080019a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	807b      	strh	r3, [r7, #2]
 80019b0:	4613      	mov	r3, r2
 80019b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b4:	787b      	ldrb	r3, [r7, #1]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ba:	887a      	ldrh	r2, [r7, #2]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019c0:	e003      	b.n	80019ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019c2:	887b      	ldrh	r3, [r7, #2]
 80019c4:	041a      	lsls	r2, r3, #16
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	619a      	str	r2, [r3, #24]
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b085      	sub	sp, #20
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	460b      	mov	r3, r1
 80019e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019e8:	887a      	ldrh	r2, [r7, #2]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4013      	ands	r3, r2
 80019ee:	041a      	lsls	r2, r3, #16
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	43d9      	mvns	r1, r3
 80019f4:	887b      	ldrh	r3, [r7, #2]
 80019f6:	400b      	ands	r3, r1
 80019f8:	431a      	orrs	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	619a      	str	r2, [r3, #24]
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e267      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d075      	beq.n	8001b16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a2a:	4b88      	ldr	r3, [pc, #544]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d00c      	beq.n	8001a50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a36:	4b85      	ldr	r3, [pc, #532]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d112      	bne.n	8001a68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a42:	4b82      	ldr	r3, [pc, #520]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a4e:	d10b      	bne.n	8001a68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a50:	4b7e      	ldr	r3, [pc, #504]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d05b      	beq.n	8001b14 <HAL_RCC_OscConfig+0x108>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d157      	bne.n	8001b14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e242      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a70:	d106      	bne.n	8001a80 <HAL_RCC_OscConfig+0x74>
 8001a72:	4b76      	ldr	r3, [pc, #472]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a75      	ldr	r2, [pc, #468]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e01d      	b.n	8001abc <HAL_RCC_OscConfig+0xb0>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a88:	d10c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x98>
 8001a8a:	4b70      	ldr	r3, [pc, #448]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a6f      	ldr	r2, [pc, #444]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	4b6d      	ldr	r3, [pc, #436]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a6c      	ldr	r2, [pc, #432]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e00b      	b.n	8001abc <HAL_RCC_OscConfig+0xb0>
 8001aa4:	4b69      	ldr	r3, [pc, #420]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a68      	ldr	r2, [pc, #416]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b66      	ldr	r3, [pc, #408]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a65      	ldr	r2, [pc, #404]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d013      	beq.n	8001aec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff f9d4 	bl	8000e70 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001acc:	f7ff f9d0 	bl	8000e70 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	; 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e207      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	4b5b      	ldr	r3, [pc, #364]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0xc0>
 8001aea:	e014      	b.n	8001b16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff f9c0 	bl	8000e70 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af4:	f7ff f9bc 	bl	8000e70 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b64      	cmp	r3, #100	; 0x64
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e1f3      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b06:	4b51      	ldr	r3, [pc, #324]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0xe8>
 8001b12:	e000      	b.n	8001b16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d063      	beq.n	8001bea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b22:	4b4a      	ldr	r3, [pc, #296]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00b      	beq.n	8001b46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b2e:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d11c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b3a:	4b44      	ldr	r3, [pc, #272]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d116      	bne.n	8001b74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b46:	4b41      	ldr	r3, [pc, #260]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d005      	beq.n	8001b5e <HAL_RCC_OscConfig+0x152>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d001      	beq.n	8001b5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e1c7      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5e:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4937      	ldr	r1, [pc, #220]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b72:	e03a      	b.n	8001bea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d020      	beq.n	8001bbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b7c:	4b34      	ldr	r3, [pc, #208]	; (8001c50 <HAL_RCC_OscConfig+0x244>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b82:	f7ff f975 	bl	8000e70 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b8a:	f7ff f971 	bl	8000e70 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e1a8      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9c:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba8:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4925      	ldr	r1, [pc, #148]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	600b      	str	r3, [r1, #0]
 8001bbc:	e015      	b.n	8001bea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bbe:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <HAL_RCC_OscConfig+0x244>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7ff f954 	bl	8000e70 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bcc:	f7ff f950 	bl	8000e70 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e187      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d036      	beq.n	8001c64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d016      	beq.n	8001c2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_RCC_OscConfig+0x248>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c04:	f7ff f934 	bl	8000e70 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c0c:	f7ff f930 	bl	8000e70 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e167      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_RCC_OscConfig+0x240>)
 8001c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x200>
 8001c2a:	e01b      	b.n	8001c64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_RCC_OscConfig+0x248>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c32:	f7ff f91d 	bl	8000e70 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c38:	e00e      	b.n	8001c58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c3a:	f7ff f919 	bl	8000e70 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d907      	bls.n	8001c58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e150      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	42470000 	.word	0x42470000
 8001c54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c58:	4b88      	ldr	r3, [pc, #544]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1ea      	bne.n	8001c3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 8097 	beq.w	8001da0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c76:	4b81      	ldr	r3, [pc, #516]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10f      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	4b7d      	ldr	r3, [pc, #500]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	4a7c      	ldr	r2, [pc, #496]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c90:	6413      	str	r3, [r2, #64]	; 0x40
 8001c92:	4b7a      	ldr	r3, [pc, #488]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca2:	4b77      	ldr	r3, [pc, #476]	; (8001e80 <HAL_RCC_OscConfig+0x474>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d118      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cae:	4b74      	ldr	r3, [pc, #464]	; (8001e80 <HAL_RCC_OscConfig+0x474>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a73      	ldr	r2, [pc, #460]	; (8001e80 <HAL_RCC_OscConfig+0x474>)
 8001cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cba:	f7ff f8d9 	bl	8000e70 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc2:	f7ff f8d5 	bl	8000e70 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e10c      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd4:	4b6a      	ldr	r3, [pc, #424]	; (8001e80 <HAL_RCC_OscConfig+0x474>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x2ea>
 8001ce8:	4b64      	ldr	r3, [pc, #400]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cec:	4a63      	ldr	r2, [pc, #396]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf4:	e01c      	b.n	8001d30 <HAL_RCC_OscConfig+0x324>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b05      	cmp	r3, #5
 8001cfc:	d10c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x30c>
 8001cfe:	4b5f      	ldr	r3, [pc, #380]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d02:	4a5e      	ldr	r2, [pc, #376]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d04:	f043 0304 	orr.w	r3, r3, #4
 8001d08:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0a:	4b5c      	ldr	r3, [pc, #368]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0e:	4a5b      	ldr	r2, [pc, #364]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6713      	str	r3, [r2, #112]	; 0x70
 8001d16:	e00b      	b.n	8001d30 <HAL_RCC_OscConfig+0x324>
 8001d18:	4b58      	ldr	r3, [pc, #352]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1c:	4a57      	ldr	r2, [pc, #348]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d1e:	f023 0301 	bic.w	r3, r3, #1
 8001d22:	6713      	str	r3, [r2, #112]	; 0x70
 8001d24:	4b55      	ldr	r3, [pc, #340]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d28:	4a54      	ldr	r2, [pc, #336]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d2a:	f023 0304 	bic.w	r3, r3, #4
 8001d2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d015      	beq.n	8001d64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d38:	f7ff f89a 	bl	8000e70 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d40:	f7ff f896 	bl	8000e70 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e0cb      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d56:	4b49      	ldr	r3, [pc, #292]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0ee      	beq.n	8001d40 <HAL_RCC_OscConfig+0x334>
 8001d62:	e014      	b.n	8001d8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d64:	f7ff f884 	bl	8000e70 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d6c:	f7ff f880 	bl	8000e70 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e0b5      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d82:	4b3e      	ldr	r3, [pc, #248]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1ee      	bne.n	8001d6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d105      	bne.n	8001da0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d94:	4b39      	ldr	r3, [pc, #228]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	4a38      	ldr	r2, [pc, #224]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80a1 	beq.w	8001eec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001daa:	4b34      	ldr	r3, [pc, #208]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d05c      	beq.n	8001e70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d141      	bne.n	8001e42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbe:	4b31      	ldr	r3, [pc, #196]	; (8001e84 <HAL_RCC_OscConfig+0x478>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff f854 	bl	8000e70 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dcc:	f7ff f850 	bl	8000e70 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e087      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dde:	4b27      	ldr	r3, [pc, #156]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69da      	ldr	r2, [r3, #28]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	019b      	lsls	r3, r3, #6
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	085b      	lsrs	r3, r3, #1
 8001e02:	3b01      	subs	r3, #1
 8001e04:	041b      	lsls	r3, r3, #16
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	061b      	lsls	r3, r3, #24
 8001e0e:	491b      	ldr	r1, [pc, #108]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e14:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <HAL_RCC_OscConfig+0x478>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7ff f829 	bl	8000e70 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e22:	f7ff f825 	bl	8000e70 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e05c      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x416>
 8001e40:	e054      	b.n	8001eec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <HAL_RCC_OscConfig+0x478>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7ff f812 	bl	8000e70 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e50:	f7ff f80e 	bl	8000e70 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e045      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_RCC_OscConfig+0x470>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x444>
 8001e6e:	e03d      	b.n	8001eec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d107      	bne.n	8001e88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e038      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40007000 	.word	0x40007000
 8001e84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_RCC_OscConfig+0x4ec>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d028      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d121      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d11a      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001eb8:	4013      	ands	r3, r2
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ebe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d111      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	085b      	lsrs	r3, r3, #1
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d107      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023800 	.word	0x40023800

08001efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0cc      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f10:	4b68      	ldr	r3, [pc, #416]	; (80020b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d90c      	bls.n	8001f38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b65      	ldr	r3, [pc, #404]	; (80020b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f26:	4b63      	ldr	r3, [pc, #396]	; (80020b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0b8      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d020      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f50:	4b59      	ldr	r3, [pc, #356]	; (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4a58      	ldr	r2, [pc, #352]	; (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f68:	4b53      	ldr	r3, [pc, #332]	; (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	4a52      	ldr	r2, [pc, #328]	; (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f74:	4b50      	ldr	r3, [pc, #320]	; (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	494d      	ldr	r1, [pc, #308]	; (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d044      	beq.n	800201c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	4b47      	ldr	r3, [pc, #284]	; (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d119      	bne.n	8001fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e07f      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d003      	beq.n	8001fba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d107      	bne.n	8001fca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fba:	4b3f      	ldr	r3, [pc, #252]	; (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d109      	bne.n	8001fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e06f      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fca:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e067      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fda:	4b37      	ldr	r3, [pc, #220]	; (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f023 0203 	bic.w	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	4934      	ldr	r1, [pc, #208]	; (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fec:	f7fe ff40 	bl	8000e70 <HAL_GetTick>
 8001ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff2:	e00a      	b.n	800200a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff4:	f7fe ff3c 	bl	8000e70 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002002:	4293      	cmp	r3, r2
 8002004:	d901      	bls.n	800200a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e04f      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200a:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 020c 	and.w	r2, r3, #12
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	429a      	cmp	r2, r3
 800201a:	d1eb      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800201c:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <HAL_RCC_ClockConfig+0x1b8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d20c      	bcs.n	8002044 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202a:	4b22      	ldr	r3, [pc, #136]	; (80020b4 <HAL_RCC_ClockConfig+0x1b8>)
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002032:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e032      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d008      	beq.n	8002062 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002050:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4916      	ldr	r1, [pc, #88]	; (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	4313      	orrs	r3, r2
 8002060:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d009      	beq.n	8002082 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	490e      	ldr	r1, [pc, #56]	; (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	4313      	orrs	r3, r2
 8002080:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002082:	f000 f821 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8002086:	4602      	mov	r2, r0
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	490a      	ldr	r1, [pc, #40]	; (80020bc <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	5ccb      	ldrb	r3, [r1, r3]
 8002096:	fa22 f303 	lsr.w	r3, r2, r3
 800209a:	4a09      	ldr	r2, [pc, #36]	; (80020c0 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <HAL_RCC_ClockConfig+0x1c8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fcfc 	bl	8000aa0 <HAL_InitTick>

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023c00 	.word	0x40023c00
 80020b8:	40023800 	.word	0x40023800
 80020bc:	08006684 	.word	0x08006684
 80020c0:	20000000 	.word	0x20000000
 80020c4:	20000004 	.word	0x20000004

080020c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020cc:	b094      	sub	sp, #80	; 0x50
 80020ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	647b      	str	r3, [r7, #68]	; 0x44
 80020d4:	2300      	movs	r3, #0
 80020d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020d8:	2300      	movs	r3, #0
 80020da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020e0:	4b79      	ldr	r3, [pc, #484]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d00d      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x40>
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	f200 80e1 	bhi.w	80022b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0x34>
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d003      	beq.n	8002102 <HAL_RCC_GetSysClockFreq+0x3a>
 80020fa:	e0db      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020fc:	4b73      	ldr	r3, [pc, #460]	; (80022cc <HAL_RCC_GetSysClockFreq+0x204>)
 80020fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002100:	e0db      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002102:	4b73      	ldr	r3, [pc, #460]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002104:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002106:	e0d8      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002108:	4b6f      	ldr	r3, [pc, #444]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002110:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002112:	4b6d      	ldr	r3, [pc, #436]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d063      	beq.n	80021e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800211e:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	099b      	lsrs	r3, r3, #6
 8002124:	2200      	movs	r2, #0
 8002126:	63bb      	str	r3, [r7, #56]	; 0x38
 8002128:	63fa      	str	r2, [r7, #60]	; 0x3c
 800212a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002130:	633b      	str	r3, [r7, #48]	; 0x30
 8002132:	2300      	movs	r3, #0
 8002134:	637b      	str	r3, [r7, #52]	; 0x34
 8002136:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800213a:	4622      	mov	r2, r4
 800213c:	462b      	mov	r3, r5
 800213e:	f04f 0000 	mov.w	r0, #0
 8002142:	f04f 0100 	mov.w	r1, #0
 8002146:	0159      	lsls	r1, r3, #5
 8002148:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800214c:	0150      	lsls	r0, r2, #5
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4621      	mov	r1, r4
 8002154:	1a51      	subs	r1, r2, r1
 8002156:	6139      	str	r1, [r7, #16]
 8002158:	4629      	mov	r1, r5
 800215a:	eb63 0301 	sbc.w	r3, r3, r1
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800216c:	4659      	mov	r1, fp
 800216e:	018b      	lsls	r3, r1, #6
 8002170:	4651      	mov	r1, sl
 8002172:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002176:	4651      	mov	r1, sl
 8002178:	018a      	lsls	r2, r1, #6
 800217a:	4651      	mov	r1, sl
 800217c:	ebb2 0801 	subs.w	r8, r2, r1
 8002180:	4659      	mov	r1, fp
 8002182:	eb63 0901 	sbc.w	r9, r3, r1
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002192:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002196:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800219a:	4690      	mov	r8, r2
 800219c:	4699      	mov	r9, r3
 800219e:	4623      	mov	r3, r4
 80021a0:	eb18 0303 	adds.w	r3, r8, r3
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	462b      	mov	r3, r5
 80021a8:	eb49 0303 	adc.w	r3, r9, r3
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	f04f 0300 	mov.w	r3, #0
 80021b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021ba:	4629      	mov	r1, r5
 80021bc:	024b      	lsls	r3, r1, #9
 80021be:	4621      	mov	r1, r4
 80021c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021c4:	4621      	mov	r1, r4
 80021c6:	024a      	lsls	r2, r1, #9
 80021c8:	4610      	mov	r0, r2
 80021ca:	4619      	mov	r1, r3
 80021cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ce:	2200      	movs	r2, #0
 80021d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80021d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021d8:	f7fd fffa 	bl	80001d0 <__aeabi_uldivmod>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4613      	mov	r3, r2
 80021e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021e4:	e058      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e6:	4b38      	ldr	r3, [pc, #224]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	099b      	lsrs	r3, r3, #6
 80021ec:	2200      	movs	r2, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	4611      	mov	r1, r2
 80021f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021f6:	623b      	str	r3, [r7, #32]
 80021f8:	2300      	movs	r3, #0
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
 80021fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002200:	4642      	mov	r2, r8
 8002202:	464b      	mov	r3, r9
 8002204:	f04f 0000 	mov.w	r0, #0
 8002208:	f04f 0100 	mov.w	r1, #0
 800220c:	0159      	lsls	r1, r3, #5
 800220e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002212:	0150      	lsls	r0, r2, #5
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4641      	mov	r1, r8
 800221a:	ebb2 0a01 	subs.w	sl, r2, r1
 800221e:	4649      	mov	r1, r9
 8002220:	eb63 0b01 	sbc.w	fp, r3, r1
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002230:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002234:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002238:	ebb2 040a 	subs.w	r4, r2, sl
 800223c:	eb63 050b 	sbc.w	r5, r3, fp
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	00eb      	lsls	r3, r5, #3
 800224a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800224e:	00e2      	lsls	r2, r4, #3
 8002250:	4614      	mov	r4, r2
 8002252:	461d      	mov	r5, r3
 8002254:	4643      	mov	r3, r8
 8002256:	18e3      	adds	r3, r4, r3
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	464b      	mov	r3, r9
 800225c:	eb45 0303 	adc.w	r3, r5, r3
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800226e:	4629      	mov	r1, r5
 8002270:	028b      	lsls	r3, r1, #10
 8002272:	4621      	mov	r1, r4
 8002274:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002278:	4621      	mov	r1, r4
 800227a:	028a      	lsls	r2, r1, #10
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002282:	2200      	movs	r2, #0
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	61fa      	str	r2, [r7, #28]
 8002288:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800228c:	f7fd ffa0 	bl	80001d0 <__aeabi_uldivmod>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4613      	mov	r3, r2
 8002296:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	0c1b      	lsrs	r3, r3, #16
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	3301      	adds	r3, #1
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80022a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022b2:	e002      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_RCC_GetSysClockFreq+0x204>)
 80022b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3750      	adds	r7, #80	; 0x50
 80022c0:	46bd      	mov	sp, r7
 80022c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800
 80022cc:	00f42400 	.word	0x00f42400
 80022d0:	007a1200 	.word	0x007a1200

080022d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000000 	.word	0x20000000

080022ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022f0:	f7ff fff0 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_RCC_GetPCLK1Freq+0x20>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	0a9b      	lsrs	r3, r3, #10
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	4903      	ldr	r1, [pc, #12]	; (8002310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002302:	5ccb      	ldrb	r3, [r1, r3]
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002308:	4618      	mov	r0, r3
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40023800 	.word	0x40023800
 8002310:	08006694 	.word	0x08006694

08002314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002318:	f7ff ffdc 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	0b5b      	lsrs	r3, r3, #13
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4903      	ldr	r1, [pc, #12]	; (8002338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002330:	4618      	mov	r0, r3
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40023800 	.word	0x40023800
 8002338:	08006694 	.word	0x08006694

0800233c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	220f      	movs	r2, #15
 800234a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_RCC_GetClockConfig+0x5c>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0203 	and.w	r2, r3, #3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <HAL_RCC_GetClockConfig+0x5c>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <HAL_RCC_GetClockConfig+0x5c>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_RCC_GetClockConfig+0x5c>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	08db      	lsrs	r3, r3, #3
 8002376:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800237e:	4b07      	ldr	r3, [pc, #28]	; (800239c <HAL_RCC_GetClockConfig+0x60>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0207 	and.w	r2, r3, #7
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	601a      	str	r2, [r3, #0]
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800
 800239c:	40023c00 	.word	0x40023c00

080023a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e07b      	b.n	80024aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d108      	bne.n	80023cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023c2:	d009      	beq.n	80023d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	61da      	str	r2, [r3, #28]
 80023ca:	e005      	b.n	80023d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d106      	bne.n	80023f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7fe fae0 	bl	80009b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800240e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245c:	ea42 0103 	orr.w	r1, r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	0c1b      	lsrs	r3, r3, #16
 8002476:	f003 0104 	and.w	r1, r3, #4
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	f003 0210 	and.w	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69da      	ldr	r2, [r3, #28]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002498:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e041      	b.n	8002548 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d106      	bne.n	80024de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f839 	bl	8002550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2202      	movs	r2, #2
 80024e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3304      	adds	r3, #4
 80024ee:	4619      	mov	r1, r3
 80024f0:	4610      	mov	r0, r2
 80024f2:	f000 f9d7 	bl	80028a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b01      	cmp	r3, #1
 8002576:	d001      	beq.n	800257c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e04e      	b.n	800261a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a23      	ldr	r2, [pc, #140]	; (8002628 <HAL_TIM_Base_Start_IT+0xc4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d022      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x80>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a6:	d01d      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x80>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1f      	ldr	r2, [pc, #124]	; (800262c <HAL_TIM_Base_Start_IT+0xc8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d018      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x80>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a1e      	ldr	r2, [pc, #120]	; (8002630 <HAL_TIM_Base_Start_IT+0xcc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d013      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x80>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1c      	ldr	r2, [pc, #112]	; (8002634 <HAL_TIM_Base_Start_IT+0xd0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00e      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x80>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a1b      	ldr	r2, [pc, #108]	; (8002638 <HAL_TIM_Base_Start_IT+0xd4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d009      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x80>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a19      	ldr	r2, [pc, #100]	; (800263c <HAL_TIM_Base_Start_IT+0xd8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d004      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x80>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a18      	ldr	r2, [pc, #96]	; (8002640 <HAL_TIM_Base_Start_IT+0xdc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d111      	bne.n	8002608 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b06      	cmp	r3, #6
 80025f4:	d010      	beq.n	8002618 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0201 	orr.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002606:	e007      	b.n	8002618 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40010000 	.word	0x40010000
 800262c:	40000400 	.word	0x40000400
 8002630:	40000800 	.word	0x40000800
 8002634:	40000c00 	.word	0x40000c00
 8002638:	40010400 	.word	0x40010400
 800263c:	40014000 	.word	0x40014000
 8002640:	40001800 	.word	0x40001800

08002644 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b02      	cmp	r3, #2
 8002658:	d122      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b02      	cmp	r3, #2
 8002666:	d11b      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0202 	mvn.w	r2, #2
 8002670:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f8ee 	bl	8002868 <HAL_TIM_IC_CaptureCallback>
 800268c:	e005      	b.n	800269a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f8e0 	bl	8002854 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f8f1 	bl	800287c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d122      	bne.n	80026f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d11b      	bne.n	80026f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0204 	mvn.w	r2, #4
 80026c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2202      	movs	r2, #2
 80026ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f8c4 	bl	8002868 <HAL_TIM_IC_CaptureCallback>
 80026e0:	e005      	b.n	80026ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f8b6 	bl	8002854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f8c7 	bl	800287c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d122      	bne.n	8002748 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	2b08      	cmp	r3, #8
 800270e:	d11b      	bne.n	8002748 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0208 	mvn.w	r2, #8
 8002718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2204      	movs	r2, #4
 800271e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f89a 	bl	8002868 <HAL_TIM_IC_CaptureCallback>
 8002734:	e005      	b.n	8002742 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f88c 	bl	8002854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f89d 	bl	800287c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b10      	cmp	r3, #16
 8002754:	d122      	bne.n	800279c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	2b10      	cmp	r3, #16
 8002762:	d11b      	bne.n	800279c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f06f 0210 	mvn.w	r2, #16
 800276c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2208      	movs	r2, #8
 8002772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f870 	bl	8002868 <HAL_TIM_IC_CaptureCallback>
 8002788:	e005      	b.n	8002796 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f862 	bl	8002854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f873 	bl	800287c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d10e      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d107      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0201 	mvn.w	r2, #1
 80027c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7fe f8aa 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d2:	2b80      	cmp	r3, #128	; 0x80
 80027d4:	d10e      	bne.n	80027f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e0:	2b80      	cmp	r3, #128	; 0x80
 80027e2:	d107      	bne.n	80027f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f902 	bl	80029f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fe:	2b40      	cmp	r3, #64	; 0x40
 8002800:	d10e      	bne.n	8002820 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280c:	2b40      	cmp	r3, #64	; 0x40
 800280e:	d107      	bne.n	8002820 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f838 	bl	8002890 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	2b20      	cmp	r3, #32
 800282c:	d10e      	bne.n	800284c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0320 	and.w	r3, r3, #32
 8002838:	2b20      	cmp	r3, #32
 800283a:	d107      	bne.n	800284c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0220 	mvn.w	r2, #32
 8002844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f8cc 	bl	80029e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a40      	ldr	r2, [pc, #256]	; (80029b8 <TIM_Base_SetConfig+0x114>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d013      	beq.n	80028e4 <TIM_Base_SetConfig+0x40>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c2:	d00f      	beq.n	80028e4 <TIM_Base_SetConfig+0x40>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a3d      	ldr	r2, [pc, #244]	; (80029bc <TIM_Base_SetConfig+0x118>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d00b      	beq.n	80028e4 <TIM_Base_SetConfig+0x40>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a3c      	ldr	r2, [pc, #240]	; (80029c0 <TIM_Base_SetConfig+0x11c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d007      	beq.n	80028e4 <TIM_Base_SetConfig+0x40>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a3b      	ldr	r2, [pc, #236]	; (80029c4 <TIM_Base_SetConfig+0x120>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d003      	beq.n	80028e4 <TIM_Base_SetConfig+0x40>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a3a      	ldr	r2, [pc, #232]	; (80029c8 <TIM_Base_SetConfig+0x124>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d108      	bne.n	80028f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a2f      	ldr	r2, [pc, #188]	; (80029b8 <TIM_Base_SetConfig+0x114>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d02b      	beq.n	8002956 <TIM_Base_SetConfig+0xb2>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002904:	d027      	beq.n	8002956 <TIM_Base_SetConfig+0xb2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a2c      	ldr	r2, [pc, #176]	; (80029bc <TIM_Base_SetConfig+0x118>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d023      	beq.n	8002956 <TIM_Base_SetConfig+0xb2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a2b      	ldr	r2, [pc, #172]	; (80029c0 <TIM_Base_SetConfig+0x11c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d01f      	beq.n	8002956 <TIM_Base_SetConfig+0xb2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a2a      	ldr	r2, [pc, #168]	; (80029c4 <TIM_Base_SetConfig+0x120>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d01b      	beq.n	8002956 <TIM_Base_SetConfig+0xb2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a29      	ldr	r2, [pc, #164]	; (80029c8 <TIM_Base_SetConfig+0x124>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d017      	beq.n	8002956 <TIM_Base_SetConfig+0xb2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a28      	ldr	r2, [pc, #160]	; (80029cc <TIM_Base_SetConfig+0x128>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d013      	beq.n	8002956 <TIM_Base_SetConfig+0xb2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a27      	ldr	r2, [pc, #156]	; (80029d0 <TIM_Base_SetConfig+0x12c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d00f      	beq.n	8002956 <TIM_Base_SetConfig+0xb2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a26      	ldr	r2, [pc, #152]	; (80029d4 <TIM_Base_SetConfig+0x130>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00b      	beq.n	8002956 <TIM_Base_SetConfig+0xb2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a25      	ldr	r2, [pc, #148]	; (80029d8 <TIM_Base_SetConfig+0x134>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d007      	beq.n	8002956 <TIM_Base_SetConfig+0xb2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a24      	ldr	r2, [pc, #144]	; (80029dc <TIM_Base_SetConfig+0x138>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d003      	beq.n	8002956 <TIM_Base_SetConfig+0xb2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a23      	ldr	r2, [pc, #140]	; (80029e0 <TIM_Base_SetConfig+0x13c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d108      	bne.n	8002968 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800295c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	4313      	orrs	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <TIM_Base_SetConfig+0x114>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d003      	beq.n	800299c <TIM_Base_SetConfig+0xf8>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a0c      	ldr	r2, [pc, #48]	; (80029c8 <TIM_Base_SetConfig+0x124>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d103      	bne.n	80029a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	615a      	str	r2, [r3, #20]
}
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40010000 	.word	0x40010000
 80029bc:	40000400 	.word	0x40000400
 80029c0:	40000800 	.word	0x40000800
 80029c4:	40000c00 	.word	0x40000c00
 80029c8:	40010400 	.word	0x40010400
 80029cc:	40014000 	.word	0x40014000
 80029d0:	40014400 	.word	0x40014400
 80029d4:	40014800 	.word	0x40014800
 80029d8:	40001800 	.word	0x40001800
 80029dc:	40001c00 	.word	0x40001c00
 80029e0:	40002000 	.word	0x40002000

080029e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	460b      	mov	r3, r1
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e05f      	b.n	8002ae4 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d106      	bne.n	8002a3e <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f7fe f929 	bl	8000c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2224      	movs	r2, #36	; 0x24
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a54:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fc9a 	bl	8003390 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a6a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a7a:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691a      	ldr	r2, [r3, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 020f 	bic.w	r2, r2, #15
 8002a8a:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6919      	ldr	r1, [r3, #16]
 8002a92:	7afa      	ldrb	r2, [r7, #11]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aaa:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68d9      	ldr	r1, [r3, #12]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b0ba      	sub	sp, #232	; 0xe8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002b2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10f      	bne.n	8002b52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b36:	f003 0320 	and.w	r3, r3, #32
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_UART_IRQHandler+0x66>
 8002b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fb65 	bl	800321a <UART_Receive_IT>
      return;
 8002b50:	e256      	b.n	8003000 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 80de 	beq.w	8002d18 <HAL_UART_IRQHandler+0x22c>
 8002b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d106      	bne.n	8002b76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80d1 	beq.w	8002d18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <HAL_UART_IRQHandler+0xae>
 8002b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f043 0201 	orr.w	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00b      	beq.n	8002bbe <HAL_UART_IRQHandler+0xd2>
 8002ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f043 0202 	orr.w	r2, r3, #2
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00b      	beq.n	8002be2 <HAL_UART_IRQHandler+0xf6>
 8002bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	f043 0204 	orr.w	r2, r3, #4
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d011      	beq.n	8002c12 <HAL_UART_IRQHandler+0x126>
 8002bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d105      	bne.n	8002c06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d005      	beq.n	8002c12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f043 0208 	orr.w	r2, r3, #8
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 81ed 	beq.w	8002ff6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c20:	f003 0320 	and.w	r3, r3, #32
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <HAL_UART_IRQHandler+0x14e>
 8002c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 faf0 	bl	800321a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c44:	2b40      	cmp	r3, #64	; 0x40
 8002c46:	bf0c      	ite	eq
 8002c48:	2301      	moveq	r3, #1
 8002c4a:	2300      	movne	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d103      	bne.n	8002c66 <HAL_UART_IRQHandler+0x17a>
 8002c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d04f      	beq.n	8002d06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f9f8 	bl	800305c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c76:	2b40      	cmp	r3, #64	; 0x40
 8002c78:	d141      	bne.n	8002cfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3314      	adds	r3, #20
 8002c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c88:	e853 3f00 	ldrex	r3, [r3]
 8002c8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3314      	adds	r3, #20
 8002ca2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ca6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002caa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002cb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002cb6:	e841 2300 	strex	r3, r2, [r1]
 8002cba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1d9      	bne.n	8002c7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d013      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd2:	4a7d      	ldr	r2, [pc, #500]	; (8002ec8 <HAL_UART_IRQHandler+0x3dc>)
 8002cd4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fe fca4 	bl	8001628 <HAL_DMA_Abort_IT>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d016      	beq.n	8002d14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf4:	e00e      	b.n	8002d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f99a 	bl	8003030 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cfc:	e00a      	b.n	8002d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f996 	bl	8003030 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d04:	e006      	b.n	8002d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f992 	bl	8003030 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d12:	e170      	b.n	8002ff6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d14:	bf00      	nop
    return;
 8002d16:	e16e      	b.n	8002ff6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	f040 814a 	bne.w	8002fb6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 8143 	beq.w	8002fb6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 813c 	beq.w	8002fb6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5e:	2b40      	cmp	r3, #64	; 0x40
 8002d60:	f040 80b4 	bne.w	8002ecc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8140 	beq.w	8002ffa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d82:	429a      	cmp	r2, r3
 8002d84:	f080 8139 	bcs.w	8002ffa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d9a:	f000 8088 	beq.w	8002eae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	330c      	adds	r3, #12
 8002da4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dac:	e853 3f00 	ldrex	r3, [r3]
 8002db0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002db4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	330c      	adds	r3, #12
 8002dc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002dca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002dd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002dda:	e841 2300 	strex	r3, r2, [r1]
 8002dde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1d9      	bne.n	8002d9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	3314      	adds	r3, #20
 8002df0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df4:	e853 3f00 	ldrex	r3, [r3]
 8002df8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002dfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	3314      	adds	r3, #20
 8002e0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e1a:	e841 2300 	strex	r3, r2, [r1]
 8002e1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1e1      	bne.n	8002dea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3314      	adds	r3, #20
 8002e2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e30:	e853 3f00 	ldrex	r3, [r3]
 8002e34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	3314      	adds	r3, #20
 8002e46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e52:	e841 2300 	strex	r3, r2, [r1]
 8002e56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1e3      	bne.n	8002e26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	330c      	adds	r3, #12
 8002e72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e76:	e853 3f00 	ldrex	r3, [r3]
 8002e7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e7e:	f023 0310 	bic.w	r3, r3, #16
 8002e82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	330c      	adds	r3, #12
 8002e8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e90:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e98:	e841 2300 	strex	r3, r2, [r1]
 8002e9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e3      	bne.n	8002e6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fe fb4d 	bl	8001548 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f8c0 	bl	8003044 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ec4:	e099      	b.n	8002ffa <HAL_UART_IRQHandler+0x50e>
 8002ec6:	bf00      	nop
 8002ec8:	08003123 	.word	0x08003123
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 808b 	beq.w	8002ffe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002ee8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 8086 	beq.w	8002ffe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	330c      	adds	r3, #12
 8002ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efc:	e853 3f00 	ldrex	r3, [r3]
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	330c      	adds	r3, #12
 8002f12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f16:	647a      	str	r2, [r7, #68]	; 0x44
 8002f18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f1e:	e841 2300 	strex	r3, r2, [r1]
 8002f22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1e3      	bne.n	8002ef2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3314      	adds	r3, #20
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	e853 3f00 	ldrex	r3, [r3]
 8002f38:	623b      	str	r3, [r7, #32]
   return(result);
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3314      	adds	r3, #20
 8002f4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f4e:	633a      	str	r2, [r7, #48]	; 0x30
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f56:	e841 2300 	strex	r3, r2, [r1]
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1e3      	bne.n	8002f2a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	330c      	adds	r3, #12
 8002f76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	e853 3f00 	ldrex	r3, [r3]
 8002f7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f023 0310 	bic.w	r3, r3, #16
 8002f86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	330c      	adds	r3, #12
 8002f90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f94:	61fa      	str	r2, [r7, #28]
 8002f96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f98:	69b9      	ldr	r1, [r7, #24]
 8002f9a:	69fa      	ldr	r2, [r7, #28]
 8002f9c:	e841 2300 	strex	r3, r2, [r1]
 8002fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1e3      	bne.n	8002f70 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fac:	4619      	mov	r1, r3
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f848 	bl	8003044 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fb4:	e023      	b.n	8002ffe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x4ea>
 8002fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f8bb 	bl	800314a <UART_Transmit_IT>
    return;
 8002fd4:	e014      	b.n	8003000 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00e      	beq.n	8003000 <HAL_UART_IRQHandler+0x514>
 8002fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f8fb 	bl	80031ea <UART_EndTransmit_IT>
    return;
 8002ff4:	e004      	b.n	8003000 <HAL_UART_IRQHandler+0x514>
    return;
 8002ff6:	bf00      	nop
 8002ff8:	e002      	b.n	8003000 <HAL_UART_IRQHandler+0x514>
      return;
 8002ffa:	bf00      	nop
 8002ffc:	e000      	b.n	8003000 <HAL_UART_IRQHandler+0x514>
      return;
 8002ffe:	bf00      	nop
  }
}
 8003000:	37e8      	adds	r7, #232	; 0xe8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop

08003008 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800305c:	b480      	push	{r7}
 800305e:	b095      	sub	sp, #84	; 0x54
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	330c      	adds	r3, #12
 800306a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306e:	e853 3f00 	ldrex	r3, [r3]
 8003072:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003076:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800307a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	330c      	adds	r3, #12
 8003082:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003084:	643a      	str	r2, [r7, #64]	; 0x40
 8003086:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003088:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800308a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800308c:	e841 2300 	strex	r3, r2, [r1]
 8003090:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1e5      	bne.n	8003064 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3314      	adds	r3, #20
 800309e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	e853 3f00 	ldrex	r3, [r3]
 80030a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f023 0301 	bic.w	r3, r3, #1
 80030ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3314      	adds	r3, #20
 80030b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030c0:	e841 2300 	strex	r3, r2, [r1]
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1e5      	bne.n	8003098 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d119      	bne.n	8003108 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	330c      	adds	r3, #12
 80030da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	e853 3f00 	ldrex	r3, [r3]
 80030e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f023 0310 	bic.w	r3, r3, #16
 80030ea:	647b      	str	r3, [r7, #68]	; 0x44
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	330c      	adds	r3, #12
 80030f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030f4:	61ba      	str	r2, [r7, #24]
 80030f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f8:	6979      	ldr	r1, [r7, #20]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	e841 2300 	strex	r3, r2, [r1]
 8003100:	613b      	str	r3, [r7, #16]
   return(result);
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1e5      	bne.n	80030d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003116:	bf00      	nop
 8003118:	3754      	adds	r7, #84	; 0x54
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f7ff ff77 	bl	8003030 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800314a:	b480      	push	{r7}
 800314c:	b085      	sub	sp, #20
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b21      	cmp	r3, #33	; 0x21
 800315c:	d13e      	bne.n	80031dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003166:	d114      	bne.n	8003192 <UART_Transmit_IT+0x48>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d110      	bne.n	8003192 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003184:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	1c9a      	adds	r2, r3, #2
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	621a      	str	r2, [r3, #32]
 8003190:	e008      	b.n	80031a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	1c59      	adds	r1, r3, #1
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6211      	str	r1, [r2, #32]
 800319c:	781a      	ldrb	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	4619      	mov	r1, r3
 80031b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10f      	bne.n	80031d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	e000      	b.n	80031de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031dc:	2302      	movs	r3, #2
  }
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003200:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff fefc 	bl	8003008 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b08c      	sub	sp, #48	; 0x30
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b22      	cmp	r3, #34	; 0x22
 800322c:	f040 80ab 	bne.w	8003386 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003238:	d117      	bne.n	800326a <UART_Receive_IT+0x50>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d113      	bne.n	800326a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003242:	2300      	movs	r3, #0
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	b29b      	uxth	r3, r3
 8003254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003258:	b29a      	uxth	r2, r3
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	1c9a      	adds	r2, r3, #2
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	629a      	str	r2, [r3, #40]	; 0x28
 8003268:	e026      	b.n	80032b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003270:	2300      	movs	r3, #0
 8003272:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327c:	d007      	beq.n	800328e <UART_Receive_IT+0x74>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10a      	bne.n	800329c <UART_Receive_IT+0x82>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	b2da      	uxtb	r2, r3
 8003296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	e008      	b.n	80032ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	4619      	mov	r1, r3
 80032c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d15a      	bne.n	8003382 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0220 	bic.w	r2, r2, #32
 80032da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0201 	bic.w	r2, r2, #1
 80032fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2220      	movs	r2, #32
 8003300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	2b01      	cmp	r3, #1
 800330a:	d135      	bne.n	8003378 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	330c      	adds	r3, #12
 8003318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	e853 3f00 	ldrex	r3, [r3]
 8003320:	613b      	str	r3, [r7, #16]
   return(result);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f023 0310 	bic.w	r3, r3, #16
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	330c      	adds	r3, #12
 8003330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003332:	623a      	str	r2, [r7, #32]
 8003334:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	69f9      	ldr	r1, [r7, #28]
 8003338:	6a3a      	ldr	r2, [r7, #32]
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e5      	bne.n	8003312 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b10      	cmp	r3, #16
 8003352:	d10a      	bne.n	800336a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800336e:	4619      	mov	r1, r3
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff fe67 	bl	8003044 <HAL_UARTEx_RxEventCallback>
 8003376:	e002      	b.n	800337e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff fe4f 	bl	800301c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	e002      	b.n	8003388 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	e000      	b.n	8003388 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003386:	2302      	movs	r3, #2
  }
}
 8003388:	4618      	mov	r0, r3
 800338a:	3730      	adds	r7, #48	; 0x30
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003394:	b0c0      	sub	sp, #256	; 0x100
 8003396:	af00      	add	r7, sp, #0
 8003398:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800339c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ac:	68d9      	ldr	r1, [r3, #12]
 80033ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	ea40 0301 	orr.w	r3, r0, r1
 80033b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033e8:	f021 010c 	bic.w	r1, r1, #12
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033f6:	430b      	orrs	r3, r1
 80033f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340a:	6999      	ldr	r1, [r3, #24]
 800340c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	ea40 0301 	orr.w	r3, r0, r1
 8003416:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	4b8f      	ldr	r3, [pc, #572]	; (800365c <UART_SetConfig+0x2cc>)
 8003420:	429a      	cmp	r2, r3
 8003422:	d005      	beq.n	8003430 <UART_SetConfig+0xa0>
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	4b8d      	ldr	r3, [pc, #564]	; (8003660 <UART_SetConfig+0x2d0>)
 800342c:	429a      	cmp	r2, r3
 800342e:	d104      	bne.n	800343a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003430:	f7fe ff70 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 8003434:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003438:	e003      	b.n	8003442 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800343a:	f7fe ff57 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 800343e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800344c:	f040 810c 	bne.w	8003668 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003454:	2200      	movs	r2, #0
 8003456:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800345a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800345e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003462:	4622      	mov	r2, r4
 8003464:	462b      	mov	r3, r5
 8003466:	1891      	adds	r1, r2, r2
 8003468:	65b9      	str	r1, [r7, #88]	; 0x58
 800346a:	415b      	adcs	r3, r3
 800346c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800346e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003472:	4621      	mov	r1, r4
 8003474:	eb12 0801 	adds.w	r8, r2, r1
 8003478:	4629      	mov	r1, r5
 800347a:	eb43 0901 	adc.w	r9, r3, r1
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800348a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800348e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003492:	4690      	mov	r8, r2
 8003494:	4699      	mov	r9, r3
 8003496:	4623      	mov	r3, r4
 8003498:	eb18 0303 	adds.w	r3, r8, r3
 800349c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034a0:	462b      	mov	r3, r5
 80034a2:	eb49 0303 	adc.w	r3, r9, r3
 80034a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034be:	460b      	mov	r3, r1
 80034c0:	18db      	adds	r3, r3, r3
 80034c2:	653b      	str	r3, [r7, #80]	; 0x50
 80034c4:	4613      	mov	r3, r2
 80034c6:	eb42 0303 	adc.w	r3, r2, r3
 80034ca:	657b      	str	r3, [r7, #84]	; 0x54
 80034cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034d4:	f7fc fe7c 	bl	80001d0 <__aeabi_uldivmod>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4b61      	ldr	r3, [pc, #388]	; (8003664 <UART_SetConfig+0x2d4>)
 80034de:	fba3 2302 	umull	r2, r3, r3, r2
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	011c      	lsls	r4, r3, #4
 80034e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ea:	2200      	movs	r2, #0
 80034ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034f8:	4642      	mov	r2, r8
 80034fa:	464b      	mov	r3, r9
 80034fc:	1891      	adds	r1, r2, r2
 80034fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8003500:	415b      	adcs	r3, r3
 8003502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003504:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003508:	4641      	mov	r1, r8
 800350a:	eb12 0a01 	adds.w	sl, r2, r1
 800350e:	4649      	mov	r1, r9
 8003510:	eb43 0b01 	adc.w	fp, r3, r1
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003520:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003524:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003528:	4692      	mov	sl, r2
 800352a:	469b      	mov	fp, r3
 800352c:	4643      	mov	r3, r8
 800352e:	eb1a 0303 	adds.w	r3, sl, r3
 8003532:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003536:	464b      	mov	r3, r9
 8003538:	eb4b 0303 	adc.w	r3, fp, r3
 800353c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800354c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003550:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003554:	460b      	mov	r3, r1
 8003556:	18db      	adds	r3, r3, r3
 8003558:	643b      	str	r3, [r7, #64]	; 0x40
 800355a:	4613      	mov	r3, r2
 800355c:	eb42 0303 	adc.w	r3, r2, r3
 8003560:	647b      	str	r3, [r7, #68]	; 0x44
 8003562:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003566:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800356a:	f7fc fe31 	bl	80001d0 <__aeabi_uldivmod>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4611      	mov	r1, r2
 8003574:	4b3b      	ldr	r3, [pc, #236]	; (8003664 <UART_SetConfig+0x2d4>)
 8003576:	fba3 2301 	umull	r2, r3, r3, r1
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	2264      	movs	r2, #100	; 0x64
 800357e:	fb02 f303 	mul.w	r3, r2, r3
 8003582:	1acb      	subs	r3, r1, r3
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800358a:	4b36      	ldr	r3, [pc, #216]	; (8003664 <UART_SetConfig+0x2d4>)
 800358c:	fba3 2302 	umull	r2, r3, r3, r2
 8003590:	095b      	lsrs	r3, r3, #5
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003598:	441c      	add	r4, r3
 800359a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800359e:	2200      	movs	r2, #0
 80035a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035ac:	4642      	mov	r2, r8
 80035ae:	464b      	mov	r3, r9
 80035b0:	1891      	adds	r1, r2, r2
 80035b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80035b4:	415b      	adcs	r3, r3
 80035b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035bc:	4641      	mov	r1, r8
 80035be:	1851      	adds	r1, r2, r1
 80035c0:	6339      	str	r1, [r7, #48]	; 0x30
 80035c2:	4649      	mov	r1, r9
 80035c4:	414b      	adcs	r3, r1
 80035c6:	637b      	str	r3, [r7, #52]	; 0x34
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035d4:	4659      	mov	r1, fp
 80035d6:	00cb      	lsls	r3, r1, #3
 80035d8:	4651      	mov	r1, sl
 80035da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035de:	4651      	mov	r1, sl
 80035e0:	00ca      	lsls	r2, r1, #3
 80035e2:	4610      	mov	r0, r2
 80035e4:	4619      	mov	r1, r3
 80035e6:	4603      	mov	r3, r0
 80035e8:	4642      	mov	r2, r8
 80035ea:	189b      	adds	r3, r3, r2
 80035ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035f0:	464b      	mov	r3, r9
 80035f2:	460a      	mov	r2, r1
 80035f4:	eb42 0303 	adc.w	r3, r2, r3
 80035f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003608:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800360c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003610:	460b      	mov	r3, r1
 8003612:	18db      	adds	r3, r3, r3
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28
 8003616:	4613      	mov	r3, r2
 8003618:	eb42 0303 	adc.w	r3, r2, r3
 800361c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800361e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003622:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003626:	f7fc fdd3 	bl	80001d0 <__aeabi_uldivmod>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4b0d      	ldr	r3, [pc, #52]	; (8003664 <UART_SetConfig+0x2d4>)
 8003630:	fba3 1302 	umull	r1, r3, r3, r2
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	2164      	movs	r1, #100	; 0x64
 8003638:	fb01 f303 	mul.w	r3, r1, r3
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	3332      	adds	r3, #50	; 0x32
 8003642:	4a08      	ldr	r2, [pc, #32]	; (8003664 <UART_SetConfig+0x2d4>)
 8003644:	fba2 2303 	umull	r2, r3, r2, r3
 8003648:	095b      	lsrs	r3, r3, #5
 800364a:	f003 0207 	and.w	r2, r3, #7
 800364e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4422      	add	r2, r4
 8003656:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003658:	e105      	b.n	8003866 <UART_SetConfig+0x4d6>
 800365a:	bf00      	nop
 800365c:	40011000 	.word	0x40011000
 8003660:	40011400 	.word	0x40011400
 8003664:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800366c:	2200      	movs	r2, #0
 800366e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003672:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003676:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800367a:	4642      	mov	r2, r8
 800367c:	464b      	mov	r3, r9
 800367e:	1891      	adds	r1, r2, r2
 8003680:	6239      	str	r1, [r7, #32]
 8003682:	415b      	adcs	r3, r3
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
 8003686:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800368a:	4641      	mov	r1, r8
 800368c:	1854      	adds	r4, r2, r1
 800368e:	4649      	mov	r1, r9
 8003690:	eb43 0501 	adc.w	r5, r3, r1
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	00eb      	lsls	r3, r5, #3
 800369e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036a2:	00e2      	lsls	r2, r4, #3
 80036a4:	4614      	mov	r4, r2
 80036a6:	461d      	mov	r5, r3
 80036a8:	4643      	mov	r3, r8
 80036aa:	18e3      	adds	r3, r4, r3
 80036ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036b0:	464b      	mov	r3, r9
 80036b2:	eb45 0303 	adc.w	r3, r5, r3
 80036b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036ca:	f04f 0200 	mov.w	r2, #0
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036d6:	4629      	mov	r1, r5
 80036d8:	008b      	lsls	r3, r1, #2
 80036da:	4621      	mov	r1, r4
 80036dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036e0:	4621      	mov	r1, r4
 80036e2:	008a      	lsls	r2, r1, #2
 80036e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036e8:	f7fc fd72 	bl	80001d0 <__aeabi_uldivmod>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4b60      	ldr	r3, [pc, #384]	; (8003874 <UART_SetConfig+0x4e4>)
 80036f2:	fba3 2302 	umull	r2, r3, r3, r2
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	011c      	lsls	r4, r3, #4
 80036fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036fe:	2200      	movs	r2, #0
 8003700:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003704:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003708:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800370c:	4642      	mov	r2, r8
 800370e:	464b      	mov	r3, r9
 8003710:	1891      	adds	r1, r2, r2
 8003712:	61b9      	str	r1, [r7, #24]
 8003714:	415b      	adcs	r3, r3
 8003716:	61fb      	str	r3, [r7, #28]
 8003718:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800371c:	4641      	mov	r1, r8
 800371e:	1851      	adds	r1, r2, r1
 8003720:	6139      	str	r1, [r7, #16]
 8003722:	4649      	mov	r1, r9
 8003724:	414b      	adcs	r3, r1
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003734:	4659      	mov	r1, fp
 8003736:	00cb      	lsls	r3, r1, #3
 8003738:	4651      	mov	r1, sl
 800373a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800373e:	4651      	mov	r1, sl
 8003740:	00ca      	lsls	r2, r1, #3
 8003742:	4610      	mov	r0, r2
 8003744:	4619      	mov	r1, r3
 8003746:	4603      	mov	r3, r0
 8003748:	4642      	mov	r2, r8
 800374a:	189b      	adds	r3, r3, r2
 800374c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003750:	464b      	mov	r3, r9
 8003752:	460a      	mov	r2, r1
 8003754:	eb42 0303 	adc.w	r3, r2, r3
 8003758:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	67bb      	str	r3, [r7, #120]	; 0x78
 8003766:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003774:	4649      	mov	r1, r9
 8003776:	008b      	lsls	r3, r1, #2
 8003778:	4641      	mov	r1, r8
 800377a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800377e:	4641      	mov	r1, r8
 8003780:	008a      	lsls	r2, r1, #2
 8003782:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003786:	f7fc fd23 	bl	80001d0 <__aeabi_uldivmod>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4b39      	ldr	r3, [pc, #228]	; (8003874 <UART_SetConfig+0x4e4>)
 8003790:	fba3 1302 	umull	r1, r3, r3, r2
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	2164      	movs	r1, #100	; 0x64
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	3332      	adds	r3, #50	; 0x32
 80037a2:	4a34      	ldr	r2, [pc, #208]	; (8003874 <UART_SetConfig+0x4e4>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ae:	441c      	add	r4, r3
 80037b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037b4:	2200      	movs	r2, #0
 80037b6:	673b      	str	r3, [r7, #112]	; 0x70
 80037b8:	677a      	str	r2, [r7, #116]	; 0x74
 80037ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037be:	4642      	mov	r2, r8
 80037c0:	464b      	mov	r3, r9
 80037c2:	1891      	adds	r1, r2, r2
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	415b      	adcs	r3, r3
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037ce:	4641      	mov	r1, r8
 80037d0:	1851      	adds	r1, r2, r1
 80037d2:	6039      	str	r1, [r7, #0]
 80037d4:	4649      	mov	r1, r9
 80037d6:	414b      	adcs	r3, r1
 80037d8:	607b      	str	r3, [r7, #4]
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037e6:	4659      	mov	r1, fp
 80037e8:	00cb      	lsls	r3, r1, #3
 80037ea:	4651      	mov	r1, sl
 80037ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037f0:	4651      	mov	r1, sl
 80037f2:	00ca      	lsls	r2, r1, #3
 80037f4:	4610      	mov	r0, r2
 80037f6:	4619      	mov	r1, r3
 80037f8:	4603      	mov	r3, r0
 80037fa:	4642      	mov	r2, r8
 80037fc:	189b      	adds	r3, r3, r2
 80037fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003800:	464b      	mov	r3, r9
 8003802:	460a      	mov	r2, r1
 8003804:	eb42 0303 	adc.w	r3, r2, r3
 8003808:	66fb      	str	r3, [r7, #108]	; 0x6c
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	663b      	str	r3, [r7, #96]	; 0x60
 8003814:	667a      	str	r2, [r7, #100]	; 0x64
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003822:	4649      	mov	r1, r9
 8003824:	008b      	lsls	r3, r1, #2
 8003826:	4641      	mov	r1, r8
 8003828:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800382c:	4641      	mov	r1, r8
 800382e:	008a      	lsls	r2, r1, #2
 8003830:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003834:	f7fc fccc 	bl	80001d0 <__aeabi_uldivmod>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <UART_SetConfig+0x4e4>)
 800383e:	fba3 1302 	umull	r1, r3, r3, r2
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2164      	movs	r1, #100	; 0x64
 8003846:	fb01 f303 	mul.w	r3, r1, r3
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	3332      	adds	r3, #50	; 0x32
 8003850:	4a08      	ldr	r2, [pc, #32]	; (8003874 <UART_SetConfig+0x4e4>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	f003 020f 	and.w	r2, r3, #15
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4422      	add	r2, r4
 8003864:	609a      	str	r2, [r3, #8]
}
 8003866:	bf00      	nop
 8003868:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800386c:	46bd      	mov	sp, r7
 800386e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003872:	bf00      	nop
 8003874:	51eb851f 	.word	0x51eb851f

08003878 <__NVIC_SetPriority>:
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	6039      	str	r1, [r7, #0]
 8003882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003888:	2b00      	cmp	r3, #0
 800388a:	db0a      	blt.n	80038a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	b2da      	uxtb	r2, r3
 8003890:	490c      	ldr	r1, [pc, #48]	; (80038c4 <__NVIC_SetPriority+0x4c>)
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	0112      	lsls	r2, r2, #4
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	440b      	add	r3, r1
 800389c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80038a0:	e00a      	b.n	80038b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	4908      	ldr	r1, [pc, #32]	; (80038c8 <__NVIC_SetPriority+0x50>)
 80038a8:	79fb      	ldrb	r3, [r7, #7]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	3b04      	subs	r3, #4
 80038b0:	0112      	lsls	r2, r2, #4
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	440b      	add	r3, r1
 80038b6:	761a      	strb	r2, [r3, #24]
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	e000e100 	.word	0xe000e100
 80038c8:	e000ed00 	.word	0xe000ed00

080038cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <SysTick_Handler+0x1c>)
 80038d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80038d4:	f002 f964 	bl	8005ba0 <xTaskGetSchedulerState>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d001      	beq.n	80038e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80038de:	f000 fd9b 	bl	8004418 <xPortSysTickHandler>
  }
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	e000e010 	.word	0xe000e010

080038ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80038f0:	2100      	movs	r1, #0
 80038f2:	f06f 0004 	mvn.w	r0, #4
 80038f6:	f7ff ffbf 	bl	8003878 <__NVIC_SetPriority>
#endif
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003906:	f3ef 8305 	mrs	r3, IPSR
 800390a:	603b      	str	r3, [r7, #0]
  return(result);
 800390c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003912:	f06f 0305 	mvn.w	r3, #5
 8003916:	607b      	str	r3, [r7, #4]
 8003918:	e00c      	b.n	8003934 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800391a:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <osKernelInitialize+0x44>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d105      	bne.n	800392e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003922:	4b08      	ldr	r3, [pc, #32]	; (8003944 <osKernelInitialize+0x44>)
 8003924:	2201      	movs	r2, #1
 8003926:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003928:	2300      	movs	r3, #0
 800392a:	607b      	str	r3, [r7, #4]
 800392c:	e002      	b.n	8003934 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800392e:	f04f 33ff 	mov.w	r3, #4294967295
 8003932:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003934:	687b      	ldr	r3, [r7, #4]
}
 8003936:	4618      	mov	r0, r3
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	20000214 	.word	0x20000214

08003948 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800394e:	f3ef 8305 	mrs	r3, IPSR
 8003952:	603b      	str	r3, [r7, #0]
  return(result);
 8003954:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <osKernelStart+0x1a>
    stat = osErrorISR;
 800395a:	f06f 0305 	mvn.w	r3, #5
 800395e:	607b      	str	r3, [r7, #4]
 8003960:	e010      	b.n	8003984 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003962:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <osKernelStart+0x48>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d109      	bne.n	800397e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800396a:	f7ff ffbf 	bl	80038ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800396e:	4b08      	ldr	r3, [pc, #32]	; (8003990 <osKernelStart+0x48>)
 8003970:	2202      	movs	r2, #2
 8003972:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003974:	f001 fcb8 	bl	80052e8 <vTaskStartScheduler>
      stat = osOK;
 8003978:	2300      	movs	r3, #0
 800397a:	607b      	str	r3, [r7, #4]
 800397c:	e002      	b.n	8003984 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800397e:	f04f 33ff 	mov.w	r3, #4294967295
 8003982:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003984:	687b      	ldr	r3, [r7, #4]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000214 	.word	0x20000214

08003994 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003994:	b580      	push	{r7, lr}
 8003996:	b08e      	sub	sp, #56	; 0x38
 8003998:	af04      	add	r7, sp, #16
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80039a0:	2300      	movs	r3, #0
 80039a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039a4:	f3ef 8305 	mrs	r3, IPSR
 80039a8:	617b      	str	r3, [r7, #20]
  return(result);
 80039aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d17e      	bne.n	8003aae <osThreadNew+0x11a>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d07b      	beq.n	8003aae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80039ba:	2318      	movs	r3, #24
 80039bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80039c2:	f04f 33ff 	mov.w	r3, #4294967295
 80039c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d045      	beq.n	8003a5a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <osThreadNew+0x48>
        name = attr->name;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <osThreadNew+0x6e>
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	2b38      	cmp	r3, #56	; 0x38
 80039f4:	d805      	bhi.n	8003a02 <osThreadNew+0x6e>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <osThreadNew+0x72>
        return (NULL);
 8003a02:	2300      	movs	r3, #0
 8003a04:	e054      	b.n	8003ab0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	089b      	lsrs	r3, r3, #2
 8003a14:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00e      	beq.n	8003a3c <osThreadNew+0xa8>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	2bbb      	cmp	r3, #187	; 0xbb
 8003a24:	d90a      	bls.n	8003a3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d006      	beq.n	8003a3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <osThreadNew+0xa8>
        mem = 1;
 8003a36:	2301      	movs	r3, #1
 8003a38:	61bb      	str	r3, [r7, #24]
 8003a3a:	e010      	b.n	8003a5e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10c      	bne.n	8003a5e <osThreadNew+0xca>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d108      	bne.n	8003a5e <osThreadNew+0xca>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d104      	bne.n	8003a5e <osThreadNew+0xca>
          mem = 0;
 8003a54:	2300      	movs	r3, #0
 8003a56:	61bb      	str	r3, [r7, #24]
 8003a58:	e001      	b.n	8003a5e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d110      	bne.n	8003a86 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a6c:	9202      	str	r2, [sp, #8]
 8003a6e:	9301      	str	r3, [sp, #4]
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	6a3a      	ldr	r2, [r7, #32]
 8003a78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f001 fa48 	bl	8004f10 <xTaskCreateStatic>
 8003a80:	4603      	mov	r3, r0
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	e013      	b.n	8003aae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d110      	bne.n	8003aae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	f107 0310 	add.w	r3, r7, #16
 8003a94:	9301      	str	r3, [sp, #4]
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f001 fa93 	bl	8004fca <xTaskCreate>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d001      	beq.n	8003aae <osThreadNew+0x11a>
            hTask = NULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003aae:	693b      	ldr	r3, [r7, #16]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3728      	adds	r7, #40	; 0x28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ac0:	f3ef 8305 	mrs	r3, IPSR
 8003ac4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ac6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <osDelay+0x1c>
    stat = osErrorISR;
 8003acc:	f06f 0305 	mvn.w	r3, #5
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	e007      	b.n	8003ae4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f001 fbce 	bl	8005280 <vTaskDelay>
    }
  }

  return (stat);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4a07      	ldr	r2, [pc, #28]	; (8003b1c <vApplicationGetIdleTaskMemory+0x2c>)
 8003b00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	4a06      	ldr	r2, [pc, #24]	; (8003b20 <vApplicationGetIdleTaskMemory+0x30>)
 8003b06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2280      	movs	r2, #128	; 0x80
 8003b0c:	601a      	str	r2, [r3, #0]
}
 8003b0e:	bf00      	nop
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	20000218 	.word	0x20000218
 8003b20:	200002d4 	.word	0x200002d4

08003b24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a07      	ldr	r2, [pc, #28]	; (8003b50 <vApplicationGetTimerTaskMemory+0x2c>)
 8003b34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	4a06      	ldr	r2, [pc, #24]	; (8003b54 <vApplicationGetTimerTaskMemory+0x30>)
 8003b3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b42:	601a      	str	r2, [r3, #0]
}
 8003b44:	bf00      	nop
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	200004d4 	.word	0x200004d4
 8003b54:	20000590 	.word	0x20000590

08003b58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08a      	sub	sp, #40	; 0x28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003b64:	f001 fc30 	bl	80053c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003b68:	4b5b      	ldr	r3, [pc, #364]	; (8003cd8 <pvPortMalloc+0x180>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003b70:	f000 f920 	bl	8003db4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b74:	4b59      	ldr	r3, [pc, #356]	; (8003cdc <pvPortMalloc+0x184>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f040 8093 	bne.w	8003ca8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d01d      	beq.n	8003bc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003b88:	2208      	movs	r2, #8
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d014      	beq.n	8003bc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f023 0307 	bic.w	r3, r3, #7
 8003ba0:	3308      	adds	r3, #8
 8003ba2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003bae:	f04f 0330 	mov.w	r3, #48	; 0x30
 8003bb2:	f383 8811 	msr	BASEPRI, r3
 8003bb6:	f3bf 8f6f 	isb	sy
 8003bba:	f3bf 8f4f 	dsb	sy
 8003bbe:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003bc0:	bf00      	nop
 8003bc2:	e7fe      	b.n	8003bc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d06e      	beq.n	8003ca8 <pvPortMalloc+0x150>
 8003bca:	4b45      	ldr	r3, [pc, #276]	; (8003ce0 <pvPortMalloc+0x188>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d869      	bhi.n	8003ca8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003bd4:	4b43      	ldr	r3, [pc, #268]	; (8003ce4 <pvPortMalloc+0x18c>)
 8003bd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003bd8:	4b42      	ldr	r3, [pc, #264]	; (8003ce4 <pvPortMalloc+0x18c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003bde:	e004      	b.n	8003bea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d903      	bls.n	8003bfc <pvPortMalloc+0xa4>
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f1      	bne.n	8003be0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003bfc:	4b36      	ldr	r3, [pc, #216]	; (8003cd8 <pvPortMalloc+0x180>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d050      	beq.n	8003ca8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2208      	movs	r2, #8
 8003c0c:	4413      	add	r3, r2
 8003c0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	1ad2      	subs	r2, r2, r3
 8003c20:	2308      	movs	r3, #8
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d91f      	bls.n	8003c68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <pvPortMalloc+0xf8>
	__asm volatile
 8003c3a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	613b      	str	r3, [r7, #16]
}
 8003c4c:	bf00      	nop
 8003c4e:	e7fe      	b.n	8003c4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	1ad2      	subs	r2, r2, r3
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c62:	69b8      	ldr	r0, [r7, #24]
 8003c64:	f000 f908 	bl	8003e78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c68:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <pvPortMalloc+0x188>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	4a1b      	ldr	r2, [pc, #108]	; (8003ce0 <pvPortMalloc+0x188>)
 8003c74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c76:	4b1a      	ldr	r3, [pc, #104]	; (8003ce0 <pvPortMalloc+0x188>)
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ce8 <pvPortMalloc+0x190>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d203      	bcs.n	8003c8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c82:	4b17      	ldr	r3, [pc, #92]	; (8003ce0 <pvPortMalloc+0x188>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a18      	ldr	r2, [pc, #96]	; (8003ce8 <pvPortMalloc+0x190>)
 8003c88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <pvPortMalloc+0x184>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003c9e:	4b13      	ldr	r3, [pc, #76]	; (8003cec <pvPortMalloc+0x194>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	4a11      	ldr	r2, [pc, #68]	; (8003cec <pvPortMalloc+0x194>)
 8003ca6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003ca8:	f001 fb9c 	bl	80053e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <pvPortMalloc+0x174>
	__asm volatile
 8003cb6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	60fb      	str	r3, [r7, #12]
}
 8003cc8:	bf00      	nop
 8003cca:	e7fe      	b.n	8003cca <pvPortMalloc+0x172>
	return pvReturn;
 8003ccc:	69fb      	ldr	r3, [r7, #28]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3728      	adds	r7, #40	; 0x28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20004598 	.word	0x20004598
 8003cdc:	200045ac 	.word	0x200045ac
 8003ce0:	2000459c 	.word	0x2000459c
 8003ce4:	20004590 	.word	0x20004590
 8003ce8:	200045a0 	.word	0x200045a0
 8003cec:	200045a4 	.word	0x200045a4

08003cf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d04d      	beq.n	8003d9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003d02:	2308      	movs	r3, #8
 8003d04:	425b      	negs	r3, r3
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4413      	add	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	4b24      	ldr	r3, [pc, #144]	; (8003da8 <vPortFree+0xb8>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10a      	bne.n	8003d34 <vPortFree+0x44>
	__asm volatile
 8003d1e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	60fb      	str	r3, [r7, #12]
}
 8003d30:	bf00      	nop
 8003d32:	e7fe      	b.n	8003d32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <vPortFree+0x62>
	__asm volatile
 8003d3c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	60bb      	str	r3, [r7, #8]
}
 8003d4e:	bf00      	nop
 8003d50:	e7fe      	b.n	8003d50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <vPortFree+0xb8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d01e      	beq.n	8003d9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d11a      	bne.n	8003d9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <vPortFree+0xb8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	43db      	mvns	r3, r3
 8003d72:	401a      	ands	r2, r3
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003d78:	f001 fb26 	bl	80053c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <vPortFree+0xbc>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4413      	add	r3, r2
 8003d86:	4a09      	ldr	r2, [pc, #36]	; (8003dac <vPortFree+0xbc>)
 8003d88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d8a:	6938      	ldr	r0, [r7, #16]
 8003d8c:	f000 f874 	bl	8003e78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003d90:	4b07      	ldr	r3, [pc, #28]	; (8003db0 <vPortFree+0xc0>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3301      	adds	r3, #1
 8003d96:	4a06      	ldr	r2, [pc, #24]	; (8003db0 <vPortFree+0xc0>)
 8003d98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003d9a:	f001 fb23 	bl	80053e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003d9e:	bf00      	nop
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	200045ac 	.word	0x200045ac
 8003dac:	2000459c 	.word	0x2000459c
 8003db0:	200045a8 	.word	0x200045a8

08003db4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003dba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003dbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003dc0:	4b27      	ldr	r3, [pc, #156]	; (8003e60 <prvHeapInit+0xac>)
 8003dc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00c      	beq.n	8003de8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3307      	adds	r3, #7
 8003dd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0307 	bic.w	r3, r3, #7
 8003dda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	4a1f      	ldr	r2, [pc, #124]	; (8003e60 <prvHeapInit+0xac>)
 8003de4:	4413      	add	r3, r2
 8003de6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003dec:	4a1d      	ldr	r2, [pc, #116]	; (8003e64 <prvHeapInit+0xb0>)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003df2:	4b1c      	ldr	r3, [pc, #112]	; (8003e64 <prvHeapInit+0xb0>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003e00:	2208      	movs	r2, #8
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 0307 	bic.w	r3, r3, #7
 8003e0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4a15      	ldr	r2, [pc, #84]	; (8003e68 <prvHeapInit+0xb4>)
 8003e14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003e16:	4b14      	ldr	r3, [pc, #80]	; (8003e68 <prvHeapInit+0xb4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003e1e:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <prvHeapInit+0xb4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	1ad2      	subs	r2, r2, r3
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003e34:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <prvHeapInit+0xb4>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	4a0a      	ldr	r2, [pc, #40]	; (8003e6c <prvHeapInit+0xb8>)
 8003e42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	4a09      	ldr	r2, [pc, #36]	; (8003e70 <prvHeapInit+0xbc>)
 8003e4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003e4c:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <prvHeapInit+0xc0>)
 8003e4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003e52:	601a      	str	r2, [r3, #0]
}
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	20000990 	.word	0x20000990
 8003e64:	20004590 	.word	0x20004590
 8003e68:	20004598 	.word	0x20004598
 8003e6c:	200045a0 	.word	0x200045a0
 8003e70:	2000459c 	.word	0x2000459c
 8003e74:	200045ac 	.word	0x200045ac

08003e78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003e80:	4b28      	ldr	r3, [pc, #160]	; (8003f24 <prvInsertBlockIntoFreeList+0xac>)
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	e002      	b.n	8003e8c <prvInsertBlockIntoFreeList+0x14>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d8f7      	bhi.n	8003e86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d108      	bne.n	8003eba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	441a      	add	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	441a      	add	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d118      	bne.n	8003f00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	4b15      	ldr	r3, [pc, #84]	; (8003f28 <prvInsertBlockIntoFreeList+0xb0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d00d      	beq.n	8003ef6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	441a      	add	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	e008      	b.n	8003f08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ef6:	4b0c      	ldr	r3, [pc, #48]	; (8003f28 <prvInsertBlockIntoFreeList+0xb0>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	e003      	b.n	8003f08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d002      	beq.n	8003f16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f16:	bf00      	nop
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	20004590 	.word	0x20004590
 8003f28:	20004598 	.word	0x20004598

08003f2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f103 0208 	add.w	r2, r3, #8
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f04f 32ff 	mov.w	r2, #4294967295
 8003f44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f103 0208 	add.w	r2, r3, #8
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f103 0208 	add.w	r2, r3, #8
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f86:	b480      	push	{r7}
 8003f88:	b085      	sub	sp, #20
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	601a      	str	r2, [r3, #0]
}
 8003fc2:	bf00      	nop
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b085      	sub	sp, #20
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe4:	d103      	bne.n	8003fee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	e00c      	b.n	8004008 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3308      	adds	r3, #8
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	e002      	b.n	8003ffc <vListInsert+0x2e>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	429a      	cmp	r2, r3
 8004006:	d2f6      	bcs.n	8003ff6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	601a      	str	r2, [r3, #0]
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6892      	ldr	r2, [r2, #8]
 8004056:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6852      	ldr	r2, [r2, #4]
 8004060:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	429a      	cmp	r2, r3
 800406a:	d103      	bne.n	8004074 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	1e5a      	subs	r2, r3, #1
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3b04      	subs	r3, #4
 80040a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	3b04      	subs	r3, #4
 80040b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f023 0201 	bic.w	r2, r3, #1
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	3b04      	subs	r3, #4
 80040c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040c4:	4a0c      	ldr	r2, [pc, #48]	; (80040f8 <pxPortInitialiseStack+0x64>)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3b14      	subs	r3, #20
 80040ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3b04      	subs	r3, #4
 80040da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f06f 0202 	mvn.w	r2, #2
 80040e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3b20      	subs	r3, #32
 80040e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80040ea:	68fb      	ldr	r3, [r7, #12]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	080040fd 	.word	0x080040fd

080040fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004106:	4b12      	ldr	r3, [pc, #72]	; (8004150 <prvTaskExitError+0x54>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410e:	d00a      	beq.n	8004126 <prvTaskExitError+0x2a>
	__asm volatile
 8004110:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	60fb      	str	r3, [r7, #12]
}
 8004122:	bf00      	nop
 8004124:	e7fe      	b.n	8004124 <prvTaskExitError+0x28>
	__asm volatile
 8004126:	f04f 0330 	mov.w	r3, #48	; 0x30
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	60bb      	str	r3, [r7, #8]
}
 8004138:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800413a:	bf00      	nop
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0fc      	beq.n	800413c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004142:	bf00      	nop
 8004144:	bf00      	nop
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	2000000c 	.word	0x2000000c
	...

08004160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004160:	4b07      	ldr	r3, [pc, #28]	; (8004180 <pxCurrentTCBConst2>)
 8004162:	6819      	ldr	r1, [r3, #0]
 8004164:	6808      	ldr	r0, [r1, #0]
 8004166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800416a:	f380 8809 	msr	PSP, r0
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f04f 0000 	mov.w	r0, #0
 8004176:	f380 8811 	msr	BASEPRI, r0
 800417a:	4770      	bx	lr
 800417c:	f3af 8000 	nop.w

08004180 <pxCurrentTCBConst2>:
 8004180:	200045f8 	.word	0x200045f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop

08004188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004188:	4808      	ldr	r0, [pc, #32]	; (80041ac <prvPortStartFirstTask+0x24>)
 800418a:	6800      	ldr	r0, [r0, #0]
 800418c:	6800      	ldr	r0, [r0, #0]
 800418e:	f380 8808 	msr	MSP, r0
 8004192:	f04f 0000 	mov.w	r0, #0
 8004196:	f380 8814 	msr	CONTROL, r0
 800419a:	b662      	cpsie	i
 800419c:	b661      	cpsie	f
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	df00      	svc	0
 80041a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80041aa:	bf00      	nop
 80041ac:	e000ed08 	.word	0xe000ed08

080041b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041b6:	4b46      	ldr	r3, [pc, #280]	; (80042d0 <xPortStartScheduler+0x120>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a46      	ldr	r2, [pc, #280]	; (80042d4 <xPortStartScheduler+0x124>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d10a      	bne.n	80041d6 <xPortStartScheduler+0x26>
	__asm volatile
 80041c0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	613b      	str	r3, [r7, #16]
}
 80041d2:	bf00      	nop
 80041d4:	e7fe      	b.n	80041d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041d6:	4b3e      	ldr	r3, [pc, #248]	; (80042d0 <xPortStartScheduler+0x120>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a3f      	ldr	r2, [pc, #252]	; (80042d8 <xPortStartScheduler+0x128>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d10a      	bne.n	80041f6 <xPortStartScheduler+0x46>
	__asm volatile
 80041e0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	60fb      	str	r3, [r7, #12]
}
 80041f2:	bf00      	nop
 80041f4:	e7fe      	b.n	80041f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041f6:	4b39      	ldr	r3, [pc, #228]	; (80042dc <xPortStartScheduler+0x12c>)
 80041f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	22ff      	movs	r2, #255	; 0xff
 8004206:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004218:	b2da      	uxtb	r2, r3
 800421a:	4b31      	ldr	r3, [pc, #196]	; (80042e0 <xPortStartScheduler+0x130>)
 800421c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800421e:	4b31      	ldr	r3, [pc, #196]	; (80042e4 <xPortStartScheduler+0x134>)
 8004220:	2207      	movs	r2, #7
 8004222:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004224:	e009      	b.n	800423a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004226:	4b2f      	ldr	r3, [pc, #188]	; (80042e4 <xPortStartScheduler+0x134>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3b01      	subs	r3, #1
 800422c:	4a2d      	ldr	r2, [pc, #180]	; (80042e4 <xPortStartScheduler+0x134>)
 800422e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	b2db      	uxtb	r3, r3
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	b2db      	uxtb	r3, r3
 8004238:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800423a:	78fb      	ldrb	r3, [r7, #3]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004242:	2b80      	cmp	r3, #128	; 0x80
 8004244:	d0ef      	beq.n	8004226 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004246:	4b27      	ldr	r3, [pc, #156]	; (80042e4 <xPortStartScheduler+0x134>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f1c3 0307 	rsb	r3, r3, #7
 800424e:	2b04      	cmp	r3, #4
 8004250:	d00a      	beq.n	8004268 <xPortStartScheduler+0xb8>
	__asm volatile
 8004252:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	60bb      	str	r3, [r7, #8]
}
 8004264:	bf00      	nop
 8004266:	e7fe      	b.n	8004266 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004268:	4b1e      	ldr	r3, [pc, #120]	; (80042e4 <xPortStartScheduler+0x134>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	021b      	lsls	r3, r3, #8
 800426e:	4a1d      	ldr	r2, [pc, #116]	; (80042e4 <xPortStartScheduler+0x134>)
 8004270:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004272:	4b1c      	ldr	r3, [pc, #112]	; (80042e4 <xPortStartScheduler+0x134>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800427a:	4a1a      	ldr	r2, [pc, #104]	; (80042e4 <xPortStartScheduler+0x134>)
 800427c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	b2da      	uxtb	r2, r3
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004286:	4b18      	ldr	r3, [pc, #96]	; (80042e8 <xPortStartScheduler+0x138>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a17      	ldr	r2, [pc, #92]	; (80042e8 <xPortStartScheduler+0x138>)
 800428c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004290:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004292:	4b15      	ldr	r3, [pc, #84]	; (80042e8 <xPortStartScheduler+0x138>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a14      	ldr	r2, [pc, #80]	; (80042e8 <xPortStartScheduler+0x138>)
 8004298:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800429c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800429e:	f000 f8dd 	bl	800445c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80042a2:	4b12      	ldr	r3, [pc, #72]	; (80042ec <xPortStartScheduler+0x13c>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80042a8:	f000 f8fc 	bl	80044a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042ac:	4b10      	ldr	r3, [pc, #64]	; (80042f0 <xPortStartScheduler+0x140>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a0f      	ldr	r2, [pc, #60]	; (80042f0 <xPortStartScheduler+0x140>)
 80042b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80042b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80042b8:	f7ff ff66 	bl	8004188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80042bc:	f001 f9fa 	bl	80056b4 <vTaskSwitchContext>
	prvTaskExitError();
 80042c0:	f7ff ff1c 	bl	80040fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	e000ed00 	.word	0xe000ed00
 80042d4:	410fc271 	.word	0x410fc271
 80042d8:	410fc270 	.word	0x410fc270
 80042dc:	e000e400 	.word	0xe000e400
 80042e0:	200045b0 	.word	0x200045b0
 80042e4:	200045b4 	.word	0x200045b4
 80042e8:	e000ed20 	.word	0xe000ed20
 80042ec:	2000000c 	.word	0x2000000c
 80042f0:	e000ef34 	.word	0xe000ef34

080042f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
	__asm volatile
 80042fa:	f04f 0330 	mov.w	r3, #48	; 0x30
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	607b      	str	r3, [r7, #4]
}
 800430c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800430e:	4b0f      	ldr	r3, [pc, #60]	; (800434c <vPortEnterCritical+0x58>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3301      	adds	r3, #1
 8004314:	4a0d      	ldr	r2, [pc, #52]	; (800434c <vPortEnterCritical+0x58>)
 8004316:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004318:	4b0c      	ldr	r3, [pc, #48]	; (800434c <vPortEnterCritical+0x58>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d10f      	bne.n	8004340 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <vPortEnterCritical+0x5c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <vPortEnterCritical+0x4c>
	__asm volatile
 800432a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	603b      	str	r3, [r7, #0]
}
 800433c:	bf00      	nop
 800433e:	e7fe      	b.n	800433e <vPortEnterCritical+0x4a>
	}
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	2000000c 	.word	0x2000000c
 8004350:	e000ed04 	.word	0xe000ed04

08004354 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800435a:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <vPortExitCritical+0x50>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <vPortExitCritical+0x24>
	__asm volatile
 8004362:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	607b      	str	r3, [r7, #4]
}
 8004374:	bf00      	nop
 8004376:	e7fe      	b.n	8004376 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004378:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <vPortExitCritical+0x50>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3b01      	subs	r3, #1
 800437e:	4a09      	ldr	r2, [pc, #36]	; (80043a4 <vPortExitCritical+0x50>)
 8004380:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004382:	4b08      	ldr	r3, [pc, #32]	; (80043a4 <vPortExitCritical+0x50>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d105      	bne.n	8004396 <vPortExitCritical+0x42>
 800438a:	2300      	movs	r3, #0
 800438c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004394:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	2000000c 	.word	0x2000000c
	...

080043b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80043b0:	f3ef 8009 	mrs	r0, PSP
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	4b15      	ldr	r3, [pc, #84]	; (8004410 <pxCurrentTCBConst>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	f01e 0f10 	tst.w	lr, #16
 80043c0:	bf08      	it	eq
 80043c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ca:	6010      	str	r0, [r2, #0]
 80043cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043d0:	f04f 0030 	mov.w	r0, #48	; 0x30
 80043d4:	f380 8811 	msr	BASEPRI, r0
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f001 f968 	bl	80056b4 <vTaskSwitchContext>
 80043e4:	f04f 0000 	mov.w	r0, #0
 80043e8:	f380 8811 	msr	BASEPRI, r0
 80043ec:	bc09      	pop	{r0, r3}
 80043ee:	6819      	ldr	r1, [r3, #0]
 80043f0:	6808      	ldr	r0, [r1, #0]
 80043f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f6:	f01e 0f10 	tst.w	lr, #16
 80043fa:	bf08      	it	eq
 80043fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004400:	f380 8809 	msr	PSP, r0
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	f3af 8000 	nop.w

08004410 <pxCurrentTCBConst>:
 8004410:	200045f8 	.word	0x200045f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004414:	bf00      	nop
 8004416:	bf00      	nop

08004418 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
	__asm volatile
 800441e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	607b      	str	r3, [r7, #4]
}
 8004430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004432:	f001 f885 	bl	8005540 <xTaskIncrementTick>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <xPortSysTickHandler+0x40>)
 800443e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	2300      	movs	r3, #0
 8004446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	f383 8811 	msr	BASEPRI, r3
}
 800444e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004450:	bf00      	nop
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	e000ed04 	.word	0xe000ed04

0800445c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004460:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <vPortSetupTimerInterrupt+0x34>)
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004466:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <vPortSetupTimerInterrupt+0x38>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800446c:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <vPortSetupTimerInterrupt+0x3c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a0a      	ldr	r2, [pc, #40]	; (800449c <vPortSetupTimerInterrupt+0x40>)
 8004472:	fba2 2303 	umull	r2, r3, r2, r3
 8004476:	099b      	lsrs	r3, r3, #6
 8004478:	4a09      	ldr	r2, [pc, #36]	; (80044a0 <vPortSetupTimerInterrupt+0x44>)
 800447a:	3b01      	subs	r3, #1
 800447c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800447e:	4b04      	ldr	r3, [pc, #16]	; (8004490 <vPortSetupTimerInterrupt+0x34>)
 8004480:	2207      	movs	r2, #7
 8004482:	601a      	str	r2, [r3, #0]
}
 8004484:	bf00      	nop
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	e000e010 	.word	0xe000e010
 8004494:	e000e018 	.word	0xe000e018
 8004498:	20000000 	.word	0x20000000
 800449c:	10624dd3 	.word	0x10624dd3
 80044a0:	e000e014 	.word	0xe000e014

080044a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80044a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80044b4 <vPortEnableVFP+0x10>
 80044a8:	6801      	ldr	r1, [r0, #0]
 80044aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044ae:	6001      	str	r1, [r0, #0]
 80044b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80044b2:	bf00      	nop
 80044b4:	e000ed88 	.word	0xe000ed88

080044b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80044be:	f3ef 8305 	mrs	r3, IPSR
 80044c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b0f      	cmp	r3, #15
 80044c8:	d914      	bls.n	80044f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80044ca:	4a17      	ldr	r2, [pc, #92]	; (8004528 <vPortValidateInterruptPriority+0x70>)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4413      	add	r3, r2
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80044d4:	4b15      	ldr	r3, [pc, #84]	; (800452c <vPortValidateInterruptPriority+0x74>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	7afa      	ldrb	r2, [r7, #11]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d20a      	bcs.n	80044f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80044de:	f04f 0330 	mov.w	r3, #48	; 0x30
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	607b      	str	r3, [r7, #4]
}
 80044f0:	bf00      	nop
 80044f2:	e7fe      	b.n	80044f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80044f4:	4b0e      	ldr	r3, [pc, #56]	; (8004530 <vPortValidateInterruptPriority+0x78>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044fc:	4b0d      	ldr	r3, [pc, #52]	; (8004534 <vPortValidateInterruptPriority+0x7c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d90a      	bls.n	800451a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004504:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	603b      	str	r3, [r7, #0]
}
 8004516:	bf00      	nop
 8004518:	e7fe      	b.n	8004518 <vPortValidateInterruptPriority+0x60>
	}
 800451a:	bf00      	nop
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	e000e3f0 	.word	0xe000e3f0
 800452c:	200045b0 	.word	0x200045b0
 8004530:	e000ed0c 	.word	0xe000ed0c
 8004534:	200045b4 	.word	0x200045b4

08004538 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <xQueueGenericReset+0x2a>
	__asm volatile
 800454c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	60bb      	str	r3, [r7, #8]
}
 800455e:	bf00      	nop
 8004560:	e7fe      	b.n	8004560 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004562:	f7ff fec7 	bl	80042f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456e:	68f9      	ldr	r1, [r7, #12]
 8004570:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004572:	fb01 f303 	mul.w	r3, r1, r3
 8004576:	441a      	add	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004592:	3b01      	subs	r3, #1
 8004594:	68f9      	ldr	r1, [r7, #12]
 8004596:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004598:	fb01 f303 	mul.w	r3, r1, r3
 800459c:	441a      	add	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	22ff      	movs	r2, #255	; 0xff
 80045a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	22ff      	movs	r2, #255	; 0xff
 80045ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d114      	bne.n	80045e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d01a      	beq.n	80045f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3310      	adds	r3, #16
 80045c4:	4618      	mov	r0, r3
 80045c6:	f001 f929 	bl	800581c <xTaskRemoveFromEventList>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d012      	beq.n	80045f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80045d0:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <xQueueGenericReset+0xcc>)
 80045d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	e009      	b.n	80045f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	3310      	adds	r3, #16
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff fca0 	bl	8003f2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	3324      	adds	r3, #36	; 0x24
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff fc9b 	bl	8003f2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045f6:	f7ff fead 	bl	8004354 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045fa:	2301      	movs	r3, #1
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	e000ed04 	.word	0xe000ed04

08004608 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08e      	sub	sp, #56	; 0x38
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800461c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800462e:	bf00      	nop
 8004630:	e7fe      	b.n	8004630 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10a      	bne.n	800464e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004638:	f04f 0330 	mov.w	r3, #48	; 0x30
 800463c:	f383 8811 	msr	BASEPRI, r3
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
}
 800464a:	bf00      	nop
 800464c:	e7fe      	b.n	800464c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <xQueueGenericCreateStatic+0x52>
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <xQueueGenericCreateStatic+0x56>
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <xQueueGenericCreateStatic+0x58>
 800465e:	2300      	movs	r3, #0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004664:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	623b      	str	r3, [r7, #32]
}
 8004676:	bf00      	nop
 8004678:	e7fe      	b.n	8004678 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d102      	bne.n	8004686 <xQueueGenericCreateStatic+0x7e>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <xQueueGenericCreateStatic+0x82>
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <xQueueGenericCreateStatic+0x84>
 800468a:	2300      	movs	r3, #0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10a      	bne.n	80046a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004690:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	61fb      	str	r3, [r7, #28]
}
 80046a2:	bf00      	nop
 80046a4:	e7fe      	b.n	80046a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80046a6:	2350      	movs	r3, #80	; 0x50
 80046a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2b50      	cmp	r3, #80	; 0x50
 80046ae:	d00a      	beq.n	80046c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80046b0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	61bb      	str	r3, [r7, #24]
}
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80046c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80046cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00d      	beq.n	80046ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	4613      	mov	r3, r2
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	68b9      	ldr	r1, [r7, #8]
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 f805 	bl	80046f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3730      	adds	r7, #48	; 0x30
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d103      	bne.n	8004714 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	e002      	b.n	800471a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004726:	2101      	movs	r1, #1
 8004728:	69b8      	ldr	r0, [r7, #24]
 800472a:	f7ff ff05 	bl	8004538 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	78fa      	ldrb	r2, [r7, #3]
 8004732:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b08e      	sub	sp, #56	; 0x38
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800474e:	2300      	movs	r3, #0
 8004750:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10a      	bne.n	8004772 <xQueueGenericSend+0x32>
	__asm volatile
 800475c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800476e:	bf00      	nop
 8004770:	e7fe      	b.n	8004770 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d103      	bne.n	8004780 <xQueueGenericSend+0x40>
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <xQueueGenericSend+0x44>
 8004780:	2301      	movs	r3, #1
 8004782:	e000      	b.n	8004786 <xQueueGenericSend+0x46>
 8004784:	2300      	movs	r3, #0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <xQueueGenericSend+0x60>
	__asm volatile
 800478a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800479c:	bf00      	nop
 800479e:	e7fe      	b.n	800479e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d103      	bne.n	80047ae <xQueueGenericSend+0x6e>
 80047a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d101      	bne.n	80047b2 <xQueueGenericSend+0x72>
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <xQueueGenericSend+0x74>
 80047b2:	2300      	movs	r3, #0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10a      	bne.n	80047ce <xQueueGenericSend+0x8e>
	__asm volatile
 80047b8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	623b      	str	r3, [r7, #32]
}
 80047ca:	bf00      	nop
 80047cc:	e7fe      	b.n	80047cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047ce:	f001 f9e7 	bl	8005ba0 <xTaskGetSchedulerState>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d102      	bne.n	80047de <xQueueGenericSend+0x9e>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <xQueueGenericSend+0xa2>
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <xQueueGenericSend+0xa4>
 80047e2:	2300      	movs	r3, #0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10a      	bne.n	80047fe <xQueueGenericSend+0xbe>
	__asm volatile
 80047e8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80047ec:	f383 8811 	msr	BASEPRI, r3
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	61fb      	str	r3, [r7, #28]
}
 80047fa:	bf00      	nop
 80047fc:	e7fe      	b.n	80047fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047fe:	f7ff fd79 	bl	80042f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480a:	429a      	cmp	r2, r3
 800480c:	d302      	bcc.n	8004814 <xQueueGenericSend+0xd4>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b02      	cmp	r3, #2
 8004812:	d129      	bne.n	8004868 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800481a:	f000 fa0b 	bl	8004c34 <prvCopyDataToQueue>
 800481e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	2b00      	cmp	r3, #0
 8004826:	d010      	beq.n	800484a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482a:	3324      	adds	r3, #36	; 0x24
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fff5 	bl	800581c <xTaskRemoveFromEventList>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d013      	beq.n	8004860 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004838:	4b3f      	ldr	r3, [pc, #252]	; (8004938 <xQueueGenericSend+0x1f8>)
 800483a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	e00a      	b.n	8004860 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800484a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484c:	2b00      	cmp	r3, #0
 800484e:	d007      	beq.n	8004860 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004850:	4b39      	ldr	r3, [pc, #228]	; (8004938 <xQueueGenericSend+0x1f8>)
 8004852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004860:	f7ff fd78 	bl	8004354 <vPortExitCritical>
				return pdPASS;
 8004864:	2301      	movs	r3, #1
 8004866:	e063      	b.n	8004930 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d103      	bne.n	8004876 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800486e:	f7ff fd71 	bl	8004354 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004872:	2300      	movs	r3, #0
 8004874:	e05c      	b.n	8004930 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004878:	2b00      	cmp	r3, #0
 800487a:	d106      	bne.n	800488a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800487c:	f107 0314 	add.w	r3, r7, #20
 8004880:	4618      	mov	r0, r3
 8004882:	f001 f82f 	bl	80058e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004886:	2301      	movs	r3, #1
 8004888:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800488a:	f7ff fd63 	bl	8004354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800488e:	f000 fd9b 	bl	80053c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004892:	f7ff fd2f 	bl	80042f4 <vPortEnterCritical>
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800489c:	b25b      	sxtb	r3, r3
 800489e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a2:	d103      	bne.n	80048ac <xQueueGenericSend+0x16c>
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048b2:	b25b      	sxtb	r3, r3
 80048b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b8:	d103      	bne.n	80048c2 <xQueueGenericSend+0x182>
 80048ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048c2:	f7ff fd47 	bl	8004354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048c6:	1d3a      	adds	r2, r7, #4
 80048c8:	f107 0314 	add.w	r3, r7, #20
 80048cc:	4611      	mov	r1, r2
 80048ce:	4618      	mov	r0, r3
 80048d0:	f001 f81e 	bl	8005910 <xTaskCheckForTimeOut>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d124      	bne.n	8004924 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80048da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048dc:	f000 faa2 	bl	8004e24 <prvIsQueueFull>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d018      	beq.n	8004918 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80048e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e8:	3310      	adds	r3, #16
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	4611      	mov	r1, r2
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 ff44 	bl	800577c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80048f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048f6:	f000 fa2d 	bl	8004d54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80048fa:	f000 fd73 	bl	80053e4 <xTaskResumeAll>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	f47f af7c 	bne.w	80047fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004906:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <xQueueGenericSend+0x1f8>)
 8004908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	e772      	b.n	80047fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800491a:	f000 fa1b 	bl	8004d54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800491e:	f000 fd61 	bl	80053e4 <xTaskResumeAll>
 8004922:	e76c      	b.n	80047fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004926:	f000 fa15 	bl	8004d54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800492a:	f000 fd5b 	bl	80053e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800492e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004930:	4618      	mov	r0, r3
 8004932:	3738      	adds	r7, #56	; 0x38
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	e000ed04 	.word	0xe000ed04

0800493c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b090      	sub	sp, #64	; 0x40
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800494e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10a      	bne.n	800496a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004954:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004966:	bf00      	nop
 8004968:	e7fe      	b.n	8004968 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d103      	bne.n	8004978 <xQueueGenericSendFromISR+0x3c>
 8004970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <xQueueGenericSendFromISR+0x40>
 8004978:	2301      	movs	r3, #1
 800497a:	e000      	b.n	800497e <xQueueGenericSendFromISR+0x42>
 800497c:	2300      	movs	r3, #0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10a      	bne.n	8004998 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004982:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004994:	bf00      	nop
 8004996:	e7fe      	b.n	8004996 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d103      	bne.n	80049a6 <xQueueGenericSendFromISR+0x6a>
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d101      	bne.n	80049aa <xQueueGenericSendFromISR+0x6e>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <xQueueGenericSendFromISR+0x70>
 80049aa:	2300      	movs	r3, #0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80049b0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	623b      	str	r3, [r7, #32]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049c6:	f7ff fd77 	bl	80044b8 <vPortValidateInterruptPriority>
	__asm volatile
 80049ca:	f3ef 8211 	mrs	r2, BASEPRI
 80049ce:	f04f 0330 	mov.w	r3, #48	; 0x30
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	61fa      	str	r2, [r7, #28]
 80049e0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80049e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d302      	bcc.n	80049f8 <xQueueGenericSendFromISR+0xbc>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d12f      	bne.n	8004a58 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	68b9      	ldr	r1, [r7, #8]
 8004a0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a0e:	f000 f911 	bl	8004c34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a12:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1a:	d112      	bne.n	8004a42 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d016      	beq.n	8004a52 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a26:	3324      	adds	r3, #36	; 0x24
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 fef7 	bl	800581c <xTaskRemoveFromEventList>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00e      	beq.n	8004a52 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00b      	beq.n	8004a52 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	e007      	b.n	8004a52 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a46:	3301      	adds	r3, #1
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	b25a      	sxtb	r2, r3
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a52:	2301      	movs	r3, #1
 8004a54:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004a56:	e001      	b.n	8004a5c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a5e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f383 8811 	msr	BASEPRI, r3
}
 8004a66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3740      	adds	r7, #64	; 0x40
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b08c      	sub	sp, #48	; 0x30
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a80:	2300      	movs	r3, #0
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10a      	bne.n	8004aa4 <xQueueReceive+0x30>
	__asm volatile
 8004a8e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	623b      	str	r3, [r7, #32]
}
 8004aa0:	bf00      	nop
 8004aa2:	e7fe      	b.n	8004aa2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d103      	bne.n	8004ab2 <xQueueReceive+0x3e>
 8004aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <xQueueReceive+0x42>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <xQueueReceive+0x44>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10a      	bne.n	8004ad2 <xQueueReceive+0x5e>
	__asm volatile
 8004abc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	61fb      	str	r3, [r7, #28]
}
 8004ace:	bf00      	nop
 8004ad0:	e7fe      	b.n	8004ad0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ad2:	f001 f865 	bl	8005ba0 <xTaskGetSchedulerState>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d102      	bne.n	8004ae2 <xQueueReceive+0x6e>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <xQueueReceive+0x72>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <xQueueReceive+0x74>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10a      	bne.n	8004b02 <xQueueReceive+0x8e>
	__asm volatile
 8004aec:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	61bb      	str	r3, [r7, #24]
}
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b02:	f7ff fbf7 	bl	80042f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d01f      	beq.n	8004b52 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b16:	f000 f8f7 	bl	8004d08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	1e5a      	subs	r2, r3, #1
 8004b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00f      	beq.n	8004b4a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	3310      	adds	r3, #16
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fe74 	bl	800581c <xTaskRemoveFromEventList>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d007      	beq.n	8004b4a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b3a:	4b3d      	ldr	r3, [pc, #244]	; (8004c30 <xQueueReceive+0x1bc>)
 8004b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b4a:	f7ff fc03 	bl	8004354 <vPortExitCritical>
				return pdPASS;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e069      	b.n	8004c26 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d103      	bne.n	8004b60 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b58:	f7ff fbfc 	bl	8004354 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	e062      	b.n	8004c26 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b66:	f107 0310 	add.w	r3, r7, #16
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 feba 	bl	80058e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b70:	2301      	movs	r3, #1
 8004b72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b74:	f7ff fbee 	bl	8004354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b78:	f000 fc26 	bl	80053c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b7c:	f7ff fbba 	bl	80042f4 <vPortEnterCritical>
 8004b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b86:	b25b      	sxtb	r3, r3
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8c:	d103      	bne.n	8004b96 <xQueueReceive+0x122>
 8004b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b9c:	b25b      	sxtb	r3, r3
 8004b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba2:	d103      	bne.n	8004bac <xQueueReceive+0x138>
 8004ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bac:	f7ff fbd2 	bl	8004354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bb0:	1d3a      	adds	r2, r7, #4
 8004bb2:	f107 0310 	add.w	r3, r7, #16
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fea9 	bl	8005910 <xTaskCheckForTimeOut>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d123      	bne.n	8004c0c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bc6:	f000 f917 	bl	8004df8 <prvIsQueueEmpty>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d017      	beq.n	8004c00 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd2:	3324      	adds	r3, #36	; 0x24
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	4611      	mov	r1, r2
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fdcf 	bl	800577c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004be0:	f000 f8b8 	bl	8004d54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004be4:	f000 fbfe 	bl	80053e4 <xTaskResumeAll>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d189      	bne.n	8004b02 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004bee:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <xQueueReceive+0x1bc>)
 8004bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	e780      	b.n	8004b02 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c02:	f000 f8a7 	bl	8004d54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c06:	f000 fbed 	bl	80053e4 <xTaskResumeAll>
 8004c0a:	e77a      	b.n	8004b02 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c0e:	f000 f8a1 	bl	8004d54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c12:	f000 fbe7 	bl	80053e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c18:	f000 f8ee 	bl	8004df8 <prvIsQueueEmpty>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f43f af6f 	beq.w	8004b02 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3730      	adds	r7, #48	; 0x30
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	e000ed04 	.word	0xe000ed04

08004c34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10d      	bne.n	8004c6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d14d      	bne.n	8004cf6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 ffbc 	bl	8005bdc <xTaskPriorityDisinherit>
 8004c64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	609a      	str	r2, [r3, #8]
 8004c6c:	e043      	b.n	8004cf6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d119      	bne.n	8004ca8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6858      	ldr	r0, [r3, #4]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	68b9      	ldr	r1, [r7, #8]
 8004c80:	f001 fbe2 	bl	8006448 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	441a      	add	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d32b      	bcc.n	8004cf6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	605a      	str	r2, [r3, #4]
 8004ca6:	e026      	b.n	8004cf6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	68d8      	ldr	r0, [r3, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	f001 fbc8 	bl	8006448 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc0:	425b      	negs	r3, r3
 8004cc2:	441a      	add	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d207      	bcs.n	8004ce4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	425b      	negs	r3, r3
 8004cde:	441a      	add	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d105      	bne.n	8004cf6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004cfe:	697b      	ldr	r3, [r7, #20]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d018      	beq.n	8004d4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	441a      	add	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d303      	bcc.n	8004d3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68d9      	ldr	r1, [r3, #12]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	461a      	mov	r2, r3
 8004d46:	6838      	ldr	r0, [r7, #0]
 8004d48:	f001 fb7e 	bl	8006448 <memcpy>
	}
}
 8004d4c:	bf00      	nop
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d5c:	f7ff faca 	bl	80042f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d68:	e011      	b.n	8004d8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d012      	beq.n	8004d98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	3324      	adds	r3, #36	; 0x24
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fd50 	bl	800581c <xTaskRemoveFromEventList>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d82:	f000 fe27 	bl	80059d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	dce9      	bgt.n	8004d6a <prvUnlockQueue+0x16>
 8004d96:	e000      	b.n	8004d9a <prvUnlockQueue+0x46>
					break;
 8004d98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	22ff      	movs	r2, #255	; 0xff
 8004d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004da2:	f7ff fad7 	bl	8004354 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004da6:	f7ff faa5 	bl	80042f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004db0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004db2:	e011      	b.n	8004dd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d012      	beq.n	8004de2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3310      	adds	r3, #16
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fd2b 	bl	800581c <xTaskRemoveFromEventList>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004dcc:	f000 fe02 	bl	80059d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004dd0:	7bbb      	ldrb	r3, [r7, #14]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	dce9      	bgt.n	8004db4 <prvUnlockQueue+0x60>
 8004de0:	e000      	b.n	8004de4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004de2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	22ff      	movs	r2, #255	; 0xff
 8004de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004dec:	f7ff fab2 	bl	8004354 <vPortExitCritical>
}
 8004df0:	bf00      	nop
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e00:	f7ff fa78 	bl	80042f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d102      	bne.n	8004e12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	e001      	b.n	8004e16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e16:	f7ff fa9d 	bl	8004354 <vPortExitCritical>

	return xReturn;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e2c:	f7ff fa62 	bl	80042f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d102      	bne.n	8004e42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	e001      	b.n	8004e46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e42:	2300      	movs	r3, #0
 8004e44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e46:	f7ff fa85 	bl	8004354 <vPortExitCritical>

	return xReturn;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	e014      	b.n	8004e8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e64:	4a0f      	ldr	r2, [pc, #60]	; (8004ea4 <vQueueAddToRegistry+0x50>)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10b      	bne.n	8004e88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e70:	490c      	ldr	r1, [pc, #48]	; (8004ea4 <vQueueAddToRegistry+0x50>)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e7a:	4a0a      	ldr	r2, [pc, #40]	; (8004ea4 <vQueueAddToRegistry+0x50>)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	4413      	add	r3, r2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e86:	e006      	b.n	8004e96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b07      	cmp	r3, #7
 8004e92:	d9e7      	bls.n	8004e64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	200045b8 	.word	0x200045b8

08004ea8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004eb8:	f7ff fa1c 	bl	80042f4 <vPortEnterCritical>
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ec2:	b25b      	sxtb	r3, r3
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d103      	bne.n	8004ed2 <vQueueWaitForMessageRestricted+0x2a>
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ed8:	b25b      	sxtb	r3, r3
 8004eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ede:	d103      	bne.n	8004ee8 <vQueueWaitForMessageRestricted+0x40>
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ee8:	f7ff fa34 	bl	8004354 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d106      	bne.n	8004f02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	3324      	adds	r3, #36	; 0x24
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fc61 	bl	80057c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f02:	6978      	ldr	r0, [r7, #20]
 8004f04:	f7ff ff26 	bl	8004d54 <prvUnlockQueue>
	}
 8004f08:	bf00      	nop
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08e      	sub	sp, #56	; 0x38
 8004f14:	af04      	add	r7, sp, #16
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10a      	bne.n	8004f3a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004f24:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	623b      	str	r3, [r7, #32]
}
 8004f36:	bf00      	nop
 8004f38:	e7fe      	b.n	8004f38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10a      	bne.n	8004f56 <xTaskCreateStatic+0x46>
	__asm volatile
 8004f40:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	61fb      	str	r3, [r7, #28]
}
 8004f52:	bf00      	nop
 8004f54:	e7fe      	b.n	8004f54 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f56:	23bc      	movs	r3, #188	; 0xbc
 8004f58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	2bbc      	cmp	r3, #188	; 0xbc
 8004f5e:	d00a      	beq.n	8004f76 <xTaskCreateStatic+0x66>
	__asm volatile
 8004f60:	f04f 0330 	mov.w	r3, #48	; 0x30
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	61bb      	str	r3, [r7, #24]
}
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01e      	beq.n	8004fbc <xTaskCreateStatic+0xac>
 8004f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d01b      	beq.n	8004fbc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	2202      	movs	r2, #2
 8004f92:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f96:	2300      	movs	r3, #0
 8004f98:	9303      	str	r3, [sp, #12]
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	9302      	str	r3, [sp, #8]
 8004f9e:	f107 0314 	add.w	r3, r7, #20
 8004fa2:	9301      	str	r3, [sp, #4]
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	68b9      	ldr	r1, [r7, #8]
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f850 	bl	8005054 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fb6:	f000 f8f3 	bl	80051a0 <prvAddNewTaskToReadyList>
 8004fba:	e001      	b.n	8004fc0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004fc0:	697b      	ldr	r3, [r7, #20]
	}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3728      	adds	r7, #40	; 0x28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b08c      	sub	sp, #48	; 0x30
 8004fce:	af04      	add	r7, sp, #16
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	603b      	str	r3, [r7, #0]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004fda:	88fb      	ldrh	r3, [r7, #6]
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fe fdba 	bl	8003b58 <pvPortMalloc>
 8004fe4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00e      	beq.n	800500a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004fec:	20bc      	movs	r0, #188	; 0xbc
 8004fee:	f7fe fdb3 	bl	8003b58 <pvPortMalloc>
 8004ff2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8005000:	e005      	b.n	800500e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005002:	6978      	ldr	r0, [r7, #20]
 8005004:	f7fe fe74 	bl	8003cf0 <vPortFree>
 8005008:	e001      	b.n	800500e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800500a:	2300      	movs	r3, #0
 800500c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d017      	beq.n	8005044 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800501c:	88fa      	ldrh	r2, [r7, #6]
 800501e:	2300      	movs	r3, #0
 8005020:	9303      	str	r3, [sp, #12]
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	9302      	str	r3, [sp, #8]
 8005026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005028:	9301      	str	r3, [sp, #4]
 800502a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 f80e 	bl	8005054 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005038:	69f8      	ldr	r0, [r7, #28]
 800503a:	f000 f8b1 	bl	80051a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800503e:	2301      	movs	r3, #1
 8005040:	61bb      	str	r3, [r7, #24]
 8005042:	e002      	b.n	800504a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005044:	f04f 33ff 	mov.w	r3, #4294967295
 8005048:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800504a:	69bb      	ldr	r3, [r7, #24]
	}
 800504c:	4618      	mov	r0, r3
 800504e:	3720      	adds	r7, #32
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	461a      	mov	r2, r3
 800506c:	21a5      	movs	r1, #165	; 0xa5
 800506e:	f001 f9f9 	bl	8006464 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800507c:	3b01      	subs	r3, #1
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	f023 0307 	bic.w	r3, r3, #7
 800508a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <prvInitialiseNewTask+0x58>
	__asm volatile
 8005096:	f04f 0330 	mov.w	r3, #48	; 0x30
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	617b      	str	r3, [r7, #20]
}
 80050a8:	bf00      	nop
 80050aa:	e7fe      	b.n	80050aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d01f      	beq.n	80050f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
 80050b6:	e012      	b.n	80050de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	4413      	add	r3, r2
 80050be:	7819      	ldrb	r1, [r3, #0]
 80050c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	3334      	adds	r3, #52	; 0x34
 80050c8:	460a      	mov	r2, r1
 80050ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	4413      	add	r3, r2
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d006      	beq.n	80050e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	3301      	adds	r3, #1
 80050dc:	61fb      	str	r3, [r7, #28]
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	2b0f      	cmp	r3, #15
 80050e2:	d9e9      	bls.n	80050b8 <prvInitialiseNewTask+0x64>
 80050e4:	e000      	b.n	80050e8 <prvInitialiseNewTask+0x94>
			{
				break;
 80050e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050f0:	e003      	b.n	80050fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fc:	2b37      	cmp	r3, #55	; 0x37
 80050fe:	d901      	bls.n	8005104 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005100:	2337      	movs	r3, #55	; 0x37
 8005102:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005108:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800510e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005112:	2200      	movs	r2, #0
 8005114:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	3304      	adds	r3, #4
 800511a:	4618      	mov	r0, r3
 800511c:	f7fe ff26 	bl	8003f6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	3318      	adds	r3, #24
 8005124:	4618      	mov	r0, r3
 8005126:	f7fe ff21 	bl	8003f6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800512a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800512e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005132:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005138:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800513e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	2200      	movs	r2, #0
 8005144:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514a:	2200      	movs	r2, #0
 800514c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	3354      	adds	r3, #84	; 0x54
 8005154:	2260      	movs	r2, #96	; 0x60
 8005156:	2100      	movs	r1, #0
 8005158:	4618      	mov	r0, r3
 800515a:	f001 f983 	bl	8006464 <memset>
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	4a0c      	ldr	r2, [pc, #48]	; (8005194 <prvInitialiseNewTask+0x140>)
 8005162:	659a      	str	r2, [r3, #88]	; 0x58
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	4a0c      	ldr	r2, [pc, #48]	; (8005198 <prvInitialiseNewTask+0x144>)
 8005168:	65da      	str	r2, [r3, #92]	; 0x5c
 800516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516c:	4a0b      	ldr	r2, [pc, #44]	; (800519c <prvInitialiseNewTask+0x148>)
 800516e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	68f9      	ldr	r1, [r7, #12]
 8005174:	69b8      	ldr	r0, [r7, #24]
 8005176:	f7fe ff8d 	bl	8004094 <pxPortInitialiseStack>
 800517a:	4602      	mov	r2, r0
 800517c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800518a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800518c:	bf00      	nop
 800518e:	3720      	adds	r7, #32
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	080066bc 	.word	0x080066bc
 8005198:	080066dc 	.word	0x080066dc
 800519c:	0800669c 	.word	0x0800669c

080051a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051a8:	f7ff f8a4 	bl	80042f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051ac:	4b2d      	ldr	r3, [pc, #180]	; (8005264 <prvAddNewTaskToReadyList+0xc4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3301      	adds	r3, #1
 80051b2:	4a2c      	ldr	r2, [pc, #176]	; (8005264 <prvAddNewTaskToReadyList+0xc4>)
 80051b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051b6:	4b2c      	ldr	r3, [pc, #176]	; (8005268 <prvAddNewTaskToReadyList+0xc8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d109      	bne.n	80051d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051be:	4a2a      	ldr	r2, [pc, #168]	; (8005268 <prvAddNewTaskToReadyList+0xc8>)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051c4:	4b27      	ldr	r3, [pc, #156]	; (8005264 <prvAddNewTaskToReadyList+0xc4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d110      	bne.n	80051ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051cc:	f000 fc26 	bl	8005a1c <prvInitialiseTaskLists>
 80051d0:	e00d      	b.n	80051ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051d2:	4b26      	ldr	r3, [pc, #152]	; (800526c <prvAddNewTaskToReadyList+0xcc>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d109      	bne.n	80051ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051da:	4b23      	ldr	r3, [pc, #140]	; (8005268 <prvAddNewTaskToReadyList+0xc8>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d802      	bhi.n	80051ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051e8:	4a1f      	ldr	r2, [pc, #124]	; (8005268 <prvAddNewTaskToReadyList+0xc8>)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051ee:	4b20      	ldr	r3, [pc, #128]	; (8005270 <prvAddNewTaskToReadyList+0xd0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3301      	adds	r3, #1
 80051f4:	4a1e      	ldr	r2, [pc, #120]	; (8005270 <prvAddNewTaskToReadyList+0xd0>)
 80051f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80051f8:	4b1d      	ldr	r3, [pc, #116]	; (8005270 <prvAddNewTaskToReadyList+0xd0>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005204:	4b1b      	ldr	r3, [pc, #108]	; (8005274 <prvAddNewTaskToReadyList+0xd4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	429a      	cmp	r2, r3
 800520a:	d903      	bls.n	8005214 <prvAddNewTaskToReadyList+0x74>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	4a18      	ldr	r2, [pc, #96]	; (8005274 <prvAddNewTaskToReadyList+0xd4>)
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005218:	4613      	mov	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4a15      	ldr	r2, [pc, #84]	; (8005278 <prvAddNewTaskToReadyList+0xd8>)
 8005222:	441a      	add	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3304      	adds	r3, #4
 8005228:	4619      	mov	r1, r3
 800522a:	4610      	mov	r0, r2
 800522c:	f7fe feab 	bl	8003f86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005230:	f7ff f890 	bl	8004354 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005234:	4b0d      	ldr	r3, [pc, #52]	; (800526c <prvAddNewTaskToReadyList+0xcc>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00e      	beq.n	800525a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800523c:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <prvAddNewTaskToReadyList+0xc8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005246:	429a      	cmp	r2, r3
 8005248:	d207      	bcs.n	800525a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800524a:	4b0c      	ldr	r3, [pc, #48]	; (800527c <prvAddNewTaskToReadyList+0xdc>)
 800524c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800525a:	bf00      	nop
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20004acc 	.word	0x20004acc
 8005268:	200045f8 	.word	0x200045f8
 800526c:	20004ad8 	.word	0x20004ad8
 8005270:	20004ae8 	.word	0x20004ae8
 8005274:	20004ad4 	.word	0x20004ad4
 8005278:	200045fc 	.word	0x200045fc
 800527c:	e000ed04 	.word	0xe000ed04

08005280 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005288:	2300      	movs	r3, #0
 800528a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d017      	beq.n	80052c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005292:	4b13      	ldr	r3, [pc, #76]	; (80052e0 <vTaskDelay+0x60>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <vTaskDelay+0x30>
	__asm volatile
 800529a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	60bb      	str	r3, [r7, #8]
}
 80052ac:	bf00      	nop
 80052ae:	e7fe      	b.n	80052ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80052b0:	f000 f88a 	bl	80053c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80052b4:	2100      	movs	r1, #0
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fcfe 	bl	8005cb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052bc:	f000 f892 	bl	80053e4 <xTaskResumeAll>
 80052c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d107      	bne.n	80052d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80052c8:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <vTaskDelay+0x64>)
 80052ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052d8:	bf00      	nop
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	20004af4 	.word	0x20004af4
 80052e4:	e000ed04 	.word	0xe000ed04

080052e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08a      	sub	sp, #40	; 0x28
 80052ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052ee:	2300      	movs	r3, #0
 80052f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052f6:	463a      	mov	r2, r7
 80052f8:	1d39      	adds	r1, r7, #4
 80052fa:	f107 0308 	add.w	r3, r7, #8
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fe fbf6 	bl	8003af0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005304:	6839      	ldr	r1, [r7, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	9202      	str	r2, [sp, #8]
 800530c:	9301      	str	r3, [sp, #4]
 800530e:	2300      	movs	r3, #0
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	2300      	movs	r3, #0
 8005314:	460a      	mov	r2, r1
 8005316:	4924      	ldr	r1, [pc, #144]	; (80053a8 <vTaskStartScheduler+0xc0>)
 8005318:	4824      	ldr	r0, [pc, #144]	; (80053ac <vTaskStartScheduler+0xc4>)
 800531a:	f7ff fdf9 	bl	8004f10 <xTaskCreateStatic>
 800531e:	4603      	mov	r3, r0
 8005320:	4a23      	ldr	r2, [pc, #140]	; (80053b0 <vTaskStartScheduler+0xc8>)
 8005322:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005324:	4b22      	ldr	r3, [pc, #136]	; (80053b0 <vTaskStartScheduler+0xc8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d002      	beq.n	8005332 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800532c:	2301      	movs	r3, #1
 800532e:	617b      	str	r3, [r7, #20]
 8005330:	e001      	b.n	8005336 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005332:	2300      	movs	r3, #0
 8005334:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d102      	bne.n	8005342 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800533c:	f000 fd10 	bl	8005d60 <xTimerCreateTimerTask>
 8005340:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d11b      	bne.n	8005380 <vTaskStartScheduler+0x98>
	__asm volatile
 8005348:	f04f 0330 	mov.w	r3, #48	; 0x30
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	613b      	str	r3, [r7, #16]
}
 800535a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800535c:	4b15      	ldr	r3, [pc, #84]	; (80053b4 <vTaskStartScheduler+0xcc>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3354      	adds	r3, #84	; 0x54
 8005362:	4a15      	ldr	r2, [pc, #84]	; (80053b8 <vTaskStartScheduler+0xd0>)
 8005364:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005366:	4b15      	ldr	r3, [pc, #84]	; (80053bc <vTaskStartScheduler+0xd4>)
 8005368:	f04f 32ff 	mov.w	r2, #4294967295
 800536c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800536e:	4b14      	ldr	r3, [pc, #80]	; (80053c0 <vTaskStartScheduler+0xd8>)
 8005370:	2201      	movs	r2, #1
 8005372:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005374:	4b13      	ldr	r3, [pc, #76]	; (80053c4 <vTaskStartScheduler+0xdc>)
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800537a:	f7fe ff19 	bl	80041b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800537e:	e00e      	b.n	800539e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005386:	d10a      	bne.n	800539e <vTaskStartScheduler+0xb6>
	__asm volatile
 8005388:	f04f 0330 	mov.w	r3, #48	; 0x30
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	60fb      	str	r3, [r7, #12]
}
 800539a:	bf00      	nop
 800539c:	e7fe      	b.n	800539c <vTaskStartScheduler+0xb4>
}
 800539e:	bf00      	nop
 80053a0:	3718      	adds	r7, #24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	08006624 	.word	0x08006624
 80053ac:	080059ed 	.word	0x080059ed
 80053b0:	20004af0 	.word	0x20004af0
 80053b4:	200045f8 	.word	0x200045f8
 80053b8:	20000010 	.word	0x20000010
 80053bc:	20004aec 	.word	0x20004aec
 80053c0:	20004ad8 	.word	0x20004ad8
 80053c4:	20004ad0 	.word	0x20004ad0

080053c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80053cc:	4b04      	ldr	r3, [pc, #16]	; (80053e0 <vTaskSuspendAll+0x18>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	3301      	adds	r3, #1
 80053d2:	4a03      	ldr	r2, [pc, #12]	; (80053e0 <vTaskSuspendAll+0x18>)
 80053d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80053d6:	bf00      	nop
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	20004af4 	.word	0x20004af4

080053e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053ee:	2300      	movs	r3, #0
 80053f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053f2:	4b42      	ldr	r3, [pc, #264]	; (80054fc <xTaskResumeAll+0x118>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10a      	bne.n	8005410 <xTaskResumeAll+0x2c>
	__asm volatile
 80053fa:	f04f 0330 	mov.w	r3, #48	; 0x30
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	603b      	str	r3, [r7, #0]
}
 800540c:	bf00      	nop
 800540e:	e7fe      	b.n	800540e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005410:	f7fe ff70 	bl	80042f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005414:	4b39      	ldr	r3, [pc, #228]	; (80054fc <xTaskResumeAll+0x118>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3b01      	subs	r3, #1
 800541a:	4a38      	ldr	r2, [pc, #224]	; (80054fc <xTaskResumeAll+0x118>)
 800541c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800541e:	4b37      	ldr	r3, [pc, #220]	; (80054fc <xTaskResumeAll+0x118>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d162      	bne.n	80054ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005426:	4b36      	ldr	r3, [pc, #216]	; (8005500 <xTaskResumeAll+0x11c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d05e      	beq.n	80054ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800542e:	e02f      	b.n	8005490 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005430:	4b34      	ldr	r3, [pc, #208]	; (8005504 <xTaskResumeAll+0x120>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3318      	adds	r3, #24
 800543c:	4618      	mov	r0, r3
 800543e:	f7fe fdff 	bl	8004040 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3304      	adds	r3, #4
 8005446:	4618      	mov	r0, r3
 8005448:	f7fe fdfa 	bl	8004040 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005450:	4b2d      	ldr	r3, [pc, #180]	; (8005508 <xTaskResumeAll+0x124>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d903      	bls.n	8005460 <xTaskResumeAll+0x7c>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	4a2a      	ldr	r2, [pc, #168]	; (8005508 <xTaskResumeAll+0x124>)
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4a27      	ldr	r2, [pc, #156]	; (800550c <xTaskResumeAll+0x128>)
 800546e:	441a      	add	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3304      	adds	r3, #4
 8005474:	4619      	mov	r1, r3
 8005476:	4610      	mov	r0, r2
 8005478:	f7fe fd85 	bl	8003f86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005480:	4b23      	ldr	r3, [pc, #140]	; (8005510 <xTaskResumeAll+0x12c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	429a      	cmp	r2, r3
 8005488:	d302      	bcc.n	8005490 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800548a:	4b22      	ldr	r3, [pc, #136]	; (8005514 <xTaskResumeAll+0x130>)
 800548c:	2201      	movs	r2, #1
 800548e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005490:	4b1c      	ldr	r3, [pc, #112]	; (8005504 <xTaskResumeAll+0x120>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1cb      	bne.n	8005430 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800549e:	f000 fb5f 	bl	8005b60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80054a2:	4b1d      	ldr	r3, [pc, #116]	; (8005518 <xTaskResumeAll+0x134>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d010      	beq.n	80054d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80054ae:	f000 f847 	bl	8005540 <xTaskIncrementTick>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80054b8:	4b16      	ldr	r3, [pc, #88]	; (8005514 <xTaskResumeAll+0x130>)
 80054ba:	2201      	movs	r2, #1
 80054bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1f1      	bne.n	80054ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80054ca:	4b13      	ldr	r3, [pc, #76]	; (8005518 <xTaskResumeAll+0x134>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80054d0:	4b10      	ldr	r3, [pc, #64]	; (8005514 <xTaskResumeAll+0x130>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d009      	beq.n	80054ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80054d8:	2301      	movs	r3, #1
 80054da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054dc:	4b0f      	ldr	r3, [pc, #60]	; (800551c <xTaskResumeAll+0x138>)
 80054de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054ec:	f7fe ff32 	bl	8004354 <vPortExitCritical>

	return xAlreadyYielded;
 80054f0:	68bb      	ldr	r3, [r7, #8]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20004af4 	.word	0x20004af4
 8005500:	20004acc 	.word	0x20004acc
 8005504:	20004a8c 	.word	0x20004a8c
 8005508:	20004ad4 	.word	0x20004ad4
 800550c:	200045fc 	.word	0x200045fc
 8005510:	200045f8 	.word	0x200045f8
 8005514:	20004ae0 	.word	0x20004ae0
 8005518:	20004adc 	.word	0x20004adc
 800551c:	e000ed04 	.word	0xe000ed04

08005520 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005526:	4b05      	ldr	r3, [pc, #20]	; (800553c <xTaskGetTickCount+0x1c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800552c:	687b      	ldr	r3, [r7, #4]
}
 800552e:	4618      	mov	r0, r3
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	20004ad0 	.word	0x20004ad0

08005540 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005546:	2300      	movs	r3, #0
 8005548:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800554a:	4b4f      	ldr	r3, [pc, #316]	; (8005688 <xTaskIncrementTick+0x148>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	f040 808f 	bne.w	8005672 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005554:	4b4d      	ldr	r3, [pc, #308]	; (800568c <xTaskIncrementTick+0x14c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3301      	adds	r3, #1
 800555a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800555c:	4a4b      	ldr	r2, [pc, #300]	; (800568c <xTaskIncrementTick+0x14c>)
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d120      	bne.n	80055aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005568:	4b49      	ldr	r3, [pc, #292]	; (8005690 <xTaskIncrementTick+0x150>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <xTaskIncrementTick+0x48>
	__asm volatile
 8005572:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	603b      	str	r3, [r7, #0]
}
 8005584:	bf00      	nop
 8005586:	e7fe      	b.n	8005586 <xTaskIncrementTick+0x46>
 8005588:	4b41      	ldr	r3, [pc, #260]	; (8005690 <xTaskIncrementTick+0x150>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	4b41      	ldr	r3, [pc, #260]	; (8005694 <xTaskIncrementTick+0x154>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a3f      	ldr	r2, [pc, #252]	; (8005690 <xTaskIncrementTick+0x150>)
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	4a3f      	ldr	r2, [pc, #252]	; (8005694 <xTaskIncrementTick+0x154>)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	4b3e      	ldr	r3, [pc, #248]	; (8005698 <xTaskIncrementTick+0x158>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3301      	adds	r3, #1
 80055a2:	4a3d      	ldr	r2, [pc, #244]	; (8005698 <xTaskIncrementTick+0x158>)
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	f000 fadb 	bl	8005b60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80055aa:	4b3c      	ldr	r3, [pc, #240]	; (800569c <xTaskIncrementTick+0x15c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d349      	bcc.n	8005648 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055b4:	4b36      	ldr	r3, [pc, #216]	; (8005690 <xTaskIncrementTick+0x150>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d104      	bne.n	80055c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055be:	4b37      	ldr	r3, [pc, #220]	; (800569c <xTaskIncrementTick+0x15c>)
 80055c0:	f04f 32ff 	mov.w	r2, #4294967295
 80055c4:	601a      	str	r2, [r3, #0]
					break;
 80055c6:	e03f      	b.n	8005648 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c8:	4b31      	ldr	r3, [pc, #196]	; (8005690 <xTaskIncrementTick+0x150>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d203      	bcs.n	80055e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055e0:	4a2e      	ldr	r2, [pc, #184]	; (800569c <xTaskIncrementTick+0x15c>)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80055e6:	e02f      	b.n	8005648 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	3304      	adds	r3, #4
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fe fd27 	bl	8004040 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d004      	beq.n	8005604 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	3318      	adds	r3, #24
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fe fd1e 	bl	8004040 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005608:	4b25      	ldr	r3, [pc, #148]	; (80056a0 <xTaskIncrementTick+0x160>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	429a      	cmp	r2, r3
 800560e:	d903      	bls.n	8005618 <xTaskIncrementTick+0xd8>
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	4a22      	ldr	r2, [pc, #136]	; (80056a0 <xTaskIncrementTick+0x160>)
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800561c:	4613      	mov	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4a1f      	ldr	r2, [pc, #124]	; (80056a4 <xTaskIncrementTick+0x164>)
 8005626:	441a      	add	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	3304      	adds	r3, #4
 800562c:	4619      	mov	r1, r3
 800562e:	4610      	mov	r0, r2
 8005630:	f7fe fca9 	bl	8003f86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005638:	4b1b      	ldr	r3, [pc, #108]	; (80056a8 <xTaskIncrementTick+0x168>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	429a      	cmp	r2, r3
 8005640:	d3b8      	bcc.n	80055b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005642:	2301      	movs	r3, #1
 8005644:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005646:	e7b5      	b.n	80055b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005648:	4b17      	ldr	r3, [pc, #92]	; (80056a8 <xTaskIncrementTick+0x168>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564e:	4915      	ldr	r1, [pc, #84]	; (80056a4 <xTaskIncrementTick+0x164>)
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d901      	bls.n	8005664 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005660:	2301      	movs	r3, #1
 8005662:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005664:	4b11      	ldr	r3, [pc, #68]	; (80056ac <xTaskIncrementTick+0x16c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800566c:	2301      	movs	r3, #1
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	e004      	b.n	800567c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005672:	4b0f      	ldr	r3, [pc, #60]	; (80056b0 <xTaskIncrementTick+0x170>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3301      	adds	r3, #1
 8005678:	4a0d      	ldr	r2, [pc, #52]	; (80056b0 <xTaskIncrementTick+0x170>)
 800567a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800567c:	697b      	ldr	r3, [r7, #20]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20004af4 	.word	0x20004af4
 800568c:	20004ad0 	.word	0x20004ad0
 8005690:	20004a84 	.word	0x20004a84
 8005694:	20004a88 	.word	0x20004a88
 8005698:	20004ae4 	.word	0x20004ae4
 800569c:	20004aec 	.word	0x20004aec
 80056a0:	20004ad4 	.word	0x20004ad4
 80056a4:	200045fc 	.word	0x200045fc
 80056a8:	200045f8 	.word	0x200045f8
 80056ac:	20004ae0 	.word	0x20004ae0
 80056b0:	20004adc 	.word	0x20004adc

080056b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056ba:	4b2a      	ldr	r3, [pc, #168]	; (8005764 <vTaskSwitchContext+0xb0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056c2:	4b29      	ldr	r3, [pc, #164]	; (8005768 <vTaskSwitchContext+0xb4>)
 80056c4:	2201      	movs	r2, #1
 80056c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056c8:	e046      	b.n	8005758 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80056ca:	4b27      	ldr	r3, [pc, #156]	; (8005768 <vTaskSwitchContext+0xb4>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056d0:	4b26      	ldr	r3, [pc, #152]	; (800576c <vTaskSwitchContext+0xb8>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	60fb      	str	r3, [r7, #12]
 80056d6:	e010      	b.n	80056fa <vTaskSwitchContext+0x46>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10a      	bne.n	80056f4 <vTaskSwitchContext+0x40>
	__asm volatile
 80056de:	f04f 0330 	mov.w	r3, #48	; 0x30
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	607b      	str	r3, [r7, #4]
}
 80056f0:	bf00      	nop
 80056f2:	e7fe      	b.n	80056f2 <vTaskSwitchContext+0x3e>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	60fb      	str	r3, [r7, #12]
 80056fa:	491d      	ldr	r1, [pc, #116]	; (8005770 <vTaskSwitchContext+0xbc>)
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4613      	mov	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	440b      	add	r3, r1
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0e4      	beq.n	80056d8 <vTaskSwitchContext+0x24>
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	4613      	mov	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4a15      	ldr	r2, [pc, #84]	; (8005770 <vTaskSwitchContext+0xbc>)
 800571a:	4413      	add	r3, r2
 800571c:	60bb      	str	r3, [r7, #8]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	605a      	str	r2, [r3, #4]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	3308      	adds	r3, #8
 8005730:	429a      	cmp	r2, r3
 8005732:	d104      	bne.n	800573e <vTaskSwitchContext+0x8a>
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	605a      	str	r2, [r3, #4]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	4a0b      	ldr	r2, [pc, #44]	; (8005774 <vTaskSwitchContext+0xc0>)
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	4a08      	ldr	r2, [pc, #32]	; (800576c <vTaskSwitchContext+0xb8>)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800574e:	4b09      	ldr	r3, [pc, #36]	; (8005774 <vTaskSwitchContext+0xc0>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3354      	adds	r3, #84	; 0x54
 8005754:	4a08      	ldr	r2, [pc, #32]	; (8005778 <vTaskSwitchContext+0xc4>)
 8005756:	6013      	str	r3, [r2, #0]
}
 8005758:	bf00      	nop
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	20004af4 	.word	0x20004af4
 8005768:	20004ae0 	.word	0x20004ae0
 800576c:	20004ad4 	.word	0x20004ad4
 8005770:	200045fc 	.word	0x200045fc
 8005774:	200045f8 	.word	0x200045f8
 8005778:	20000010 	.word	0x20000010

0800577c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10a      	bne.n	80057a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800578c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	60fb      	str	r3, [r7, #12]
}
 800579e:	bf00      	nop
 80057a0:	e7fe      	b.n	80057a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057a2:	4b07      	ldr	r3, [pc, #28]	; (80057c0 <vTaskPlaceOnEventList+0x44>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3318      	adds	r3, #24
 80057a8:	4619      	mov	r1, r3
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7fe fc0f 	bl	8003fce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057b0:	2101      	movs	r1, #1
 80057b2:	6838      	ldr	r0, [r7, #0]
 80057b4:	f000 fa80 	bl	8005cb8 <prvAddCurrentTaskToDelayedList>
}
 80057b8:	bf00      	nop
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	200045f8 	.word	0x200045f8

080057c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80057d6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	617b      	str	r3, [r7, #20]
}
 80057e8:	bf00      	nop
 80057ea:	e7fe      	b.n	80057ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057ec:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <vTaskPlaceOnEventListRestricted+0x54>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3318      	adds	r3, #24
 80057f2:	4619      	mov	r1, r3
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f7fe fbc6 	bl	8003f86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005800:	f04f 33ff 	mov.w	r3, #4294967295
 8005804:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	68b8      	ldr	r0, [r7, #8]
 800580a:	f000 fa55 	bl	8005cb8 <prvAddCurrentTaskToDelayedList>
	}
 800580e:	bf00      	nop
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	200045f8 	.word	0x200045f8

0800581c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10a      	bne.n	8005848 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005832:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	60fb      	str	r3, [r7, #12]
}
 8005844:	bf00      	nop
 8005846:	e7fe      	b.n	8005846 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	3318      	adds	r3, #24
 800584c:	4618      	mov	r0, r3
 800584e:	f7fe fbf7 	bl	8004040 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005852:	4b1e      	ldr	r3, [pc, #120]	; (80058cc <xTaskRemoveFromEventList+0xb0>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d11d      	bne.n	8005896 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	3304      	adds	r3, #4
 800585e:	4618      	mov	r0, r3
 8005860:	f7fe fbee 	bl	8004040 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005868:	4b19      	ldr	r3, [pc, #100]	; (80058d0 <xTaskRemoveFromEventList+0xb4>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	429a      	cmp	r2, r3
 800586e:	d903      	bls.n	8005878 <xTaskRemoveFromEventList+0x5c>
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	4a16      	ldr	r2, [pc, #88]	; (80058d0 <xTaskRemoveFromEventList+0xb4>)
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587c:	4613      	mov	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4a13      	ldr	r2, [pc, #76]	; (80058d4 <xTaskRemoveFromEventList+0xb8>)
 8005886:	441a      	add	r2, r3
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	3304      	adds	r3, #4
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f7fe fb79 	bl	8003f86 <vListInsertEnd>
 8005894:	e005      	b.n	80058a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	3318      	adds	r3, #24
 800589a:	4619      	mov	r1, r3
 800589c:	480e      	ldr	r0, [pc, #56]	; (80058d8 <xTaskRemoveFromEventList+0xbc>)
 800589e:	f7fe fb72 	bl	8003f86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a6:	4b0d      	ldr	r3, [pc, #52]	; (80058dc <xTaskRemoveFromEventList+0xc0>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d905      	bls.n	80058bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80058b0:	2301      	movs	r3, #1
 80058b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80058b4:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <xTaskRemoveFromEventList+0xc4>)
 80058b6:	2201      	movs	r2, #1
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	e001      	b.n	80058c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80058bc:	2300      	movs	r3, #0
 80058be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80058c0:	697b      	ldr	r3, [r7, #20]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	20004af4 	.word	0x20004af4
 80058d0:	20004ad4 	.word	0x20004ad4
 80058d4:	200045fc 	.word	0x200045fc
 80058d8:	20004a8c 	.word	0x20004a8c
 80058dc:	200045f8 	.word	0x200045f8
 80058e0:	20004ae0 	.word	0x20004ae0

080058e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058ec:	4b06      	ldr	r3, [pc, #24]	; (8005908 <vTaskInternalSetTimeOutState+0x24>)
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058f4:	4b05      	ldr	r3, [pc, #20]	; (800590c <vTaskInternalSetTimeOutState+0x28>)
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	605a      	str	r2, [r3, #4]
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	20004ae4 	.word	0x20004ae4
 800590c:	20004ad0 	.word	0x20004ad0

08005910 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b088      	sub	sp, #32
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10a      	bne.n	8005936 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005920:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	613b      	str	r3, [r7, #16]
}
 8005932:	bf00      	nop
 8005934:	e7fe      	b.n	8005934 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10a      	bne.n	8005952 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800593c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	60fb      	str	r3, [r7, #12]
}
 800594e:	bf00      	nop
 8005950:	e7fe      	b.n	8005950 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005952:	f7fe fccf 	bl	80042f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005956:	4b1d      	ldr	r3, [pc, #116]	; (80059cc <xTaskCheckForTimeOut+0xbc>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596e:	d102      	bne.n	8005976 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005970:	2300      	movs	r3, #0
 8005972:	61fb      	str	r3, [r7, #28]
 8005974:	e023      	b.n	80059be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	4b15      	ldr	r3, [pc, #84]	; (80059d0 <xTaskCheckForTimeOut+0xc0>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d007      	beq.n	8005992 <xTaskCheckForTimeOut+0x82>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	429a      	cmp	r2, r3
 800598a:	d302      	bcc.n	8005992 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800598c:	2301      	movs	r3, #1
 800598e:	61fb      	str	r3, [r7, #28]
 8005990:	e015      	b.n	80059be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	429a      	cmp	r2, r3
 800599a:	d20b      	bcs.n	80059b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	1ad2      	subs	r2, r2, r3
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7ff ff9b 	bl	80058e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80059ae:	2300      	movs	r3, #0
 80059b0:	61fb      	str	r3, [r7, #28]
 80059b2:	e004      	b.n	80059be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2200      	movs	r2, #0
 80059b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80059ba:	2301      	movs	r3, #1
 80059bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80059be:	f7fe fcc9 	bl	8004354 <vPortExitCritical>

	return xReturn;
 80059c2:	69fb      	ldr	r3, [r7, #28]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3720      	adds	r7, #32
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	20004ad0 	.word	0x20004ad0
 80059d0:	20004ae4 	.word	0x20004ae4

080059d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80059d8:	4b03      	ldr	r3, [pc, #12]	; (80059e8 <vTaskMissedYield+0x14>)
 80059da:	2201      	movs	r2, #1
 80059dc:	601a      	str	r2, [r3, #0]
}
 80059de:	bf00      	nop
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	20004ae0 	.word	0x20004ae0

080059ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059f4:	f000 f852 	bl	8005a9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059f8:	4b06      	ldr	r3, [pc, #24]	; (8005a14 <prvIdleTask+0x28>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d9f9      	bls.n	80059f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a00:	4b05      	ldr	r3, [pc, #20]	; (8005a18 <prvIdleTask+0x2c>)
 8005a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a10:	e7f0      	b.n	80059f4 <prvIdleTask+0x8>
 8005a12:	bf00      	nop
 8005a14:	200045fc 	.word	0x200045fc
 8005a18:	e000ed04 	.word	0xe000ed04

08005a1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a22:	2300      	movs	r3, #0
 8005a24:	607b      	str	r3, [r7, #4]
 8005a26:	e00c      	b.n	8005a42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4a12      	ldr	r2, [pc, #72]	; (8005a7c <prvInitialiseTaskLists+0x60>)
 8005a34:	4413      	add	r3, r2
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fe fa78 	bl	8003f2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	607b      	str	r3, [r7, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b37      	cmp	r3, #55	; 0x37
 8005a46:	d9ef      	bls.n	8005a28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a48:	480d      	ldr	r0, [pc, #52]	; (8005a80 <prvInitialiseTaskLists+0x64>)
 8005a4a:	f7fe fa6f 	bl	8003f2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a4e:	480d      	ldr	r0, [pc, #52]	; (8005a84 <prvInitialiseTaskLists+0x68>)
 8005a50:	f7fe fa6c 	bl	8003f2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a54:	480c      	ldr	r0, [pc, #48]	; (8005a88 <prvInitialiseTaskLists+0x6c>)
 8005a56:	f7fe fa69 	bl	8003f2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a5a:	480c      	ldr	r0, [pc, #48]	; (8005a8c <prvInitialiseTaskLists+0x70>)
 8005a5c:	f7fe fa66 	bl	8003f2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a60:	480b      	ldr	r0, [pc, #44]	; (8005a90 <prvInitialiseTaskLists+0x74>)
 8005a62:	f7fe fa63 	bl	8003f2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a66:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <prvInitialiseTaskLists+0x78>)
 8005a68:	4a05      	ldr	r2, [pc, #20]	; (8005a80 <prvInitialiseTaskLists+0x64>)
 8005a6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a6c:	4b0a      	ldr	r3, [pc, #40]	; (8005a98 <prvInitialiseTaskLists+0x7c>)
 8005a6e:	4a05      	ldr	r2, [pc, #20]	; (8005a84 <prvInitialiseTaskLists+0x68>)
 8005a70:	601a      	str	r2, [r3, #0]
}
 8005a72:	bf00      	nop
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	200045fc 	.word	0x200045fc
 8005a80:	20004a5c 	.word	0x20004a5c
 8005a84:	20004a70 	.word	0x20004a70
 8005a88:	20004a8c 	.word	0x20004a8c
 8005a8c:	20004aa0 	.word	0x20004aa0
 8005a90:	20004ab8 	.word	0x20004ab8
 8005a94:	20004a84 	.word	0x20004a84
 8005a98:	20004a88 	.word	0x20004a88

08005a9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005aa2:	e019      	b.n	8005ad8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005aa4:	f7fe fc26 	bl	80042f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aa8:	4b10      	ldr	r3, [pc, #64]	; (8005aec <prvCheckTasksWaitingTermination+0x50>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fe fac3 	bl	8004040 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005aba:	4b0d      	ldr	r3, [pc, #52]	; (8005af0 <prvCheckTasksWaitingTermination+0x54>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	4a0b      	ldr	r2, [pc, #44]	; (8005af0 <prvCheckTasksWaitingTermination+0x54>)
 8005ac2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ac4:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <prvCheckTasksWaitingTermination+0x58>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	4a0a      	ldr	r2, [pc, #40]	; (8005af4 <prvCheckTasksWaitingTermination+0x58>)
 8005acc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ace:	f7fe fc41 	bl	8004354 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f810 	bl	8005af8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ad8:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <prvCheckTasksWaitingTermination+0x58>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e1      	bne.n	8005aa4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ae0:	bf00      	nop
 8005ae2:	bf00      	nop
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	20004aa0 	.word	0x20004aa0
 8005af0:	20004acc 	.word	0x20004acc
 8005af4:	20004ab4 	.word	0x20004ab4

08005af8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3354      	adds	r3, #84	; 0x54
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 fcc3 	bl	8006490 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d108      	bne.n	8005b26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fe f8e9 	bl	8003cf0 <vPortFree>
				vPortFree( pxTCB );
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7fe f8e6 	bl	8003cf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b24:	e018      	b.n	8005b58 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d103      	bne.n	8005b38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7fe f8dd 	bl	8003cf0 <vPortFree>
	}
 8005b36:	e00f      	b.n	8005b58 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d00a      	beq.n	8005b58 <prvDeleteTCB+0x60>
	__asm volatile
 8005b42:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	60fb      	str	r3, [r7, #12]
}
 8005b54:	bf00      	nop
 8005b56:	e7fe      	b.n	8005b56 <prvDeleteTCB+0x5e>
	}
 8005b58:	bf00      	nop
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b66:	4b0c      	ldr	r3, [pc, #48]	; (8005b98 <prvResetNextTaskUnblockTime+0x38>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d104      	bne.n	8005b7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b70:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <prvResetNextTaskUnblockTime+0x3c>)
 8005b72:	f04f 32ff 	mov.w	r2, #4294967295
 8005b76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b78:	e008      	b.n	8005b8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b7a:	4b07      	ldr	r3, [pc, #28]	; (8005b98 <prvResetNextTaskUnblockTime+0x38>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	4a04      	ldr	r2, [pc, #16]	; (8005b9c <prvResetNextTaskUnblockTime+0x3c>)
 8005b8a:	6013      	str	r3, [r2, #0]
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	20004a84 	.word	0x20004a84
 8005b9c:	20004aec 	.word	0x20004aec

08005ba0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ba6:	4b0b      	ldr	r3, [pc, #44]	; (8005bd4 <xTaskGetSchedulerState+0x34>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d102      	bne.n	8005bb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	607b      	str	r3, [r7, #4]
 8005bb2:	e008      	b.n	8005bc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bb4:	4b08      	ldr	r3, [pc, #32]	; (8005bd8 <xTaskGetSchedulerState+0x38>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d102      	bne.n	8005bc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	607b      	str	r3, [r7, #4]
 8005bc0:	e001      	b.n	8005bc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005bc6:	687b      	ldr	r3, [r7, #4]
	}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	20004ad8 	.word	0x20004ad8
 8005bd8:	20004af4 	.word	0x20004af4

08005bdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005be8:	2300      	movs	r3, #0
 8005bea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d056      	beq.n	8005ca0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005bf2:	4b2e      	ldr	r3, [pc, #184]	; (8005cac <xTaskPriorityDisinherit+0xd0>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d00a      	beq.n	8005c12 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005bfc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	60fb      	str	r3, [r7, #12]
}
 8005c0e:	bf00      	nop
 8005c10:	e7fe      	b.n	8005c10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10a      	bne.n	8005c30 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005c1a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	60bb      	str	r3, [r7, #8]
}
 8005c2c:	bf00      	nop
 8005c2e:	e7fe      	b.n	8005c2e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c34:	1e5a      	subs	r2, r3, #1
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d02c      	beq.n	8005ca0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d128      	bne.n	8005ca0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	3304      	adds	r3, #4
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fe f9f4 	bl	8004040 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c70:	4b0f      	ldr	r3, [pc, #60]	; (8005cb0 <xTaskPriorityDisinherit+0xd4>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d903      	bls.n	8005c80 <xTaskPriorityDisinherit+0xa4>
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	4a0c      	ldr	r2, [pc, #48]	; (8005cb0 <xTaskPriorityDisinherit+0xd4>)
 8005c7e:	6013      	str	r3, [r2, #0]
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c84:	4613      	mov	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4a09      	ldr	r2, [pc, #36]	; (8005cb4 <xTaskPriorityDisinherit+0xd8>)
 8005c8e:	441a      	add	r2, r3
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	3304      	adds	r3, #4
 8005c94:	4619      	mov	r1, r3
 8005c96:	4610      	mov	r0, r2
 8005c98:	f7fe f975 	bl	8003f86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ca0:	697b      	ldr	r3, [r7, #20]
	}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	200045f8 	.word	0x200045f8
 8005cb0:	20004ad4 	.word	0x20004ad4
 8005cb4:	200045fc 	.word	0x200045fc

08005cb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005cc2:	4b21      	ldr	r3, [pc, #132]	; (8005d48 <prvAddCurrentTaskToDelayedList+0x90>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cc8:	4b20      	ldr	r3, [pc, #128]	; (8005d4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fe f9b6 	bl	8004040 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cda:	d10a      	bne.n	8005cf2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d007      	beq.n	8005cf2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ce2:	4b1a      	ldr	r3, [pc, #104]	; (8005d4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4819      	ldr	r0, [pc, #100]	; (8005d50 <prvAddCurrentTaskToDelayedList+0x98>)
 8005cec:	f7fe f94b 	bl	8003f86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cf0:	e026      	b.n	8005d40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cfa:	4b14      	ldr	r3, [pc, #80]	; (8005d4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d209      	bcs.n	8005d1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d0a:	4b12      	ldr	r3, [pc, #72]	; (8005d54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	4b0f      	ldr	r3, [pc, #60]	; (8005d4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3304      	adds	r3, #4
 8005d14:	4619      	mov	r1, r3
 8005d16:	4610      	mov	r0, r2
 8005d18:	f7fe f959 	bl	8003fce <vListInsert>
}
 8005d1c:	e010      	b.n	8005d40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d1e:	4b0e      	ldr	r3, [pc, #56]	; (8005d58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3304      	adds	r3, #4
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	f7fe f94f 	bl	8003fce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d30:	4b0a      	ldr	r3, [pc, #40]	; (8005d5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d202      	bcs.n	8005d40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d3a:	4a08      	ldr	r2, [pc, #32]	; (8005d5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	6013      	str	r3, [r2, #0]
}
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	20004ad0 	.word	0x20004ad0
 8005d4c:	200045f8 	.word	0x200045f8
 8005d50:	20004ab8 	.word	0x20004ab8
 8005d54:	20004a88 	.word	0x20004a88
 8005d58:	20004a84 	.word	0x20004a84
 8005d5c:	20004aec 	.word	0x20004aec

08005d60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08a      	sub	sp, #40	; 0x28
 8005d64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005d6a:	f000 fb07 	bl	800637c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005d6e:	4b1c      	ldr	r3, [pc, #112]	; (8005de0 <xTimerCreateTimerTask+0x80>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d021      	beq.n	8005dba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d7e:	1d3a      	adds	r2, r7, #4
 8005d80:	f107 0108 	add.w	r1, r7, #8
 8005d84:	f107 030c 	add.w	r3, r7, #12
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7fd fecb 	bl	8003b24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d8e:	6879      	ldr	r1, [r7, #4]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	9202      	str	r2, [sp, #8]
 8005d96:	9301      	str	r3, [sp, #4]
 8005d98:	2302      	movs	r3, #2
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	460a      	mov	r2, r1
 8005da0:	4910      	ldr	r1, [pc, #64]	; (8005de4 <xTimerCreateTimerTask+0x84>)
 8005da2:	4811      	ldr	r0, [pc, #68]	; (8005de8 <xTimerCreateTimerTask+0x88>)
 8005da4:	f7ff f8b4 	bl	8004f10 <xTaskCreateStatic>
 8005da8:	4603      	mov	r3, r0
 8005daa:	4a10      	ldr	r2, [pc, #64]	; (8005dec <xTimerCreateTimerTask+0x8c>)
 8005dac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005dae:	4b0f      	ldr	r3, [pc, #60]	; (8005dec <xTimerCreateTimerTask+0x8c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005db6:	2301      	movs	r3, #1
 8005db8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10a      	bne.n	8005dd6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005dc0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	613b      	str	r3, [r7, #16]
}
 8005dd2:	bf00      	nop
 8005dd4:	e7fe      	b.n	8005dd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005dd6:	697b      	ldr	r3, [r7, #20]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	20004b28 	.word	0x20004b28
 8005de4:	0800662c 	.word	0x0800662c
 8005de8:	08005f25 	.word	0x08005f25
 8005dec:	20004b2c 	.word	0x20004b2c

08005df0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b08a      	sub	sp, #40	; 0x28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
 8005dfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10a      	bne.n	8005e1e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005e08:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	623b      	str	r3, [r7, #32]
}
 8005e1a:	bf00      	nop
 8005e1c:	e7fe      	b.n	8005e1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005e1e:	4b1a      	ldr	r3, [pc, #104]	; (8005e88 <xTimerGenericCommand+0x98>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d02a      	beq.n	8005e7c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2b05      	cmp	r3, #5
 8005e36:	dc18      	bgt.n	8005e6a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e38:	f7ff feb2 	bl	8005ba0 <xTaskGetSchedulerState>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d109      	bne.n	8005e56 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e42:	4b11      	ldr	r3, [pc, #68]	; (8005e88 <xTimerGenericCommand+0x98>)
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	f107 0110 	add.w	r1, r7, #16
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e4e:	f7fe fc77 	bl	8004740 <xQueueGenericSend>
 8005e52:	6278      	str	r0, [r7, #36]	; 0x24
 8005e54:	e012      	b.n	8005e7c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005e56:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <xTimerGenericCommand+0x98>)
 8005e58:	6818      	ldr	r0, [r3, #0]
 8005e5a:	f107 0110 	add.w	r1, r7, #16
 8005e5e:	2300      	movs	r3, #0
 8005e60:	2200      	movs	r2, #0
 8005e62:	f7fe fc6d 	bl	8004740 <xQueueGenericSend>
 8005e66:	6278      	str	r0, [r7, #36]	; 0x24
 8005e68:	e008      	b.n	8005e7c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e6a:	4b07      	ldr	r3, [pc, #28]	; (8005e88 <xTimerGenericCommand+0x98>)
 8005e6c:	6818      	ldr	r0, [r3, #0]
 8005e6e:	f107 0110 	add.w	r1, r7, #16
 8005e72:	2300      	movs	r3, #0
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	f7fe fd61 	bl	800493c <xQueueGenericSendFromISR>
 8005e7a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3728      	adds	r7, #40	; 0x28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20004b28 	.word	0x20004b28

08005e8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b088      	sub	sp, #32
 8005e90:	af02      	add	r7, sp, #8
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e96:	4b22      	ldr	r3, [pc, #136]	; (8005f20 <prvProcessExpiredTimer+0x94>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fe f8cb 	bl	8004040 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d022      	beq.n	8005efe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	699a      	ldr	r2, [r3, #24]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	18d1      	adds	r1, r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	6978      	ldr	r0, [r7, #20]
 8005ec6:	f000 f8d1 	bl	800606c <prvInsertTimerInActiveList>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01f      	beq.n	8005f10 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	2100      	movs	r1, #0
 8005eda:	6978      	ldr	r0, [r7, #20]
 8005edc:	f7ff ff88 	bl	8005df0 <xTimerGenericCommand>
 8005ee0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d113      	bne.n	8005f10 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005ee8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	60fb      	str	r3, [r7, #12]
}
 8005efa:	bf00      	nop
 8005efc:	e7fe      	b.n	8005efc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f04:	f023 0301 	bic.w	r3, r3, #1
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	6978      	ldr	r0, [r7, #20]
 8005f16:	4798      	blx	r3
}
 8005f18:	bf00      	nop
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20004b20 	.word	0x20004b20

08005f24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f2c:	f107 0308 	add.w	r3, r7, #8
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 f857 	bl	8005fe4 <prvGetNextExpireTime>
 8005f36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 f803 	bl	8005f48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f42:	f000 f8d5 	bl	80060f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f46:	e7f1      	b.n	8005f2c <prvTimerTask+0x8>

08005f48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005f52:	f7ff fa39 	bl	80053c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f56:	f107 0308 	add.w	r3, r7, #8
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 f866 	bl	800602c <prvSampleTimeNow>
 8005f60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d130      	bne.n	8005fca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10a      	bne.n	8005f84 <prvProcessTimerOrBlockTask+0x3c>
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d806      	bhi.n	8005f84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005f76:	f7ff fa35 	bl	80053e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f7a:	68f9      	ldr	r1, [r7, #12]
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff ff85 	bl	8005e8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005f82:	e024      	b.n	8005fce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d008      	beq.n	8005f9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f8a:	4b13      	ldr	r3, [pc, #76]	; (8005fd8 <prvProcessTimerOrBlockTask+0x90>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <prvProcessTimerOrBlockTask+0x50>
 8005f94:	2301      	movs	r3, #1
 8005f96:	e000      	b.n	8005f9a <prvProcessTimerOrBlockTask+0x52>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f9c:	4b0f      	ldr	r3, [pc, #60]	; (8005fdc <prvProcessTimerOrBlockTask+0x94>)
 8005f9e:	6818      	ldr	r0, [r3, #0]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	4619      	mov	r1, r3
 8005faa:	f7fe ff7d 	bl	8004ea8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005fae:	f7ff fa19 	bl	80053e4 <xTaskResumeAll>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10a      	bne.n	8005fce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005fb8:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <prvProcessTimerOrBlockTask+0x98>)
 8005fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	f3bf 8f6f 	isb	sy
}
 8005fc8:	e001      	b.n	8005fce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005fca:	f7ff fa0b 	bl	80053e4 <xTaskResumeAll>
}
 8005fce:	bf00      	nop
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20004b24 	.word	0x20004b24
 8005fdc:	20004b28 	.word	0x20004b28
 8005fe0:	e000ed04 	.word	0xe000ed04

08005fe4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005fec:	4b0e      	ldr	r3, [pc, #56]	; (8006028 <prvGetNextExpireTime+0x44>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <prvGetNextExpireTime+0x16>
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	e000      	b.n	8005ffc <prvGetNextExpireTime+0x18>
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d105      	bne.n	8006014 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006008:	4b07      	ldr	r3, [pc, #28]	; (8006028 <prvGetNextExpireTime+0x44>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	60fb      	str	r3, [r7, #12]
 8006012:	e001      	b.n	8006018 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006018:	68fb      	ldr	r3, [r7, #12]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	20004b20 	.word	0x20004b20

0800602c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006034:	f7ff fa74 	bl	8005520 <xTaskGetTickCount>
 8006038:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800603a:	4b0b      	ldr	r3, [pc, #44]	; (8006068 <prvSampleTimeNow+0x3c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	429a      	cmp	r2, r3
 8006042:	d205      	bcs.n	8006050 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006044:	f000 f936 	bl	80062b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	e002      	b.n	8006056 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006056:	4a04      	ldr	r2, [pc, #16]	; (8006068 <prvSampleTimeNow+0x3c>)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800605c:	68fb      	ldr	r3, [r7, #12]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20004b30 	.word	0x20004b30

0800606c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800607a:	2300      	movs	r3, #0
 800607c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	429a      	cmp	r2, r3
 8006090:	d812      	bhi.n	80060b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	1ad2      	subs	r2, r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	429a      	cmp	r2, r3
 800609e:	d302      	bcc.n	80060a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80060a0:	2301      	movs	r3, #1
 80060a2:	617b      	str	r3, [r7, #20]
 80060a4:	e01b      	b.n	80060de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80060a6:	4b10      	ldr	r3, [pc, #64]	; (80060e8 <prvInsertTimerInActiveList+0x7c>)
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3304      	adds	r3, #4
 80060ae:	4619      	mov	r1, r3
 80060b0:	4610      	mov	r0, r2
 80060b2:	f7fd ff8c 	bl	8003fce <vListInsert>
 80060b6:	e012      	b.n	80060de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d206      	bcs.n	80060ce <prvInsertTimerInActiveList+0x62>
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d302      	bcc.n	80060ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80060c8:	2301      	movs	r3, #1
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	e007      	b.n	80060de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060ce:	4b07      	ldr	r3, [pc, #28]	; (80060ec <prvInsertTimerInActiveList+0x80>)
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	3304      	adds	r3, #4
 80060d6:	4619      	mov	r1, r3
 80060d8:	4610      	mov	r0, r2
 80060da:	f7fd ff78 	bl	8003fce <vListInsert>
		}
	}

	return xProcessTimerNow;
 80060de:	697b      	ldr	r3, [r7, #20]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3718      	adds	r7, #24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	20004b24 	.word	0x20004b24
 80060ec:	20004b20 	.word	0x20004b20

080060f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08e      	sub	sp, #56	; 0x38
 80060f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060f6:	e0ca      	b.n	800628e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	da18      	bge.n	8006130 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80060fe:	1d3b      	adds	r3, r7, #4
 8006100:	3304      	adds	r3, #4
 8006102:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10a      	bne.n	8006120 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800610a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	61fb      	str	r3, [r7, #28]
}
 800611c:	bf00      	nop
 800611e:	e7fe      	b.n	800611e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006126:	6850      	ldr	r0, [r2, #4]
 8006128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800612a:	6892      	ldr	r2, [r2, #8]
 800612c:	4611      	mov	r1, r2
 800612e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	f2c0 80aa 	blt.w	800628c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800613c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d004      	beq.n	800614e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	3304      	adds	r3, #4
 8006148:	4618      	mov	r0, r3
 800614a:	f7fd ff79 	bl	8004040 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800614e:	463b      	mov	r3, r7
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff ff6b 	bl	800602c <prvSampleTimeNow>
 8006156:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b09      	cmp	r3, #9
 800615c:	f200 8097 	bhi.w	800628e <prvProcessReceivedCommands+0x19e>
 8006160:	a201      	add	r2, pc, #4	; (adr r2, 8006168 <prvProcessReceivedCommands+0x78>)
 8006162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006166:	bf00      	nop
 8006168:	08006191 	.word	0x08006191
 800616c:	08006191 	.word	0x08006191
 8006170:	08006191 	.word	0x08006191
 8006174:	08006205 	.word	0x08006205
 8006178:	08006219 	.word	0x08006219
 800617c:	08006263 	.word	0x08006263
 8006180:	08006191 	.word	0x08006191
 8006184:	08006191 	.word	0x08006191
 8006188:	08006205 	.word	0x08006205
 800618c:	08006219 	.word	0x08006219
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006196:	f043 0301 	orr.w	r3, r3, #1
 800619a:	b2da      	uxtb	r2, r3
 800619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	18d1      	adds	r1, r2, r3
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061b0:	f7ff ff5c 	bl	800606c <prvInsertTimerInActiveList>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d069      	beq.n	800628e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d05e      	beq.n	800628e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	441a      	add	r2, r3
 80061d8:	2300      	movs	r3, #0
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	2300      	movs	r3, #0
 80061de:	2100      	movs	r1, #0
 80061e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061e2:	f7ff fe05 	bl	8005df0 <xTimerGenericCommand>
 80061e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d14f      	bne.n	800628e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80061ee:	f04f 0330 	mov.w	r3, #48	; 0x30
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	61bb      	str	r3, [r7, #24]
}
 8006200:	bf00      	nop
 8006202:	e7fe      	b.n	8006202 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800620a:	f023 0301 	bic.w	r3, r3, #1
 800620e:	b2da      	uxtb	r2, r3
 8006210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006212:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006216:	e03a      	b.n	800628e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800621e:	f043 0301 	orr.w	r3, r3, #1
 8006222:	b2da      	uxtb	r2, r3
 8006224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10a      	bne.n	800624e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006238:	f04f 0330 	mov.w	r3, #48	; 0x30
 800623c:	f383 8811 	msr	BASEPRI, r3
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	f3bf 8f4f 	dsb	sy
 8006248:	617b      	str	r3, [r7, #20]
}
 800624a:	bf00      	nop
 800624c:	e7fe      	b.n	800624c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	18d1      	adds	r1, r2, r3
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800625a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800625c:	f7ff ff06 	bl	800606c <prvInsertTimerInActiveList>
					break;
 8006260:	e015      	b.n	800628e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d103      	bne.n	8006278 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006272:	f7fd fd3d 	bl	8003cf0 <vPortFree>
 8006276:	e00a      	b.n	800628e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800627e:	f023 0301 	bic.w	r3, r3, #1
 8006282:	b2da      	uxtb	r2, r3
 8006284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006286:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800628a:	e000      	b.n	800628e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800628c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800628e:	4b08      	ldr	r3, [pc, #32]	; (80062b0 <prvProcessReceivedCommands+0x1c0>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	1d39      	adds	r1, r7, #4
 8006294:	2200      	movs	r2, #0
 8006296:	4618      	mov	r0, r3
 8006298:	f7fe fbec 	bl	8004a74 <xQueueReceive>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f47f af2a 	bne.w	80060f8 <prvProcessReceivedCommands+0x8>
	}
}
 80062a4:	bf00      	nop
 80062a6:	bf00      	nop
 80062a8:	3730      	adds	r7, #48	; 0x30
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20004b28 	.word	0x20004b28

080062b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b088      	sub	sp, #32
 80062b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062ba:	e048      	b.n	800634e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062bc:	4b2d      	ldr	r3, [pc, #180]	; (8006374 <prvSwitchTimerLists+0xc0>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062c6:	4b2b      	ldr	r3, [pc, #172]	; (8006374 <prvSwitchTimerLists+0xc0>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3304      	adds	r3, #4
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fd feb3 	bl	8004040 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d02e      	beq.n	800634e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	4413      	add	r3, r2
 80062f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d90e      	bls.n	8006320 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800630e:	4b19      	ldr	r3, [pc, #100]	; (8006374 <prvSwitchTimerLists+0xc0>)
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	3304      	adds	r3, #4
 8006316:	4619      	mov	r1, r3
 8006318:	4610      	mov	r0, r2
 800631a:	f7fd fe58 	bl	8003fce <vListInsert>
 800631e:	e016      	b.n	800634e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006320:	2300      	movs	r3, #0
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	2300      	movs	r3, #0
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	2100      	movs	r1, #0
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f7ff fd60 	bl	8005df0 <xTimerGenericCommand>
 8006330:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10a      	bne.n	800634e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006338:	f04f 0330 	mov.w	r3, #48	; 0x30
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	603b      	str	r3, [r7, #0]
}
 800634a:	bf00      	nop
 800634c:	e7fe      	b.n	800634c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800634e:	4b09      	ldr	r3, [pc, #36]	; (8006374 <prvSwitchTimerLists+0xc0>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1b1      	bne.n	80062bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006358:	4b06      	ldr	r3, [pc, #24]	; (8006374 <prvSwitchTimerLists+0xc0>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800635e:	4b06      	ldr	r3, [pc, #24]	; (8006378 <prvSwitchTimerLists+0xc4>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a04      	ldr	r2, [pc, #16]	; (8006374 <prvSwitchTimerLists+0xc0>)
 8006364:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006366:	4a04      	ldr	r2, [pc, #16]	; (8006378 <prvSwitchTimerLists+0xc4>)
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	6013      	str	r3, [r2, #0]
}
 800636c:	bf00      	nop
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	20004b20 	.word	0x20004b20
 8006378:	20004b24 	.word	0x20004b24

0800637c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006382:	f7fd ffb7 	bl	80042f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006386:	4b15      	ldr	r3, [pc, #84]	; (80063dc <prvCheckForValidListAndQueue+0x60>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d120      	bne.n	80063d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800638e:	4814      	ldr	r0, [pc, #80]	; (80063e0 <prvCheckForValidListAndQueue+0x64>)
 8006390:	f7fd fdcc 	bl	8003f2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006394:	4813      	ldr	r0, [pc, #76]	; (80063e4 <prvCheckForValidListAndQueue+0x68>)
 8006396:	f7fd fdc9 	bl	8003f2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800639a:	4b13      	ldr	r3, [pc, #76]	; (80063e8 <prvCheckForValidListAndQueue+0x6c>)
 800639c:	4a10      	ldr	r2, [pc, #64]	; (80063e0 <prvCheckForValidListAndQueue+0x64>)
 800639e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80063a0:	4b12      	ldr	r3, [pc, #72]	; (80063ec <prvCheckForValidListAndQueue+0x70>)
 80063a2:	4a10      	ldr	r2, [pc, #64]	; (80063e4 <prvCheckForValidListAndQueue+0x68>)
 80063a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80063a6:	2300      	movs	r3, #0
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	4b11      	ldr	r3, [pc, #68]	; (80063f0 <prvCheckForValidListAndQueue+0x74>)
 80063ac:	4a11      	ldr	r2, [pc, #68]	; (80063f4 <prvCheckForValidListAndQueue+0x78>)
 80063ae:	2110      	movs	r1, #16
 80063b0:	200a      	movs	r0, #10
 80063b2:	f7fe f929 	bl	8004608 <xQueueGenericCreateStatic>
 80063b6:	4603      	mov	r3, r0
 80063b8:	4a08      	ldr	r2, [pc, #32]	; (80063dc <prvCheckForValidListAndQueue+0x60>)
 80063ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80063bc:	4b07      	ldr	r3, [pc, #28]	; (80063dc <prvCheckForValidListAndQueue+0x60>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d005      	beq.n	80063d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80063c4:	4b05      	ldr	r3, [pc, #20]	; (80063dc <prvCheckForValidListAndQueue+0x60>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	490b      	ldr	r1, [pc, #44]	; (80063f8 <prvCheckForValidListAndQueue+0x7c>)
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fe fd42 	bl	8004e54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063d0:	f7fd ffc0 	bl	8004354 <vPortExitCritical>
}
 80063d4:	bf00      	nop
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	20004b28 	.word	0x20004b28
 80063e0:	20004af8 	.word	0x20004af8
 80063e4:	20004b0c 	.word	0x20004b0c
 80063e8:	20004b20 	.word	0x20004b20
 80063ec:	20004b24 	.word	0x20004b24
 80063f0:	20004bd4 	.word	0x20004bd4
 80063f4:	20004b34 	.word	0x20004b34
 80063f8:	08006634 	.word	0x08006634

080063fc <__libc_init_array>:
 80063fc:	b570      	push	{r4, r5, r6, lr}
 80063fe:	4d0d      	ldr	r5, [pc, #52]	; (8006434 <__libc_init_array+0x38>)
 8006400:	4c0d      	ldr	r4, [pc, #52]	; (8006438 <__libc_init_array+0x3c>)
 8006402:	1b64      	subs	r4, r4, r5
 8006404:	10a4      	asrs	r4, r4, #2
 8006406:	2600      	movs	r6, #0
 8006408:	42a6      	cmp	r6, r4
 800640a:	d109      	bne.n	8006420 <__libc_init_array+0x24>
 800640c:	4d0b      	ldr	r5, [pc, #44]	; (800643c <__libc_init_array+0x40>)
 800640e:	4c0c      	ldr	r4, [pc, #48]	; (8006440 <__libc_init_array+0x44>)
 8006410:	f000 f8f2 	bl	80065f8 <_init>
 8006414:	1b64      	subs	r4, r4, r5
 8006416:	10a4      	asrs	r4, r4, #2
 8006418:	2600      	movs	r6, #0
 800641a:	42a6      	cmp	r6, r4
 800641c:	d105      	bne.n	800642a <__libc_init_array+0x2e>
 800641e:	bd70      	pop	{r4, r5, r6, pc}
 8006420:	f855 3b04 	ldr.w	r3, [r5], #4
 8006424:	4798      	blx	r3
 8006426:	3601      	adds	r6, #1
 8006428:	e7ee      	b.n	8006408 <__libc_init_array+0xc>
 800642a:	f855 3b04 	ldr.w	r3, [r5], #4
 800642e:	4798      	blx	r3
 8006430:	3601      	adds	r6, #1
 8006432:	e7f2      	b.n	800641a <__libc_init_array+0x1e>
 8006434:	08006704 	.word	0x08006704
 8006438:	08006704 	.word	0x08006704
 800643c:	08006704 	.word	0x08006704
 8006440:	08006708 	.word	0x08006708

08006444 <__retarget_lock_acquire_recursive>:
 8006444:	4770      	bx	lr

08006446 <__retarget_lock_release_recursive>:
 8006446:	4770      	bx	lr

08006448 <memcpy>:
 8006448:	440a      	add	r2, r1
 800644a:	4291      	cmp	r1, r2
 800644c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006450:	d100      	bne.n	8006454 <memcpy+0xc>
 8006452:	4770      	bx	lr
 8006454:	b510      	push	{r4, lr}
 8006456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800645a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800645e:	4291      	cmp	r1, r2
 8006460:	d1f9      	bne.n	8006456 <memcpy+0xe>
 8006462:	bd10      	pop	{r4, pc}

08006464 <memset>:
 8006464:	4402      	add	r2, r0
 8006466:	4603      	mov	r3, r0
 8006468:	4293      	cmp	r3, r2
 800646a:	d100      	bne.n	800646e <memset+0xa>
 800646c:	4770      	bx	lr
 800646e:	f803 1b01 	strb.w	r1, [r3], #1
 8006472:	e7f9      	b.n	8006468 <memset+0x4>

08006474 <cleanup_glue>:
 8006474:	b538      	push	{r3, r4, r5, lr}
 8006476:	460c      	mov	r4, r1
 8006478:	6809      	ldr	r1, [r1, #0]
 800647a:	4605      	mov	r5, r0
 800647c:	b109      	cbz	r1, 8006482 <cleanup_glue+0xe>
 800647e:	f7ff fff9 	bl	8006474 <cleanup_glue>
 8006482:	4621      	mov	r1, r4
 8006484:	4628      	mov	r0, r5
 8006486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800648a:	f000 b869 	b.w	8006560 <_free_r>
	...

08006490 <_reclaim_reent>:
 8006490:	4b2c      	ldr	r3, [pc, #176]	; (8006544 <_reclaim_reent+0xb4>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4283      	cmp	r3, r0
 8006496:	b570      	push	{r4, r5, r6, lr}
 8006498:	4604      	mov	r4, r0
 800649a:	d051      	beq.n	8006540 <_reclaim_reent+0xb0>
 800649c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800649e:	b143      	cbz	r3, 80064b2 <_reclaim_reent+0x22>
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d14a      	bne.n	800653c <_reclaim_reent+0xac>
 80064a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064a8:	6819      	ldr	r1, [r3, #0]
 80064aa:	b111      	cbz	r1, 80064b2 <_reclaim_reent+0x22>
 80064ac:	4620      	mov	r0, r4
 80064ae:	f000 f857 	bl	8006560 <_free_r>
 80064b2:	6961      	ldr	r1, [r4, #20]
 80064b4:	b111      	cbz	r1, 80064bc <_reclaim_reent+0x2c>
 80064b6:	4620      	mov	r0, r4
 80064b8:	f000 f852 	bl	8006560 <_free_r>
 80064bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80064be:	b111      	cbz	r1, 80064c6 <_reclaim_reent+0x36>
 80064c0:	4620      	mov	r0, r4
 80064c2:	f000 f84d 	bl	8006560 <_free_r>
 80064c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80064c8:	b111      	cbz	r1, 80064d0 <_reclaim_reent+0x40>
 80064ca:	4620      	mov	r0, r4
 80064cc:	f000 f848 	bl	8006560 <_free_r>
 80064d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80064d2:	b111      	cbz	r1, 80064da <_reclaim_reent+0x4a>
 80064d4:	4620      	mov	r0, r4
 80064d6:	f000 f843 	bl	8006560 <_free_r>
 80064da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80064dc:	b111      	cbz	r1, 80064e4 <_reclaim_reent+0x54>
 80064de:	4620      	mov	r0, r4
 80064e0:	f000 f83e 	bl	8006560 <_free_r>
 80064e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80064e6:	b111      	cbz	r1, 80064ee <_reclaim_reent+0x5e>
 80064e8:	4620      	mov	r0, r4
 80064ea:	f000 f839 	bl	8006560 <_free_r>
 80064ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80064f0:	b111      	cbz	r1, 80064f8 <_reclaim_reent+0x68>
 80064f2:	4620      	mov	r0, r4
 80064f4:	f000 f834 	bl	8006560 <_free_r>
 80064f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064fa:	b111      	cbz	r1, 8006502 <_reclaim_reent+0x72>
 80064fc:	4620      	mov	r0, r4
 80064fe:	f000 f82f 	bl	8006560 <_free_r>
 8006502:	69a3      	ldr	r3, [r4, #24]
 8006504:	b1e3      	cbz	r3, 8006540 <_reclaim_reent+0xb0>
 8006506:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006508:	4620      	mov	r0, r4
 800650a:	4798      	blx	r3
 800650c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800650e:	b1b9      	cbz	r1, 8006540 <_reclaim_reent+0xb0>
 8006510:	4620      	mov	r0, r4
 8006512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006516:	f7ff bfad 	b.w	8006474 <cleanup_glue>
 800651a:	5949      	ldr	r1, [r1, r5]
 800651c:	b941      	cbnz	r1, 8006530 <_reclaim_reent+0xa0>
 800651e:	3504      	adds	r5, #4
 8006520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006522:	2d80      	cmp	r5, #128	; 0x80
 8006524:	68d9      	ldr	r1, [r3, #12]
 8006526:	d1f8      	bne.n	800651a <_reclaim_reent+0x8a>
 8006528:	4620      	mov	r0, r4
 800652a:	f000 f819 	bl	8006560 <_free_r>
 800652e:	e7ba      	b.n	80064a6 <_reclaim_reent+0x16>
 8006530:	680e      	ldr	r6, [r1, #0]
 8006532:	4620      	mov	r0, r4
 8006534:	f000 f814 	bl	8006560 <_free_r>
 8006538:	4631      	mov	r1, r6
 800653a:	e7ef      	b.n	800651c <_reclaim_reent+0x8c>
 800653c:	2500      	movs	r5, #0
 800653e:	e7ef      	b.n	8006520 <_reclaim_reent+0x90>
 8006540:	bd70      	pop	{r4, r5, r6, pc}
 8006542:	bf00      	nop
 8006544:	20000010 	.word	0x20000010

08006548 <__malloc_lock>:
 8006548:	4801      	ldr	r0, [pc, #4]	; (8006550 <__malloc_lock+0x8>)
 800654a:	f7ff bf7b 	b.w	8006444 <__retarget_lock_acquire_recursive>
 800654e:	bf00      	nop
 8006550:	20004c24 	.word	0x20004c24

08006554 <__malloc_unlock>:
 8006554:	4801      	ldr	r0, [pc, #4]	; (800655c <__malloc_unlock+0x8>)
 8006556:	f7ff bf76 	b.w	8006446 <__retarget_lock_release_recursive>
 800655a:	bf00      	nop
 800655c:	20004c24 	.word	0x20004c24

08006560 <_free_r>:
 8006560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006562:	2900      	cmp	r1, #0
 8006564:	d044      	beq.n	80065f0 <_free_r+0x90>
 8006566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800656a:	9001      	str	r0, [sp, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	f1a1 0404 	sub.w	r4, r1, #4
 8006572:	bfb8      	it	lt
 8006574:	18e4      	addlt	r4, r4, r3
 8006576:	f7ff ffe7 	bl	8006548 <__malloc_lock>
 800657a:	4a1e      	ldr	r2, [pc, #120]	; (80065f4 <_free_r+0x94>)
 800657c:	9801      	ldr	r0, [sp, #4]
 800657e:	6813      	ldr	r3, [r2, #0]
 8006580:	b933      	cbnz	r3, 8006590 <_free_r+0x30>
 8006582:	6063      	str	r3, [r4, #4]
 8006584:	6014      	str	r4, [r2, #0]
 8006586:	b003      	add	sp, #12
 8006588:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800658c:	f7ff bfe2 	b.w	8006554 <__malloc_unlock>
 8006590:	42a3      	cmp	r3, r4
 8006592:	d908      	bls.n	80065a6 <_free_r+0x46>
 8006594:	6825      	ldr	r5, [r4, #0]
 8006596:	1961      	adds	r1, r4, r5
 8006598:	428b      	cmp	r3, r1
 800659a:	bf01      	itttt	eq
 800659c:	6819      	ldreq	r1, [r3, #0]
 800659e:	685b      	ldreq	r3, [r3, #4]
 80065a0:	1949      	addeq	r1, r1, r5
 80065a2:	6021      	streq	r1, [r4, #0]
 80065a4:	e7ed      	b.n	8006582 <_free_r+0x22>
 80065a6:	461a      	mov	r2, r3
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	b10b      	cbz	r3, 80065b0 <_free_r+0x50>
 80065ac:	42a3      	cmp	r3, r4
 80065ae:	d9fa      	bls.n	80065a6 <_free_r+0x46>
 80065b0:	6811      	ldr	r1, [r2, #0]
 80065b2:	1855      	adds	r5, r2, r1
 80065b4:	42a5      	cmp	r5, r4
 80065b6:	d10b      	bne.n	80065d0 <_free_r+0x70>
 80065b8:	6824      	ldr	r4, [r4, #0]
 80065ba:	4421      	add	r1, r4
 80065bc:	1854      	adds	r4, r2, r1
 80065be:	42a3      	cmp	r3, r4
 80065c0:	6011      	str	r1, [r2, #0]
 80065c2:	d1e0      	bne.n	8006586 <_free_r+0x26>
 80065c4:	681c      	ldr	r4, [r3, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	6053      	str	r3, [r2, #4]
 80065ca:	4421      	add	r1, r4
 80065cc:	6011      	str	r1, [r2, #0]
 80065ce:	e7da      	b.n	8006586 <_free_r+0x26>
 80065d0:	d902      	bls.n	80065d8 <_free_r+0x78>
 80065d2:	230c      	movs	r3, #12
 80065d4:	6003      	str	r3, [r0, #0]
 80065d6:	e7d6      	b.n	8006586 <_free_r+0x26>
 80065d8:	6825      	ldr	r5, [r4, #0]
 80065da:	1961      	adds	r1, r4, r5
 80065dc:	428b      	cmp	r3, r1
 80065de:	bf04      	itt	eq
 80065e0:	6819      	ldreq	r1, [r3, #0]
 80065e2:	685b      	ldreq	r3, [r3, #4]
 80065e4:	6063      	str	r3, [r4, #4]
 80065e6:	bf04      	itt	eq
 80065e8:	1949      	addeq	r1, r1, r5
 80065ea:	6021      	streq	r1, [r4, #0]
 80065ec:	6054      	str	r4, [r2, #4]
 80065ee:	e7ca      	b.n	8006586 <_free_r+0x26>
 80065f0:	b003      	add	sp, #12
 80065f2:	bd30      	pop	{r4, r5, pc}
 80065f4:	20004c28 	.word	0x20004c28

080065f8 <_init>:
 80065f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fa:	bf00      	nop
 80065fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fe:	bc08      	pop	{r3}
 8006600:	469e      	mov	lr, r3
 8006602:	4770      	bx	lr

08006604 <_fini>:
 8006604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006606:	bf00      	nop
 8006608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660a:	bc08      	pop	{r3}
 800660c:	469e      	mov	lr, r3
 800660e:	4770      	bx	lr
