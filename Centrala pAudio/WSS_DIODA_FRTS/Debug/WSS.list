
WSS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fdc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080041ac  080041ac  000141ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004298  08004298  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004298  08004298  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004298  08004298  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004298  08004298  00014298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800429c  0800429c  0001429c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080042a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c0  20000074  08004314  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001234  08004314  00021234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001378a  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000380d  00000000  00000000  00033827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  00037038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  00038360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013c62  00000000  00000000  000394f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185ac  00000000  00000000  0004d152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007683a  00000000  00000000  000656fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbf38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000502c  00000000  00000000  000dbf88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004194 	.word	0x08004194

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08004194 	.word	0x08004194

08000210 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	605a      	str	r2, [r3, #4]
 800021e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000220:	4b66      	ldr	r3, [pc, #408]	; (80003bc <MX_ADC1_Init+0x1ac>)
 8000222:	4a67      	ldr	r2, [pc, #412]	; (80003c0 <MX_ADC1_Init+0x1b0>)
 8000224:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000226:	4b65      	ldr	r3, [pc, #404]	; (80003bc <MX_ADC1_Init+0x1ac>)
 8000228:	f44f 7280 	mov.w	r2, #256	; 0x100
 800022c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800022e:	4b63      	ldr	r3, [pc, #396]	; (80003bc <MX_ADC1_Init+0x1ac>)
 8000230:	2201      	movs	r2, #1
 8000232:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000234:	4b61      	ldr	r3, [pc, #388]	; (80003bc <MX_ADC1_Init+0x1ac>)
 8000236:	2200      	movs	r2, #0
 8000238:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800023a:	4b60      	ldr	r3, [pc, #384]	; (80003bc <MX_ADC1_Init+0x1ac>)
 800023c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000240:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000242:	4b5e      	ldr	r3, [pc, #376]	; (80003bc <MX_ADC1_Init+0x1ac>)
 8000244:	2200      	movs	r2, #0
 8000246:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 12;
 8000248:	4b5c      	ldr	r3, [pc, #368]	; (80003bc <MX_ADC1_Init+0x1ac>)
 800024a:	220c      	movs	r2, #12
 800024c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800024e:	485b      	ldr	r0, [pc, #364]	; (80003bc <MX_ADC1_Init+0x1ac>)
 8000250:	f000 fd4c 	bl	8000cec <HAL_ADC_Init>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800025a:	f000 fb19 	bl	8000890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800025e:	2307      	movs	r3, #7
 8000260:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000262:	2301      	movs	r3, #1
 8000264:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000266:	2306      	movs	r3, #6
 8000268:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4619      	mov	r1, r3
 800026e:	4853      	ldr	r0, [pc, #332]	; (80003bc <MX_ADC1_Init+0x1ac>)
 8000270:	f000 feea 	bl	8001048 <HAL_ADC_ConfigChannel>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800027a:	f000 fb09 	bl	8000890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800027e:	2306      	movs	r3, #6
 8000280:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000282:	2302      	movs	r3, #2
 8000284:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4619      	mov	r1, r3
 800028a:	484c      	ldr	r0, [pc, #304]	; (80003bc <MX_ADC1_Init+0x1ac>)
 800028c:	f000 fedc 	bl	8001048 <HAL_ADC_ConfigChannel>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000296:	f000 fafb 	bl	8000890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800029a:	2305      	movs	r3, #5
 800029c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800029e:	2303      	movs	r3, #3
 80002a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4619      	mov	r1, r3
 80002a6:	4845      	ldr	r0, [pc, #276]	; (80003bc <MX_ADC1_Init+0x1ac>)
 80002a8:	f000 fece 	bl	8001048 <HAL_ADC_ConfigChannel>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80002b2:	f000 faed 	bl	8000890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80002b6:	2304      	movs	r3, #4
 80002b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80002ba:	2304      	movs	r3, #4
 80002bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	4619      	mov	r1, r3
 80002c2:	483e      	ldr	r0, [pc, #248]	; (80003bc <MX_ADC1_Init+0x1ac>)
 80002c4:	f000 fec0 	bl	8001048 <HAL_ADC_ConfigChannel>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80002ce:	f000 fadf 	bl	8000890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002d2:	2303      	movs	r3, #3
 80002d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80002d6:	2305      	movs	r3, #5
 80002d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4619      	mov	r1, r3
 80002de:	4837      	ldr	r0, [pc, #220]	; (80003bc <MX_ADC1_Init+0x1ac>)
 80002e0:	f000 feb2 	bl	8001048 <HAL_ADC_ConfigChannel>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80002ea:	f000 fad1 	bl	8000890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80002ee:	2302      	movs	r3, #2
 80002f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80002f2:	2306      	movs	r3, #6
 80002f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	4619      	mov	r1, r3
 80002fa:	4830      	ldr	r0, [pc, #192]	; (80003bc <MX_ADC1_Init+0x1ac>)
 80002fc:	f000 fea4 	bl	8001048 <HAL_ADC_ConfigChannel>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000306:	f000 fac3 	bl	8000890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800030a:	2301      	movs	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800030e:	2307      	movs	r3, #7
 8000310:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4619      	mov	r1, r3
 8000316:	4829      	ldr	r0, [pc, #164]	; (80003bc <MX_ADC1_Init+0x1ac>)
 8000318:	f000 fe96 	bl	8001048 <HAL_ADC_ConfigChannel>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000322:	f000 fab5 	bl	8000890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000326:	2300      	movs	r3, #0
 8000328:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800032a:	2308      	movs	r3, #8
 800032c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	4619      	mov	r1, r3
 8000332:	4822      	ldr	r0, [pc, #136]	; (80003bc <MX_ADC1_Init+0x1ac>)
 8000334:	f000 fe88 	bl	8001048 <HAL_ADC_ConfigChannel>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800033e:	f000 faa7 	bl	8000890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000342:	2311      	movs	r3, #17
 8000344:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000346:	2309      	movs	r3, #9
 8000348:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	4619      	mov	r1, r3
 800034e:	481b      	ldr	r0, [pc, #108]	; (80003bc <MX_ADC1_Init+0x1ac>)
 8000350:	f000 fe7a 	bl	8001048 <HAL_ADC_ConfigChannel>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 800035a:	f000 fa99 	bl	8000890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800035e:	2310      	movs	r3, #16
 8000360:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000362:	230a      	movs	r3, #10
 8000364:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	4619      	mov	r1, r3
 800036a:	4814      	ldr	r0, [pc, #80]	; (80003bc <MX_ADC1_Init+0x1ac>)
 800036c:	f000 fe6c 	bl	8001048 <HAL_ADC_ConfigChannel>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 8000376:	f000 fa8b 	bl	8000890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800037a:	2309      	movs	r3, #9
 800037c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800037e:	230b      	movs	r3, #11
 8000380:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	4619      	mov	r1, r3
 8000386:	480d      	ldr	r0, [pc, #52]	; (80003bc <MX_ADC1_Init+0x1ac>)
 8000388:	f000 fe5e 	bl	8001048 <HAL_ADC_ConfigChannel>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 8000392:	f000 fa7d 	bl	8000890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000396:	2308      	movs	r3, #8
 8000398:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 800039a:	230c      	movs	r3, #12
 800039c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	4619      	mov	r1, r3
 80003a2:	4806      	ldr	r0, [pc, #24]	; (80003bc <MX_ADC1_Init+0x1ac>)
 80003a4:	f000 fe50 	bl	8001048 <HAL_ADC_ConfigChannel>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_ADC1_Init+0x1a2>
  {
    Error_Handler();
 80003ae:	f000 fa6f 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	3710      	adds	r7, #16
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000090 	.word	0x20000090
 80003c0:	40012400 	.word	0x40012400

080003c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08a      	sub	sp, #40	; 0x28
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003cc:	f107 0318 	add.w	r3, r7, #24
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
 80003d4:	605a      	str	r2, [r3, #4]
 80003d6:	609a      	str	r2, [r3, #8]
 80003d8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a38      	ldr	r2, [pc, #224]	; (80004c0 <HAL_ADC_MspInit+0xfc>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d168      	bne.n	80004b6 <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80003e4:	4b37      	ldr	r3, [pc, #220]	; (80004c4 <HAL_ADC_MspInit+0x100>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a36      	ldr	r2, [pc, #216]	; (80004c4 <HAL_ADC_MspInit+0x100>)
 80003ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b34      	ldr	r3, [pc, #208]	; (80004c4 <HAL_ADC_MspInit+0x100>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003f8:	617b      	str	r3, [r7, #20]
 80003fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fc:	4b31      	ldr	r3, [pc, #196]	; (80004c4 <HAL_ADC_MspInit+0x100>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a30      	ldr	r2, [pc, #192]	; (80004c4 <HAL_ADC_MspInit+0x100>)
 8000402:	f043 0304 	orr.w	r3, r3, #4
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b2e      	ldr	r3, [pc, #184]	; (80004c4 <HAL_ADC_MspInit+0x100>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0304 	and.w	r3, r3, #4
 8000410:	613b      	str	r3, [r7, #16]
 8000412:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000414:	4b2b      	ldr	r3, [pc, #172]	; (80004c4 <HAL_ADC_MspInit+0x100>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a2a      	ldr	r2, [pc, #168]	; (80004c4 <HAL_ADC_MspInit+0x100>)
 800041a:	f043 0308 	orr.w	r3, r3, #8
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b28      	ldr	r3, [pc, #160]	; (80004c4 <HAL_ADC_MspInit+0x100>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0308 	and.w	r3, r3, #8
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800042c:	23ff      	movs	r3, #255	; 0xff
 800042e:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000430:	2303      	movs	r3, #3
 8000432:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000434:	f107 0318 	add.w	r3, r7, #24
 8000438:	4619      	mov	r1, r3
 800043a:	4823      	ldr	r0, [pc, #140]	; (80004c8 <HAL_ADC_MspInit+0x104>)
 800043c:	f001 f9a2 	bl	8001784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = C4MA_BAT_I_Pin|C4MA_PWR_I_Pin;
 8000440:	2303      	movs	r3, #3
 8000442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000444:	2303      	movs	r3, #3
 8000446:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000448:	f107 0318 	add.w	r3, r7, #24
 800044c:	4619      	mov	r1, r3
 800044e:	481f      	ldr	r0, [pc, #124]	; (80004cc <HAL_ADC_MspInit+0x108>)
 8000450:	f001 f998 	bl	8001784 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000454:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <HAL_ADC_MspInit+0x10c>)
 8000456:	4a1f      	ldr	r2, [pc, #124]	; (80004d4 <HAL_ADC_MspInit+0x110>)
 8000458:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800045a:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <HAL_ADC_MspInit+0x10c>)
 800045c:	2200      	movs	r2, #0
 800045e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <HAL_ADC_MspInit+0x10c>)
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000466:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <HAL_ADC_MspInit+0x10c>)
 8000468:	2280      	movs	r2, #128	; 0x80
 800046a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800046c:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <HAL_ADC_MspInit+0x10c>)
 800046e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000472:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000474:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <HAL_ADC_MspInit+0x10c>)
 8000476:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800047a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800047c:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <HAL_ADC_MspInit+0x10c>)
 800047e:	2220      	movs	r2, #32
 8000480:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000482:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <HAL_ADC_MspInit+0x10c>)
 8000484:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000488:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800048a:	4811      	ldr	r0, [pc, #68]	; (80004d0 <HAL_ADC_MspInit+0x10c>)
 800048c:	f001 f81a 	bl	80014c4 <HAL_DMA_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8000496:	f000 f9fb 	bl	8000890 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a0c      	ldr	r2, [pc, #48]	; (80004d0 <HAL_ADC_MspInit+0x10c>)
 800049e:	621a      	str	r2, [r3, #32]
 80004a0:	4a0b      	ldr	r2, [pc, #44]	; (80004d0 <HAL_ADC_MspInit+0x10c>)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 3, 0);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2103      	movs	r1, #3
 80004aa:	2012      	movs	r0, #18
 80004ac:	f000 ffc3 	bl	8001436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80004b0:	2012      	movs	r0, #18
 80004b2:	f000 ffdc 	bl	800146e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80004b6:	bf00      	nop
 80004b8:	3728      	adds	r7, #40	; 0x28
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40012400 	.word	0x40012400
 80004c4:	40021000 	.word	0x40021000
 80004c8:	40010800 	.word	0x40010800
 80004cc:	40010c00 	.word	0x40010c00
 80004d0:	200000c0 	.word	0x200000c0
 80004d4:	40020008 	.word	0x40020008

080004d8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <MX_CRC_Init+0x20>)
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <MX_CRC_Init+0x24>)
 80004e0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <MX_CRC_Init+0x20>)
 80004e4:	f000 ffd1 	bl	800148a <HAL_CRC_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80004ee:	f000 f9cf 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000104 	.word	0x20000104
 80004fc:	40023000 	.word	0x40023000

08000500 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a09      	ldr	r2, [pc, #36]	; (8000534 <HAL_CRC_MspInit+0x34>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d10b      	bne.n	800052a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <HAL_CRC_MspInit+0x38>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a08      	ldr	r2, [pc, #32]	; (8000538 <HAL_CRC_MspInit+0x38>)
 8000518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <HAL_CRC_MspInit+0x38>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	40023000 	.word	0x40023000
 8000538:	40021000 	.word	0x40021000

0800053c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <MX_DMA_Init+0x48>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a0f      	ldr	r2, [pc, #60]	; (8000584 <MX_DMA_Init+0x48>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <MX_DMA_Init+0x48>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2103      	movs	r1, #3
 800055e:	200b      	movs	r0, #11
 8000560:	f000 ff69 	bl	8001436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000564:	200b      	movs	r0, #11
 8000566:	f000 ff82 	bl	800146e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 3, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	2103      	movs	r1, #3
 800056e:	200f      	movs	r0, #15
 8000570:	f000 ff61 	bl	8001436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000574:	200f      	movs	r0, #15
 8000576:	f000 ff7a 	bl	800146e <HAL_NVIC_EnableIRQ>

}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000

08000588 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <vApplicationGetIdleTaskMemory+0x28>)
 8000598:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800059e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	20000114 	.word	0x20000114
 80005b4:	200001c8 	.word	0x200001c8

080005b8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005b8:	b5b0      	push	{r4, r5, r7, lr}
 80005ba:	b08e      	sub	sp, #56	; 0x38
 80005bc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <MX_FREERTOS_Init+0x58>)
 80005c0:	f107 041c 	add.w	r4, r7, #28
 80005c4:	461d      	mov	r5, r3
 80005c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f002 fb07 	bl	8002bec <osThreadCreate>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <MX_FREERTOS_Init+0x5c>)
 80005e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of LEDTask */
  osThreadDef(LEDTask, LED_Blink, osPriorityLow, 0, 128);
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_FREERTOS_Init+0x60>)
 80005e6:	463c      	mov	r4, r7
 80005e8:	461d      	mov	r5, r3
 80005ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDTaskHandle = osThreadCreate(osThread(LEDTask), NULL);
 80005f6:	463b      	mov	r3, r7
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 faf6 	bl	8002bec <osThreadCreate>
 8000600:	4603      	mov	r3, r0
 8000602:	4a06      	ldr	r2, [pc, #24]	; (800061c <MX_FREERTOS_Init+0x64>)
 8000604:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000606:	bf00      	nop
 8000608:	3738      	adds	r7, #56	; 0x38
 800060a:	46bd      	mov	sp, r7
 800060c:	bdb0      	pop	{r4, r5, r7, pc}
 800060e:	bf00      	nop
 8000610:	080041c0 	.word	0x080041c0
 8000614:	2000010c 	.word	0x2000010c
 8000618:	080041dc 	.word	0x080041dc
 800061c:	20000110 	.word	0x20000110

08000620 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin (LED_CARD_OUT_GPIO_Port, LED_CARD_OUT_Pin);
 8000628:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <StartDefaultTask+0x1c>)
 800062e:	f001 fa45 	bl	8001abc <HAL_GPIO_TogglePin>
    osDelay(200);
 8000632:	20c8      	movs	r0, #200	; 0xc8
 8000634:	f002 fb26 	bl	8002c84 <osDelay>
	HAL_GPIO_TogglePin (LED_CARD_OUT_GPIO_Port, LED_CARD_OUT_Pin);
 8000638:	e7f6      	b.n	8000628 <StartDefaultTask+0x8>
 800063a:	bf00      	nop
 800063c:	40011000 	.word	0x40011000

08000640 <LED_Blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED_Blink */
void LED_Blink(void const * argument)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LED_Blink */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000648:	2001      	movs	r0, #1
 800064a:	f002 fb1b 	bl	8002c84 <osDelay>
 800064e:	e7fb      	b.n	8000648 <LED_Blink+0x8>

08000650 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 0310 	add.w	r3, r7, #16
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000664:	4b46      	ldr	r3, [pc, #280]	; (8000780 <MX_GPIO_Init+0x130>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a45      	ldr	r2, [pc, #276]	; (8000780 <MX_GPIO_Init+0x130>)
 800066a:	f043 0310 	orr.w	r3, r3, #16
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b43      	ldr	r3, [pc, #268]	; (8000780 <MX_GPIO_Init+0x130>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0310 	and.w	r3, r3, #16
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800067c:	4b40      	ldr	r3, [pc, #256]	; (8000780 <MX_GPIO_Init+0x130>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a3f      	ldr	r2, [pc, #252]	; (8000780 <MX_GPIO_Init+0x130>)
 8000682:	f043 0320 	orr.w	r3, r3, #32
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <MX_GPIO_Init+0x130>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0320 	and.w	r3, r3, #32
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000694:	4b3a      	ldr	r3, [pc, #232]	; (8000780 <MX_GPIO_Init+0x130>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a39      	ldr	r2, [pc, #228]	; (8000780 <MX_GPIO_Init+0x130>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b37      	ldr	r3, [pc, #220]	; (8000780 <MX_GPIO_Init+0x130>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ac:	4b34      	ldr	r3, [pc, #208]	; (8000780 <MX_GPIO_Init+0x130>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a33      	ldr	r2, [pc, #204]	; (8000780 <MX_GPIO_Init+0x130>)
 80006b2:	f043 0308 	orr.w	r3, r3, #8
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b31      	ldr	r3, [pc, #196]	; (8000780 <MX_GPIO_Init+0x130>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f003 0308 	and.w	r3, r3, #8
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_CARD_OUT_GPIO_Port, LED_CARD_OUT_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ca:	482e      	ldr	r0, [pc, #184]	; (8000784 <MX_GPIO_Init+0x134>)
 80006cc:	f001 f9de 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C4MA_GPIO0_O_Pin|C4MA_GPIO1_O_Pin|C4MA_BYP_O_Pin, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 718a 	mov.w	r1, #276	; 0x114
 80006d6:	482c      	ldr	r0, [pc, #176]	; (8000788 <MX_GPIO_Init+0x138>)
 80006d8:	f001 f9d8 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, C4MA_DE_O_Pin|C4MA_RE_O_Pin|C4MA_WDTR_O_Pin|C4MA_WDTR_CPU_O_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 4119 	mov.w	r1, #39168	; 0x9900
 80006e2:	482a      	ldr	r0, [pc, #168]	; (800078c <MX_GPIO_Init+0x13c>)
 80006e4:	f001 f9d2 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_CARD_OUT_Pin;
 80006e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2302      	movs	r3, #2
 80006f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_CARD_OUT_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	4619      	mov	r1, r3
 8000700:	4820      	ldr	r0, [pc, #128]	; (8000784 <MX_GPIO_Init+0x134>)
 8000702:	f001 f83f 	bl	8001784 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = C4MA_GPIO0_O_Pin|C4MA_GPIO1_O_Pin;
 8000706:	2314      	movs	r3, #20
 8000708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800070a:	2311      	movs	r3, #17
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	2302      	movs	r3, #2
 8000714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	4619      	mov	r1, r3
 800071c:	481a      	ldr	r0, [pc, #104]	; (8000788 <MX_GPIO_Init+0x138>)
 800071e:	f001 f831 	bl	8001784 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = C4MA_DE_O_Pin|C4MA_RE_O_Pin|C4MA_WDTR_O_Pin|C4MA_WDTR_CPU_O_Pin;
 8000722:	f44f 4319 	mov.w	r3, #39168	; 0x9900
 8000726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2302      	movs	r3, #2
 8000732:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	4619      	mov	r1, r3
 800073a:	4814      	ldr	r0, [pc, #80]	; (800078c <MX_GPIO_Init+0x13c>)
 800073c:	f001 f822 	bl	8001784 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = C4MA_EN_I_Pin|C4MA_BYP_I_Pin;
 8000740:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	4619      	mov	r1, r3
 8000754:	480c      	ldr	r0, [pc, #48]	; (8000788 <MX_GPIO_Init+0x138>)
 8000756:	f001 f815 	bl	8001784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = C4MA_BYP_O_Pin;
 800075a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800075e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	2301      	movs	r3, #1
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000768:	2303      	movs	r3, #3
 800076a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(C4MA_BYP_O_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	4619      	mov	r1, r3
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_GPIO_Init+0x138>)
 8000774:	f001 f806 	bl	8001784 <HAL_GPIO_Init>

}
 8000778:	bf00      	nop
 800077a:	3720      	adds	r7, #32
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40021000 	.word	0x40021000
 8000784:	40011000 	.word	0x40011000
 8000788:	40010c00 	.word	0x40010c00
 800078c:	40010800 	.word	0x40010800

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000794:	f000 fa81 	bl	8000c9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000798:	f000 f811 	bl	80007be <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079c:	f7ff ff58 	bl	8000650 <MX_GPIO_Init>
  MX_DMA_Init();
 80007a0:	f7ff fecc 	bl	800053c <MX_DMA_Init>
  MX_ADC1_Init();
 80007a4:	f7ff fd34 	bl	8000210 <MX_ADC1_Init>
  MX_CRC_Init();
 80007a8:	f7ff fe96 	bl	80004d8 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80007ac:	f000 f948 	bl	8000a40 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80007b0:	f000 f972 	bl	8000a98 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80007b4:	f7ff ff00 	bl	80005b8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007b8:	f002 fa11 	bl	8002bde <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <main+0x2c>

080007be <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b092      	sub	sp, #72	; 0x48
 80007c2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c4:	f107 0320 	add.w	r3, r7, #32
 80007c8:	2228      	movs	r2, #40	; 0x28
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 fc1b 	bl	8004008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e2:	463b      	mov	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ec:	2301      	movs	r3, #1
 80007ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	2302      	movs	r3, #2
 80007fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000802:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000804:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000808:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080a:	f107 0320 	add.w	r3, r7, #32
 800080e:	4618      	mov	r0, r3
 8000810:	f001 f96e 	bl	8001af0 <HAL_RCC_OscConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x60>
  {
    Error_Handler();
 800081a:	f000 f839 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081e:	230f      	movs	r3, #15
 8000820:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000822:	2302      	movs	r3, #2
 8000824:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f001 fbdb 	bl	8001ff4 <HAL_RCC_ClockConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000844:	f000 f824 	bl	8000890 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000848:	2302      	movs	r3, #2
 800084a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000850:	463b      	mov	r3, r7
 8000852:	4618      	mov	r0, r3
 8000854:	f001 fd64 	bl	8002320 <HAL_RCCEx_PeriphCLKConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800085e:	f000 f817 	bl	8000890 <Error_Handler>
  }
}
 8000862:	bf00      	nop
 8000864:	3748      	adds	r7, #72	; 0x48
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d101      	bne.n	8000882 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800087e:	f000 fa19 	bl	8000cb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40012c00 	.word	0x40012c00

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <HAL_MspInit+0x68>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	4a17      	ldr	r2, [pc, #92]	; (8000904 <HAL_MspInit+0x68>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6193      	str	r3, [r2, #24]
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <HAL_MspInit+0x68>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_MspInit+0x68>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	4a11      	ldr	r2, [pc, #68]	; (8000904 <HAL_MspInit+0x68>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	61d3      	str	r3, [r2, #28]
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <HAL_MspInit+0x68>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	210f      	movs	r1, #15
 80008d6:	f06f 0001 	mvn.w	r0, #1
 80008da:	f000 fdac 	bl	8001436 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <HAL_MspInit+0x6c>)
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <HAL_MspInit+0x6c>)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fa:	bf00      	nop
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40021000 	.word	0x40021000
 8000908:	40010000 	.word	0x40010000

0800090c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	; 0x30
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800091c:	2200      	movs	r2, #0
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	2019      	movs	r0, #25
 8000922:	f000 fd88 	bl	8001436 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000926:	2019      	movs	r0, #25
 8000928:	f000 fda1 	bl	800146e <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800092c:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <HAL_InitTick+0x9c>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a1d      	ldr	r2, [pc, #116]	; (80009a8 <HAL_InitTick+0x9c>)
 8000932:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <HAL_InitTick+0x9c>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000944:	f107 0210 	add.w	r2, r7, #16
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4611      	mov	r1, r2
 800094e:	4618      	mov	r0, r3
 8000950:	f001 fc9c 	bl	800228c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000954:	f001 fc86 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 8000958:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800095a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800095c:	4a13      	ldr	r2, [pc, #76]	; (80009ac <HAL_InitTick+0xa0>)
 800095e:	fba2 2303 	umull	r2, r3, r2, r3
 8000962:	0c9b      	lsrs	r3, r3, #18
 8000964:	3b01      	subs	r3, #1
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <HAL_InitTick+0xa4>)
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <HAL_InitTick+0xa8>)
 800096c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <HAL_InitTick+0xa4>)
 8000970:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000974:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000976:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <HAL_InitTick+0xa4>)
 8000978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800097a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <HAL_InitTick+0xa4>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <HAL_InitTick+0xa4>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000988:	4809      	ldr	r0, [pc, #36]	; (80009b0 <HAL_InitTick+0xa4>)
 800098a:	f001 fd6f 	bl	800246c <HAL_TIM_Base_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d104      	bne.n	800099e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000994:	4806      	ldr	r0, [pc, #24]	; (80009b0 <HAL_InitTick+0xa4>)
 8000996:	f001 fdc1 	bl	800251c <HAL_TIM_Base_Start_IT>
 800099a:	4603      	mov	r3, r0
 800099c:	e000      	b.n	80009a0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3730      	adds	r7, #48	; 0x30
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40021000 	.word	0x40021000
 80009ac:	431bde83 	.word	0x431bde83
 80009b0:	200003c8 	.word	0x200003c8
 80009b4:	40012c00 	.word	0x40012c00

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler+0x4>

080009ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
	...

080009e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <DMA1_Channel1_IRQHandler+0x10>)
 80009ea:	f000 fdc5 	bl	8001578 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200000c0 	.word	0x200000c0

080009f8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <DMA1_Channel5_IRQHandler+0x10>)
 80009fe:	f000 fdbb 	bl	8001578 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000498 	.word	0x20000498

08000a0c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <ADC1_IRQHandler+0x10>)
 8000a12:	f000 fa43 	bl	8000e9c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000090 	.word	0x20000090

08000a20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a24:	4802      	ldr	r0, [pc, #8]	; (8000a30 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a26:	f001 fdd3 	bl	80025d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200003c8 	.word	0x200003c8

08000a34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <MX_USART1_UART_Init+0x50>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a4c:	4a11      	ldr	r2, [pc, #68]	; (8000a94 <MX_USART1_UART_Init+0x54>)
 8000a4e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a50:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a78:	f001 ff68 	bl	800294c <HAL_UART_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a82:	f7ff ff05 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000410 	.word	0x20000410
 8000a90:	40013800 	.word	0x40013800
 8000a94:	000f4240 	.word	0x000f4240

08000a98 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <MX_USART3_UART_Init+0x50>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000ad0:	f001 ff3c 	bl	800294c <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ada:	f7ff fed9 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000454 	.word	0x20000454
 8000ae8:	40004800 	.word	0x40004800

08000aec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0318 	add.w	r3, r7, #24
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a4b      	ldr	r2, [pc, #300]	; (8000c34 <HAL_UART_MspInit+0x148>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d158      	bne.n	8000bbe <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b0c:	4b4a      	ldr	r3, [pc, #296]	; (8000c38 <HAL_UART_MspInit+0x14c>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a49      	ldr	r2, [pc, #292]	; (8000c38 <HAL_UART_MspInit+0x14c>)
 8000b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b47      	ldr	r3, [pc, #284]	; (8000c38 <HAL_UART_MspInit+0x14c>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	4b44      	ldr	r3, [pc, #272]	; (8000c38 <HAL_UART_MspInit+0x14c>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	4a43      	ldr	r2, [pc, #268]	; (8000c38 <HAL_UART_MspInit+0x14c>)
 8000b2a:	f043 0304 	orr.w	r3, r3, #4
 8000b2e:	6193      	str	r3, [r2, #24]
 8000b30:	4b41      	ldr	r3, [pc, #260]	; (8000c38 <HAL_UART_MspInit+0x14c>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f003 0304 	and.w	r3, r3, #4
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = C4MA_TXD_O_Pin;
 8000b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(C4MA_TXD_O_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 0318 	add.w	r3, r7, #24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	483a      	ldr	r0, [pc, #232]	; (8000c3c <HAL_UART_MspInit+0x150>)
 8000b52:	f000 fe17 	bl	8001784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = C4MA_RXD_I_Pin;
 8000b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(C4MA_RXD_I_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 0318 	add.w	r3, r7, #24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4834      	ldr	r0, [pc, #208]	; (8000c3c <HAL_UART_MspInit+0x150>)
 8000b6c:	f000 fe0a 	bl	8001784 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000b70:	4b33      	ldr	r3, [pc, #204]	; (8000c40 <HAL_UART_MspInit+0x154>)
 8000b72:	4a34      	ldr	r2, [pc, #208]	; (8000c44 <HAL_UART_MspInit+0x158>)
 8000b74:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b76:	4b32      	ldr	r3, [pc, #200]	; (8000c40 <HAL_UART_MspInit+0x154>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b7c:	4b30      	ldr	r3, [pc, #192]	; (8000c40 <HAL_UART_MspInit+0x154>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b82:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <HAL_UART_MspInit+0x154>)
 8000b84:	2280      	movs	r2, #128	; 0x80
 8000b86:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b88:	4b2d      	ldr	r3, [pc, #180]	; (8000c40 <HAL_UART_MspInit+0x154>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b8e:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <HAL_UART_MspInit+0x154>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000b94:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <HAL_UART_MspInit+0x154>)
 8000b96:	2220      	movs	r2, #32
 8000b98:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b9a:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <HAL_UART_MspInit+0x154>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ba0:	4827      	ldr	r0, [pc, #156]	; (8000c40 <HAL_UART_MspInit+0x154>)
 8000ba2:	f000 fc8f 	bl	80014c4 <HAL_DMA_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000bac:	f7ff fe70 	bl	8000890 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a23      	ldr	r2, [pc, #140]	; (8000c40 <HAL_UART_MspInit+0x154>)
 8000bb4:	639a      	str	r2, [r3, #56]	; 0x38
 8000bb6:	4a22      	ldr	r2, [pc, #136]	; (8000c40 <HAL_UART_MspInit+0x154>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000bbc:	e036      	b.n	8000c2c <HAL_UART_MspInit+0x140>
  else if(uartHandle->Instance==USART3)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a21      	ldr	r2, [pc, #132]	; (8000c48 <HAL_UART_MspInit+0x15c>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d131      	bne.n	8000c2c <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <HAL_UART_MspInit+0x14c>)
 8000bca:	69db      	ldr	r3, [r3, #28]
 8000bcc:	4a1a      	ldr	r2, [pc, #104]	; (8000c38 <HAL_UART_MspInit+0x14c>)
 8000bce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd2:	61d3      	str	r3, [r2, #28]
 8000bd4:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <HAL_UART_MspInit+0x14c>)
 8000bd6:	69db      	ldr	r3, [r3, #28]
 8000bd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <HAL_UART_MspInit+0x14c>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <HAL_UART_MspInit+0x14c>)
 8000be6:	f043 0308 	orr.w	r3, r3, #8
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_UART_MspInit+0x14c>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0308 	and.w	r3, r3, #8
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SRV_TXD_O_Pin;
 8000bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SRV_TXD_O_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0318 	add.w	r3, r7, #24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480f      	ldr	r0, [pc, #60]	; (8000c4c <HAL_UART_MspInit+0x160>)
 8000c0e:	f000 fdb9 	bl	8001784 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SRV_RXD_I_Pin;
 8000c12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SRV_RXD_I_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 0318 	add.w	r3, r7, #24
 8000c24:	4619      	mov	r1, r3
 8000c26:	4809      	ldr	r0, [pc, #36]	; (8000c4c <HAL_UART_MspInit+0x160>)
 8000c28:	f000 fdac 	bl	8001784 <HAL_GPIO_Init>
}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	; 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40013800 	.word	0x40013800
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40010800 	.word	0x40010800
 8000c40:	20000498 	.word	0x20000498
 8000c44:	40020058 	.word	0x40020058
 8000c48:	40004800 	.word	0x40004800
 8000c4c:	40010c00 	.word	0x40010c00

08000c50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c52:	490d      	ldr	r1, [pc, #52]	; (8000c88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c68:	4c0a      	ldr	r4, [pc, #40]	; (8000c94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c76:	f7ff fedd 	bl	8000a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f003 f99f 	bl	8003fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c7e:	f7ff fd87 	bl	8000790 <main>
  bx lr
 8000c82:	4770      	bx	lr
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c8c:	080042a0 	.word	0x080042a0
  ldr r2, =_sbss
 8000c90:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c94:	20001234 	.word	0x20001234

08000c98 <CEC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <CEC_IRQHandler>

08000c9a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9e:	2003      	movs	r0, #3
 8000ca0:	f000 fbbe 	bl	8001420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca4:	200f      	movs	r0, #15
 8000ca6:	f7ff fe31 	bl	800090c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000caa:	f7ff fdf7 	bl	800089c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cae:	2300      	movs	r3, #0
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <HAL_IncTick+0x1c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a03      	ldr	r2, [pc, #12]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	200004dc 	.word	0x200004dc

08000cd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;
 8000cdc:	4b02      	ldr	r3, [pc, #8]	; (8000ce8 <HAL_GetTick+0x10>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	200004dc 	.word	0x200004dc

08000cec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e0be      	b.n	8000e8c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d109      	bne.n	8000d30 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff fb4a 	bl	80003c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 fa81 	bl	8001238 <ADC_ConversionStop_Disable>
 8000d36:	4603      	mov	r3, r0
 8000d38:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3e:	f003 0310 	and.w	r3, r3, #16
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8099 	bne.w	8000e7a <HAL_ADC_Init+0x18e>
 8000d48:	7dfb      	ldrb	r3, [r7, #23]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f040 8095 	bne.w	8000e7a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d58:	f023 0302 	bic.w	r3, r3, #2
 8000d5c:	f043 0202 	orr.w	r2, r3, #2
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	7b1b      	ldrb	r3, [r3, #12]
 8000d72:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d74:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d84:	d003      	beq.n	8000d8e <HAL_ADC_Init+0xa2>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d102      	bne.n	8000d94 <HAL_ADC_Init+0xa8>
 8000d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d92:	e000      	b.n	8000d96 <HAL_ADC_Init+0xaa>
 8000d94:	2300      	movs	r3, #0
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	7d1b      	ldrb	r3, [r3, #20]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d119      	bne.n	8000dd8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	7b1b      	ldrb	r3, [r3, #12]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d109      	bne.n	8000dc0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	035a      	lsls	r2, r3, #13
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	e00b      	b.n	8000dd8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc4:	f043 0220 	orr.w	r2, r3, #32
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd0:	f043 0201 	orr.w	r2, r3, #1
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	430a      	orrs	r2, r1
 8000dea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <HAL_ADC_Init+0x1a8>)
 8000df4:	4013      	ands	r3, r2
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	6812      	ldr	r2, [r2, #0]
 8000dfa:	68b9      	ldr	r1, [r7, #8]
 8000dfc:	430b      	orrs	r3, r1
 8000dfe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e08:	d003      	beq.n	8000e12 <HAL_ADC_Init+0x126>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d104      	bne.n	8000e1c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	691b      	ldr	r3, [r3, #16]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	051b      	lsls	r3, r3, #20
 8000e1a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e22:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689a      	ldr	r2, [r3, #8]
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <HAL_ADC_Init+0x1ac>)
 8000e38:	4013      	ands	r3, r2
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d10b      	bne.n	8000e58 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4a:	f023 0303 	bic.w	r3, r3, #3
 8000e4e:	f043 0201 	orr.w	r2, r3, #1
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e56:	e018      	b.n	8000e8a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5c:	f023 0312 	bic.w	r3, r3, #18
 8000e60:	f043 0210 	orr.w	r2, r3, #16
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6c:	f043 0201 	orr.w	r2, r3, #1
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e78:	e007      	b.n	8000e8a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7e:	f043 0210 	orr.w	r2, r3, #16
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	ffe1f7fd 	.word	0xffe1f7fd
 8000e98:	ff1f0efe 	.word	0xff1f0efe

08000e9c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0320 	and.w	r3, r3, #32
 8000eae:	2b20      	cmp	r3, #32
 8000eb0:	d140      	bne.n	8000f34 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d139      	bne.n	8000f34 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec4:	f003 0310 	and.w	r3, r3, #16
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d105      	bne.n	8000ed8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ee2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ee6:	d11d      	bne.n	8000f24 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d119      	bne.n	8000f24 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 0220 	bic.w	r2, r2, #32
 8000efe:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d105      	bne.n	8000f24 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1c:	f043 0201 	orr.w	r2, r3, #1
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f87c 	bl	8001022 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f06f 0212 	mvn.w	r2, #18
 8000f32:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3e:	2b80      	cmp	r3, #128	; 0x80
 8000f40:	d14f      	bne.n	8000fe2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	2b04      	cmp	r3, #4
 8000f4e:	d148      	bne.n	8000fe2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f54:	f003 0310 	and.w	r3, r3, #16
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d105      	bne.n	8000f68 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f60:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000f72:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000f76:	d012      	beq.n	8000f9e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d125      	bne.n	8000fd2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000f90:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f94:	d11d      	bne.n	8000fd2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d119      	bne.n	8000fd2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fac:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d105      	bne.n	8000fd2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fca:	f043 0201 	orr.w	r2, r3, #1
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f971 	bl	80012ba <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f06f 020c 	mvn.w	r2, #12
 8000fe0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fec:	2b40      	cmp	r3, #64	; 0x40
 8000fee:	d114      	bne.n	800101a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d10d      	bne.n	800101a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001002:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f812 	bl	8001034 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f06f 0201 	mvn.w	r2, #1
 8001018:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
	...

08001048 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001060:	2b01      	cmp	r3, #1
 8001062:	d101      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x20>
 8001064:	2302      	movs	r3, #2
 8001066:	e0dc      	b.n	8001222 <HAL_ADC_ConfigChannel+0x1da>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b06      	cmp	r3, #6
 8001076:	d81c      	bhi.n	80010b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	3b05      	subs	r3, #5
 800108a:	221f      	movs	r2, #31
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	4019      	ands	r1, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	6818      	ldr	r0, [r3, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	3b05      	subs	r3, #5
 80010a4:	fa00 f203 	lsl.w	r2, r0, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	430a      	orrs	r2, r1
 80010ae:	635a      	str	r2, [r3, #52]	; 0x34
 80010b0:	e03c      	b.n	800112c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b0c      	cmp	r3, #12
 80010b8:	d81c      	bhi.n	80010f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	3b23      	subs	r3, #35	; 0x23
 80010cc:	221f      	movs	r2, #31
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	4019      	ands	r1, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	6818      	ldr	r0, [r3, #0]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	3b23      	subs	r3, #35	; 0x23
 80010e6:	fa00 f203 	lsl.w	r2, r0, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	430a      	orrs	r2, r1
 80010f0:	631a      	str	r2, [r3, #48]	; 0x30
 80010f2:	e01b      	b.n	800112c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	3b41      	subs	r3, #65	; 0x41
 8001106:	221f      	movs	r2, #31
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	4019      	ands	r1, r3
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	3b41      	subs	r3, #65	; 0x41
 8001120:	fa00 f203 	lsl.w	r2, r0, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	430a      	orrs	r2, r1
 800112a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b09      	cmp	r3, #9
 8001132:	d91c      	bls.n	800116e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68d9      	ldr	r1, [r3, #12]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4613      	mov	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	4413      	add	r3, r2
 8001144:	3b1e      	subs	r3, #30
 8001146:	2207      	movs	r2, #7
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	4019      	ands	r1, r3
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	6898      	ldr	r0, [r3, #8]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	3b1e      	subs	r3, #30
 8001160:	fa00 f203 	lsl.w	r2, r0, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	430a      	orrs	r2, r1
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	e019      	b.n	80011a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6919      	ldr	r1, [r3, #16]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4613      	mov	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4413      	add	r3, r2
 800117e:	2207      	movs	r2, #7
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	4019      	ands	r1, r3
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	6898      	ldr	r0, [r3, #8]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	fa00 f203 	lsl.w	r2, r0, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	430a      	orrs	r2, r1
 80011a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b10      	cmp	r3, #16
 80011a8:	d003      	beq.n	80011b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011ae:	2b11      	cmp	r3, #17
 80011b0:	d132      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a1d      	ldr	r2, [pc, #116]	; (800122c <HAL_ADC_ConfigChannel+0x1e4>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d125      	bne.n	8001208 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d126      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011d8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b10      	cmp	r3, #16
 80011e0:	d11a      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <HAL_ADC_ConfigChannel+0x1e8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a13      	ldr	r2, [pc, #76]	; (8001234 <HAL_ADC_ConfigChannel+0x1ec>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	0c9a      	lsrs	r2, r3, #18
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011f8:	e002      	b.n	8001200 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f9      	bne.n	80011fa <HAL_ADC_ConfigChannel+0x1b2>
 8001206:	e007      	b.n	8001218 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120c:	f043 0220 	orr.w	r2, r3, #32
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	40012400 	.word	0x40012400
 8001230:	20000000 	.word	0x20000000
 8001234:	431bde83 	.word	0x431bde83

08001238 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b01      	cmp	r3, #1
 8001250:	d12e      	bne.n	80012b0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0201 	bic.w	r2, r2, #1
 8001260:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001262:	f7ff fd39 	bl	8000cd8 <HAL_GetTick>
 8001266:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001268:	e01b      	b.n	80012a2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800126a:	f7ff fd35 	bl	8000cd8 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d914      	bls.n	80012a2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b01      	cmp	r3, #1
 8001284:	d10d      	bne.n	80012a2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128a:	f043 0210 	orr.w	r2, r3, #16
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001296:	f043 0201 	orr.w	r2, r3, #1
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e007      	b.n	80012b2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d0dc      	beq.n	800126a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fe:	4a04      	ldr	r2, [pc, #16]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <__NVIC_GetPriorityGrouping+0x18>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f003 0307 	and.w	r3, r3, #7
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db0b      	blt.n	800135a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	f003 021f 	and.w	r2, r3, #31
 8001348:	4906      	ldr	r1, [pc, #24]	; (8001364 <__NVIC_EnableIRQ+0x34>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	2001      	movs	r0, #1
 8001352:	fa00 f202 	lsl.w	r2, r0, r2
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	e000e100 	.word	0xe000e100

08001368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	2b00      	cmp	r3, #0
 800137a:	db0a      	blt.n	8001392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	490c      	ldr	r1, [pc, #48]	; (80013b4 <__NVIC_SetPriority+0x4c>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	0112      	lsls	r2, r2, #4
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	440b      	add	r3, r1
 800138c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001390:	e00a      	b.n	80013a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4908      	ldr	r1, [pc, #32]	; (80013b8 <__NVIC_SetPriority+0x50>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	3b04      	subs	r3, #4
 80013a0:	0112      	lsls	r2, r2, #4
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	440b      	add	r3, r1
 80013a6:	761a      	strb	r2, [r3, #24]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000e100 	.word	0xe000e100
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	; 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f1c3 0307 	rsb	r3, r3, #7
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	bf28      	it	cs
 80013da:	2304      	movcs	r3, #4
 80013dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3304      	adds	r3, #4
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d902      	bls.n	80013ec <NVIC_EncodePriority+0x30>
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3b03      	subs	r3, #3
 80013ea:	e000      	b.n	80013ee <NVIC_EncodePriority+0x32>
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	f04f 32ff 	mov.w	r2, #4294967295
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	43d9      	mvns	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	4313      	orrs	r3, r2
         );
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff4f 	bl	80012cc <__NVIC_SetPriorityGrouping>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001448:	f7ff ff64 	bl	8001314 <__NVIC_GetPriorityGrouping>
 800144c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	6978      	ldr	r0, [r7, #20]
 8001454:	f7ff ffb2 	bl	80013bc <NVIC_EncodePriority>
 8001458:	4602      	mov	r2, r0
 800145a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff81 	bl	8001368 <__NVIC_SetPriority>
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff57 	bl	8001330 <__NVIC_EnableIRQ>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e00e      	b.n	80014ba <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	795b      	ldrb	r3, [r3, #5]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d105      	bne.n	80014b2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff f827 	bl	8000500 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e043      	b.n	8001562 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <HAL_DMA_Init+0xa8>)
 80014e2:	4413      	add	r3, r2
 80014e4:	4a22      	ldr	r2, [pc, #136]	; (8001570 <HAL_DMA_Init+0xac>)
 80014e6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ea:	091b      	lsrs	r3, r3, #4
 80014ec:	009a      	lsls	r2, r3, #2
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a1f      	ldr	r2, [pc, #124]	; (8001574 <HAL_DMA_Init+0xb0>)
 80014f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2202      	movs	r2, #2
 80014fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800150e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001512:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800151c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001528:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001534:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	4313      	orrs	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	bffdfff8 	.word	0xbffdfff8
 8001570:	cccccccd 	.word	0xcccccccd
 8001574:	40020000 	.word	0x40020000

08001578 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	2204      	movs	r2, #4
 8001596:	409a      	lsls	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4013      	ands	r3, r2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d04f      	beq.n	8001640 <HAL_DMA_IRQHandler+0xc8>
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d04a      	beq.n	8001640 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0320 	and.w	r3, r3, #32
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d107      	bne.n	80015c8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0204 	bic.w	r2, r2, #4
 80015c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a66      	ldr	r2, [pc, #408]	; (8001768 <HAL_DMA_IRQHandler+0x1f0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d029      	beq.n	8001626 <HAL_DMA_IRQHandler+0xae>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a65      	ldr	r2, [pc, #404]	; (800176c <HAL_DMA_IRQHandler+0x1f4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d022      	beq.n	8001622 <HAL_DMA_IRQHandler+0xaa>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a63      	ldr	r2, [pc, #396]	; (8001770 <HAL_DMA_IRQHandler+0x1f8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d01a      	beq.n	800161c <HAL_DMA_IRQHandler+0xa4>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a62      	ldr	r2, [pc, #392]	; (8001774 <HAL_DMA_IRQHandler+0x1fc>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d012      	beq.n	8001616 <HAL_DMA_IRQHandler+0x9e>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a60      	ldr	r2, [pc, #384]	; (8001778 <HAL_DMA_IRQHandler+0x200>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00a      	beq.n	8001610 <HAL_DMA_IRQHandler+0x98>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a5f      	ldr	r2, [pc, #380]	; (800177c <HAL_DMA_IRQHandler+0x204>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d102      	bne.n	800160a <HAL_DMA_IRQHandler+0x92>
 8001604:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001608:	e00e      	b.n	8001628 <HAL_DMA_IRQHandler+0xb0>
 800160a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800160e:	e00b      	b.n	8001628 <HAL_DMA_IRQHandler+0xb0>
 8001610:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001614:	e008      	b.n	8001628 <HAL_DMA_IRQHandler+0xb0>
 8001616:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800161a:	e005      	b.n	8001628 <HAL_DMA_IRQHandler+0xb0>
 800161c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001620:	e002      	b.n	8001628 <HAL_DMA_IRQHandler+0xb0>
 8001622:	2340      	movs	r3, #64	; 0x40
 8001624:	e000      	b.n	8001628 <HAL_DMA_IRQHandler+0xb0>
 8001626:	2304      	movs	r3, #4
 8001628:	4a55      	ldr	r2, [pc, #340]	; (8001780 <HAL_DMA_IRQHandler+0x208>)
 800162a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 8094 	beq.w	800175e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800163e:	e08e      	b.n	800175e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	2202      	movs	r2, #2
 8001646:	409a      	lsls	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d056      	beq.n	80016fe <HAL_DMA_IRQHandler+0x186>
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d051      	beq.n	80016fe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0320 	and.w	r3, r3, #32
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10b      	bne.n	8001680 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 020a 	bic.w	r2, r2, #10
 8001676:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a38      	ldr	r2, [pc, #224]	; (8001768 <HAL_DMA_IRQHandler+0x1f0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d029      	beq.n	80016de <HAL_DMA_IRQHandler+0x166>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a37      	ldr	r2, [pc, #220]	; (800176c <HAL_DMA_IRQHandler+0x1f4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d022      	beq.n	80016da <HAL_DMA_IRQHandler+0x162>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a35      	ldr	r2, [pc, #212]	; (8001770 <HAL_DMA_IRQHandler+0x1f8>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d01a      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x15c>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a34      	ldr	r2, [pc, #208]	; (8001774 <HAL_DMA_IRQHandler+0x1fc>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d012      	beq.n	80016ce <HAL_DMA_IRQHandler+0x156>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a32      	ldr	r2, [pc, #200]	; (8001778 <HAL_DMA_IRQHandler+0x200>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d00a      	beq.n	80016c8 <HAL_DMA_IRQHandler+0x150>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a31      	ldr	r2, [pc, #196]	; (800177c <HAL_DMA_IRQHandler+0x204>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d102      	bne.n	80016c2 <HAL_DMA_IRQHandler+0x14a>
 80016bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016c0:	e00e      	b.n	80016e0 <HAL_DMA_IRQHandler+0x168>
 80016c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016c6:	e00b      	b.n	80016e0 <HAL_DMA_IRQHandler+0x168>
 80016c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016cc:	e008      	b.n	80016e0 <HAL_DMA_IRQHandler+0x168>
 80016ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d2:	e005      	b.n	80016e0 <HAL_DMA_IRQHandler+0x168>
 80016d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d8:	e002      	b.n	80016e0 <HAL_DMA_IRQHandler+0x168>
 80016da:	2320      	movs	r3, #32
 80016dc:	e000      	b.n	80016e0 <HAL_DMA_IRQHandler+0x168>
 80016de:	2302      	movs	r3, #2
 80016e0:	4a27      	ldr	r2, [pc, #156]	; (8001780 <HAL_DMA_IRQHandler+0x208>)
 80016e2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d034      	beq.n	800175e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016fc:	e02f      	b.n	800175e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	2208      	movs	r2, #8
 8001704:	409a      	lsls	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4013      	ands	r3, r2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d028      	beq.n	8001760 <HAL_DMA_IRQHandler+0x1e8>
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	2b00      	cmp	r3, #0
 8001716:	d023      	beq.n	8001760 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 020e 	bic.w	r2, r2, #14
 8001726:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001730:	2101      	movs	r1, #1
 8001732:	fa01 f202 	lsl.w	r2, r1, r2
 8001736:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	2b00      	cmp	r3, #0
 8001754:	d004      	beq.n	8001760 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	4798      	blx	r3
    }
  }
  return;
 800175e:	bf00      	nop
 8001760:	bf00      	nop
}
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40020008 	.word	0x40020008
 800176c:	4002001c 	.word	0x4002001c
 8001770:	40020030 	.word	0x40020030
 8001774:	40020044 	.word	0x40020044
 8001778:	40020058 	.word	0x40020058
 800177c:	4002006c 	.word	0x4002006c
 8001780:	40020000 	.word	0x40020000

08001784 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001784:	b480      	push	{r7}
 8001786:	b08b      	sub	sp, #44	; 0x2c
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800178e:	2300      	movs	r3, #0
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001792:	2300      	movs	r3, #0
 8001794:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001796:	e169      	b.n	8001a6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001798:	2201      	movs	r2, #1
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	f040 8158 	bne.w	8001a66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4a9a      	ldr	r2, [pc, #616]	; (8001a24 <HAL_GPIO_Init+0x2a0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d05e      	beq.n	800187e <HAL_GPIO_Init+0xfa>
 80017c0:	4a98      	ldr	r2, [pc, #608]	; (8001a24 <HAL_GPIO_Init+0x2a0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d875      	bhi.n	80018b2 <HAL_GPIO_Init+0x12e>
 80017c6:	4a98      	ldr	r2, [pc, #608]	; (8001a28 <HAL_GPIO_Init+0x2a4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d058      	beq.n	800187e <HAL_GPIO_Init+0xfa>
 80017cc:	4a96      	ldr	r2, [pc, #600]	; (8001a28 <HAL_GPIO_Init+0x2a4>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d86f      	bhi.n	80018b2 <HAL_GPIO_Init+0x12e>
 80017d2:	4a96      	ldr	r2, [pc, #600]	; (8001a2c <HAL_GPIO_Init+0x2a8>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d052      	beq.n	800187e <HAL_GPIO_Init+0xfa>
 80017d8:	4a94      	ldr	r2, [pc, #592]	; (8001a2c <HAL_GPIO_Init+0x2a8>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d869      	bhi.n	80018b2 <HAL_GPIO_Init+0x12e>
 80017de:	4a94      	ldr	r2, [pc, #592]	; (8001a30 <HAL_GPIO_Init+0x2ac>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d04c      	beq.n	800187e <HAL_GPIO_Init+0xfa>
 80017e4:	4a92      	ldr	r2, [pc, #584]	; (8001a30 <HAL_GPIO_Init+0x2ac>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d863      	bhi.n	80018b2 <HAL_GPIO_Init+0x12e>
 80017ea:	4a92      	ldr	r2, [pc, #584]	; (8001a34 <HAL_GPIO_Init+0x2b0>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d046      	beq.n	800187e <HAL_GPIO_Init+0xfa>
 80017f0:	4a90      	ldr	r2, [pc, #576]	; (8001a34 <HAL_GPIO_Init+0x2b0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d85d      	bhi.n	80018b2 <HAL_GPIO_Init+0x12e>
 80017f6:	2b12      	cmp	r3, #18
 80017f8:	d82a      	bhi.n	8001850 <HAL_GPIO_Init+0xcc>
 80017fa:	2b12      	cmp	r3, #18
 80017fc:	d859      	bhi.n	80018b2 <HAL_GPIO_Init+0x12e>
 80017fe:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <HAL_GPIO_Init+0x80>)
 8001800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001804:	0800187f 	.word	0x0800187f
 8001808:	08001859 	.word	0x08001859
 800180c:	0800186b 	.word	0x0800186b
 8001810:	080018ad 	.word	0x080018ad
 8001814:	080018b3 	.word	0x080018b3
 8001818:	080018b3 	.word	0x080018b3
 800181c:	080018b3 	.word	0x080018b3
 8001820:	080018b3 	.word	0x080018b3
 8001824:	080018b3 	.word	0x080018b3
 8001828:	080018b3 	.word	0x080018b3
 800182c:	080018b3 	.word	0x080018b3
 8001830:	080018b3 	.word	0x080018b3
 8001834:	080018b3 	.word	0x080018b3
 8001838:	080018b3 	.word	0x080018b3
 800183c:	080018b3 	.word	0x080018b3
 8001840:	080018b3 	.word	0x080018b3
 8001844:	080018b3 	.word	0x080018b3
 8001848:	08001861 	.word	0x08001861
 800184c:	08001875 	.word	0x08001875
 8001850:	4a79      	ldr	r2, [pc, #484]	; (8001a38 <HAL_GPIO_Init+0x2b4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d013      	beq.n	800187e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001856:	e02c      	b.n	80018b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	623b      	str	r3, [r7, #32]
          break;
 800185e:	e029      	b.n	80018b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	3304      	adds	r3, #4
 8001866:	623b      	str	r3, [r7, #32]
          break;
 8001868:	e024      	b.n	80018b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	3308      	adds	r3, #8
 8001870:	623b      	str	r3, [r7, #32]
          break;
 8001872:	e01f      	b.n	80018b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	330c      	adds	r3, #12
 800187a:	623b      	str	r3, [r7, #32]
          break;
 800187c:	e01a      	b.n	80018b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d102      	bne.n	800188c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001886:	2304      	movs	r3, #4
 8001888:	623b      	str	r3, [r7, #32]
          break;
 800188a:	e013      	b.n	80018b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d105      	bne.n	80018a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001894:	2308      	movs	r3, #8
 8001896:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69fa      	ldr	r2, [r7, #28]
 800189c:	611a      	str	r2, [r3, #16]
          break;
 800189e:	e009      	b.n	80018b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a0:	2308      	movs	r3, #8
 80018a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	615a      	str	r2, [r3, #20]
          break;
 80018aa:	e003      	b.n	80018b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018ac:	2300      	movs	r3, #0
 80018ae:	623b      	str	r3, [r7, #32]
          break;
 80018b0:	e000      	b.n	80018b4 <HAL_GPIO_Init+0x130>
          break;
 80018b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	2bff      	cmp	r3, #255	; 0xff
 80018b8:	d801      	bhi.n	80018be <HAL_GPIO_Init+0x13a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	e001      	b.n	80018c2 <HAL_GPIO_Init+0x13e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3304      	adds	r3, #4
 80018c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	2bff      	cmp	r3, #255	; 0xff
 80018c8:	d802      	bhi.n	80018d0 <HAL_GPIO_Init+0x14c>
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	e002      	b.n	80018d6 <HAL_GPIO_Init+0x152>
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	3b08      	subs	r3, #8
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	210f      	movs	r1, #15
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	401a      	ands	r2, r3
 80018e8:	6a39      	ldr	r1, [r7, #32]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	fa01 f303 	lsl.w	r3, r1, r3
 80018f0:	431a      	orrs	r2, r3
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 80b1 	beq.w	8001a66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001904:	4b4d      	ldr	r3, [pc, #308]	; (8001a3c <HAL_GPIO_Init+0x2b8>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a4c      	ldr	r2, [pc, #304]	; (8001a3c <HAL_GPIO_Init+0x2b8>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b4a      	ldr	r3, [pc, #296]	; (8001a3c <HAL_GPIO_Init+0x2b8>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800191c:	4a48      	ldr	r2, [pc, #288]	; (8001a40 <HAL_GPIO_Init+0x2bc>)
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	3302      	adds	r3, #2
 8001924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001928:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	220f      	movs	r2, #15
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	4013      	ands	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a40      	ldr	r2, [pc, #256]	; (8001a44 <HAL_GPIO_Init+0x2c0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d013      	beq.n	8001970 <HAL_GPIO_Init+0x1ec>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a3f      	ldr	r2, [pc, #252]	; (8001a48 <HAL_GPIO_Init+0x2c4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d00d      	beq.n	800196c <HAL_GPIO_Init+0x1e8>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a3e      	ldr	r2, [pc, #248]	; (8001a4c <HAL_GPIO_Init+0x2c8>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d007      	beq.n	8001968 <HAL_GPIO_Init+0x1e4>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a3d      	ldr	r2, [pc, #244]	; (8001a50 <HAL_GPIO_Init+0x2cc>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d101      	bne.n	8001964 <HAL_GPIO_Init+0x1e0>
 8001960:	2303      	movs	r3, #3
 8001962:	e006      	b.n	8001972 <HAL_GPIO_Init+0x1ee>
 8001964:	2304      	movs	r3, #4
 8001966:	e004      	b.n	8001972 <HAL_GPIO_Init+0x1ee>
 8001968:	2302      	movs	r3, #2
 800196a:	e002      	b.n	8001972 <HAL_GPIO_Init+0x1ee>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <HAL_GPIO_Init+0x1ee>
 8001970:	2300      	movs	r3, #0
 8001972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001974:	f002 0203 	and.w	r2, r2, #3
 8001978:	0092      	lsls	r2, r2, #2
 800197a:	4093      	lsls	r3, r2
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4313      	orrs	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001982:	492f      	ldr	r1, [pc, #188]	; (8001a40 <HAL_GPIO_Init+0x2bc>)
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	3302      	adds	r3, #2
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d006      	beq.n	80019aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800199c:	4b2d      	ldr	r3, [pc, #180]	; (8001a54 <HAL_GPIO_Init+0x2d0>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	492c      	ldr	r1, [pc, #176]	; (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	600b      	str	r3, [r1, #0]
 80019a8:	e006      	b.n	80019b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019aa:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	4928      	ldr	r1, [pc, #160]	; (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d006      	beq.n	80019d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019c4:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	4922      	ldr	r1, [pc, #136]	; (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]
 80019d0:	e006      	b.n	80019e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019d2:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	43db      	mvns	r3, r3
 80019da:	491e      	ldr	r1, [pc, #120]	; (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019dc:	4013      	ands	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d006      	beq.n	80019fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019ec:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	4918      	ldr	r1, [pc, #96]	; (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	608b      	str	r3, [r1, #8]
 80019f8:	e006      	b.n	8001a08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019fa:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	4914      	ldr	r1, [pc, #80]	; (8001a54 <HAL_GPIO_Init+0x2d0>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d021      	beq.n	8001a58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_GPIO_Init+0x2d0>)
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	490e      	ldr	r1, [pc, #56]	; (8001a54 <HAL_GPIO_Init+0x2d0>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	60cb      	str	r3, [r1, #12]
 8001a20:	e021      	b.n	8001a66 <HAL_GPIO_Init+0x2e2>
 8001a22:	bf00      	nop
 8001a24:	10320000 	.word	0x10320000
 8001a28:	10310000 	.word	0x10310000
 8001a2c:	10220000 	.word	0x10220000
 8001a30:	10210000 	.word	0x10210000
 8001a34:	10120000 	.word	0x10120000
 8001a38:	10110000 	.word	0x10110000
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40010000 	.word	0x40010000
 8001a44:	40010800 	.word	0x40010800
 8001a48:	40010c00 	.word	0x40010c00
 8001a4c:	40011000 	.word	0x40011000
 8001a50:	40011400 	.word	0x40011400
 8001a54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_GPIO_Init+0x304>)
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	4909      	ldr	r1, [pc, #36]	; (8001a88 <HAL_GPIO_Init+0x304>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	3301      	adds	r3, #1
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	fa22 f303 	lsr.w	r3, r2, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f47f ae8e 	bne.w	8001798 <HAL_GPIO_Init+0x14>
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	372c      	adds	r7, #44	; 0x2c
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	40010400 	.word	0x40010400

08001a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a9c:	787b      	ldrb	r3, [r7, #1]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa2:	887a      	ldrh	r2, [r7, #2]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aa8:	e003      	b.n	8001ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aaa:	887b      	ldrh	r3, [r7, #2]
 8001aac:	041a      	lsls	r2, r3, #16
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	611a      	str	r2, [r3, #16]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	041a      	lsls	r2, r3, #16
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	43d9      	mvns	r1, r3
 8001ada:	887b      	ldrh	r3, [r7, #2]
 8001adc:	400b      	ands	r3, r1
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	611a      	str	r2, [r3, #16]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
	...

08001af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e272      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 8087 	beq.w	8001c1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b10:	4b92      	ldr	r3, [pc, #584]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d00c      	beq.n	8001b36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b1c:	4b8f      	ldr	r3, [pc, #572]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 030c 	and.w	r3, r3, #12
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d112      	bne.n	8001b4e <HAL_RCC_OscConfig+0x5e>
 8001b28:	4b8c      	ldr	r3, [pc, #560]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b34:	d10b      	bne.n	8001b4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b36:	4b89      	ldr	r3, [pc, #548]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d06c      	beq.n	8001c1c <HAL_RCC_OscConfig+0x12c>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d168      	bne.n	8001c1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e24c      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x76>
 8001b58:	4b80      	ldr	r3, [pc, #512]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a7f      	ldr	r2, [pc, #508]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	e02e      	b.n	8001bc4 <HAL_RCC_OscConfig+0xd4>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x98>
 8001b6e:	4b7b      	ldr	r3, [pc, #492]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a7a      	ldr	r2, [pc, #488]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b78      	ldr	r3, [pc, #480]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a77      	ldr	r2, [pc, #476]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e01d      	b.n	8001bc4 <HAL_RCC_OscConfig+0xd4>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b90:	d10c      	bne.n	8001bac <HAL_RCC_OscConfig+0xbc>
 8001b92:	4b72      	ldr	r3, [pc, #456]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a71      	ldr	r2, [pc, #452]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b6f      	ldr	r3, [pc, #444]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a6e      	ldr	r2, [pc, #440]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	e00b      	b.n	8001bc4 <HAL_RCC_OscConfig+0xd4>
 8001bac:	4b6b      	ldr	r3, [pc, #428]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a6a      	ldr	r2, [pc, #424]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b68      	ldr	r3, [pc, #416]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a67      	ldr	r2, [pc, #412]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d013      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff f884 	bl	8000cd8 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff f880 	bl	8000cd8 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	; 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e200      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	4b5d      	ldr	r3, [pc, #372]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0xe4>
 8001bf2:	e014      	b.n	8001c1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff f870 	bl	8000cd8 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7ff f86c 	bl	8000cd8 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	; 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e1ec      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0e:	4b53      	ldr	r3, [pc, #332]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x10c>
 8001c1a:	e000      	b.n	8001c1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d063      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c2a:	4b4c      	ldr	r3, [pc, #304]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00b      	beq.n	8001c4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c36:	4b49      	ldr	r3, [pc, #292]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d11c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x18c>
 8001c42:	4b46      	ldr	r3, [pc, #280]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d116      	bne.n	8001c7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4e:	4b43      	ldr	r3, [pc, #268]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d005      	beq.n	8001c66 <HAL_RCC_OscConfig+0x176>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d001      	beq.n	8001c66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e1c0      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c66:	4b3d      	ldr	r3, [pc, #244]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4939      	ldr	r1, [pc, #228]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7a:	e03a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d020      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c84:	4b36      	ldr	r3, [pc, #216]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7ff f825 	bl	8000cd8 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c92:	f7ff f821 	bl	8000cd8 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e1a1      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca4:	4b2d      	ldr	r3, [pc, #180]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4927      	ldr	r1, [pc, #156]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	600b      	str	r3, [r1, #0]
 8001cc4:	e015      	b.n	8001cf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc6:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f804 	bl	8000cd8 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd4:	f7ff f800 	bl	8000cd8 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e180      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d03a      	beq.n	8001d74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d019      	beq.n	8001d3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d06:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_RCC_OscConfig+0x274>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0c:	f7fe ffe4 	bl	8000cd8 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d14:	f7fe ffe0 	bl	8000cd8 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e160      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f000 fad6 	bl	80022e4 <RCC_Delay>
 8001d38:	e01c      	b.n	8001d74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_RCC_OscConfig+0x274>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d40:	f7fe ffca 	bl	8000cd8 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d46:	e00f      	b.n	8001d68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d48:	f7fe ffc6 	bl	8000cd8 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d908      	bls.n	8001d68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e146      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	42420000 	.word	0x42420000
 8001d64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d68:	4b92      	ldr	r3, [pc, #584]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1e9      	bne.n	8001d48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80a6 	beq.w	8001ece <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d86:	4b8b      	ldr	r3, [pc, #556]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10d      	bne.n	8001dae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	4b88      	ldr	r3, [pc, #544]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	4a87      	ldr	r2, [pc, #540]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	61d3      	str	r3, [r2, #28]
 8001d9e:	4b85      	ldr	r3, [pc, #532]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001daa:	2301      	movs	r3, #1
 8001dac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dae:	4b82      	ldr	r3, [pc, #520]	; (8001fb8 <HAL_RCC_OscConfig+0x4c8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d118      	bne.n	8001dec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dba:	4b7f      	ldr	r3, [pc, #508]	; (8001fb8 <HAL_RCC_OscConfig+0x4c8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a7e      	ldr	r2, [pc, #504]	; (8001fb8 <HAL_RCC_OscConfig+0x4c8>)
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc6:	f7fe ff87 	bl	8000cd8 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dce:	f7fe ff83 	bl	8000cd8 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b64      	cmp	r3, #100	; 0x64
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e103      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	4b75      	ldr	r3, [pc, #468]	; (8001fb8 <HAL_RCC_OscConfig+0x4c8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d106      	bne.n	8001e02 <HAL_RCC_OscConfig+0x312>
 8001df4:	4b6f      	ldr	r3, [pc, #444]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4a6e      	ldr	r2, [pc, #440]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6213      	str	r3, [r2, #32]
 8001e00:	e02d      	b.n	8001e5e <HAL_RCC_OscConfig+0x36e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x334>
 8001e0a:	4b6a      	ldr	r3, [pc, #424]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	4a69      	ldr	r2, [pc, #420]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	6213      	str	r3, [r2, #32]
 8001e16:	4b67      	ldr	r3, [pc, #412]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	4a66      	ldr	r2, [pc, #408]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	f023 0304 	bic.w	r3, r3, #4
 8001e20:	6213      	str	r3, [r2, #32]
 8001e22:	e01c      	b.n	8001e5e <HAL_RCC_OscConfig+0x36e>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	d10c      	bne.n	8001e46 <HAL_RCC_OscConfig+0x356>
 8001e2c:	4b61      	ldr	r3, [pc, #388]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	4a60      	ldr	r2, [pc, #384]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e32:	f043 0304 	orr.w	r3, r3, #4
 8001e36:	6213      	str	r3, [r2, #32]
 8001e38:	4b5e      	ldr	r3, [pc, #376]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	4a5d      	ldr	r2, [pc, #372]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	6213      	str	r3, [r2, #32]
 8001e44:	e00b      	b.n	8001e5e <HAL_RCC_OscConfig+0x36e>
 8001e46:	4b5b      	ldr	r3, [pc, #364]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	4a5a      	ldr	r2, [pc, #360]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	f023 0301 	bic.w	r3, r3, #1
 8001e50:	6213      	str	r3, [r2, #32]
 8001e52:	4b58      	ldr	r3, [pc, #352]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	4a57      	ldr	r2, [pc, #348]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	f023 0304 	bic.w	r3, r3, #4
 8001e5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d015      	beq.n	8001e92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e66:	f7fe ff37 	bl	8000cd8 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6c:	e00a      	b.n	8001e84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6e:	f7fe ff33 	bl	8000cd8 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e0b1      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e84:	4b4b      	ldr	r3, [pc, #300]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0ee      	beq.n	8001e6e <HAL_RCC_OscConfig+0x37e>
 8001e90:	e014      	b.n	8001ebc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e92:	f7fe ff21 	bl	8000cd8 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e98:	e00a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9a:	f7fe ff1d 	bl	8000cd8 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e09b      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb0:	4b40      	ldr	r3, [pc, #256]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1ee      	bne.n	8001e9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ebc:	7dfb      	ldrb	r3, [r7, #23]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d105      	bne.n	8001ece <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec2:	4b3c      	ldr	r3, [pc, #240]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	4a3b      	ldr	r2, [pc, #236]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8087 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ed8:	4b36      	ldr	r3, [pc, #216]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 030c 	and.w	r3, r3, #12
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d061      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d146      	bne.n	8001f7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eec:	4b33      	ldr	r3, [pc, #204]	; (8001fbc <HAL_RCC_OscConfig+0x4cc>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef2:	f7fe fef1 	bl	8000cd8 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efa:	f7fe feed 	bl	8000cd8 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e06d      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0c:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f0      	bne.n	8001efa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f20:	d108      	bne.n	8001f34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f22:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f26:	f023 020f 	bic.w	r2, r3, #15
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	4921      	ldr	r1, [pc, #132]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f34:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a19      	ldr	r1, [r3, #32]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	430b      	orrs	r3, r1
 8001f46:	491b      	ldr	r1, [pc, #108]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <HAL_RCC_OscConfig+0x4cc>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7fe fec1 	bl	8000cd8 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5a:	f7fe febd 	bl	8000cd8 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e03d      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x46a>
 8001f78:	e035      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_RCC_OscConfig+0x4cc>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7fe feaa 	bl	8000cd8 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f88:	f7fe fea6 	bl	8000cd8 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e026      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x498>
 8001fa6:	e01e      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e019      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40007000 	.word	0x40007000
 8001fbc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_RCC_OscConfig+0x500>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d001      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000

08001ff4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0a0      	b.n	800214a <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d020      	beq.n	8002056 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002020:	4b4c      	ldr	r3, [pc, #304]	; (8002154 <HAL_RCC_ClockConfig+0x160>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4a4b      	ldr	r2, [pc, #300]	; (8002154 <HAL_RCC_ClockConfig+0x160>)
 8002026:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800202a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002038:	4b46      	ldr	r3, [pc, #280]	; (8002154 <HAL_RCC_ClockConfig+0x160>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4a45      	ldr	r2, [pc, #276]	; (8002154 <HAL_RCC_ClockConfig+0x160>)
 800203e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002042:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002044:	4b43      	ldr	r3, [pc, #268]	; (8002154 <HAL_RCC_ClockConfig+0x160>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4940      	ldr	r1, [pc, #256]	; (8002154 <HAL_RCC_ClockConfig+0x160>)
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d040      	beq.n	80020e4 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d107      	bne.n	800207a <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	4b3a      	ldr	r3, [pc, #232]	; (8002154 <HAL_RCC_ClockConfig+0x160>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d115      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e067      	b.n	800214a <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d107      	bne.n	8002092 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002082:	4b34      	ldr	r3, [pc, #208]	; (8002154 <HAL_RCC_ClockConfig+0x160>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d109      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e05b      	b.n	800214a <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002092:	4b30      	ldr	r3, [pc, #192]	; (8002154 <HAL_RCC_ClockConfig+0x160>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e053      	b.n	800214a <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020a2:	4b2c      	ldr	r3, [pc, #176]	; (8002154 <HAL_RCC_ClockConfig+0x160>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f023 0203 	bic.w	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4929      	ldr	r1, [pc, #164]	; (8002154 <HAL_RCC_ClockConfig+0x160>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b4:	f7fe fe10 	bl	8000cd8 <HAL_GetTick>
 80020b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ba:	e00a      	b.n	80020d2 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020bc:	f7fe fe0c 	bl	8000cd8 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e03b      	b.n	800214a <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <HAL_RCC_ClockConfig+0x160>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 020c 	and.w	r2, r3, #12
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d1eb      	bne.n	80020bc <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020f0:	4b18      	ldr	r3, [pc, #96]	; (8002154 <HAL_RCC_ClockConfig+0x160>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4915      	ldr	r1, [pc, #84]	; (8002154 <HAL_RCC_ClockConfig+0x160>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d009      	beq.n	8002122 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_RCC_ClockConfig+0x160>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	490d      	ldr	r1, [pc, #52]	; (8002154 <HAL_RCC_ClockConfig+0x160>)
 800211e:	4313      	orrs	r3, r2
 8002120:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002122:	f000 f81f 	bl	8002164 <HAL_RCC_GetSysClockFreq>
 8002126:	4602      	mov	r2, r0
 8002128:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <HAL_RCC_ClockConfig+0x160>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	4909      	ldr	r1, [pc, #36]	; (8002158 <HAL_RCC_ClockConfig+0x164>)
 8002134:	5ccb      	ldrb	r3, [r1, r3]
 8002136:	fa22 f303 	lsr.w	r3, r2, r3
 800213a:	4a08      	ldr	r2, [pc, #32]	; (800215c <HAL_RCC_ClockConfig+0x168>)
 800213c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_RCC_ClockConfig+0x16c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fbe2 	bl	800090c <HAL_InitTick>

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
 8002158:	08004220 	.word	0x08004220
 800215c:	20000000 	.word	0x20000000
 8002160:	20000004 	.word	0x20000004

08002164 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002164:	b490      	push	{r4, r7}
 8002166:	b08e      	sub	sp, #56	; 0x38
 8002168:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800216a:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <HAL_RCC_GetSysClockFreq+0xb0>)
 800216c:	f107 0414 	add.w	r4, r7, #20
 8002170:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002172:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002176:	4b28      	ldr	r3, [pc, #160]	; (8002218 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002178:	1d3c      	adds	r4, r7, #4
 800217a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800217c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002184:	2300      	movs	r3, #0
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28
 8002188:	2300      	movs	r3, #0
 800218a:	637b      	str	r3, [r7, #52]	; 0x34
 800218c:	2300      	movs	r3, #0
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002194:	4b21      	ldr	r3, [pc, #132]	; (800221c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800219a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d002      	beq.n	80021aa <HAL_RCC_GetSysClockFreq+0x46>
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d003      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x4c>
 80021a8:	e02a      	b.n	8002200 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021aa:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021ae:	e02a      	b.n	8002206 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b2:	0c9b      	lsrs	r3, r3, #18
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	3338      	adds	r3, #56	; 0x38
 80021ba:	443b      	add	r3, r7
 80021bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d011      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80021cc:	4b13      	ldr	r3, [pc, #76]	; (800221c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	3338      	adds	r3, #56	; 0x38
 80021d6:	443b      	add	r3, r7
 80021d8:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	4a0f      	ldr	r2, [pc, #60]	; (8002220 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021e2:	fb03 f202 	mul.w	r2, r3, r2
 80021e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ec:	637b      	str	r3, [r7, #52]	; 0x34
 80021ee:	e004      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	4a0c      	ldr	r2, [pc, #48]	; (8002224 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021f4:	fb02 f303 	mul.w	r3, r2, r3
 80021f8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 80021fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021fe:	e002      	b.n	8002206 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002200:	4b07      	ldr	r3, [pc, #28]	; (8002220 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002202:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002208:	4618      	mov	r0, r3
 800220a:	3738      	adds	r7, #56	; 0x38
 800220c:	46bd      	mov	sp, r7
 800220e:	bc90      	pop	{r4, r7}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	080041f8 	.word	0x080041f8
 8002218:	08004208 	.word	0x08004208
 800221c:	40021000 	.word	0x40021000
 8002220:	007a1200 	.word	0x007a1200
 8002224:	003d0900 	.word	0x003d0900

08002228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800222c:	4b02      	ldr	r3, [pc, #8]	; (8002238 <HAL_RCC_GetHCLKFreq+0x10>)
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	20000000 	.word	0x20000000

0800223c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002240:	f7ff fff2 	bl	8002228 <HAL_RCC_GetHCLKFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	0a1b      	lsrs	r3, r3, #8
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	4903      	ldr	r1, [pc, #12]	; (8002260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40021000 	.word	0x40021000
 8002260:	08004230 	.word	0x08004230

08002264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002268:	f7ff ffde 	bl	8002228 <HAL_RCC_GetHCLKFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	0adb      	lsrs	r3, r3, #11
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	4903      	ldr	r1, [pc, #12]	; (8002288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40021000 	.word	0x40021000
 8002288:	08004230 	.word	0x08004230

0800228c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	220f      	movs	r2, #15
 800229a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800229c:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <HAL_RCC_GetClockConfig+0x54>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0203 	and.w	r2, r3, #3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80022a8:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <HAL_RCC_GetClockConfig+0x54>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80022b4:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_RCC_GetClockConfig+0x54>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80022c0:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <HAL_RCC_GetClockConfig+0x54>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	08db      	lsrs	r3, r3, #3
 80022c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	611a      	str	r2, [r3, #16]
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
#endif
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000

080022e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <RCC_Delay+0x34>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0a      	ldr	r2, [pc, #40]	; (800231c <RCC_Delay+0x38>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	0a5b      	lsrs	r3, r3, #9
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	fb02 f303 	mul.w	r3, r2, r3
 80022fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002300:	bf00      	nop
  }
  while (Delay --);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1e5a      	subs	r2, r3, #1
 8002306:	60fa      	str	r2, [r7, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f9      	bne.n	8002300 <RCC_Delay+0x1c>
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	20000000 	.word	0x20000000
 800231c:	10624dd3 	.word	0x10624dd3

08002320 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d07d      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800233c:	2300      	movs	r3, #0
 800233e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002340:	4b47      	ldr	r3, [pc, #284]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10d      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234c:	4b44      	ldr	r3, [pc, #272]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	4a43      	ldr	r2, [pc, #268]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002356:	61d3      	str	r3, [r2, #28]
 8002358:	4b41      	ldr	r3, [pc, #260]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002364:	2301      	movs	r3, #1
 8002366:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002368:	4b3e      	ldr	r3, [pc, #248]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002370:	2b00      	cmp	r3, #0
 8002372:	d118      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002374:	4b3b      	ldr	r3, [pc, #236]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a3a      	ldr	r2, [pc, #232]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800237a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002380:	f7fe fcaa 	bl	8000cd8 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002386:	e008      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002388:	f7fe fca6 	bl	8000cd8 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b64      	cmp	r3, #100	; 0x64
 8002394:	d901      	bls.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e05e      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x138>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239a:	4b32      	ldr	r3, [pc, #200]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023a6:	4b2e      	ldr	r3, [pc, #184]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d02e      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d027      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023c4:	4b26      	ldr	r3, [pc, #152]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023ce:	4b26      	ldr	r3, [pc, #152]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023d4:	4b24      	ldr	r3, [pc, #144]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023da:	4a21      	ldr	r2, [pc, #132]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d014      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ea:	f7fe fc75 	bl	8000cd8 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f0:	e00a      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7fe fc71 	bl	8000cd8 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e027      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x138>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002408:	4b15      	ldr	r3, [pc, #84]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0ee      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002414:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	490f      	ldr	r1, [pc, #60]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002422:	4313      	orrs	r3, r2
 8002424:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002426:	7dfb      	ldrb	r3, [r7, #23]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d105      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002436:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	4903      	ldr	r1, [pc, #12]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002452:	4313      	orrs	r3, r2
 8002454:	604b      	str	r3, [r1, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40021000 	.word	0x40021000
 8002464:	40007000 	.word	0x40007000
 8002468:	42420440 	.word	0x42420440

0800246c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e041      	b.n	8002502 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f839 	bl	800250a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3304      	adds	r3, #4
 80024a8:	4619      	mov	r1, r3
 80024aa:	4610      	mov	r0, r2
 80024ac:	f000 f9bc 	bl	8002828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b01      	cmp	r3, #1
 800252e:	d001      	beq.n	8002534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e03f      	b.n	80025b4 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1b      	ldr	r2, [pc, #108]	; (80025c0 <HAL_TIM_Base_Start_IT+0xa4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d013      	beq.n	800257e <HAL_TIM_Base_Start_IT+0x62>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800255e:	d00e      	beq.n	800257e <HAL_TIM_Base_Start_IT+0x62>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a17      	ldr	r2, [pc, #92]	; (80025c4 <HAL_TIM_Base_Start_IT+0xa8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d009      	beq.n	800257e <HAL_TIM_Base_Start_IT+0x62>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a16      	ldr	r2, [pc, #88]	; (80025c8 <HAL_TIM_Base_Start_IT+0xac>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d004      	beq.n	800257e <HAL_TIM_Base_Start_IT+0x62>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a14      	ldr	r2, [pc, #80]	; (80025cc <HAL_TIM_Base_Start_IT+0xb0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d111      	bne.n	80025a2 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b06      	cmp	r3, #6
 800258e:	d010      	beq.n	80025b2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a0:	e007      	b.n	80025b2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40012c00 	.word	0x40012c00
 80025c4:	40000400 	.word	0x40000400
 80025c8:	40000800 	.word	0x40000800
 80025cc:	40014000 	.word	0x40014000

080025d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d122      	bne.n	800262c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d11b      	bne.n	800262c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f06f 0202 	mvn.w	r2, #2
 80025fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f8ed 	bl	80027f2 <HAL_TIM_IC_CaptureCallback>
 8002618:	e005      	b.n	8002626 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f8e0 	bl	80027e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f8ef 	bl	8002804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	2b04      	cmp	r3, #4
 8002638:	d122      	bne.n	8002680 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b04      	cmp	r3, #4
 8002646:	d11b      	bne.n	8002680 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0204 	mvn.w	r2, #4
 8002650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2202      	movs	r2, #2
 8002656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f8c3 	bl	80027f2 <HAL_TIM_IC_CaptureCallback>
 800266c:	e005      	b.n	800267a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f8b6 	bl	80027e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f8c5 	bl	8002804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b08      	cmp	r3, #8
 800268c:	d122      	bne.n	80026d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b08      	cmp	r3, #8
 800269a:	d11b      	bne.n	80026d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f06f 0208 	mvn.w	r2, #8
 80026a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2204      	movs	r2, #4
 80026aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f899 	bl	80027f2 <HAL_TIM_IC_CaptureCallback>
 80026c0:	e005      	b.n	80026ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f88c 	bl	80027e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f89b 	bl	8002804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f003 0310 	and.w	r3, r3, #16
 80026de:	2b10      	cmp	r3, #16
 80026e0:	d122      	bne.n	8002728 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b10      	cmp	r3, #16
 80026ee:	d11b      	bne.n	8002728 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f06f 0210 	mvn.w	r2, #16
 80026f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2208      	movs	r2, #8
 80026fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f86f 	bl	80027f2 <HAL_TIM_IC_CaptureCallback>
 8002714:	e005      	b.n	8002722 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f862 	bl	80027e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f871 	bl	8002804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b01      	cmp	r3, #1
 8002734:	d10e      	bne.n	8002754 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b01      	cmp	r3, #1
 8002742:	d107      	bne.n	8002754 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0201 	mvn.w	r2, #1
 800274c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7fe f88c 	bl	800086c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275e:	2b80      	cmp	r3, #128	; 0x80
 8002760:	d10e      	bne.n	8002780 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276c:	2b80      	cmp	r3, #128	; 0x80
 800276e:	d107      	bne.n	8002780 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f8dd 	bl	800293a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278a:	2b40      	cmp	r3, #64	; 0x40
 800278c:	d10e      	bne.n	80027ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002798:	2b40      	cmp	r3, #64	; 0x40
 800279a:	d107      	bne.n	80027ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f835 	bl	8002816 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f003 0320 	and.w	r3, r3, #32
 80027b6:	2b20      	cmp	r3, #32
 80027b8:	d10e      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	d107      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0220 	mvn.w	r2, #32
 80027d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f8a8 	bl	8002928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr

08002816 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a35      	ldr	r2, [pc, #212]	; (8002910 <TIM_Base_SetConfig+0xe8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00b      	beq.n	8002858 <TIM_Base_SetConfig+0x30>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002846:	d007      	beq.n	8002858 <TIM_Base_SetConfig+0x30>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a32      	ldr	r2, [pc, #200]	; (8002914 <TIM_Base_SetConfig+0xec>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d003      	beq.n	8002858 <TIM_Base_SetConfig+0x30>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a31      	ldr	r2, [pc, #196]	; (8002918 <TIM_Base_SetConfig+0xf0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d108      	bne.n	800286a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a28      	ldr	r2, [pc, #160]	; (8002910 <TIM_Base_SetConfig+0xe8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d017      	beq.n	80028a2 <TIM_Base_SetConfig+0x7a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002878:	d013      	beq.n	80028a2 <TIM_Base_SetConfig+0x7a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a25      	ldr	r2, [pc, #148]	; (8002914 <TIM_Base_SetConfig+0xec>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00f      	beq.n	80028a2 <TIM_Base_SetConfig+0x7a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a24      	ldr	r2, [pc, #144]	; (8002918 <TIM_Base_SetConfig+0xf0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00b      	beq.n	80028a2 <TIM_Base_SetConfig+0x7a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a23      	ldr	r2, [pc, #140]	; (800291c <TIM_Base_SetConfig+0xf4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d007      	beq.n	80028a2 <TIM_Base_SetConfig+0x7a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a22      	ldr	r2, [pc, #136]	; (8002920 <TIM_Base_SetConfig+0xf8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d003      	beq.n	80028a2 <TIM_Base_SetConfig+0x7a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a21      	ldr	r2, [pc, #132]	; (8002924 <TIM_Base_SetConfig+0xfc>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d108      	bne.n	80028b4 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a0d      	ldr	r2, [pc, #52]	; (8002910 <TIM_Base_SetConfig+0xe8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00b      	beq.n	80028f8 <TIM_Base_SetConfig+0xd0>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a0e      	ldr	r2, [pc, #56]	; (800291c <TIM_Base_SetConfig+0xf4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d007      	beq.n	80028f8 <TIM_Base_SetConfig+0xd0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a0d      	ldr	r2, [pc, #52]	; (8002920 <TIM_Base_SetConfig+0xf8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d003      	beq.n	80028f8 <TIM_Base_SetConfig+0xd0>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a0c      	ldr	r2, [pc, #48]	; (8002924 <TIM_Base_SetConfig+0xfc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d103      	bne.n	8002900 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	615a      	str	r2, [r3, #20]
}
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	40012c00 	.word	0x40012c00
 8002914:	40000400 	.word	0x40000400
 8002918:	40000800 	.word	0x40000800
 800291c:	40014000 	.word	0x40014000
 8002920:	40014400 	.word	0x40014400
 8002924:	40014800 	.word	0x40014800

08002928 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e03f      	b.n	80029de <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fe f8ba 	bl	8000aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2224      	movs	r2, #36	; 0x24
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800298e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f829 	bl	80029e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695a      	ldr	r2, [r3, #20]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002a28:	f023 030c 	bic.w	r3, r3, #12
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	430b      	orrs	r3, r1
 8002a34:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699a      	ldr	r2, [r3, #24]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a55      	ldr	r2, [pc, #340]	; (8002ba8 <UART_SetConfig+0x1c0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d103      	bne.n	8002a5e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a56:	f7ff fc05 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	e002      	b.n	8002a64 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a5e:	f7ff fbed 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 8002a62:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a6c:	d14c      	bne.n	8002b08 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	009a      	lsls	r2, r3, #2
 8002a78:	441a      	add	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	4a49      	ldr	r2, [pc, #292]	; (8002bac <UART_SetConfig+0x1c4>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	0119      	lsls	r1, r3, #4
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	009a      	lsls	r2, r3, #2
 8002a98:	441a      	add	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aa4:	4b41      	ldr	r3, [pc, #260]	; (8002bac <UART_SetConfig+0x1c4>)
 8002aa6:	fba3 0302 	umull	r0, r3, r3, r2
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	2064      	movs	r0, #100	; 0x64
 8002aae:	fb00 f303 	mul.w	r3, r0, r3
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	3332      	adds	r3, #50	; 0x32
 8002ab8:	4a3c      	ldr	r2, [pc, #240]	; (8002bac <UART_SetConfig+0x1c4>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ac6:	4419      	add	r1, r3
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	009a      	lsls	r2, r3, #2
 8002ad2:	441a      	add	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ade:	4b33      	ldr	r3, [pc, #204]	; (8002bac <UART_SetConfig+0x1c4>)
 8002ae0:	fba3 0302 	umull	r0, r3, r3, r2
 8002ae4:	095b      	lsrs	r3, r3, #5
 8002ae6:	2064      	movs	r0, #100	; 0x64
 8002ae8:	fb00 f303 	mul.w	r3, r0, r3
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	3332      	adds	r3, #50	; 0x32
 8002af2:	4a2e      	ldr	r2, [pc, #184]	; (8002bac <UART_SetConfig+0x1c4>)
 8002af4:	fba2 2303 	umull	r2, r3, r2, r3
 8002af8:	095b      	lsrs	r3, r3, #5
 8002afa:	f003 0207 	and.w	r2, r3, #7
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	440a      	add	r2, r1
 8002b04:	609a      	str	r2, [r3, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 8002b06:	e04a      	b.n	8002b9e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	009a      	lsls	r2, r3, #2
 8002b12:	441a      	add	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1e:	4a23      	ldr	r2, [pc, #140]	; (8002bac <UART_SetConfig+0x1c4>)
 8002b20:	fba2 2303 	umull	r2, r3, r2, r3
 8002b24:	095b      	lsrs	r3, r3, #5
 8002b26:	0119      	lsls	r1, r3, #4
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	009a      	lsls	r2, r3, #2
 8002b32:	441a      	add	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <UART_SetConfig+0x1c4>)
 8002b40:	fba3 0302 	umull	r0, r3, r3, r2
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	2064      	movs	r0, #100	; 0x64
 8002b48:	fb00 f303 	mul.w	r3, r0, r3
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	3332      	adds	r3, #50	; 0x32
 8002b52:	4a16      	ldr	r2, [pc, #88]	; (8002bac <UART_SetConfig+0x1c4>)
 8002b54:	fba2 2303 	umull	r2, r3, r2, r3
 8002b58:	095b      	lsrs	r3, r3, #5
 8002b5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b5e:	4419      	add	r1, r3
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	009a      	lsls	r2, r3, #2
 8002b6a:	441a      	add	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b76:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <UART_SetConfig+0x1c4>)
 8002b78:	fba3 0302 	umull	r0, r3, r3, r2
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	2064      	movs	r0, #100	; 0x64
 8002b80:	fb00 f303 	mul.w	r3, r0, r3
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	3332      	adds	r3, #50	; 0x32
 8002b8a:	4a08      	ldr	r2, [pc, #32]	; (8002bac <UART_SetConfig+0x1c4>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	095b      	lsrs	r3, r3, #5
 8002b92:	f003 020f 	and.w	r2, r3, #15
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	440a      	add	r2, r1
 8002b9c:	609a      	str	r2, [r3, #8]
}
 8002b9e:	bf00      	nop
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40013800 	.word	0x40013800
 8002bac:	51eb851f 	.word	0x51eb851f

08002bb0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bc2:	2b84      	cmp	r3, #132	; 0x84
 8002bc4:	d005      	beq.n	8002bd2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002bc6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4413      	add	r3, r2
 8002bce:	3303      	adds	r3, #3
 8002bd0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002be2:	f000 fe73 	bl	80038cc <vTaskStartScheduler>
  
  return osOK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}

08002bec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bee:	b089      	sub	sp, #36	; 0x24
 8002bf0:	af04      	add	r7, sp, #16
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d020      	beq.n	8002c40 <osThreadCreate+0x54>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d01c      	beq.n	8002c40 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685c      	ldr	r4, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681d      	ldr	r5, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691e      	ldr	r6, [r3, #16]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ffc9 	bl	8002bb0 <makeFreeRtosPriority>
 8002c1e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c28:	9202      	str	r2, [sp, #8]
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	9100      	str	r1, [sp, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	4632      	mov	r2, r6
 8002c32:	4629      	mov	r1, r5
 8002c34:	4620      	mov	r0, r4
 8002c36:	f000 fc73 	bl	8003520 <xTaskCreateStatic>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	e01c      	b.n	8002c7a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685c      	ldr	r4, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c4c:	b29e      	uxth	r6, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ffab 	bl	8002bb0 <makeFreeRtosPriority>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	f107 030c 	add.w	r3, r7, #12
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	9200      	str	r2, [sp, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	4632      	mov	r2, r6
 8002c68:	4629      	mov	r1, r5
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f000 fcb4 	bl	80035d8 <xTaskCreate>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d001      	beq.n	8002c7a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e000      	b.n	8002c7c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c84 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <osDelay+0x16>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	e000      	b.n	8002c9c <osDelay+0x18>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fde1 	bl	8003864 <vTaskDelay>
  
  return osOK;
 8002ca2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	; 0x28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002cb8:	f000 fe72 	bl	80039a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002cbc:	4b58      	ldr	r3, [pc, #352]	; (8002e20 <pvPortMalloc+0x174>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002cc4:	f000 f910 	bl	8002ee8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002cc8:	4b56      	ldr	r3, [pc, #344]	; (8002e24 <pvPortMalloc+0x178>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f040 808e 	bne.w	8002df2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d01d      	beq.n	8002d18 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002cdc:	2208      	movs	r2, #8
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d014      	beq.n	8002d18 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f023 0307 	bic.w	r3, r3, #7
 8002cf4:	3308      	adds	r3, #8
 8002cf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00a      	beq.n	8002d18 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d02:	f04f 0330 	mov.w	r3, #48	; 0x30
 8002d06:	f383 8811 	msr	BASEPRI, r3
 8002d0a:	f3bf 8f6f 	isb	sy
 8002d0e:	f3bf 8f4f 	dsb	sy
 8002d12:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d14:	bf00      	nop
 8002d16:	e7fe      	b.n	8002d16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d069      	beq.n	8002df2 <pvPortMalloc+0x146>
 8002d1e:	4b42      	ldr	r3, [pc, #264]	; (8002e28 <pvPortMalloc+0x17c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d864      	bhi.n	8002df2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002d28:	4b40      	ldr	r3, [pc, #256]	; (8002e2c <pvPortMalloc+0x180>)
 8002d2a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002d2c:	4b3f      	ldr	r3, [pc, #252]	; (8002e2c <pvPortMalloc+0x180>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d32:	e004      	b.n	8002d3e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d903      	bls.n	8002d50 <pvPortMalloc+0xa4>
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f1      	bne.n	8002d34 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002d50:	4b33      	ldr	r3, [pc, #204]	; (8002e20 <pvPortMalloc+0x174>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d04b      	beq.n	8002df2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2208      	movs	r2, #8
 8002d60:	4413      	add	r3, r2
 8002d62:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	1ad2      	subs	r2, r2, r3
 8002d74:	2308      	movs	r3, #8
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d91f      	bls.n	8002dbc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <pvPortMalloc+0xf8>
	__asm volatile
 8002d8e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8002d92:	f383 8811 	msr	BASEPRI, r3
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	f3bf 8f4f 	dsb	sy
 8002d9e:	613b      	str	r3, [r7, #16]
}
 8002da0:	bf00      	nop
 8002da2:	e7fe      	b.n	8002da2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	1ad2      	subs	r2, r2, r3
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002db6:	69b8      	ldr	r0, [r7, #24]
 8002db8:	f000 f8f8 	bl	8002fac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <pvPortMalloc+0x17c>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	4a18      	ldr	r2, [pc, #96]	; (8002e28 <pvPortMalloc+0x17c>)
 8002dc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002dca:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <pvPortMalloc+0x17c>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <pvPortMalloc+0x184>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d203      	bcs.n	8002dde <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002dd6:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <pvPortMalloc+0x17c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a15      	ldr	r2, [pc, #84]	; (8002e30 <pvPortMalloc+0x184>)
 8002ddc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <pvPortMalloc+0x178>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002df2:	f000 fde3 	bl	80039bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <pvPortMalloc+0x16a>
	__asm volatile
 8002e00:	f04f 0330 	mov.w	r3, #48	; 0x30
 8002e04:	f383 8811 	msr	BASEPRI, r3
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	60fb      	str	r3, [r7, #12]
}
 8002e12:	bf00      	nop
 8002e14:	e7fe      	b.n	8002e14 <pvPortMalloc+0x168>
	return pvReturn;
 8002e16:	69fb      	ldr	r3, [r7, #28]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3728      	adds	r7, #40	; 0x28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	200010e8 	.word	0x200010e8
 8002e24:	200010f4 	.word	0x200010f4
 8002e28:	200010ec 	.word	0x200010ec
 8002e2c:	200010e0 	.word	0x200010e0
 8002e30:	200010f0 	.word	0x200010f0

08002e34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d048      	beq.n	8002ed8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002e46:	2308      	movs	r3, #8
 8002e48:	425b      	negs	r3, r3
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	4b21      	ldr	r3, [pc, #132]	; (8002ee0 <vPortFree+0xac>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10a      	bne.n	8002e78 <vPortFree+0x44>
	__asm volatile
 8002e62:	f04f 0330 	mov.w	r3, #48	; 0x30
 8002e66:	f383 8811 	msr	BASEPRI, r3
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	60fb      	str	r3, [r7, #12]
}
 8002e74:	bf00      	nop
 8002e76:	e7fe      	b.n	8002e76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <vPortFree+0x62>
	__asm volatile
 8002e80:	f04f 0330 	mov.w	r3, #48	; 0x30
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	60bb      	str	r3, [r7, #8]
}
 8002e92:	bf00      	nop
 8002e94:	e7fe      	b.n	8002e94 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <vPortFree+0xac>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d019      	beq.n	8002ed8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d115      	bne.n	8002ed8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <vPortFree+0xac>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002ebc:	f000 fd70 	bl	80039a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	4b07      	ldr	r3, [pc, #28]	; (8002ee4 <vPortFree+0xb0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4413      	add	r3, r2
 8002eca:	4a06      	ldr	r2, [pc, #24]	; (8002ee4 <vPortFree+0xb0>)
 8002ecc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002ece:	6938      	ldr	r0, [r7, #16]
 8002ed0:	f000 f86c 	bl	8002fac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002ed4:	f000 fd72 	bl	80039bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002ed8:	bf00      	nop
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	200010f4 	.word	0x200010f4
 8002ee4:	200010ec 	.word	0x200010ec

08002ee8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002eee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ef2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002ef4:	4b27      	ldr	r3, [pc, #156]	; (8002f94 <prvHeapInit+0xac>)
 8002ef6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00c      	beq.n	8002f1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3307      	adds	r3, #7
 8002f06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0307 	bic.w	r3, r3, #7
 8002f0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	4a1f      	ldr	r2, [pc, #124]	; (8002f94 <prvHeapInit+0xac>)
 8002f18:	4413      	add	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002f20:	4a1d      	ldr	r2, [pc, #116]	; (8002f98 <prvHeapInit+0xb0>)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002f26:	4b1c      	ldr	r3, [pc, #112]	; (8002f98 <prvHeapInit+0xb0>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	4413      	add	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002f34:	2208      	movs	r2, #8
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1a9b      	subs	r3, r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 0307 	bic.w	r3, r3, #7
 8002f42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4a15      	ldr	r2, [pc, #84]	; (8002f9c <prvHeapInit+0xb4>)
 8002f48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002f4a:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <prvHeapInit+0xb4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002f52:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <prvHeapInit+0xb4>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	1ad2      	subs	r2, r2, r3
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002f68:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <prvHeapInit+0xb4>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <prvHeapInit+0xb8>)
 8002f76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4a09      	ldr	r2, [pc, #36]	; (8002fa4 <prvHeapInit+0xbc>)
 8002f7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <prvHeapInit+0xc0>)
 8002f82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f86:	601a      	str	r2, [r3, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	200004e0 	.word	0x200004e0
 8002f98:	200010e0 	.word	0x200010e0
 8002f9c:	200010e8 	.word	0x200010e8
 8002fa0:	200010f0 	.word	0x200010f0
 8002fa4:	200010ec 	.word	0x200010ec
 8002fa8:	200010f4 	.word	0x200010f4

08002fac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002fb4:	4b27      	ldr	r3, [pc, #156]	; (8003054 <prvInsertBlockIntoFreeList+0xa8>)
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	e002      	b.n	8002fc0 <prvInsertBlockIntoFreeList+0x14>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d8f7      	bhi.n	8002fba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d108      	bne.n	8002fee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	441a      	add	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	441a      	add	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d118      	bne.n	8003034 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4b14      	ldr	r3, [pc, #80]	; (8003058 <prvInsertBlockIntoFreeList+0xac>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d00d      	beq.n	800302a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	441a      	add	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e008      	b.n	800303c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <prvInsertBlockIntoFreeList+0xac>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	e003      	b.n	800303c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	429a      	cmp	r2, r3
 8003042:	d002      	beq.n	800304a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800304a:	bf00      	nop
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr
 8003054:	200010e0 	.word	0x200010e0
 8003058:	200010e8 	.word	0x200010e8

0800305c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f103 0208 	add.w	r2, r3, #8
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f04f 32ff 	mov.w	r2, #4294967295
 8003074:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f103 0208 	add.w	r2, r3, #8
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f103 0208 	add.w	r2, r3, #8
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr

0800309a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr

080030b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030b2:	b480      	push	{r7}
 80030b4:	b085      	sub	sp, #20
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	601a      	str	r2, [r3, #0]
}
 80030ee:	bf00      	nop
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310e:	d103      	bne.n	8003118 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	e00c      	b.n	8003132 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3308      	adds	r3, #8
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	e002      	b.n	8003126 <vListInsert+0x2e>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	429a      	cmp	r2, r3
 8003130:	d2f6      	bcs.n	8003120 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	601a      	str	r2, [r3, #0]
}
 800315e:	bf00      	nop
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr

08003168 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6892      	ldr	r2, [r2, #8]
 800317e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6852      	ldr	r2, [r2, #4]
 8003188:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	429a      	cmp	r2, r3
 8003192:	d103      	bne.n	800319c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	1e5a      	subs	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr
	...

080031bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	3b04      	subs	r3, #4
 80031cc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	3b04      	subs	r3, #4
 80031da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f023 0201 	bic.w	r2, r3, #1
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	3b04      	subs	r3, #4
 80031ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80031ec:	4a08      	ldr	r2, [pc, #32]	; (8003210 <pxPortInitialiseStack+0x54>)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	3b14      	subs	r3, #20
 80031f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	3b20      	subs	r3, #32
 8003202:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003204:	68fb      	ldr	r3, [r7, #12]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr
 8003210:	08003215 	.word	0x08003215

08003214 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800321a:	2300      	movs	r3, #0
 800321c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800321e:	4b12      	ldr	r3, [pc, #72]	; (8003268 <prvTaskExitError+0x54>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003226:	d00a      	beq.n	800323e <prvTaskExitError+0x2a>
	__asm volatile
 8003228:	f04f 0330 	mov.w	r3, #48	; 0x30
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	60fb      	str	r3, [r7, #12]
}
 800323a:	bf00      	nop
 800323c:	e7fe      	b.n	800323c <prvTaskExitError+0x28>
	__asm volatile
 800323e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8003242:	f383 8811 	msr	BASEPRI, r3
 8003246:	f3bf 8f6f 	isb	sy
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	60bb      	str	r3, [r7, #8]
}
 8003250:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003252:	bf00      	nop
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0fc      	beq.n	8003254 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800325a:	bf00      	nop
 800325c:	bf00      	nop
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	2000000c 	.word	0x2000000c
 800326c:	00000000 	.word	0x00000000

08003270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003270:	4b07      	ldr	r3, [pc, #28]	; (8003290 <pxCurrentTCBConst2>)
 8003272:	6819      	ldr	r1, [r3, #0]
 8003274:	6808      	ldr	r0, [r1, #0]
 8003276:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800327a:	f380 8809 	msr	PSP, r0
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f04f 0000 	mov.w	r0, #0
 8003286:	f380 8811 	msr	BASEPRI, r0
 800328a:	f04e 0e0d 	orr.w	lr, lr, #13
 800328e:	4770      	bx	lr

08003290 <pxCurrentTCBConst2>:
 8003290:	20001100 	.word	0x20001100
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop

08003298 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003298:	4806      	ldr	r0, [pc, #24]	; (80032b4 <prvPortStartFirstTask+0x1c>)
 800329a:	6800      	ldr	r0, [r0, #0]
 800329c:	6800      	ldr	r0, [r0, #0]
 800329e:	f380 8808 	msr	MSP, r0
 80032a2:	b662      	cpsie	i
 80032a4:	b661      	cpsie	f
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	df00      	svc	0
 80032b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80032b2:	bf00      	nop
 80032b4:	e000ed08 	.word	0xe000ed08

080032b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80032be:	4b32      	ldr	r3, [pc, #200]	; (8003388 <xPortStartScheduler+0xd0>)
 80032c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	22ff      	movs	r2, #255	; 0xff
 80032ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	4b2a      	ldr	r3, [pc, #168]	; (800338c <xPortStartScheduler+0xd4>)
 80032e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80032e6:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <xPortStartScheduler+0xd8>)
 80032e8:	2207      	movs	r2, #7
 80032ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032ec:	e009      	b.n	8003302 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80032ee:	4b28      	ldr	r3, [pc, #160]	; (8003390 <xPortStartScheduler+0xd8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	4a26      	ldr	r2, [pc, #152]	; (8003390 <xPortStartScheduler+0xd8>)
 80032f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330a:	2b80      	cmp	r3, #128	; 0x80
 800330c:	d0ef      	beq.n	80032ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800330e:	4b20      	ldr	r3, [pc, #128]	; (8003390 <xPortStartScheduler+0xd8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f1c3 0307 	rsb	r3, r3, #7
 8003316:	2b04      	cmp	r3, #4
 8003318:	d00a      	beq.n	8003330 <xPortStartScheduler+0x78>
	__asm volatile
 800331a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	60bb      	str	r3, [r7, #8]
}
 800332c:	bf00      	nop
 800332e:	e7fe      	b.n	800332e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003330:	4b17      	ldr	r3, [pc, #92]	; (8003390 <xPortStartScheduler+0xd8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	021b      	lsls	r3, r3, #8
 8003336:	4a16      	ldr	r2, [pc, #88]	; (8003390 <xPortStartScheduler+0xd8>)
 8003338:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800333a:	4b15      	ldr	r3, [pc, #84]	; (8003390 <xPortStartScheduler+0xd8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003342:	4a13      	ldr	r2, [pc, #76]	; (8003390 <xPortStartScheduler+0xd8>)
 8003344:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	b2da      	uxtb	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800334e:	4b11      	ldr	r3, [pc, #68]	; (8003394 <xPortStartScheduler+0xdc>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a10      	ldr	r2, [pc, #64]	; (8003394 <xPortStartScheduler+0xdc>)
 8003354:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003358:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800335a:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <xPortStartScheduler+0xdc>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a0d      	ldr	r2, [pc, #52]	; (8003394 <xPortStartScheduler+0xdc>)
 8003360:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8003364:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003366:	f000 f8b9 	bl	80034dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800336a:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <xPortStartScheduler+0xe0>)
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003370:	f7ff ff92 	bl	8003298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003374:	f000 fc7c 	bl	8003c70 <vTaskSwitchContext>
	prvTaskExitError();
 8003378:	f7ff ff4c 	bl	8003214 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	e000e400 	.word	0xe000e400
 800338c:	200010f8 	.word	0x200010f8
 8003390:	200010fc 	.word	0x200010fc
 8003394:	e000ed20 	.word	0xe000ed20
 8003398:	2000000c 	.word	0x2000000c

0800339c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
	__asm volatile
 80033a2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80033a6:	f383 8811 	msr	BASEPRI, r3
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	607b      	str	r3, [r7, #4]
}
 80033b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80033b6:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <vPortEnterCritical+0x58>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3301      	adds	r3, #1
 80033bc:	4a0d      	ldr	r2, [pc, #52]	; (80033f4 <vPortEnterCritical+0x58>)
 80033be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80033c0:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <vPortEnterCritical+0x58>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d10f      	bne.n	80033e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <vPortEnterCritical+0x5c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80033d2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80033d6:	f383 8811 	msr	BASEPRI, r3
 80033da:	f3bf 8f6f 	isb	sy
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	603b      	str	r3, [r7, #0]
}
 80033e4:	bf00      	nop
 80033e6:	e7fe      	b.n	80033e6 <vPortEnterCritical+0x4a>
	}
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	2000000c 	.word	0x2000000c
 80033f8:	e000ed04 	.word	0xe000ed04

080033fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003402:	4b11      	ldr	r3, [pc, #68]	; (8003448 <vPortExitCritical+0x4c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <vPortExitCritical+0x24>
	__asm volatile
 800340a:	f04f 0330 	mov.w	r3, #48	; 0x30
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	607b      	str	r3, [r7, #4]
}
 800341c:	bf00      	nop
 800341e:	e7fe      	b.n	800341e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003420:	4b09      	ldr	r3, [pc, #36]	; (8003448 <vPortExitCritical+0x4c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	3b01      	subs	r3, #1
 8003426:	4a08      	ldr	r2, [pc, #32]	; (8003448 <vPortExitCritical+0x4c>)
 8003428:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800342a:	4b07      	ldr	r3, [pc, #28]	; (8003448 <vPortExitCritical+0x4c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d105      	bne.n	800343e <vPortExitCritical+0x42>
 8003432:	2300      	movs	r3, #0
 8003434:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800343c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr
 8003448:	2000000c 	.word	0x2000000c
 800344c:	00000000 	.word	0x00000000

08003450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003450:	f3ef 8009 	mrs	r0, PSP
 8003454:	f3bf 8f6f 	isb	sy
 8003458:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <pxCurrentTCBConst>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003460:	6010      	str	r0, [r2, #0]
 8003462:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003466:	f04f 0030 	mov.w	r0, #48	; 0x30
 800346a:	f380 8811 	msr	BASEPRI, r0
 800346e:	f000 fbff 	bl	8003c70 <vTaskSwitchContext>
 8003472:	f04f 0000 	mov.w	r0, #0
 8003476:	f380 8811 	msr	BASEPRI, r0
 800347a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800347e:	6819      	ldr	r1, [r3, #0]
 8003480:	6808      	ldr	r0, [r1, #0]
 8003482:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003486:	f380 8809 	msr	PSP, r0
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	4770      	bx	lr

08003490 <pxCurrentTCBConst>:
 8003490:	20001100 	.word	0x20001100
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003494:	bf00      	nop
 8003496:	bf00      	nop

08003498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
	__asm volatile
 800349e:	f04f 0330 	mov.w	r3, #48	; 0x30
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	607b      	str	r3, [r7, #4]
}
 80034b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80034b2:	f000 fb1f 	bl	8003af4 <xTaskIncrementTick>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <SysTick_Handler+0x40>)
 80034be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	2300      	movs	r3, #0
 80034c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	f383 8811 	msr	BASEPRI, r3
}
 80034ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	e000ed04 	.word	0xe000ed04

080034dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80034e0:	4b0a      	ldr	r3, [pc, #40]	; (800350c <vPortSetupTimerInterrupt+0x30>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80034e6:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <vPortSetupTimerInterrupt+0x34>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80034ec:	4b09      	ldr	r3, [pc, #36]	; (8003514 <vPortSetupTimerInterrupt+0x38>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a09      	ldr	r2, [pc, #36]	; (8003518 <vPortSetupTimerInterrupt+0x3c>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	099b      	lsrs	r3, r3, #6
 80034f8:	4a08      	ldr	r2, [pc, #32]	; (800351c <vPortSetupTimerInterrupt+0x40>)
 80034fa:	3b01      	subs	r3, #1
 80034fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80034fe:	4b03      	ldr	r3, [pc, #12]	; (800350c <vPortSetupTimerInterrupt+0x30>)
 8003500:	2207      	movs	r2, #7
 8003502:	601a      	str	r2, [r3, #0]
}
 8003504:	bf00      	nop
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr
 800350c:	e000e010 	.word	0xe000e010
 8003510:	e000e018 	.word	0xe000e018
 8003514:	20000000 	.word	0x20000000
 8003518:	10624dd3 	.word	0x10624dd3
 800351c:	e000e014 	.word	0xe000e014

08003520 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08e      	sub	sp, #56	; 0x38
 8003524:	af04      	add	r7, sp, #16
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800352e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10a      	bne.n	800354a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003534:	f04f 0330 	mov.w	r3, #48	; 0x30
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	623b      	str	r3, [r7, #32]
}
 8003546:	bf00      	nop
 8003548:	e7fe      	b.n	8003548 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800354a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10a      	bne.n	8003566 <xTaskCreateStatic+0x46>
	__asm volatile
 8003550:	f04f 0330 	mov.w	r3, #48	; 0x30
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	61fb      	str	r3, [r7, #28]
}
 8003562:	bf00      	nop
 8003564:	e7fe      	b.n	8003564 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003566:	23b4      	movs	r3, #180	; 0xb4
 8003568:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	2bb4      	cmp	r3, #180	; 0xb4
 800356e:	d00a      	beq.n	8003586 <xTaskCreateStatic+0x66>
	__asm volatile
 8003570:	f04f 0330 	mov.w	r3, #48	; 0x30
 8003574:	f383 8811 	msr	BASEPRI, r3
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	61bb      	str	r3, [r7, #24]
}
 8003582:	bf00      	nop
 8003584:	e7fe      	b.n	8003584 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01e      	beq.n	80035ca <xTaskCreateStatic+0xaa>
 800358c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358e:	2b00      	cmp	r3, #0
 8003590:	d01b      	beq.n	80035ca <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800359a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035a4:	2300      	movs	r3, #0
 80035a6:	9303      	str	r3, [sp, #12]
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	9302      	str	r3, [sp, #8]
 80035ac:	f107 0314 	add.w	r3, r7, #20
 80035b0:	9301      	str	r3, [sp, #4]
 80035b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f851 	bl	8003664 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035c4:	f000 f8e4 	bl	8003790 <prvAddNewTaskToReadyList>
 80035c8:	e001      	b.n	80035ce <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035ce:	697b      	ldr	r3, [r7, #20]
	}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3728      	adds	r7, #40	; 0x28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08c      	sub	sp, #48	; 0x30
 80035dc:	af04      	add	r7, sp, #16
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff fb5d 	bl	8002cac <pvPortMalloc>
 80035f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00e      	beq.n	8003618 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80035fa:	20b4      	movs	r0, #180	; 0xb4
 80035fc:	f7ff fb56 	bl	8002cac <pvPortMalloc>
 8003600:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
 800360e:	e005      	b.n	800361c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003610:	6978      	ldr	r0, [r7, #20]
 8003612:	f7ff fc0f 	bl	8002e34 <vPortFree>
 8003616:	e001      	b.n	800361c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d017      	beq.n	8003652 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800362a:	88fa      	ldrh	r2, [r7, #6]
 800362c:	2300      	movs	r3, #0
 800362e:	9303      	str	r3, [sp, #12]
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	9302      	str	r3, [sp, #8]
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003636:	9301      	str	r3, [sp, #4]
 8003638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	68b9      	ldr	r1, [r7, #8]
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f80f 	bl	8003664 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003646:	69f8      	ldr	r0, [r7, #28]
 8003648:	f000 f8a2 	bl	8003790 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800364c:	2301      	movs	r3, #1
 800364e:	61bb      	str	r3, [r7, #24]
 8003650:	e002      	b.n	8003658 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003652:	f04f 33ff 	mov.w	r3, #4294967295
 8003656:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003658:	69bb      	ldr	r3, [r7, #24]
	}
 800365a:	4618      	mov	r0, r3
 800365c:	3720      	adds	r7, #32
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800367c:	3b01      	subs	r3, #1
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	f023 0307 	bic.w	r3, r3, #7
 800368a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <prvInitialiseNewTask+0x48>
	__asm volatile
 8003696:	f04f 0330 	mov.w	r3, #48	; 0x30
 800369a:	f383 8811 	msr	BASEPRI, r3
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	617b      	str	r3, [r7, #20]
}
 80036a8:	bf00      	nop
 80036aa:	e7fe      	b.n	80036aa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036ac:	2300      	movs	r3, #0
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	e012      	b.n	80036d8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	4413      	add	r3, r2
 80036b8:	7819      	ldrb	r1, [r3, #0]
 80036ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	4413      	add	r3, r2
 80036c0:	3334      	adds	r3, #52	; 0x34
 80036c2:	460a      	mov	r2, r1
 80036c4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	4413      	add	r3, r2
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d006      	beq.n	80036e0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	3301      	adds	r3, #1
 80036d6:	61fb      	str	r3, [r7, #28]
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	2b0f      	cmp	r3, #15
 80036dc:	d9e9      	bls.n	80036b2 <prvInitialiseNewTask+0x4e>
 80036de:	e000      	b.n	80036e2 <prvInitialiseNewTask+0x7e>
		{
			break;
 80036e0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ec:	2b06      	cmp	r3, #6
 80036ee:	d901      	bls.n	80036f4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036f0:	2306      	movs	r3, #6
 80036f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003702:	2200      	movs	r2, #0
 8003704:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	3304      	adds	r3, #4
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff fcc5 	bl	800309a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003712:	3318      	adds	r3, #24
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff fcc0 	bl	800309a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800371e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003722:	f1c3 0207 	rsb	r2, r3, #7
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800372e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003732:	2200      	movs	r2, #0
 8003734:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	2200      	movs	r2, #0
 800373c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003742:	334c      	adds	r3, #76	; 0x4c
 8003744:	2260      	movs	r2, #96	; 0x60
 8003746:	2100      	movs	r1, #0
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fc5d 	bl	8004008 <memset>
 800374e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003750:	4a0c      	ldr	r2, [pc, #48]	; (8003784 <prvInitialiseNewTask+0x120>)
 8003752:	651a      	str	r2, [r3, #80]	; 0x50
 8003754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003756:	4a0c      	ldr	r2, [pc, #48]	; (8003788 <prvInitialiseNewTask+0x124>)
 8003758:	655a      	str	r2, [r3, #84]	; 0x54
 800375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375c:	4a0b      	ldr	r2, [pc, #44]	; (800378c <prvInitialiseNewTask+0x128>)
 800375e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	68f9      	ldr	r1, [r7, #12]
 8003764:	69b8      	ldr	r0, [r7, #24]
 8003766:	f7ff fd29 	bl	80031bc <pxPortInitialiseStack>
 800376a:	4602      	mov	r2, r0
 800376c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800377a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800377c:	bf00      	nop
 800377e:	3720      	adds	r7, #32
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	08004258 	.word	0x08004258
 8003788:	08004278 	.word	0x08004278
 800378c:	08004238 	.word	0x08004238

08003790 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003798:	f7ff fe00 	bl	800339c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800379c:	4b2a      	ldr	r3, [pc, #168]	; (8003848 <prvAddNewTaskToReadyList+0xb8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3301      	adds	r3, #1
 80037a2:	4a29      	ldr	r2, [pc, #164]	; (8003848 <prvAddNewTaskToReadyList+0xb8>)
 80037a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037a6:	4b29      	ldr	r3, [pc, #164]	; (800384c <prvAddNewTaskToReadyList+0xbc>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037ae:	4a27      	ldr	r2, [pc, #156]	; (800384c <prvAddNewTaskToReadyList+0xbc>)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037b4:	4b24      	ldr	r3, [pc, #144]	; (8003848 <prvAddNewTaskToReadyList+0xb8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d110      	bne.n	80037de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037bc:	f000 fad2 	bl	8003d64 <prvInitialiseTaskLists>
 80037c0:	e00d      	b.n	80037de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037c2:	4b23      	ldr	r3, [pc, #140]	; (8003850 <prvAddNewTaskToReadyList+0xc0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037ca:	4b20      	ldr	r3, [pc, #128]	; (800384c <prvAddNewTaskToReadyList+0xbc>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d802      	bhi.n	80037de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037d8:	4a1c      	ldr	r2, [pc, #112]	; (800384c <prvAddNewTaskToReadyList+0xbc>)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037de:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <prvAddNewTaskToReadyList+0xc4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3301      	adds	r3, #1
 80037e4:	4a1b      	ldr	r2, [pc, #108]	; (8003854 <prvAddNewTaskToReadyList+0xc4>)
 80037e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	2201      	movs	r2, #1
 80037ee:	409a      	lsls	r2, r3
 80037f0:	4b19      	ldr	r3, [pc, #100]	; (8003858 <prvAddNewTaskToReadyList+0xc8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	4a18      	ldr	r2, [pc, #96]	; (8003858 <prvAddNewTaskToReadyList+0xc8>)
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4a15      	ldr	r2, [pc, #84]	; (800385c <prvAddNewTaskToReadyList+0xcc>)
 8003808:	441a      	add	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3304      	adds	r3, #4
 800380e:	4619      	mov	r1, r3
 8003810:	4610      	mov	r0, r2
 8003812:	f7ff fc4e 	bl	80030b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003816:	f7ff fdf1 	bl	80033fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800381a:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <prvAddNewTaskToReadyList+0xc0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00e      	beq.n	8003840 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <prvAddNewTaskToReadyList+0xbc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	429a      	cmp	r2, r3
 800382e:	d207      	bcs.n	8003840 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <prvAddNewTaskToReadyList+0xd0>)
 8003832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003840:	bf00      	nop
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20001200 	.word	0x20001200
 800384c:	20001100 	.word	0x20001100
 8003850:	2000120c 	.word	0x2000120c
 8003854:	2000121c 	.word	0x2000121c
 8003858:	20001208 	.word	0x20001208
 800385c:	20001104 	.word	0x20001104
 8003860:	e000ed04 	.word	0xe000ed04

08003864 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d017      	beq.n	80038a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003876:	4b13      	ldr	r3, [pc, #76]	; (80038c4 <vTaskDelay+0x60>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <vTaskDelay+0x30>
	__asm volatile
 800387e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8003882:	f383 8811 	msr	BASEPRI, r3
 8003886:	f3bf 8f6f 	isb	sy
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	60bb      	str	r3, [r7, #8]
}
 8003890:	bf00      	nop
 8003892:	e7fe      	b.n	8003892 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003894:	f000 f884 	bl	80039a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003898:	2100      	movs	r1, #0
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fb28 	bl	8003ef0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80038a0:	f000 f88c 	bl	80039bc <xTaskResumeAll>
 80038a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d107      	bne.n	80038bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80038ac:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <vTaskDelay+0x64>)
 80038ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038bc:	bf00      	nop
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	20001228 	.word	0x20001228
 80038c8:	e000ed04 	.word	0xe000ed04

080038cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	; 0x28
 80038d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038da:	463a      	mov	r2, r7
 80038dc:	1d39      	adds	r1, r7, #4
 80038de:	f107 0308 	add.w	r3, r7, #8
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fc fe50 	bl	8000588 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038e8:	6839      	ldr	r1, [r7, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	9202      	str	r2, [sp, #8]
 80038f0:	9301      	str	r3, [sp, #4]
 80038f2:	2300      	movs	r3, #0
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	2300      	movs	r3, #0
 80038f8:	460a      	mov	r2, r1
 80038fa:	4921      	ldr	r1, [pc, #132]	; (8003980 <vTaskStartScheduler+0xb4>)
 80038fc:	4821      	ldr	r0, [pc, #132]	; (8003984 <vTaskStartScheduler+0xb8>)
 80038fe:	f7ff fe0f 	bl	8003520 <xTaskCreateStatic>
 8003902:	4603      	mov	r3, r0
 8003904:	4a20      	ldr	r2, [pc, #128]	; (8003988 <vTaskStartScheduler+0xbc>)
 8003906:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003908:	4b1f      	ldr	r3, [pc, #124]	; (8003988 <vTaskStartScheduler+0xbc>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003910:	2301      	movs	r3, #1
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	e001      	b.n	800391a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d11b      	bne.n	8003958 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003920:	f04f 0330 	mov.w	r3, #48	; 0x30
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	613b      	str	r3, [r7, #16]
}
 8003932:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003934:	4b15      	ldr	r3, [pc, #84]	; (800398c <vTaskStartScheduler+0xc0>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	334c      	adds	r3, #76	; 0x4c
 800393a:	4a15      	ldr	r2, [pc, #84]	; (8003990 <vTaskStartScheduler+0xc4>)
 800393c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800393e:	4b15      	ldr	r3, [pc, #84]	; (8003994 <vTaskStartScheduler+0xc8>)
 8003940:	f04f 32ff 	mov.w	r2, #4294967295
 8003944:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003946:	4b14      	ldr	r3, [pc, #80]	; (8003998 <vTaskStartScheduler+0xcc>)
 8003948:	2201      	movs	r2, #1
 800394a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800394c:	4b13      	ldr	r3, [pc, #76]	; (800399c <vTaskStartScheduler+0xd0>)
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003952:	f7ff fcb1 	bl	80032b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003956:	e00e      	b.n	8003976 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395e:	d10a      	bne.n	8003976 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003960:	f04f 0330 	mov.w	r3, #48	; 0x30
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	60fb      	str	r3, [r7, #12]
}
 8003972:	bf00      	nop
 8003974:	e7fe      	b.n	8003974 <vTaskStartScheduler+0xa8>
}
 8003976:	bf00      	nop
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	08004218 	.word	0x08004218
 8003984:	08003d35 	.word	0x08003d35
 8003988:	20001224 	.word	0x20001224
 800398c:	20001100 	.word	0x20001100
 8003990:	20000010 	.word	0x20000010
 8003994:	20001220 	.word	0x20001220
 8003998:	2000120c 	.word	0x2000120c
 800399c:	20001204 	.word	0x20001204

080039a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80039a4:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <vTaskSuspendAll+0x18>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3301      	adds	r3, #1
 80039aa:	4a03      	ldr	r2, [pc, #12]	; (80039b8 <vTaskSuspendAll+0x18>)
 80039ac:	6013      	str	r3, [r2, #0]
}
 80039ae:	bf00      	nop
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20001228 	.word	0x20001228

080039bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80039c6:	2300      	movs	r3, #0
 80039c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80039ca:	4b41      	ldr	r3, [pc, #260]	; (8003ad0 <xTaskResumeAll+0x114>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10a      	bne.n	80039e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80039d2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	603b      	str	r3, [r7, #0]
}
 80039e4:	bf00      	nop
 80039e6:	e7fe      	b.n	80039e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039e8:	f7ff fcd8 	bl	800339c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039ec:	4b38      	ldr	r3, [pc, #224]	; (8003ad0 <xTaskResumeAll+0x114>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3b01      	subs	r3, #1
 80039f2:	4a37      	ldr	r2, [pc, #220]	; (8003ad0 <xTaskResumeAll+0x114>)
 80039f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039f6:	4b36      	ldr	r3, [pc, #216]	; (8003ad0 <xTaskResumeAll+0x114>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d161      	bne.n	8003ac2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039fe:	4b35      	ldr	r3, [pc, #212]	; (8003ad4 <xTaskResumeAll+0x118>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d05d      	beq.n	8003ac2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a06:	e02e      	b.n	8003a66 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003a08:	4b33      	ldr	r3, [pc, #204]	; (8003ad8 <xTaskResumeAll+0x11c>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3318      	adds	r3, #24
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fba7 	bl	8003168 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fba2 	bl	8003168 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	2201      	movs	r2, #1
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	4b2b      	ldr	r3, [pc, #172]	; (8003adc <xTaskResumeAll+0x120>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	4a2a      	ldr	r2, [pc, #168]	; (8003adc <xTaskResumeAll+0x120>)
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4a27      	ldr	r2, [pc, #156]	; (8003ae0 <xTaskResumeAll+0x124>)
 8003a44:	441a      	add	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	f7ff fb30 	bl	80030b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a56:	4b23      	ldr	r3, [pc, #140]	; (8003ae4 <xTaskResumeAll+0x128>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d302      	bcc.n	8003a66 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003a60:	4b21      	ldr	r3, [pc, #132]	; (8003ae8 <xTaskResumeAll+0x12c>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a66:	4b1c      	ldr	r3, [pc, #112]	; (8003ad8 <xTaskResumeAll+0x11c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1cc      	bne.n	8003a08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a74:	f000 fa18 	bl	8003ea8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003a78:	4b1c      	ldr	r3, [pc, #112]	; (8003aec <xTaskResumeAll+0x130>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d010      	beq.n	8003aa6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a84:	f000 f836 	bl	8003af4 <xTaskIncrementTick>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003a8e:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <xTaskResumeAll+0x12c>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f1      	bne.n	8003a84 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003aa0:	4b12      	ldr	r3, [pc, #72]	; (8003aec <xTaskResumeAll+0x130>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003aa6:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <xTaskResumeAll+0x12c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d009      	beq.n	8003ac2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ab2:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <xTaskResumeAll+0x134>)
 8003ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ac2:	f7ff fc9b 	bl	80033fc <vPortExitCritical>

	return xAlreadyYielded;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20001228 	.word	0x20001228
 8003ad4:	20001200 	.word	0x20001200
 8003ad8:	200011c0 	.word	0x200011c0
 8003adc:	20001208 	.word	0x20001208
 8003ae0:	20001104 	.word	0x20001104
 8003ae4:	20001100 	.word	0x20001100
 8003ae8:	20001214 	.word	0x20001214
 8003aec:	20001210 	.word	0x20001210
 8003af0:	e000ed04 	.word	0xe000ed04

08003af4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003afe:	4b51      	ldr	r3, [pc, #324]	; (8003c44 <xTaskIncrementTick+0x150>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f040 808d 	bne.w	8003c22 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b08:	4b4f      	ldr	r3, [pc, #316]	; (8003c48 <xTaskIncrementTick+0x154>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b10:	4a4d      	ldr	r2, [pc, #308]	; (8003c48 <xTaskIncrementTick+0x154>)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d120      	bne.n	8003b5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b1c:	4b4b      	ldr	r3, [pc, #300]	; (8003c4c <xTaskIncrementTick+0x158>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <xTaskIncrementTick+0x48>
	__asm volatile
 8003b26:	f04f 0330 	mov.w	r3, #48	; 0x30
 8003b2a:	f383 8811 	msr	BASEPRI, r3
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	603b      	str	r3, [r7, #0]
}
 8003b38:	bf00      	nop
 8003b3a:	e7fe      	b.n	8003b3a <xTaskIncrementTick+0x46>
 8003b3c:	4b43      	ldr	r3, [pc, #268]	; (8003c4c <xTaskIncrementTick+0x158>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	4b43      	ldr	r3, [pc, #268]	; (8003c50 <xTaskIncrementTick+0x15c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a41      	ldr	r2, [pc, #260]	; (8003c4c <xTaskIncrementTick+0x158>)
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	4a41      	ldr	r2, [pc, #260]	; (8003c50 <xTaskIncrementTick+0x15c>)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	4b40      	ldr	r3, [pc, #256]	; (8003c54 <xTaskIncrementTick+0x160>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3301      	adds	r3, #1
 8003b56:	4a3f      	ldr	r2, [pc, #252]	; (8003c54 <xTaskIncrementTick+0x160>)
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	f000 f9a5 	bl	8003ea8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b5e:	4b3e      	ldr	r3, [pc, #248]	; (8003c58 <xTaskIncrementTick+0x164>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d34d      	bcc.n	8003c04 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b68:	4b38      	ldr	r3, [pc, #224]	; (8003c4c <xTaskIncrementTick+0x158>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <xTaskIncrementTick+0x82>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <xTaskIncrementTick+0x84>
 8003b76:	2300      	movs	r3, #0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d004      	beq.n	8003b86 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b7c:	4b36      	ldr	r3, [pc, #216]	; (8003c58 <xTaskIncrementTick+0x164>)
 8003b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b82:	601a      	str	r2, [r3, #0]
					break;
 8003b84:	e03e      	b.n	8003c04 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b86:	4b31      	ldr	r3, [pc, #196]	; (8003c4c <xTaskIncrementTick+0x158>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d203      	bcs.n	8003ba6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b9e:	4a2e      	ldr	r2, [pc, #184]	; (8003c58 <xTaskIncrementTick+0x164>)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6013      	str	r3, [r2, #0]
						break;
 8003ba4:	e02e      	b.n	8003c04 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff fadc 	bl	8003168 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d004      	beq.n	8003bc2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	3318      	adds	r3, #24
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff fad3 	bl	8003168 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	409a      	lsls	r2, r3
 8003bca:	4b24      	ldr	r3, [pc, #144]	; (8003c5c <xTaskIncrementTick+0x168>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	4a22      	ldr	r2, [pc, #136]	; (8003c5c <xTaskIncrementTick+0x168>)
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd8:	4613      	mov	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4a1f      	ldr	r2, [pc, #124]	; (8003c60 <xTaskIncrementTick+0x16c>)
 8003be2:	441a      	add	r2, r3
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	3304      	adds	r3, #4
 8003be8:	4619      	mov	r1, r3
 8003bea:	4610      	mov	r0, r2
 8003bec:	f7ff fa61 	bl	80030b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf4:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <xTaskIncrementTick+0x170>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d3b4      	bcc.n	8003b68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c02:	e7b1      	b.n	8003b68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c04:	4b17      	ldr	r3, [pc, #92]	; (8003c64 <xTaskIncrementTick+0x170>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0a:	4915      	ldr	r1, [pc, #84]	; (8003c60 <xTaskIncrementTick+0x16c>)
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d907      	bls.n	8003c2c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	e004      	b.n	8003c2c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003c22:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <xTaskIncrementTick+0x174>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3301      	adds	r3, #1
 8003c28:	4a0f      	ldr	r2, [pc, #60]	; (8003c68 <xTaskIncrementTick+0x174>)
 8003c2a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003c2c:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <xTaskIncrementTick+0x178>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003c34:	2301      	movs	r3, #1
 8003c36:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003c38:	697b      	ldr	r3, [r7, #20]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20001228 	.word	0x20001228
 8003c48:	20001204 	.word	0x20001204
 8003c4c:	200011b8 	.word	0x200011b8
 8003c50:	200011bc 	.word	0x200011bc
 8003c54:	20001218 	.word	0x20001218
 8003c58:	20001220 	.word	0x20001220
 8003c5c:	20001208 	.word	0x20001208
 8003c60:	20001104 	.word	0x20001104
 8003c64:	20001100 	.word	0x20001100
 8003c68:	20001210 	.word	0x20001210
 8003c6c:	20001214 	.word	0x20001214

08003c70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c76:	4b29      	ldr	r3, [pc, #164]	; (8003d1c <vTaskSwitchContext+0xac>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c7e:	4b28      	ldr	r3, [pc, #160]	; (8003d20 <vTaskSwitchContext+0xb0>)
 8003c80:	2201      	movs	r2, #1
 8003c82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c84:	e044      	b.n	8003d10 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003c86:	4b26      	ldr	r3, [pc, #152]	; (8003d20 <vTaskSwitchContext+0xb0>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003c8c:	4b25      	ldr	r3, [pc, #148]	; (8003d24 <vTaskSwitchContext+0xb4>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	fab3 f383 	clz	r3, r3
 8003c98:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003c9a:	7afb      	ldrb	r3, [r7, #11]
 8003c9c:	f1c3 031f 	rsb	r3, r3, #31
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	4921      	ldr	r1, [pc, #132]	; (8003d28 <vTaskSwitchContext+0xb8>)
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10a      	bne.n	8003ccc <vTaskSwitchContext+0x5c>
	__asm volatile
 8003cb6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	607b      	str	r3, [r7, #4]
}
 8003cc8:	bf00      	nop
 8003cca:	e7fe      	b.n	8003cca <vTaskSwitchContext+0x5a>
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4a14      	ldr	r2, [pc, #80]	; (8003d28 <vTaskSwitchContext+0xb8>)
 8003cd8:	4413      	add	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	3308      	adds	r3, #8
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d104      	bne.n	8003cfc <vTaskSwitchContext+0x8c>
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	605a      	str	r2, [r3, #4]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	4a0a      	ldr	r2, [pc, #40]	; (8003d2c <vTaskSwitchContext+0xbc>)
 8003d04:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d06:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <vTaskSwitchContext+0xbc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	334c      	adds	r3, #76	; 0x4c
 8003d0c:	4a08      	ldr	r2, [pc, #32]	; (8003d30 <vTaskSwitchContext+0xc0>)
 8003d0e:	6013      	str	r3, [r2, #0]
}
 8003d10:	bf00      	nop
 8003d12:	371c      	adds	r7, #28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20001228 	.word	0x20001228
 8003d20:	20001214 	.word	0x20001214
 8003d24:	20001208 	.word	0x20001208
 8003d28:	20001104 	.word	0x20001104
 8003d2c:	20001100 	.word	0x20001100
 8003d30:	20000010 	.word	0x20000010

08003d34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d3c:	f000 f852 	bl	8003de4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d40:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <prvIdleTask+0x28>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d9f9      	bls.n	8003d3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <prvIdleTask+0x2c>)
 8003d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d58:	e7f0      	b.n	8003d3c <prvIdleTask+0x8>
 8003d5a:	bf00      	nop
 8003d5c:	20001104 	.word	0x20001104
 8003d60:	e000ed04 	.word	0xe000ed04

08003d64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	607b      	str	r3, [r7, #4]
 8003d6e:	e00c      	b.n	8003d8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4a12      	ldr	r2, [pc, #72]	; (8003dc4 <prvInitialiseTaskLists+0x60>)
 8003d7c:	4413      	add	r3, r2
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff f96c 	bl	800305c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3301      	adds	r3, #1
 8003d88:	607b      	str	r3, [r7, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b06      	cmp	r3, #6
 8003d8e:	d9ef      	bls.n	8003d70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d90:	480d      	ldr	r0, [pc, #52]	; (8003dc8 <prvInitialiseTaskLists+0x64>)
 8003d92:	f7ff f963 	bl	800305c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d96:	480d      	ldr	r0, [pc, #52]	; (8003dcc <prvInitialiseTaskLists+0x68>)
 8003d98:	f7ff f960 	bl	800305c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d9c:	480c      	ldr	r0, [pc, #48]	; (8003dd0 <prvInitialiseTaskLists+0x6c>)
 8003d9e:	f7ff f95d 	bl	800305c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003da2:	480c      	ldr	r0, [pc, #48]	; (8003dd4 <prvInitialiseTaskLists+0x70>)
 8003da4:	f7ff f95a 	bl	800305c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003da8:	480b      	ldr	r0, [pc, #44]	; (8003dd8 <prvInitialiseTaskLists+0x74>)
 8003daa:	f7ff f957 	bl	800305c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003dae:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <prvInitialiseTaskLists+0x78>)
 8003db0:	4a05      	ldr	r2, [pc, #20]	; (8003dc8 <prvInitialiseTaskLists+0x64>)
 8003db2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003db4:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <prvInitialiseTaskLists+0x7c>)
 8003db6:	4a05      	ldr	r2, [pc, #20]	; (8003dcc <prvInitialiseTaskLists+0x68>)
 8003db8:	601a      	str	r2, [r3, #0]
}
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20001104 	.word	0x20001104
 8003dc8:	20001190 	.word	0x20001190
 8003dcc:	200011a4 	.word	0x200011a4
 8003dd0:	200011c0 	.word	0x200011c0
 8003dd4:	200011d4 	.word	0x200011d4
 8003dd8:	200011ec 	.word	0x200011ec
 8003ddc:	200011b8 	.word	0x200011b8
 8003de0:	200011bc 	.word	0x200011bc

08003de4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dea:	e019      	b.n	8003e20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003dec:	f7ff fad6 	bl	800339c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003df0:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <prvCheckTasksWaitingTermination+0x50>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff f9b3 	bl	8003168 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e02:	4b0d      	ldr	r3, [pc, #52]	; (8003e38 <prvCheckTasksWaitingTermination+0x54>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	4a0b      	ldr	r2, [pc, #44]	; (8003e38 <prvCheckTasksWaitingTermination+0x54>)
 8003e0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <prvCheckTasksWaitingTermination+0x58>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <prvCheckTasksWaitingTermination+0x58>)
 8003e14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e16:	f7ff faf1 	bl	80033fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f810 	bl	8003e40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e20:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <prvCheckTasksWaitingTermination+0x58>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1e1      	bne.n	8003dec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	200011d4 	.word	0x200011d4
 8003e38:	20001200 	.word	0x20001200
 8003e3c:	200011e8 	.word	0x200011e8

08003e40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	334c      	adds	r3, #76	; 0x4c
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 f8f1 	bl	8004034 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d108      	bne.n	8003e6e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fe ffe7 	bl	8002e34 <vPortFree>
				vPortFree( pxTCB );
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fe ffe4 	bl	8002e34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e6c:	e018      	b.n	8003ea0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d103      	bne.n	8003e80 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7fe ffdb 	bl	8002e34 <vPortFree>
	}
 8003e7e:	e00f      	b.n	8003ea0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d00a      	beq.n	8003ea0 <prvDeleteTCB+0x60>
	__asm volatile
 8003e8a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	60fb      	str	r3, [r7, #12]
}
 8003e9c:	bf00      	nop
 8003e9e:	e7fe      	b.n	8003e9e <prvDeleteTCB+0x5e>
	}
 8003ea0:	bf00      	nop
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eae:	4b0e      	ldr	r3, [pc, #56]	; (8003ee8 <prvResetNextTaskUnblockTime+0x40>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <prvResetNextTaskUnblockTime+0x14>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <prvResetNextTaskUnblockTime+0x16>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d004      	beq.n	8003ecc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ec2:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <prvResetNextTaskUnblockTime+0x44>)
 8003ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003eca:	e008      	b.n	8003ede <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <prvResetNextTaskUnblockTime+0x40>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	4a04      	ldr	r2, [pc, #16]	; (8003eec <prvResetNextTaskUnblockTime+0x44>)
 8003edc:	6013      	str	r3, [r2, #0]
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr
 8003ee8:	200011b8 	.word	0x200011b8
 8003eec:	20001220 	.word	0x20001220

08003ef0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003efa:	4b29      	ldr	r3, [pc, #164]	; (8003fa0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f00:	4b28      	ldr	r3, [pc, #160]	; (8003fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3304      	adds	r3, #4
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff f92e 	bl	8003168 <uxListRemove>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10b      	bne.n	8003f2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003f12:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	2201      	movs	r2, #1
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	43da      	mvns	r2, r3
 8003f20:	4b21      	ldr	r3, [pc, #132]	; (8003fa8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4013      	ands	r3, r2
 8003f26:	4a20      	ldr	r2, [pc, #128]	; (8003fa8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f30:	d10a      	bne.n	8003f48 <prvAddCurrentTaskToDelayedList+0x58>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d007      	beq.n	8003f48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f38:	4b1a      	ldr	r3, [pc, #104]	; (8003fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	4619      	mov	r1, r3
 8003f40:	481a      	ldr	r0, [pc, #104]	; (8003fac <prvAddCurrentTaskToDelayedList+0xbc>)
 8003f42:	f7ff f8b6 	bl	80030b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f46:	e026      	b.n	8003f96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f50:	4b14      	ldr	r3, [pc, #80]	; (8003fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d209      	bcs.n	8003f74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f60:	4b13      	ldr	r3, [pc, #76]	; (8003fb0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	f7ff f8c3 	bl	80030f8 <vListInsert>
}
 8003f72:	e010      	b.n	8003f96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f74:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4610      	mov	r0, r2
 8003f82:	f7ff f8b9 	bl	80030f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f86:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d202      	bcs.n	8003f96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003f90:	4a09      	ldr	r2, [pc, #36]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	6013      	str	r3, [r2, #0]
}
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20001204 	.word	0x20001204
 8003fa4:	20001100 	.word	0x20001100
 8003fa8:	20001208 	.word	0x20001208
 8003fac:	200011ec 	.word	0x200011ec
 8003fb0:	200011bc 	.word	0x200011bc
 8003fb4:	200011b8 	.word	0x200011b8
 8003fb8:	20001220 	.word	0x20001220

08003fbc <__libc_init_array>:
 8003fbc:	b570      	push	{r4, r5, r6, lr}
 8003fbe:	2600      	movs	r6, #0
 8003fc0:	4d0c      	ldr	r5, [pc, #48]	; (8003ff4 <__libc_init_array+0x38>)
 8003fc2:	4c0d      	ldr	r4, [pc, #52]	; (8003ff8 <__libc_init_array+0x3c>)
 8003fc4:	1b64      	subs	r4, r4, r5
 8003fc6:	10a4      	asrs	r4, r4, #2
 8003fc8:	42a6      	cmp	r6, r4
 8003fca:	d109      	bne.n	8003fe0 <__libc_init_array+0x24>
 8003fcc:	f000 f8e2 	bl	8004194 <_init>
 8003fd0:	2600      	movs	r6, #0
 8003fd2:	4d0a      	ldr	r5, [pc, #40]	; (8003ffc <__libc_init_array+0x40>)
 8003fd4:	4c0a      	ldr	r4, [pc, #40]	; (8004000 <__libc_init_array+0x44>)
 8003fd6:	1b64      	subs	r4, r4, r5
 8003fd8:	10a4      	asrs	r4, r4, #2
 8003fda:	42a6      	cmp	r6, r4
 8003fdc:	d105      	bne.n	8003fea <__libc_init_array+0x2e>
 8003fde:	bd70      	pop	{r4, r5, r6, pc}
 8003fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fe4:	4798      	blx	r3
 8003fe6:	3601      	adds	r6, #1
 8003fe8:	e7ee      	b.n	8003fc8 <__libc_init_array+0xc>
 8003fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fee:	4798      	blx	r3
 8003ff0:	3601      	adds	r6, #1
 8003ff2:	e7f2      	b.n	8003fda <__libc_init_array+0x1e>
 8003ff4:	08004298 	.word	0x08004298
 8003ff8:	08004298 	.word	0x08004298
 8003ffc:	08004298 	.word	0x08004298
 8004000:	0800429c 	.word	0x0800429c

08004004 <__retarget_lock_acquire_recursive>:
 8004004:	4770      	bx	lr

08004006 <__retarget_lock_release_recursive>:
 8004006:	4770      	bx	lr

08004008 <memset>:
 8004008:	4603      	mov	r3, r0
 800400a:	4402      	add	r2, r0
 800400c:	4293      	cmp	r3, r2
 800400e:	d100      	bne.n	8004012 <memset+0xa>
 8004010:	4770      	bx	lr
 8004012:	f803 1b01 	strb.w	r1, [r3], #1
 8004016:	e7f9      	b.n	800400c <memset+0x4>

08004018 <cleanup_glue>:
 8004018:	b538      	push	{r3, r4, r5, lr}
 800401a:	460c      	mov	r4, r1
 800401c:	6809      	ldr	r1, [r1, #0]
 800401e:	4605      	mov	r5, r0
 8004020:	b109      	cbz	r1, 8004026 <cleanup_glue+0xe>
 8004022:	f7ff fff9 	bl	8004018 <cleanup_glue>
 8004026:	4621      	mov	r1, r4
 8004028:	4628      	mov	r0, r5
 800402a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800402e:	f000 b869 	b.w	8004104 <_free_r>
	...

08004034 <_reclaim_reent>:
 8004034:	4b2c      	ldr	r3, [pc, #176]	; (80040e8 <_reclaim_reent+0xb4>)
 8004036:	b570      	push	{r4, r5, r6, lr}
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4604      	mov	r4, r0
 800403c:	4283      	cmp	r3, r0
 800403e:	d051      	beq.n	80040e4 <_reclaim_reent+0xb0>
 8004040:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004042:	b143      	cbz	r3, 8004056 <_reclaim_reent+0x22>
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d14a      	bne.n	80040e0 <_reclaim_reent+0xac>
 800404a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800404c:	6819      	ldr	r1, [r3, #0]
 800404e:	b111      	cbz	r1, 8004056 <_reclaim_reent+0x22>
 8004050:	4620      	mov	r0, r4
 8004052:	f000 f857 	bl	8004104 <_free_r>
 8004056:	6961      	ldr	r1, [r4, #20]
 8004058:	b111      	cbz	r1, 8004060 <_reclaim_reent+0x2c>
 800405a:	4620      	mov	r0, r4
 800405c:	f000 f852 	bl	8004104 <_free_r>
 8004060:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004062:	b111      	cbz	r1, 800406a <_reclaim_reent+0x36>
 8004064:	4620      	mov	r0, r4
 8004066:	f000 f84d 	bl	8004104 <_free_r>
 800406a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800406c:	b111      	cbz	r1, 8004074 <_reclaim_reent+0x40>
 800406e:	4620      	mov	r0, r4
 8004070:	f000 f848 	bl	8004104 <_free_r>
 8004074:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004076:	b111      	cbz	r1, 800407e <_reclaim_reent+0x4a>
 8004078:	4620      	mov	r0, r4
 800407a:	f000 f843 	bl	8004104 <_free_r>
 800407e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004080:	b111      	cbz	r1, 8004088 <_reclaim_reent+0x54>
 8004082:	4620      	mov	r0, r4
 8004084:	f000 f83e 	bl	8004104 <_free_r>
 8004088:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800408a:	b111      	cbz	r1, 8004092 <_reclaim_reent+0x5e>
 800408c:	4620      	mov	r0, r4
 800408e:	f000 f839 	bl	8004104 <_free_r>
 8004092:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004094:	b111      	cbz	r1, 800409c <_reclaim_reent+0x68>
 8004096:	4620      	mov	r0, r4
 8004098:	f000 f834 	bl	8004104 <_free_r>
 800409c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800409e:	b111      	cbz	r1, 80040a6 <_reclaim_reent+0x72>
 80040a0:	4620      	mov	r0, r4
 80040a2:	f000 f82f 	bl	8004104 <_free_r>
 80040a6:	69a3      	ldr	r3, [r4, #24]
 80040a8:	b1e3      	cbz	r3, 80040e4 <_reclaim_reent+0xb0>
 80040aa:	4620      	mov	r0, r4
 80040ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80040ae:	4798      	blx	r3
 80040b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80040b2:	b1b9      	cbz	r1, 80040e4 <_reclaim_reent+0xb0>
 80040b4:	4620      	mov	r0, r4
 80040b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80040ba:	f7ff bfad 	b.w	8004018 <cleanup_glue>
 80040be:	5949      	ldr	r1, [r1, r5]
 80040c0:	b941      	cbnz	r1, 80040d4 <_reclaim_reent+0xa0>
 80040c2:	3504      	adds	r5, #4
 80040c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040c6:	2d80      	cmp	r5, #128	; 0x80
 80040c8:	68d9      	ldr	r1, [r3, #12]
 80040ca:	d1f8      	bne.n	80040be <_reclaim_reent+0x8a>
 80040cc:	4620      	mov	r0, r4
 80040ce:	f000 f819 	bl	8004104 <_free_r>
 80040d2:	e7ba      	b.n	800404a <_reclaim_reent+0x16>
 80040d4:	680e      	ldr	r6, [r1, #0]
 80040d6:	4620      	mov	r0, r4
 80040d8:	f000 f814 	bl	8004104 <_free_r>
 80040dc:	4631      	mov	r1, r6
 80040de:	e7ef      	b.n	80040c0 <_reclaim_reent+0x8c>
 80040e0:	2500      	movs	r5, #0
 80040e2:	e7ef      	b.n	80040c4 <_reclaim_reent+0x90>
 80040e4:	bd70      	pop	{r4, r5, r6, pc}
 80040e6:	bf00      	nop
 80040e8:	20000010 	.word	0x20000010

080040ec <__malloc_lock>:
 80040ec:	4801      	ldr	r0, [pc, #4]	; (80040f4 <__malloc_lock+0x8>)
 80040ee:	f7ff bf89 	b.w	8004004 <__retarget_lock_acquire_recursive>
 80040f2:	bf00      	nop
 80040f4:	2000122c 	.word	0x2000122c

080040f8 <__malloc_unlock>:
 80040f8:	4801      	ldr	r0, [pc, #4]	; (8004100 <__malloc_unlock+0x8>)
 80040fa:	f7ff bf84 	b.w	8004006 <__retarget_lock_release_recursive>
 80040fe:	bf00      	nop
 8004100:	2000122c 	.word	0x2000122c

08004104 <_free_r>:
 8004104:	b538      	push	{r3, r4, r5, lr}
 8004106:	4605      	mov	r5, r0
 8004108:	2900      	cmp	r1, #0
 800410a:	d040      	beq.n	800418e <_free_r+0x8a>
 800410c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004110:	1f0c      	subs	r4, r1, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	bfb8      	it	lt
 8004116:	18e4      	addlt	r4, r4, r3
 8004118:	f7ff ffe8 	bl	80040ec <__malloc_lock>
 800411c:	4a1c      	ldr	r2, [pc, #112]	; (8004190 <_free_r+0x8c>)
 800411e:	6813      	ldr	r3, [r2, #0]
 8004120:	b933      	cbnz	r3, 8004130 <_free_r+0x2c>
 8004122:	6063      	str	r3, [r4, #4]
 8004124:	6014      	str	r4, [r2, #0]
 8004126:	4628      	mov	r0, r5
 8004128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800412c:	f7ff bfe4 	b.w	80040f8 <__malloc_unlock>
 8004130:	42a3      	cmp	r3, r4
 8004132:	d908      	bls.n	8004146 <_free_r+0x42>
 8004134:	6820      	ldr	r0, [r4, #0]
 8004136:	1821      	adds	r1, r4, r0
 8004138:	428b      	cmp	r3, r1
 800413a:	bf01      	itttt	eq
 800413c:	6819      	ldreq	r1, [r3, #0]
 800413e:	685b      	ldreq	r3, [r3, #4]
 8004140:	1809      	addeq	r1, r1, r0
 8004142:	6021      	streq	r1, [r4, #0]
 8004144:	e7ed      	b.n	8004122 <_free_r+0x1e>
 8004146:	461a      	mov	r2, r3
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	b10b      	cbz	r3, 8004150 <_free_r+0x4c>
 800414c:	42a3      	cmp	r3, r4
 800414e:	d9fa      	bls.n	8004146 <_free_r+0x42>
 8004150:	6811      	ldr	r1, [r2, #0]
 8004152:	1850      	adds	r0, r2, r1
 8004154:	42a0      	cmp	r0, r4
 8004156:	d10b      	bne.n	8004170 <_free_r+0x6c>
 8004158:	6820      	ldr	r0, [r4, #0]
 800415a:	4401      	add	r1, r0
 800415c:	1850      	adds	r0, r2, r1
 800415e:	4283      	cmp	r3, r0
 8004160:	6011      	str	r1, [r2, #0]
 8004162:	d1e0      	bne.n	8004126 <_free_r+0x22>
 8004164:	6818      	ldr	r0, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	4401      	add	r1, r0
 800416a:	6011      	str	r1, [r2, #0]
 800416c:	6053      	str	r3, [r2, #4]
 800416e:	e7da      	b.n	8004126 <_free_r+0x22>
 8004170:	d902      	bls.n	8004178 <_free_r+0x74>
 8004172:	230c      	movs	r3, #12
 8004174:	602b      	str	r3, [r5, #0]
 8004176:	e7d6      	b.n	8004126 <_free_r+0x22>
 8004178:	6820      	ldr	r0, [r4, #0]
 800417a:	1821      	adds	r1, r4, r0
 800417c:	428b      	cmp	r3, r1
 800417e:	bf01      	itttt	eq
 8004180:	6819      	ldreq	r1, [r3, #0]
 8004182:	685b      	ldreq	r3, [r3, #4]
 8004184:	1809      	addeq	r1, r1, r0
 8004186:	6021      	streq	r1, [r4, #0]
 8004188:	6063      	str	r3, [r4, #4]
 800418a:	6054      	str	r4, [r2, #4]
 800418c:	e7cb      	b.n	8004126 <_free_r+0x22>
 800418e:	bd38      	pop	{r3, r4, r5, pc}
 8004190:	20001230 	.word	0x20001230

08004194 <_init>:
 8004194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004196:	bf00      	nop
 8004198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419a:	bc08      	pop	{r3}
 800419c:	469e      	mov	lr, r3
 800419e:	4770      	bx	lr

080041a0 <_fini>:
 80041a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a2:	bf00      	nop
 80041a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a6:	bc08      	pop	{r3}
 80041a8:	469e      	mov	lr, r3
 80041aa:	4770      	bx	lr
