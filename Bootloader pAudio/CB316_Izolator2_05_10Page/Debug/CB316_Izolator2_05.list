
CB316_Izolator2_05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000656c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080066f4  080066f4  000166f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006740  08006740  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08006740  08006740  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006740  08006740  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006740  08006740  00016740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006748  08006748  00016748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800674c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          00000db4  20000028  20000028  00020028  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000ddc  20000ddc  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027774  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b93  00000000  00000000  000477c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000202e2  00000000  00000000  0004b35b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001338  00000000  00000000  0006b640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001ba8  00000000  00000000  0006c978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fc53  00000000  00000000  0006e520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000266c3  00000000  00000000  0008e173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b2227  00000000  00000000  000b4836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00166a5d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000034e4  00000000  00000000  00166ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080066dc 	.word	0x080066dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	080066dc 	.word	0x080066dc

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
 80001ce:	7818      	ldrb	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb3 f3f0 	udiv	r3, r3, r0
 80001d8:	4a0c      	ldr	r2, [pc, #48]	; (800020c <HAL_InitTick+0x44>)
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 feae 	bl	8000f40 <HAL_SYSTICK_Config>
 80001e4:	b968      	cbnz	r0, 8000202 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e6:	2c0f      	cmp	r4, #15
 80001e8:	d901      	bls.n	80001ee <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80001ea:	2001      	movs	r0, #1
 80001ec:	e00a      	b.n	8000204 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ee:	2200      	movs	r2, #0
 80001f0:	4621      	mov	r1, r4
 80001f2:	f04f 30ff 	mov.w	r0, #4294967295
 80001f6:	f000 fe61 	bl	8000ebc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001fa:	4b05      	ldr	r3, [pc, #20]	; (8000210 <HAL_InitTick+0x48>)
 80001fc:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 80001fe:	2000      	movs	r0, #0
 8000200:	e000      	b.n	8000204 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000202:	2001      	movs	r0, #1
}
 8000204:	bd10      	pop	{r4, pc}
 8000206:	bf00      	nop
 8000208:	20000000 	.word	0x20000000
 800020c:	20000020 	.word	0x20000020
 8000210:	20000004 	.word	0x20000004

08000214 <HAL_Init>:
{
 8000214:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000216:	4a07      	ldr	r2, [pc, #28]	; (8000234 <HAL_Init+0x20>)
 8000218:	6813      	ldr	r3, [r2, #0]
 800021a:	f043 0310 	orr.w	r3, r3, #16
 800021e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000220:	2003      	movs	r0, #3
 8000222:	f000 fe39 	bl	8000e98 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000226:	2002      	movs	r0, #2
 8000228:	f7ff ffce 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 800022c:	f006 f894 	bl	8006358 <HAL_MspInit>
}
 8000230:	2000      	movs	r0, #0
 8000232:	bd08      	pop	{r3, pc}
 8000234:	40022000 	.word	0x40022000

08000238 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000238:	4a03      	ldr	r2, [pc, #12]	; (8000248 <HAL_IncTick+0x10>)
 800023a:	6811      	ldr	r1, [r2, #0]
 800023c:	4b03      	ldr	r3, [pc, #12]	; (800024c <HAL_IncTick+0x14>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	440b      	add	r3, r1
 8000242:	6013      	str	r3, [r2, #0]
}
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	20000b3c 	.word	0x20000b3c
 800024c:	20000000 	.word	0x20000000

08000250 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000250:	4b01      	ldr	r3, [pc, #4]	; (8000258 <HAL_GetTick+0x8>)
 8000252:	6818      	ldr	r0, [r3, #0]
}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	20000b3c 	.word	0x20000b3c

0800025c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800025c:	b538      	push	{r3, r4, r5, lr}
 800025e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000260:	f7ff fff6 	bl	8000250 <HAL_GetTick>
 8000264:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000266:	f1b4 3fff 	cmp.w	r4, #4294967295
 800026a:	d002      	beq.n	8000272 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <HAL_Delay+0x24>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000272:	f7ff ffed 	bl	8000250 <HAL_GetTick>
 8000276:	1b40      	subs	r0, r0, r5
 8000278:	42a0      	cmp	r0, r4
 800027a:	d3fa      	bcc.n	8000272 <HAL_Delay+0x16>
  {
  }
}
 800027c:	bd38      	pop	{r3, r4, r5, pc}
 800027e:	bf00      	nop
 8000280:	20000000 	.word	0x20000000

08000284 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000284:	4770      	bx	lr

08000286 <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000286:	4770      	bx	lr

08000288 <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000288:	4770      	bx	lr

0800028a <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800028a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800028c:	6802      	ldr	r2, [r0, #0]
 800028e:	6893      	ldr	r3, [r2, #8]
 8000290:	f003 0303 	and.w	r3, r3, #3
 8000294:	2b01      	cmp	r3, #1
 8000296:	d001      	beq.n	800029c <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000298:	2000      	movs	r0, #0
}
 800029a:	bd38      	pop	{r3, r4, r5, pc}
 800029c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 800029e:	6813      	ldr	r3, [r2, #0]
 80002a0:	f013 0f01 	tst.w	r3, #1
 80002a4:	d033      	beq.n	800030e <ADC_Disable+0x84>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80002a6:	6893      	ldr	r3, [r2, #8]
 80002a8:	f003 030d 	and.w	r3, r3, #13
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d009      	beq.n	80002c4 <ADC_Disable+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80002b2:	f043 0310 	orr.w	r3, r3, #16
 80002b6:	6403      	str	r3, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002b8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6443      	str	r3, [r0, #68]	; 0x44
      return HAL_ERROR;
 80002c0:	2001      	movs	r0, #1
 80002c2:	e7ea      	b.n	800029a <ADC_Disable+0x10>
      __HAL_ADC_DISABLE(hadc);
 80002c4:	6893      	ldr	r3, [r2, #8]
 80002c6:	f043 0302 	orr.w	r3, r3, #2
 80002ca:	6093      	str	r3, [r2, #8]
 80002cc:	6803      	ldr	r3, [r0, #0]
 80002ce:	2203      	movs	r2, #3
 80002d0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80002d2:	f7ff ffbd 	bl	8000250 <HAL_GetTick>
 80002d6:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80002d8:	6823      	ldr	r3, [r4, #0]
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	f013 0f01 	tst.w	r3, #1
 80002e0:	d013      	beq.n	800030a <ADC_Disable+0x80>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80002e2:	f7ff ffb5 	bl	8000250 <HAL_GetTick>
 80002e6:	1b40      	subs	r0, r0, r5
 80002e8:	2802      	cmp	r0, #2
 80002ea:	d9f5      	bls.n	80002d8 <ADC_Disable+0x4e>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80002ec:	6823      	ldr	r3, [r4, #0]
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	f013 0f01 	tst.w	r3, #1
 80002f4:	d0f0      	beq.n	80002d8 <ADC_Disable+0x4e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80002f8:	f043 0310 	orr.w	r3, r3, #16
 80002fc:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	6463      	str	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8000306:	2001      	movs	r0, #1
 8000308:	e7c7      	b.n	800029a <ADC_Disable+0x10>
  return HAL_OK;
 800030a:	2000      	movs	r0, #0
 800030c:	e7c5      	b.n	800029a <ADC_Disable+0x10>
 800030e:	2000      	movs	r0, #0
 8000310:	e7c3      	b.n	800029a <ADC_Disable+0x10>
	...

08000314 <ADC_Enable>:
{
 8000314:	b538      	push	{r3, r4, r5, lr}
 8000316:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000318:	6802      	ldr	r2, [r0, #0]
 800031a:	6893      	ldr	r3, [r2, #8]
 800031c:	f003 0303 	and.w	r3, r3, #3
 8000320:	2b01      	cmp	r3, #1
 8000322:	d00d      	beq.n	8000340 <ADC_Enable+0x2c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000324:	6891      	ldr	r1, [r2, #8]
 8000326:	4b1a      	ldr	r3, [pc, #104]	; (8000390 <ADC_Enable+0x7c>)
 8000328:	4219      	tst	r1, r3
 800032a:	d00f      	beq.n	800034c <ADC_Enable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800032c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800032e:	f043 0310 	orr.w	r3, r3, #16
 8000332:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000334:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000336:	f043 0301 	orr.w	r3, r3, #1
 800033a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800033c:	2001      	movs	r0, #1
}
 800033e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000340:	6813      	ldr	r3, [r2, #0]
 8000342:	f013 0f01 	tst.w	r3, #1
 8000346:	d0ed      	beq.n	8000324 <ADC_Enable+0x10>
  return HAL_OK;
 8000348:	2000      	movs	r0, #0
 800034a:	e7f8      	b.n	800033e <ADC_Enable+0x2a>
    __HAL_ADC_ENABLE(hadc);
 800034c:	6893      	ldr	r3, [r2, #8]
 800034e:	f043 0301 	orr.w	r3, r3, #1
 8000352:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8000354:	f7ff ff7c 	bl	8000250 <HAL_GetTick>
 8000358:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800035a:	6823      	ldr	r3, [r4, #0]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f013 0f01 	tst.w	r3, #1
 8000362:	d113      	bne.n	800038c <ADC_Enable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000364:	f7ff ff74 	bl	8000250 <HAL_GetTick>
 8000368:	1b43      	subs	r3, r0, r5
 800036a:	2b02      	cmp	r3, #2
 800036c:	d9f5      	bls.n	800035a <ADC_Enable+0x46>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800036e:	6823      	ldr	r3, [r4, #0]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f013 0f01 	tst.w	r3, #1
 8000376:	d1f0      	bne.n	800035a <ADC_Enable+0x46>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000378:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800037a:	f043 0310 	orr.w	r3, r3, #16
 800037e:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000380:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	6463      	str	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8000388:	2001      	movs	r0, #1
 800038a:	e7d8      	b.n	800033e <ADC_Enable+0x2a>
  return HAL_OK;
 800038c:	2000      	movs	r0, #0
 800038e:	e7d6      	b.n	800033e <ADC_Enable+0x2a>
 8000390:	8000003f 	.word	0x8000003f

08000394 <ADC_DMAError>:
{
 8000394:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000396:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000398:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800039a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800039e:	6403      	str	r3, [r0, #64]	; 0x40
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80003a0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80003a2:	f043 0304 	orr.w	r3, r3, #4
 80003a6:	6443      	str	r3, [r0, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 80003a8:	f7ff ff6e 	bl	8000288 <HAL_ADC_ErrorCallback>
}
 80003ac:	bd08      	pop	{r3, pc}

080003ae <ADC_DMAHalfConvCplt>:
{
 80003ae:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80003b0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80003b2:	f7ff ff67 	bl	8000284 <HAL_ADC_ConvHalfCpltCallback>
}
 80003b6:	bd08      	pop	{r3, pc}

080003b8 <ADC_DMAConvCplt>:
{
 80003b8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80003ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80003bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003be:	f012 0f50 	tst.w	r2, #80	; 0x50
 80003c2:	d11a      	bne.n	80003fa <ADC_DMAConvCplt+0x42>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80003c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80003ca:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	68d2      	ldr	r2, [r2, #12]
 80003d0:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80003d4:	d10d      	bne.n	80003f2 <ADC_DMAConvCplt+0x3a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80003d6:	7e5a      	ldrb	r2, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80003d8:	b95a      	cbnz	r2, 80003f2 <ADC_DMAConvCplt+0x3a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80003da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80003e0:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80003e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003e4:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80003e8:	d103      	bne.n	80003f2 <ADC_DMAConvCplt+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80003ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003ec:	f042 0201 	orr.w	r2, r2, #1
 80003f0:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 80003f2:	4618      	mov	r0, r3
 80003f4:	f005 fc64 	bl	8005cc0 <HAL_ADC_ConvCpltCallback>
}
 80003f8:	bd08      	pop	{r3, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80003fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fe:	4798      	blx	r3
}
 8000400:	e7fa      	b.n	80003f8 <ADC_DMAConvCplt+0x40>
	...

08000404 <HAL_ADC_Init>:
{
 8000404:	b530      	push	{r4, r5, lr}
 8000406:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000408:	2300      	movs	r3, #0
 800040a:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 800040c:	2800      	cmp	r0, #0
 800040e:	f000 80f7 	beq.w	8000600 <HAL_ADC_Init+0x1fc>
 8000412:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000414:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000416:	f013 0f10 	tst.w	r3, #16
 800041a:	d152      	bne.n	80004c2 <HAL_ADC_Init+0xbe>
    if (hadc->State == HAL_ADC_STATE_RESET)
 800041c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800041e:	b1ab      	cbz	r3, 800044c <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000420:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000422:	6823      	ldr	r3, [r4, #0]
 8000424:	689a      	ldr	r2, [r3, #8]
 8000426:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800042a:	d003      	beq.n	8000434 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800042c:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800042e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8000432:	d047      	beq.n	80004c4 <HAL_ADC_Init+0xc0>
      ADC_STATE_CLR_SET(hadc->State,
 8000434:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000436:	f023 0312 	bic.w	r3, r3, #18
 800043a:	f043 0310 	orr.w	r3, r3, #16
 800043e:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000440:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	6463      	str	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 8000448:	2001      	movs	r0, #1
 800044a:	e03b      	b.n	80004c4 <HAL_ADC_Init+0xc0>
      ADC_CLEAR_ERRORCODE(hadc);
 800044c:	6443      	str	r3, [r0, #68]	; 0x44
      hadc->InjectionConfig.ChannelCount = 0U;
 800044e:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000450:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->Lock = HAL_UNLOCKED;
 8000452:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8000456:	f002 fd6d 	bl	8002f34 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800045a:	6823      	ldr	r3, [r4, #0]
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000462:	d001      	beq.n	8000468 <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000464:	2000      	movs	r0, #0
 8000466:	e7dc      	b.n	8000422 <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 8000468:	4620      	mov	r0, r4
 800046a:	f7ff ff0e 	bl	800028a <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800046e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000470:	f013 0f10 	tst.w	r3, #16
 8000474:	d1d5      	bne.n	8000422 <HAL_ADC_Init+0x1e>
 8000476:	2800      	cmp	r0, #0
 8000478:	d1d3      	bne.n	8000422 <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 800047a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800047c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000480:	f023 0302 	bic.w	r3, r3, #2
 8000484:	f043 0302 	orr.w	r3, r3, #2
 8000488:	6423      	str	r3, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800048a:	6822      	ldr	r2, [r4, #0]
 800048c:	6893      	ldr	r3, [r2, #8]
 800048e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000492:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000494:	6822      	ldr	r2, [r4, #0]
 8000496:	6893      	ldr	r3, [r2, #8]
 8000498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800049c:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800049e:	4b59      	ldr	r3, [pc, #356]	; (8000604 <HAL_ADC_Init+0x200>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a59      	ldr	r2, [pc, #356]	; (8000608 <HAL_ADC_Init+0x204>)
 80004a4:	fba2 2303 	umull	r2, r3, r2, r3
 80004a8:	0c9b      	lsrs	r3, r3, #18
 80004aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80004b2:	e002      	b.n	80004ba <HAL_ADC_Init+0xb6>
            wait_loop_index--;
 80004b4:	9b01      	ldr	r3, [sp, #4]
 80004b6:	3b01      	subs	r3, #1
 80004b8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80004ba:	9b01      	ldr	r3, [sp, #4]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d1f9      	bne.n	80004b4 <HAL_ADC_Init+0xb0>
 80004c0:	e7af      	b.n	8000422 <HAL_ADC_Init+0x1e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80004c2:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80004c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80004c6:	f013 0f10 	tst.w	r3, #16
 80004ca:	f040 8090 	bne.w	80005ee <HAL_ADC_Init+0x1ea>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	f040 808d 	bne.w	80005ee <HAL_ADC_Init+0x1ea>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80004d4:	6823      	ldr	r3, [r4, #0]
 80004d6:	6899      	ldr	r1, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80004d8:	f011 0104 	ands.w	r1, r1, #4
 80004dc:	f040 8087 	bne.w	80005ee <HAL_ADC_Init+0x1ea>
    ADC_STATE_CLR_SET(hadc->State,
 80004e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80004e2:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80004e6:	f042 0202 	orr.w	r2, r2, #2
 80004ea:	6422      	str	r2, [r4, #64]	; 0x40
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80004ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80004f0:	d054      	beq.n	800059c <HAL_ADC_Init+0x198>
 80004f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80004f6:	9202      	str	r2, [sp, #8]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80004f8:	689a      	ldr	r2, [r3, #8]
 80004fa:	f002 0203 	and.w	r2, r2, #3
 80004fe:	2a01      	cmp	r2, #1
 8000500:	d04f      	beq.n	80005a2 <HAL_ADC_Init+0x19e>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000502:	9b02      	ldr	r3, [sp, #8]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000504:	b123      	cbz	r3, 8000510 <HAL_ADC_Init+0x10c>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000506:	689a      	ldr	r2, [r3, #8]
 8000508:	f002 0203 	and.w	r2, r2, #3
 800050c:	2a01      	cmp	r2, #1
 800050e:	d04d      	beq.n	80005ac <HAL_ADC_Init+0x1a8>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000510:	4a3e      	ldr	r2, [pc, #248]	; (800060c <HAL_ADC_Init+0x208>)
 8000512:	6893      	ldr	r3, [r2, #8]
 8000514:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000518:	6865      	ldr	r5, [r4, #4]
 800051a:	432b      	orrs	r3, r5
 800051c:	6093      	str	r3, [r2, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800051e:	7e62      	ldrb	r2, [r4, #25]
 8000520:	0353      	lsls	r3, r2, #13
 8000522:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8000524:	2d01      	cmp	r5, #1
 8000526:	d001      	beq.n	800052c <HAL_ADC_Init+0x128>
 8000528:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052c:	430b      	orrs	r3, r1
 800052e:	68e1      	ldr	r1, [r4, #12]
 8000530:	430b      	orrs	r3, r1
 8000532:	68a1      	ldr	r1, [r4, #8]
 8000534:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000536:	f894 1020 	ldrb.w	r1, [r4, #32]
 800053a:	2901      	cmp	r1, #1
 800053c:	d03b      	beq.n	80005b6 <HAL_ADC_Init+0x1b2>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800053e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000540:	2a01      	cmp	r2, #1
 8000542:	d002      	beq.n	800054a <HAL_ADC_Init+0x146>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000544:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000546:	430a      	orrs	r2, r1
 8000548:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800054a:	6822      	ldr	r2, [r4, #0]
 800054c:	6891      	ldr	r1, [r2, #8]
 800054e:	f011 0f0c 	tst.w	r1, #12
 8000552:	d10c      	bne.n	800056e <HAL_ADC_Init+0x16a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000554:	68d1      	ldr	r1, [r2, #12]
 8000556:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800055a:	f021 0102 	bic.w	r1, r1, #2
 800055e:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000560:	7e21      	ldrb	r1, [r4, #24]
 8000562:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8000566:	0052      	lsls	r2, r2, #1
 8000568:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 800056c:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 800056e:	6821      	ldr	r1, [r4, #0]
 8000570:	68cd      	ldr	r5, [r1, #12]
 8000572:	4a27      	ldr	r2, [pc, #156]	; (8000610 <HAL_ADC_Init+0x20c>)
 8000574:	402a      	ands	r2, r5
 8000576:	4313      	orrs	r3, r2
 8000578:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800057a:	6923      	ldr	r3, [r4, #16]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d02d      	beq.n	80005dc <HAL_ADC_Init+0x1d8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000580:	6822      	ldr	r2, [r4, #0]
 8000582:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000584:	f023 030f 	bic.w	r3, r3, #15
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800058a:	2300      	movs	r3, #0
 800058c:	6463      	str	r3, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800058e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000590:	f023 0303 	bic.w	r3, r3, #3
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6423      	str	r3, [r4, #64]	; 0x40
 800059a:	e02f      	b.n	80005fc <HAL_ADC_Init+0x1f8>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800059c:	4a1d      	ldr	r2, [pc, #116]	; (8000614 <HAL_ADC_Init+0x210>)
 800059e:	9202      	str	r2, [sp, #8]
 80005a0:	e7aa      	b.n	80004f8 <HAL_ADC_Init+0xf4>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f013 0f01 	tst.w	r3, #1
 80005a8:	d1b9      	bne.n	800051e <HAL_ADC_Init+0x11a>
 80005aa:	e7aa      	b.n	8000502 <HAL_ADC_Init+0xfe>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f013 0f01 	tst.w	r3, #1
 80005b2:	d1b4      	bne.n	800051e <HAL_ADC_Init+0x11a>
 80005b4:	e7ac      	b.n	8000510 <HAL_ADC_Init+0x10c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80005b6:	b932      	cbnz	r2, 80005c6 <HAL_ADC_Init+0x1c2>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80005b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80005ba:	3a01      	subs	r2, #1
 80005bc:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80005c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c4:	e7bb      	b.n	800053e <HAL_ADC_Init+0x13a>
        ADC_STATE_CLR_SET(hadc->State,
 80005c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80005c8:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80005cc:	f042 0220 	orr.w	r2, r2, #32
 80005d0:	6422      	str	r2, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005d2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80005d4:	f042 0201 	orr.w	r2, r2, #1
 80005d8:	6462      	str	r2, [r4, #68]	; 0x44
 80005da:	e7b0      	b.n	800053e <HAL_ADC_Init+0x13a>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80005dc:	6821      	ldr	r1, [r4, #0]
 80005de:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80005e0:	f023 030f 	bic.w	r3, r3, #15
 80005e4:	69e2      	ldr	r2, [r4, #28]
 80005e6:	3a01      	subs	r2, #1
 80005e8:	4313      	orrs	r3, r2
 80005ea:	630b      	str	r3, [r1, #48]	; 0x30
 80005ec:	e7cd      	b.n	800058a <HAL_ADC_Init+0x186>
    ADC_STATE_CLR_SET(hadc->State,
 80005ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005f0:	f023 0312 	bic.w	r3, r3, #18
 80005f4:	f043 0310 	orr.w	r3, r3, #16
 80005f8:	6423      	str	r3, [r4, #64]	; 0x40
    tmp_hal_status = HAL_ERROR; 
 80005fa:	2001      	movs	r0, #1
}
 80005fc:	b017      	add	sp, #92	; 0x5c
 80005fe:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8000600:	2001      	movs	r0, #1
 8000602:	e7fb      	b.n	80005fc <HAL_ADC_Init+0x1f8>
 8000604:	20000020 	.word	0x20000020
 8000608:	431bde83 	.word	0x431bde83
 800060c:	50000300 	.word	0x50000300
 8000610:	fff0c007 	.word	0xfff0c007
 8000614:	50000100 	.word	0x50000100

08000618 <HAL_ADC_Start_DMA>:
{
 8000618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800061a:	6803      	ldr	r3, [r0, #0]
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	f013 0f04 	tst.w	r3, #4
 8000622:	f040 8083 	bne.w	800072c <HAL_ADC_Start_DMA+0x114>
 8000626:	4604      	mov	r4, r0
 8000628:	460e      	mov	r6, r1
 800062a:	4615      	mov	r5, r2
    __HAL_LOCK(hadc);
 800062c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000630:	2b01      	cmp	r3, #1
 8000632:	d07d      	beq.n	8000730 <HAL_ADC_Start_DMA+0x118>
 8000634:	2301      	movs	r3, #1
 8000636:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800063a:	4b3e      	ldr	r3, [pc, #248]	; (8000734 <HAL_ADC_Start_DMA+0x11c>)
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	f013 0f1f 	tst.w	r3, #31
 8000642:	d005      	beq.n	8000650 <HAL_ADC_Start_DMA+0x38>
      __HAL_UNLOCK(hadc);
 8000644:	2300      	movs	r3, #0
 8000646:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 800064a:	2701      	movs	r7, #1
}
 800064c:	4638      	mov	r0, r7
 800064e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8000650:	f7ff fe60 	bl	8000314 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8000654:	4607      	mov	r7, r0
 8000656:	2800      	cmp	r0, #0
 8000658:	d164      	bne.n	8000724 <HAL_ADC_Start_DMA+0x10c>
        ADC_STATE_CLR_SET(hadc->State,
 800065a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800065c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000660:	f023 0301 	bic.w	r3, r3, #1
 8000664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000668:	6423      	str	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800066a:	4b32      	ldr	r3, [pc, #200]	; (8000734 <HAL_ADC_Start_DMA+0x11c>)
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	f013 0f1f 	tst.w	r3, #31
 8000672:	d017      	beq.n	80006a4 <HAL_ADC_Start_DMA+0x8c>
 8000674:	6822      	ldr	r2, [r4, #0]
 8000676:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800067a:	d013      	beq.n	80006a4 <HAL_ADC_Start_DMA+0x8c>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800067c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800067e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000682:	6423      	str	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000684:	4b2c      	ldr	r3, [pc, #176]	; (8000738 <HAL_ADC_Start_DMA+0x120>)
 8000686:	429a      	cmp	r2, r3
 8000688:	d11b      	bne.n	80006c2 <HAL_ADC_Start_DMA+0xaa>
 800068a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000694:	d015      	beq.n	80006c2 <HAL_ADC_Start_DMA+0xaa>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000696:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000698:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800069c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006a0:	6423      	str	r3, [r4, #64]	; 0x40
 80006a2:	e00e      	b.n	80006c2 <HAL_ADC_Start_DMA+0xaa>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80006a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80006aa:	6423      	str	r3, [r4, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80006ac:	6823      	ldr	r3, [r4, #0]
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80006b4:	d005      	beq.n	80006c2 <HAL_ADC_Start_DMA+0xaa>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80006b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80006bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006c0:	6423      	str	r3, [r4, #64]	; 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80006c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006c4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80006c8:	d029      	beq.n	800071e <HAL_ADC_Start_DMA+0x106>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80006ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80006cc:	f023 0306 	bic.w	r3, r3, #6
 80006d0:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80006d2:	2300      	movs	r3, #0
 80006d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80006d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80006da:	4a18      	ldr	r2, [pc, #96]	; (800073c <HAL_ADC_Start_DMA+0x124>)
 80006dc:	629a      	str	r2, [r3, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80006de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80006e0:	4a17      	ldr	r2, [pc, #92]	; (8000740 <HAL_ADC_Start_DMA+0x128>)
 80006e2:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80006e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80006e6:	4a17      	ldr	r2, [pc, #92]	; (8000744 <HAL_ADC_Start_DMA+0x12c>)
 80006e8:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80006ea:	6823      	ldr	r3, [r4, #0]
 80006ec:	221c      	movs	r2, #28
 80006ee:	601a      	str	r2, [r3, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80006f0:	6822      	ldr	r2, [r4, #0]
 80006f2:	6853      	ldr	r3, [r2, #4]
 80006f4:	f043 0310 	orr.w	r3, r3, #16
 80006f8:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80006fa:	6822      	ldr	r2, [r4, #0]
 80006fc:	68d3      	ldr	r3, [r2, #12]
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	60d3      	str	r3, [r2, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000704:	6821      	ldr	r1, [r4, #0]
 8000706:	462b      	mov	r3, r5
 8000708:	4632      	mov	r2, r6
 800070a:	3140      	adds	r1, #64	; 0x40
 800070c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800070e:	f000 fc81 	bl	8001014 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000712:	6822      	ldr	r2, [r4, #0]
 8000714:	6893      	ldr	r3, [r2, #8]
 8000716:	f043 0304 	orr.w	r3, r3, #4
 800071a:	6093      	str	r3, [r2, #8]
 800071c:	e796      	b.n	800064c <HAL_ADC_Start_DMA+0x34>
          ADC_CLEAR_ERRORCODE(hadc);
 800071e:	2300      	movs	r3, #0
 8000720:	6463      	str	r3, [r4, #68]	; 0x44
 8000722:	e7d6      	b.n	80006d2 <HAL_ADC_Start_DMA+0xba>
        __HAL_UNLOCK(hadc);
 8000724:	2300      	movs	r3, #0
 8000726:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800072a:	e78f      	b.n	800064c <HAL_ADC_Start_DMA+0x34>
    tmp_hal_status = HAL_BUSY;
 800072c:	2702      	movs	r7, #2
 800072e:	e78d      	b.n	800064c <HAL_ADC_Start_DMA+0x34>
    __HAL_LOCK(hadc);
 8000730:	2702      	movs	r7, #2
 8000732:	e78b      	b.n	800064c <HAL_ADC_Start_DMA+0x34>
 8000734:	50000300 	.word	0x50000300
 8000738:	50000100 	.word	0x50000100
 800073c:	080003b9 	.word	0x080003b9
 8000740:	080003af 	.word	0x080003af
 8000744:	08000395 	.word	0x08000395

08000748 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 8000748:	4770      	bx	lr

0800074a <HAL_ADCEx_InjectedQueueOverflowCallback>:
}
 800074a:	4770      	bx	lr

0800074c <HAL_ADCEx_LevelOutOfWindow2Callback>:
}
 800074c:	4770      	bx	lr

0800074e <HAL_ADCEx_LevelOutOfWindow3Callback>:
}
 800074e:	4770      	bx	lr

08000750 <HAL_ADC_IRQHandler>:
{
 8000750:	b510      	push	{r4, lr}
 8000752:	4604      	mov	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000754:	6803      	ldr	r3, [r0, #0]
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	f012 0f04 	tst.w	r2, #4
 800075c:	d003      	beq.n	8000766 <HAL_ADC_IRQHandler+0x16>
 800075e:	685a      	ldr	r2, [r3, #4]
 8000760:	f012 0f04 	tst.w	r2, #4
 8000764:	d107      	bne.n	8000776 <HAL_ADC_IRQHandler+0x26>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000766:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000768:	f012 0f08 	tst.w	r2, #8
 800076c:	d052      	beq.n	8000814 <HAL_ADC_IRQHandler+0xc4>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800076e:	685a      	ldr	r2, [r3, #4]
 8000770:	f012 0f08 	tst.w	r2, #8
 8000774:	d04e      	beq.n	8000814 <HAL_ADC_IRQHandler+0xc4>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000776:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000778:	f012 0f10 	tst.w	r2, #16
 800077c:	d103      	bne.n	8000786 <HAL_ADC_IRQHandler+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800077e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000784:	6422      	str	r2, [r4, #64]	; 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000786:	4aa3      	ldr	r2, [pc, #652]	; (8000a14 <HAL_ADC_IRQHandler+0x2c4>)
 8000788:	6892      	ldr	r2, [r2, #8]
 800078a:	f012 0f1f 	tst.w	r2, #31
 800078e:	d012      	beq.n	80007b6 <HAL_ADC_IRQHandler+0x66>
 8000790:	4aa0      	ldr	r2, [pc, #640]	; (8000a14 <HAL_ADC_IRQHandler+0x2c4>)
 8000792:	6892      	ldr	r2, [r2, #8]
 8000794:	f002 021f 	and.w	r2, r2, #31
 8000798:	2a05      	cmp	r2, #5
 800079a:	d00c      	beq.n	80007b6 <HAL_ADC_IRQHandler+0x66>
 800079c:	4a9d      	ldr	r2, [pc, #628]	; (8000a14 <HAL_ADC_IRQHandler+0x2c4>)
 800079e:	6892      	ldr	r2, [r2, #8]
 80007a0:	f002 021f 	and.w	r2, r2, #31
 80007a4:	2a09      	cmp	r2, #9
 80007a6:	d006      	beq.n	80007b6 <HAL_ADC_IRQHandler+0x66>
 80007a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007ac:	d003      	beq.n	80007b6 <HAL_ADC_IRQHandler+0x66>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80007ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007b2:	68d1      	ldr	r1, [r2, #12]
 80007b4:	e000      	b.n	80007b8 <HAL_ADC_IRQHandler+0x68>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80007b6:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80007b8:	68da      	ldr	r2, [r3, #12]
 80007ba:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80007be:	d123      	bne.n	8000808 <HAL_ADC_IRQHandler+0xb8>
 80007c0:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 80007c4:	d120      	bne.n	8000808 <HAL_ADC_IRQHandler+0xb8>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	f012 0f08 	tst.w	r2, #8
 80007cc:	d01c      	beq.n	8000808 <HAL_ADC_IRQHandler+0xb8>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007ce:	689a      	ldr	r2, [r3, #8]
 80007d0:	f012 0f04 	tst.w	r2, #4
 80007d4:	d110      	bne.n	80007f8 <HAL_ADC_IRQHandler+0xa8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80007d6:	685a      	ldr	r2, [r3, #4]
 80007d8:	f022 020c 	bic.w	r2, r2, #12
 80007dc:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80007de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007e4:	6423      	str	r3, [r4, #64]	; 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007e8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80007ec:	d10c      	bne.n	8000808 <HAL_ADC_IRQHandler+0xb8>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80007ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6423      	str	r3, [r4, #64]	; 0x40
 80007f6:	e007      	b.n	8000808 <HAL_ADC_IRQHandler+0xb8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007fa:	f043 0310 	orr.w	r3, r3, #16
 80007fe:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000800:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000802:	f043 0301 	orr.w	r3, r3, #1
 8000806:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8000808:	4620      	mov	r0, r4
 800080a:	f005 fa59 	bl	8005cc0 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800080e:	6823      	ldr	r3, [r4, #0]
 8000810:	220c      	movs	r2, #12
 8000812:	601a      	str	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8000814:	6823      	ldr	r3, [r4, #0]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	f012 0f20 	tst.w	r2, #32
 800081c:	d003      	beq.n	8000826 <HAL_ADC_IRQHandler+0xd6>
 800081e:	685a      	ldr	r2, [r3, #4]
 8000820:	f012 0f20 	tst.w	r2, #32
 8000824:	d107      	bne.n	8000836 <HAL_ADC_IRQHandler+0xe6>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8000826:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8000828:	f012 0f40 	tst.w	r2, #64	; 0x40
 800082c:	d071      	beq.n	8000912 <HAL_ADC_IRQHandler+0x1c2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800082e:	685a      	ldr	r2, [r3, #4]
 8000830:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000834:	d06d      	beq.n	8000912 <HAL_ADC_IRQHandler+0x1c2>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000836:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000838:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800083c:	6422      	str	r2, [r4, #64]	; 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800083e:	4a75      	ldr	r2, [pc, #468]	; (8000a14 <HAL_ADC_IRQHandler+0x2c4>)
 8000840:	6892      	ldr	r2, [r2, #8]
 8000842:	f012 0f1f 	tst.w	r2, #31
 8000846:	d012      	beq.n	800086e <HAL_ADC_IRQHandler+0x11e>
 8000848:	4a72      	ldr	r2, [pc, #456]	; (8000a14 <HAL_ADC_IRQHandler+0x2c4>)
 800084a:	6892      	ldr	r2, [r2, #8]
 800084c:	f002 021f 	and.w	r2, r2, #31
 8000850:	2a05      	cmp	r2, #5
 8000852:	d00c      	beq.n	800086e <HAL_ADC_IRQHandler+0x11e>
 8000854:	4a6f      	ldr	r2, [pc, #444]	; (8000a14 <HAL_ADC_IRQHandler+0x2c4>)
 8000856:	6892      	ldr	r2, [r2, #8]
 8000858:	f002 021f 	and.w	r2, r2, #31
 800085c:	2a09      	cmp	r2, #9
 800085e:	d006      	beq.n	800086e <HAL_ADC_IRQHandler+0x11e>
 8000860:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000864:	d003      	beq.n	800086e <HAL_ADC_IRQHandler+0x11e>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000866:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800086a:	68d1      	ldr	r1, [r2, #12]
 800086c:	e000      	b.n	8000870 <HAL_ADC_IRQHandler+0x120>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800086e:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8000870:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000872:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8000876:	d146      	bne.n	8000906 <HAL_ADC_IRQHandler+0x1b6>
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8000878:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 800087c:	d006      	beq.n	800088c <HAL_ADC_IRQHandler+0x13c>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800087e:	68da      	ldr	r2, [r3, #12]
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8000880:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000884:	d13f      	bne.n	8000906 <HAL_ADC_IRQHandler+0x1b6>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8000886:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 800088a:	d13c      	bne.n	8000906 <HAL_ADC_IRQHandler+0x1b6>
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000892:	d038      	beq.n	8000906 <HAL_ADC_IRQHandler+0x1b6>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8000894:	4a5f      	ldr	r2, [pc, #380]	; (8000a14 <HAL_ADC_IRQHandler+0x2c4>)
 8000896:	6892      	ldr	r2, [r2, #8]
 8000898:	f012 0f1f 	tst.w	r2, #31
 800089c:	d012      	beq.n	80008c4 <HAL_ADC_IRQHandler+0x174>
 800089e:	4a5d      	ldr	r2, [pc, #372]	; (8000a14 <HAL_ADC_IRQHandler+0x2c4>)
 80008a0:	6892      	ldr	r2, [r2, #8]
 80008a2:	f002 021f 	and.w	r2, r2, #31
 80008a6:	2a06      	cmp	r2, #6
 80008a8:	d00c      	beq.n	80008c4 <HAL_ADC_IRQHandler+0x174>
 80008aa:	4a5a      	ldr	r2, [pc, #360]	; (8000a14 <HAL_ADC_IRQHandler+0x2c4>)
 80008ac:	6892      	ldr	r2, [r2, #8]
 80008ae:	f002 021f 	and.w	r2, r2, #31
 80008b2:	2a07      	cmp	r2, #7
 80008b4:	d006      	beq.n	80008c4 <HAL_ADC_IRQHandler+0x174>
 80008b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008ba:	d003      	beq.n	80008c4 <HAL_ADC_IRQHandler+0x174>
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80008bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008c0:	68d2      	ldr	r2, [r2, #12]
 80008c2:	e000      	b.n	80008c6 <HAL_ADC_IRQHandler+0x176>
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80008c4:	68da      	ldr	r2, [r3, #12]
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80008c6:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 80008ca:	d11c      	bne.n	8000906 <HAL_ADC_IRQHandler+0x1b6>
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80008cc:	689a      	ldr	r2, [r3, #8]
 80008ce:	f012 0f08 	tst.w	r2, #8
 80008d2:	d110      	bne.n	80008f6 <HAL_ADC_IRQHandler+0x1a6>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80008d4:	685a      	ldr	r2, [r3, #4]
 80008d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80008da:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80008dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008e2:	6423      	str	r3, [r4, #64]	; 0x40
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80008e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008e6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80008ea:	d10c      	bne.n	8000906 <HAL_ADC_IRQHandler+0x1b6>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80008ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	6423      	str	r3, [r4, #64]	; 0x40
 80008f4:	e007      	b.n	8000906 <HAL_ADC_IRQHandler+0x1b6>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008f8:	f043 0310 	orr.w	r3, r3, #16
 80008fc:	6423      	str	r3, [r4, #64]	; 0x40
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000906:	4620      	mov	r0, r4
 8000908:	f7ff ff1e 	bl	8000748 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800090c:	6823      	ldr	r3, [r4, #0]
 800090e:	2260      	movs	r2, #96	; 0x60
 8000910:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8000912:	6823      	ldr	r3, [r4, #0]
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	f012 0f80 	tst.w	r2, #128	; 0x80
 800091a:	d003      	beq.n	8000924 <HAL_ADC_IRQHandler+0x1d4>
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000922:	d13e      	bne.n	80009a2 <HAL_ADC_IRQHandler+0x252>
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8000924:	6823      	ldr	r3, [r4, #0]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	f412 7f80 	tst.w	r2, #256	; 0x100
 800092c:	d003      	beq.n	8000936 <HAL_ADC_IRQHandler+0x1e6>
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000934:	d140      	bne.n	80009b8 <HAL_ADC_IRQHandler+0x268>
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8000936:	6823      	ldr	r3, [r4, #0]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800093e:	d003      	beq.n	8000948 <HAL_ADC_IRQHandler+0x1f8>
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	f413 7f00 	tst.w	r3, #512	; 0x200
 8000946:	d143      	bne.n	80009d0 <HAL_ADC_IRQHandler+0x280>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8000948:	6823      	ldr	r3, [r4, #0]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	f012 0f10 	tst.w	r2, #16
 8000950:	d01d      	beq.n	800098e <HAL_ADC_IRQHandler+0x23e>
 8000952:	685a      	ldr	r2, [r3, #4]
 8000954:	f012 0f10 	tst.w	r2, #16
 8000958:	d019      	beq.n	800098e <HAL_ADC_IRQHandler+0x23e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800095a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800095c:	2a01      	cmp	r2, #1
 800095e:	d008      	beq.n	8000972 <HAL_ADC_IRQHandler+0x222>
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000960:	4a2c      	ldr	r2, [pc, #176]	; (8000a14 <HAL_ADC_IRQHandler+0x2c4>)
 8000962:	6892      	ldr	r2, [r2, #8]
 8000964:	f012 0f1f 	tst.w	r2, #31
 8000968:	d13e      	bne.n	80009e8 <HAL_ADC_IRQHandler+0x298>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	f013 0f01 	tst.w	r3, #1
 8000970:	d00a      	beq.n	8000988 <HAL_ADC_IRQHandler+0x238>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000972:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000974:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000978:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800097a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8000982:	4620      	mov	r0, r4
 8000984:	f7ff fc80 	bl	8000288 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000988:	6823      	ldr	r3, [r4, #0]
 800098a:	2210      	movs	r2, #16
 800098c:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800098e:	6823      	ldr	r3, [r4, #0]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000996:	d003      	beq.n	80009a0 <HAL_ADC_IRQHandler+0x250>
 8000998:	685a      	ldr	r2, [r3, #4]
 800099a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800099e:	d129      	bne.n	80009f4 <HAL_ADC_IRQHandler+0x2a4>
}
 80009a0:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80009a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009a8:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80009aa:	4620      	mov	r0, r4
 80009ac:	f7ff fc6b 	bl	8000286 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80009b0:	6823      	ldr	r3, [r4, #0]
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	e7b5      	b.n	8000924 <HAL_ADC_IRQHandler+0x1d4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80009b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009be:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80009c0:	4620      	mov	r0, r4
 80009c2:	f7ff fec3 	bl	800074c <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80009c6:	6823      	ldr	r3, [r4, #0]
 80009c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	e7b2      	b.n	8000936 <HAL_ADC_IRQHandler+0x1e6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80009d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009d6:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80009d8:	4620      	mov	r0, r4
 80009da:	f7ff feb8 	bl	800074e <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80009de:	6823      	ldr	r3, [r4, #0]
 80009e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	e7af      	b.n	8000948 <HAL_ADC_IRQHandler+0x1f8>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <HAL_ADC_IRQHandler+0x2c4>)
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 80009f0:	d0ca      	beq.n	8000988 <HAL_ADC_IRQHandler+0x238>
 80009f2:	e7be      	b.n	8000972 <HAL_ADC_IRQHandler+0x222>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80009f4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80009f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80009fa:	6422      	str	r2, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80009fc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80009fe:	f042 0208 	orr.w	r2, r2, #8
 8000a02:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8000a04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a08:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8000a0a:	4620      	mov	r0, r4
 8000a0c:	f7ff fe9d 	bl	800074a <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8000a10:	e7c6      	b.n	80009a0 <HAL_ADC_IRQHandler+0x250>
 8000a12:	bf00      	nop
 8000a14:	50000300 	.word	0x50000300

08000a18 <HAL_ADC_ConfigChannel>:
{
 8000a18:	b430      	push	{r4, r5}
 8000a1a:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8000a20:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8000a24:	2a01      	cmp	r2, #1
 8000a26:	f000 81a2 	beq.w	8000d6e <HAL_ADC_ConfigChannel+0x356>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000a32:	6800      	ldr	r0, [r0, #0]
 8000a34:	6882      	ldr	r2, [r0, #8]
 8000a36:	f012 0f04 	tst.w	r2, #4
 8000a3a:	f040 818d 	bne.w	8000d58 <HAL_ADC_ConfigChannel+0x340>
    if (sConfig->Rank < 5U)
 8000a3e:	684a      	ldr	r2, [r1, #4]
 8000a40:	2a04      	cmp	r2, #4
 8000a42:	d832      	bhi.n	8000aaa <HAL_ADC_ConfigChannel+0x92>
      MODIFY_REG(hadc->Instance->SQR1,
 8000a44:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8000a46:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000a4a:	0052      	lsls	r2, r2, #1
 8000a4c:	251f      	movs	r5, #31
 8000a4e:	4095      	lsls	r5, r2
 8000a50:	ea24 0405 	bic.w	r4, r4, r5
 8000a54:	680d      	ldr	r5, [r1, #0]
 8000a56:	fa05 f202 	lsl.w	r2, r5, r2
 8000a5a:	4322      	orrs	r2, r4
 8000a5c:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	6882      	ldr	r2, [r0, #8]
 8000a62:	f012 0f0c 	tst.w	r2, #12
 8000a66:	d168      	bne.n	8000b3a <HAL_ADC_ConfigChannel+0x122>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000a68:	680a      	ldr	r2, [r1, #0]
 8000a6a:	2a09      	cmp	r2, #9
 8000a6c:	d94e      	bls.n	8000b0c <HAL_ADC_ConfigChannel+0xf4>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000a6e:	6984      	ldr	r4, [r0, #24]
 8000a70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000a74:	3a1e      	subs	r2, #30
 8000a76:	2507      	movs	r5, #7
 8000a78:	4095      	lsls	r5, r2
 8000a7a:	ea24 0405 	bic.w	r4, r4, r5
 8000a7e:	688d      	ldr	r5, [r1, #8]
 8000a80:	fa05 f202 	lsl.w	r2, r5, r2
 8000a84:	4322      	orrs	r2, r4
 8000a86:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000a88:	6948      	ldr	r0, [r1, #20]
 8000a8a:	681c      	ldr	r4, [r3, #0]
 8000a8c:	68e2      	ldr	r2, [r4, #12]
 8000a8e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8000a92:	0052      	lsls	r2, r2, #1
 8000a94:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 8000a98:	6908      	ldr	r0, [r1, #16]
 8000a9a:	3801      	subs	r0, #1
 8000a9c:	2803      	cmp	r0, #3
 8000a9e:	f200 808b 	bhi.w	8000bb8 <HAL_ADC_ConfigChannel+0x1a0>
 8000aa2:	e8df f000 	tbb	[pc, r0]
 8000aa6:	6840      	.short	0x6840
 8000aa8:	7e73      	.short	0x7e73
    else if (sConfig->Rank < 10U)
 8000aaa:	2a09      	cmp	r2, #9
 8000aac:	d80e      	bhi.n	8000acc <HAL_ADC_ConfigChannel+0xb4>
      MODIFY_REG(hadc->Instance->SQR2,
 8000aae:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8000ab0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000ab4:	0052      	lsls	r2, r2, #1
 8000ab6:	3a1e      	subs	r2, #30
 8000ab8:	251f      	movs	r5, #31
 8000aba:	4095      	lsls	r5, r2
 8000abc:	ea24 0405 	bic.w	r4, r4, r5
 8000ac0:	680d      	ldr	r5, [r1, #0]
 8000ac2:	fa05 f202 	lsl.w	r2, r5, r2
 8000ac6:	4322      	orrs	r2, r4
 8000ac8:	6342      	str	r2, [r0, #52]	; 0x34
 8000aca:	e7c8      	b.n	8000a5e <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 8000acc:	2a0e      	cmp	r2, #14
 8000ace:	d80e      	bhi.n	8000aee <HAL_ADC_ConfigChannel+0xd6>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ad0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8000ad2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000ad6:	0052      	lsls	r2, r2, #1
 8000ad8:	3a3c      	subs	r2, #60	; 0x3c
 8000ada:	251f      	movs	r5, #31
 8000adc:	4095      	lsls	r5, r2
 8000ade:	ea24 0405 	bic.w	r4, r4, r5
 8000ae2:	680d      	ldr	r5, [r1, #0]
 8000ae4:	fa05 f202 	lsl.w	r2, r5, r2
 8000ae8:	4322      	orrs	r2, r4
 8000aea:	6382      	str	r2, [r0, #56]	; 0x38
 8000aec:	e7b7      	b.n	8000a5e <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000aee:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8000af0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000af4:	0052      	lsls	r2, r2, #1
 8000af6:	3a5a      	subs	r2, #90	; 0x5a
 8000af8:	251f      	movs	r5, #31
 8000afa:	4095      	lsls	r5, r2
 8000afc:	ea24 0405 	bic.w	r4, r4, r5
 8000b00:	680d      	ldr	r5, [r1, #0]
 8000b02:	fa05 f202 	lsl.w	r2, r5, r2
 8000b06:	4322      	orrs	r2, r4
 8000b08:	63c2      	str	r2, [r0, #60]	; 0x3c
 8000b0a:	e7a8      	b.n	8000a5e <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b0c:	6944      	ldr	r4, [r0, #20]
 8000b0e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000b12:	2507      	movs	r5, #7
 8000b14:	4095      	lsls	r5, r2
 8000b16:	ea24 0405 	bic.w	r4, r4, r5
 8000b1a:	688d      	ldr	r5, [r1, #8]
 8000b1c:	fa05 f202 	lsl.w	r2, r5, r2
 8000b20:	4322      	orrs	r2, r4
 8000b22:	6142      	str	r2, [r0, #20]
 8000b24:	e7b0      	b.n	8000a88 <HAL_ADC_ConfigChannel+0x70>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000b26:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8000b28:	4d92      	ldr	r5, [pc, #584]	; (8000d74 <HAL_ADC_ConfigChannel+0x35c>)
 8000b2a:	4005      	ands	r5, r0
 8000b2c:	6808      	ldr	r0, [r1, #0]
 8000b2e:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8000b32:	4315      	orrs	r5, r2
 8000b34:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8000b38:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000b3a:	6818      	ldr	r0, [r3, #0]
 8000b3c:	6882      	ldr	r2, [r0, #8]
 8000b3e:	f002 0203 	and.w	r2, r2, #3
 8000b42:	2a01      	cmp	r2, #1
 8000b44:	d068      	beq.n	8000c18 <HAL_ADC_ConfigChannel+0x200>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000b46:	68ca      	ldr	r2, [r1, #12]
 8000b48:	2a01      	cmp	r2, #1
 8000b4a:	d06b      	beq.n	8000c24 <HAL_ADC_ConfigChannel+0x20c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000b4c:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8000b50:	680d      	ldr	r5, [r1, #0]
 8000b52:	2401      	movs	r4, #1
 8000b54:	40ac      	lsls	r4, r5
 8000b56:	ea22 0204 	bic.w	r2, r2, r4
 8000b5a:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000b5e:	680a      	ldr	r2, [r1, #0]
 8000b60:	2a10      	cmp	r2, #16
 8000b62:	f000 8088 	beq.w	8000c76 <HAL_ADC_ConfigChannel+0x25e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000b66:	2a11      	cmp	r2, #17
 8000b68:	f000 80a6 	beq.w	8000cb8 <HAL_ADC_ConfigChannel+0x2a0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000b6c:	2a12      	cmp	r2, #18
 8000b6e:	f000 80a9 	beq.w	8000cc4 <HAL_ADC_ConfigChannel+0x2ac>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b72:	2000      	movs	r0, #0
 8000b74:	e0f5      	b.n	8000d62 <HAL_ADC_ConfigChannel+0x34a>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000b76:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8000b78:	4d7e      	ldr	r5, [pc, #504]	; (8000d74 <HAL_ADC_ConfigChannel+0x35c>)
 8000b7a:	4005      	ands	r5, r0
 8000b7c:	6808      	ldr	r0, [r1, #0]
 8000b7e:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8000b82:	4315      	orrs	r5, r2
 8000b84:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8000b88:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 8000b8a:	e7d6      	b.n	8000b3a <HAL_ADC_ConfigChannel+0x122>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000b8c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8000b8e:	4d79      	ldr	r5, [pc, #484]	; (8000d74 <HAL_ADC_ConfigChannel+0x35c>)
 8000b90:	4005      	ands	r5, r0
 8000b92:	6808      	ldr	r0, [r1, #0]
 8000b94:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8000b98:	4315      	orrs	r5, r2
 8000b9a:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8000b9e:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 8000ba0:	e7cb      	b.n	8000b3a <HAL_ADC_ConfigChannel+0x122>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000ba2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8000ba4:	4873      	ldr	r0, [pc, #460]	; (8000d74 <HAL_ADC_ConfigChannel+0x35c>)
 8000ba6:	4028      	ands	r0, r5
 8000ba8:	680d      	ldr	r5, [r1, #0]
 8000baa:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8000bae:	4302      	orrs	r2, r0
 8000bb0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000bb4:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 8000bb6:	e7c0      	b.n	8000b3a <HAL_ADC_ConfigChannel+0x122>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000bb8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8000bba:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000bbe:	6808      	ldr	r0, [r1, #0]
 8000bc0:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 8000bc4:	d103      	bne.n	8000bce <HAL_ADC_ConfigChannel+0x1b6>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000bc6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8000bc8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000bcc:	6622      	str	r2, [r4, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8000bd2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8000bd6:	680c      	ldr	r4, [r1, #0]
 8000bd8:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 8000bdc:	d103      	bne.n	8000be6 <HAL_ADC_ConfigChannel+0x1ce>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000bde:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8000be0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000be4:	6650      	str	r0, [r2, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8000bea:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8000bee:	680c      	ldr	r4, [r1, #0]
 8000bf0:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 8000bf4:	d103      	bne.n	8000bfe <HAL_ADC_ConfigChannel+0x1e6>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000bf6:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8000bf8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000bfc:	6690      	str	r0, [r2, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8000c02:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8000c06:	680c      	ldr	r4, [r1, #0]
 8000c08:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 8000c0c:	d195      	bne.n	8000b3a <HAL_ADC_ConfigChannel+0x122>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000c0e:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8000c10:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000c14:	66d0      	str	r0, [r2, #108]	; 0x6c
 8000c16:	e790      	b.n	8000b3a <HAL_ADC_ConfigChannel+0x122>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c18:	6802      	ldr	r2, [r0, #0]
 8000c1a:	f012 0f01 	tst.w	r2, #1
 8000c1e:	d092      	beq.n	8000b46 <HAL_ADC_ConfigChannel+0x12e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c20:	2000      	movs	r0, #0
 8000c22:	e09e      	b.n	8000d62 <HAL_ADC_ConfigChannel+0x34a>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000c24:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8000c28:	680d      	ldr	r5, [r1, #0]
 8000c2a:	2401      	movs	r4, #1
 8000c2c:	40ac      	lsls	r4, r5
 8000c2e:	4322      	orrs	r2, r4
 8000c30:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c34:	680a      	ldr	r2, [r1, #0]
 8000c36:	2a09      	cmp	r2, #9
 8000c38:	d90e      	bls.n	8000c58 <HAL_ADC_ConfigChannel+0x240>
        MODIFY_REG(hadc->Instance->SMPR2,
 8000c3a:	681d      	ldr	r5, [r3, #0]
 8000c3c:	69a8      	ldr	r0, [r5, #24]
 8000c3e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000c42:	3a1b      	subs	r2, #27
 8000c44:	2407      	movs	r4, #7
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea20 0004 	bic.w	r0, r0, r4
 8000c4c:	688c      	ldr	r4, [r1, #8]
 8000c4e:	fa04 f202 	lsl.w	r2, r4, r2
 8000c52:	4302      	orrs	r2, r0
 8000c54:	61aa      	str	r2, [r5, #24]
 8000c56:	e782      	b.n	8000b5e <HAL_ADC_ConfigChannel+0x146>
        MODIFY_REG(hadc->Instance->SMPR1,
 8000c58:	681d      	ldr	r5, [r3, #0]
 8000c5a:	6968      	ldr	r0, [r5, #20]
 8000c5c:	3201      	adds	r2, #1
 8000c5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000c62:	2407      	movs	r4, #7
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea20 0004 	bic.w	r0, r0, r4
 8000c6a:	688c      	ldr	r4, [r1, #8]
 8000c6c:	fa04 f202 	lsl.w	r2, r4, r2
 8000c70:	4302      	orrs	r2, r0
 8000c72:	616a      	str	r2, [r5, #20]
 8000c74:	e773      	b.n	8000b5e <HAL_ADC_ConfigChannel+0x146>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000c76:	4940      	ldr	r1, [pc, #256]	; (8000d78 <HAL_ADC_ConfigChannel+0x360>)
 8000c78:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000c7a:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 8000c7e:	f47f af72 	bne.w	8000b66 <HAL_ADC_ConfigChannel+0x14e>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8000c88:	d023      	beq.n	8000cd2 <HAL_ADC_ConfigChannel+0x2ba>
 8000c8a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000c8e:	9102      	str	r1, [sp, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000c90:	6881      	ldr	r1, [r0, #8]
 8000c92:	f001 0103 	and.w	r1, r1, #3
 8000c96:	2901      	cmp	r1, #1
 8000c98:	d01e      	beq.n	8000cd8 <HAL_ADC_ConfigChannel+0x2c0>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c9a:	9902      	ldr	r1, [sp, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000c9c:	b121      	cbz	r1, 8000ca8 <HAL_ADC_ConfigChannel+0x290>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000c9e:	688c      	ldr	r4, [r1, #8]
 8000ca0:	f004 0403 	and.w	r4, r4, #3
 8000ca4:	2c01      	cmp	r4, #1
 8000ca6:	d021      	beq.n	8000cec <HAL_ADC_ConfigChannel+0x2d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000ca8:	2a10      	cmp	r2, #16
 8000caa:	d024      	beq.n	8000cf6 <HAL_ADC_ConfigChannel+0x2de>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000cac:	2a11      	cmp	r2, #17
 8000cae:	d042      	beq.n	8000d36 <HAL_ADC_ConfigChannel+0x31e>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000cb0:	2a12      	cmp	r2, #18
 8000cb2:	d04a      	beq.n	8000d4a <HAL_ADC_ConfigChannel+0x332>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	e054      	b.n	8000d62 <HAL_ADC_ConfigChannel+0x34a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000cb8:	492f      	ldr	r1, [pc, #188]	; (8000d78 <HAL_ADC_ConfigChannel+0x360>)
 8000cba:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000cbc:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8000cc0:	d0df      	beq.n	8000c82 <HAL_ADC_ConfigChannel+0x26a>
 8000cc2:	e753      	b.n	8000b6c <HAL_ADC_ConfigChannel+0x154>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000cc4:	492c      	ldr	r1, [pc, #176]	; (8000d78 <HAL_ADC_ConfigChannel+0x360>)
 8000cc6:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000cc8:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8000ccc:	d0d9      	beq.n	8000c82 <HAL_ADC_ConfigChannel+0x26a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cce:	2000      	movs	r0, #0
 8000cd0:	e047      	b.n	8000d62 <HAL_ADC_ConfigChannel+0x34a>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000cd2:	492a      	ldr	r1, [pc, #168]	; (8000d7c <HAL_ADC_ConfigChannel+0x364>)
 8000cd4:	9102      	str	r1, [sp, #8]
 8000cd6:	e7db      	b.n	8000c90 <HAL_ADC_ConfigChannel+0x278>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000cd8:	6801      	ldr	r1, [r0, #0]
 8000cda:	f011 0f01 	tst.w	r1, #1
 8000cde:	d0dc      	beq.n	8000c9a <HAL_ADC_ConfigChannel+0x282>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce2:	f042 0220 	orr.w	r2, r2, #32
 8000ce6:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8000ce8:	2001      	movs	r0, #1
 8000cea:	e03a      	b.n	8000d62 <HAL_ADC_ConfigChannel+0x34a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000cec:	6809      	ldr	r1, [r1, #0]
 8000cee:	f011 0f01 	tst.w	r1, #1
 8000cf2:	d1f5      	bne.n	8000ce0 <HAL_ADC_ConfigChannel+0x2c8>
 8000cf4:	e7d8      	b.n	8000ca8 <HAL_ADC_ConfigChannel+0x290>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000cf6:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8000cfa:	d1d7      	bne.n	8000cac <HAL_ADC_ConfigChannel+0x294>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000cfc:	491e      	ldr	r1, [pc, #120]	; (8000d78 <HAL_ADC_ConfigChannel+0x360>)
 8000cfe:	688a      	ldr	r2, [r1, #8]
 8000d00:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d04:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d06:	4a1e      	ldr	r2, [pc, #120]	; (8000d80 <HAL_ADC_ConfigChannel+0x368>)
 8000d08:	6812      	ldr	r2, [r2, #0]
 8000d0a:	f1a1 614e 	sub.w	r1, r1, #216006656	; 0xce00000
 8000d0e:	f5a1 2184 	sub.w	r1, r1, #270336	; 0x42000
 8000d12:	f2a1 417d 	subw	r1, r1, #1149	; 0x47d
 8000d16:	fba1 1202 	umull	r1, r2, r1, r2
 8000d1a:	0c92      	lsrs	r2, r2, #18
 8000d1c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000d20:	0052      	lsls	r2, r2, #1
 8000d22:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8000d24:	e002      	b.n	8000d2c <HAL_ADC_ConfigChannel+0x314>
            wait_loop_index--;
 8000d26:	9a01      	ldr	r2, [sp, #4]
 8000d28:	3a01      	subs	r2, #1
 8000d2a:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8000d2c:	9a01      	ldr	r2, [sp, #4]
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	d1f9      	bne.n	8000d26 <HAL_ADC_ConfigChannel+0x30e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d32:	2000      	movs	r0, #0
 8000d34:	e015      	b.n	8000d62 <HAL_ADC_ConfigChannel+0x34a>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000d36:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8000d3a:	d1b9      	bne.n	8000cb0 <HAL_ADC_ConfigChannel+0x298>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000d3c:	490e      	ldr	r1, [pc, #56]	; (8000d78 <HAL_ADC_ConfigChannel+0x360>)
 8000d3e:	688a      	ldr	r2, [r1, #8]
 8000d40:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000d44:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d46:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000d48:	e00b      	b.n	8000d62 <HAL_ADC_ConfigChannel+0x34a>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000d4a:	490b      	ldr	r1, [pc, #44]	; (8000d78 <HAL_ADC_ConfigChannel+0x360>)
 8000d4c:	688a      	ldr	r2, [r1, #8]
 8000d4e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000d52:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d54:	2000      	movs	r0, #0
 8000d56:	e004      	b.n	8000d62 <HAL_ADC_ConfigChannel+0x34a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d5a:	f042 0220 	orr.w	r2, r2, #32
 8000d5e:	641a      	str	r2, [r3, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 8000d60:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8000d68:	b016      	add	sp, #88	; 0x58
 8000d6a:	bc30      	pop	{r4, r5}
 8000d6c:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8000d6e:	2002      	movs	r0, #2
 8000d70:	e7fa      	b.n	8000d68 <HAL_ADC_ConfigChannel+0x350>
 8000d72:	bf00      	nop
 8000d74:	83fff000 	.word	0x83fff000
 8000d78:	50000300 	.word	0x50000300
 8000d7c:	50000100 	.word	0x50000100
 8000d80:	20000020 	.word	0x20000020

08000d84 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8000d84:	b470      	push	{r4, r5, r6}
 8000d86:	b095      	sub	sp, #84	; 0x54
 8000d88:	4603      	mov	r3, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d8a:	6802      	ldr	r2, [r0, #0]
 8000d8c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000d90:	d03a      	beq.n	8000e08 <HAL_ADCEx_MultiModeConfigChannel+0x84>
 8000d92:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d96:	9000      	str	r0, [sp, #0]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8000d98:	9800      	ldr	r0, [sp, #0]
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	d073      	beq.n	8000e86 <HAL_ADCEx_MultiModeConfigChannel+0x102>
  __HAL_LOCK(hadc);
 8000d9e:	f893 403c 	ldrb.w	r4, [r3, #60]	; 0x3c
 8000da2:	2c01      	cmp	r4, #1
 8000da4:	d071      	beq.n	8000e8a <HAL_ADCEx_MultiModeConfigChannel+0x106>
 8000da6:	2401      	movs	r4, #1
 8000da8:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000dac:	6892      	ldr	r2, [r2, #8]
 8000dae:	f012 0f04 	tst.w	r2, #4
 8000db2:	d15d      	bne.n	8000e70 <HAL_ADCEx_MultiModeConfigChannel+0xec>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000db4:	6882      	ldr	r2, [r0, #8]
 8000db6:	f012 0f04 	tst.w	r2, #4
 8000dba:	d159      	bne.n	8000e70 <HAL_ADCEx_MultiModeConfigChannel+0xec>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000dbc:	680a      	ldr	r2, [r1, #0]
 8000dbe:	2a00      	cmp	r2, #0
 8000dc0:	d031      	beq.n	8000e26 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000dc2:	4d33      	ldr	r5, [pc, #204]	; (8000e90 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8000dc4:	68aa      	ldr	r2, [r5, #8]
 8000dc6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000dca:	684c      	ldr	r4, [r1, #4]
 8000dcc:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
 8000dd0:	ea44 3446 	orr.w	r4, r4, r6, lsl #13
 8000dd4:	4322      	orrs	r2, r4
 8000dd6:	60aa      	str	r2, [r5, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000dd8:	681c      	ldr	r4, [r3, #0]
 8000dda:	68a2      	ldr	r2, [r4, #8]
 8000ddc:	f002 0203 	and.w	r2, r2, #3
 8000de0:	2a01      	cmp	r2, #1
 8000de2:	d014      	beq.n	8000e0e <HAL_ADCEx_MultiModeConfigChannel+0x8a>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000de4:	6882      	ldr	r2, [r0, #8]
 8000de6:	f002 0203 	and.w	r2, r2, #3
 8000dea:	2a01      	cmp	r2, #1
 8000dec:	d015      	beq.n	8000e1a <HAL_ADCEx_MultiModeConfigChannel+0x96>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000dee:	4c28      	ldr	r4, [pc, #160]	; (8000e90 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8000df0:	68a2      	ldr	r2, [r4, #8]
 8000df2:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000df6:	f022 020f 	bic.w	r2, r2, #15
 8000dfa:	6808      	ldr	r0, [r1, #0]
 8000dfc:	6889      	ldr	r1, [r1, #8]
 8000dfe:	4301      	orrs	r1, r0
 8000e00:	430a      	orrs	r2, r1
 8000e02:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e04:	2000      	movs	r0, #0
 8000e06:	e038      	b.n	8000e7a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e08:	4822      	ldr	r0, [pc, #136]	; (8000e94 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8000e0a:	9000      	str	r0, [sp, #0]
 8000e0c:	e7c4      	b.n	8000d98 <HAL_ADCEx_MultiModeConfigChannel+0x14>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000e0e:	6822      	ldr	r2, [r4, #0]
 8000e10:	f012 0f01 	tst.w	r2, #1
 8000e14:	d0e6      	beq.n	8000de4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e16:	2000      	movs	r0, #0
 8000e18:	e02f      	b.n	8000e7a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000e1a:	6802      	ldr	r2, [r0, #0]
 8000e1c:	f012 0f01 	tst.w	r2, #1
 8000e20:	d0e5      	beq.n	8000dee <HAL_ADCEx_MultiModeConfigChannel+0x6a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e22:	2000      	movs	r0, #0
 8000e24:	e029      	b.n	8000e7a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000e26:	491a      	ldr	r1, [pc, #104]	; (8000e90 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8000e28:	688a      	ldr	r2, [r1, #8]
 8000e2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000e2e:	608a      	str	r2, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000e30:	6819      	ldr	r1, [r3, #0]
 8000e32:	688a      	ldr	r2, [r1, #8]
 8000e34:	f002 0203 	and.w	r2, r2, #3
 8000e38:	2a01      	cmp	r2, #1
 8000e3a:	d00d      	beq.n	8000e58 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000e3c:	6882      	ldr	r2, [r0, #8]
 8000e3e:	f002 0203 	and.w	r2, r2, #3
 8000e42:	2a01      	cmp	r2, #1
 8000e44:	d00e      	beq.n	8000e64 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8000e46:	4912      	ldr	r1, [pc, #72]	; (8000e90 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8000e48:	688a      	ldr	r2, [r1, #8]
 8000e4a:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000e4e:	f022 020f 	bic.w	r2, r2, #15
 8000e52:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e54:	2000      	movs	r0, #0
 8000e56:	e010      	b.n	8000e7a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000e58:	680a      	ldr	r2, [r1, #0]
 8000e5a:	f012 0f01 	tst.w	r2, #1
 8000e5e:	d0ed      	beq.n	8000e3c <HAL_ADCEx_MultiModeConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e60:	2000      	movs	r0, #0
 8000e62:	e00a      	b.n	8000e7a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000e64:	6802      	ldr	r2, [r0, #0]
 8000e66:	f012 0f01 	tst.w	r2, #1
 8000e6a:	d0ec      	beq.n	8000e46 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	e004      	b.n	8000e7a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e72:	f042 0220 	orr.w	r2, r2, #32
 8000e76:	641a      	str	r2, [r3, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 8000e78:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
} 
 8000e80:	b015      	add	sp, #84	; 0x54
 8000e82:	bc70      	pop	{r4, r5, r6}
 8000e84:	4770      	bx	lr
    return HAL_ERROR;
 8000e86:	2001      	movs	r0, #1
 8000e88:	e7fa      	b.n	8000e80 <HAL_ADCEx_MultiModeConfigChannel+0xfc>
  __HAL_LOCK(hadc);
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	e7f8      	b.n	8000e80 <HAL_ADCEx_MultiModeConfigChannel+0xfc>
 8000e8e:	bf00      	nop
 8000e90:	50000300 	.word	0x50000300
 8000e94:	50000100 	.word	0x50000100

08000e98 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e98:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e9a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ea0:	041b      	lsls	r3, r3, #16
 8000ea2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea4:	0200      	lsls	r0, r0, #8
 8000ea6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eaa:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000eb4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebc:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_NVIC_SetPriority+0x60>)
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec6:	f1c3 0407 	rsb	r4, r3, #7
 8000eca:	2c04      	cmp	r4, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed0:	1d1d      	adds	r5, r3, #4
 8000ed2:	2d06      	cmp	r5, #6
 8000ed4:	d918      	bls.n	8000f08 <HAL_NVIC_SetPriority+0x4c>
 8000ed6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	f04f 35ff 	mov.w	r5, #4294967295
 8000edc:	fa05 f404 	lsl.w	r4, r5, r4
 8000ee0:	ea21 0104 	bic.w	r1, r1, r4
 8000ee4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee6:	fa05 f303 	lsl.w	r3, r5, r3
 8000eea:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eee:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000ef0:	2800      	cmp	r0, #0
 8000ef2:	db0b      	blt.n	8000f0c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	0109      	lsls	r1, r1, #4
 8000ef6:	b2c9      	uxtb	r1, r1
 8000ef8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000efc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000f00:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f04:	bc30      	pop	{r4, r5}
 8000f06:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f08:	2300      	movs	r3, #0
 8000f0a:	e7e5      	b.n	8000ed8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	f000 000f 	and.w	r0, r0, #15
 8000f10:	0109      	lsls	r1, r1, #4
 8000f12:	b2c9      	uxtb	r1, r1
 8000f14:	4b02      	ldr	r3, [pc, #8]	; (8000f20 <HAL_NVIC_SetPriority+0x64>)
 8000f16:	5419      	strb	r1, [r3, r0]
 8000f18:	e7f4      	b.n	8000f04 <HAL_NVIC_SetPriority+0x48>
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00
 8000f20:	e000ed14 	.word	0xe000ed14

08000f24 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f24:	2800      	cmp	r0, #0
 8000f26:	db07      	blt.n	8000f38 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f28:	f000 021f 	and.w	r2, r0, #31
 8000f2c:	0940      	lsrs	r0, r0, #5
 8000f2e:	2301      	movs	r3, #1
 8000f30:	4093      	lsls	r3, r2
 8000f32:	4a02      	ldr	r2, [pc, #8]	; (8000f3c <HAL_NVIC_EnableIRQ+0x18>)
 8000f34:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100

08000f40 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f40:	3801      	subs	r0, #1
 8000f42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f46:	d20a      	bcs.n	8000f5e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_SYSTICK_Config+0x24>)
 8000f4a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_SYSTICK_Config+0x28>)
 8000f4e:	21f0      	movs	r1, #240	; 0xf0
 8000f50:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f54:	2000      	movs	r0, #0
 8000f56:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f58:	2207      	movs	r2, #7
 8000f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f5c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f5e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000e010 	.word	0xe000e010
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000f6c:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000f6e:	f004 ffad 	bl	8005ecc <HAL_SYSTICK_Callback>
}
 8000f72:	bd08      	pop	{r3, pc}

08000f74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f74:	b470      	push	{r4, r5, r6}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f76:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000f78:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8000f7a:	2401      	movs	r4, #1
 8000f7c:	40b4      	lsls	r4, r6
 8000f7e:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f80:	6804      	ldr	r4, [r0, #0]
 8000f82:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f84:	6843      	ldr	r3, [r0, #4]
 8000f86:	2b10      	cmp	r3, #16
 8000f88:	d005      	beq.n	8000f96 <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000f8a:	6803      	ldr	r3, [r0, #0]
 8000f8c:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000f8e:	6803      	ldr	r3, [r0, #0]
 8000f90:	60da      	str	r2, [r3, #12]
  }
}
 8000f92:	bc70      	pop	{r4, r5, r6}
 8000f94:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8000f96:	6803      	ldr	r3, [r0, #0]
 8000f98:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000f9a:	6803      	ldr	r3, [r0, #0]
 8000f9c:	60d9      	str	r1, [r3, #12]
 8000f9e:	e7f8      	b.n	8000f92 <DMA_SetConfig+0x1e>

08000fa0 <DMA_CalcBaseAndBitshift>:
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fa0:	6802      	ldr	r2, [r0, #0]
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <DMA_CalcBaseAndBitshift+0x18>)
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <DMA_CalcBaseAndBitshift+0x1c>)
 8000fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fac:	091b      	lsrs	r3, r3, #4
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000fb2:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <DMA_CalcBaseAndBitshift+0x20>)
 8000fb4:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif
}
 8000fb6:	4770      	bx	lr
 8000fb8:	bffdfff8 	.word	0xbffdfff8
 8000fbc:	cccccccd 	.word	0xcccccccd
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <HAL_DMA_Init>:
  if(NULL == hdma)
 8000fc4:	b320      	cbz	r0, 8001010 <HAL_DMA_Init+0x4c>
{ 
 8000fc6:	b510      	push	{r4, lr}
 8000fc8:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8000fd0:	6801      	ldr	r1, [r0, #0]
 8000fd2:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fd4:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8000fd8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8000fdc:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fde:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 8000fe0:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe2:	68e0      	ldr	r0, [r4, #12]
 8000fe4:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe6:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe8:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fea:	6960      	ldr	r0, [r4, #20]
 8000fec:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fee:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff0:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff2:	69e0      	ldr	r0, [r4, #28]
 8000ff4:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8000ff6:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8000ff8:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	f7ff ffd0 	bl	8000fa0 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001000:	2000      	movs	r0, #0
 8001002:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001004:	2301      	movs	r3, #1
 8001006:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 800100a:	f884 0020 	strb.w	r0, [r4, #32]
}  
 800100e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001010:	2001      	movs	r0, #1
}  
 8001012:	4770      	bx	lr

08001014 <HAL_DMA_Start_IT>:
{
 8001014:	b538      	push	{r3, r4, r5, lr}
 8001016:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001018:	f890 0020 	ldrb.w	r0, [r0, #32]
 800101c:	2801      	cmp	r0, #1
 800101e:	d031      	beq.n	8001084 <HAL_DMA_Start_IT+0x70>
 8001020:	2001      	movs	r0, #1
 8001022:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001026:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 800102a:	2801      	cmp	r0, #1
 800102c:	d004      	beq.n	8001038 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 800102e:	2300      	movs	r3, #0
 8001030:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8001034:	2002      	movs	r0, #2
} 
 8001036:	bd38      	pop	{r3, r4, r5, pc}
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001038:	2002      	movs	r0, #2
 800103a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800103e:	2000      	movs	r0, #0
 8001040:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001042:	6825      	ldr	r5, [r4, #0]
 8001044:	6828      	ldr	r0, [r5, #0]
 8001046:	f020 0001 	bic.w	r0, r0, #1
 800104a:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800104c:	4620      	mov	r0, r4
 800104e:	f7ff ff91 	bl	8000f74 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001052:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001054:	b15b      	cbz	r3, 800106e <HAL_DMA_Start_IT+0x5a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001056:	6822      	ldr	r2, [r4, #0]
 8001058:	6813      	ldr	r3, [r2, #0]
 800105a:	f043 030e 	orr.w	r3, r3, #14
 800105e:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001060:	6822      	ldr	r2, [r4, #0]
 8001062:	6813      	ldr	r3, [r2, #0]
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800106a:	2000      	movs	r0, #0
 800106c:	e7e3      	b.n	8001036 <HAL_DMA_Start_IT+0x22>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800106e:	6822      	ldr	r2, [r4, #0]
 8001070:	6813      	ldr	r3, [r2, #0]
 8001072:	f043 030a 	orr.w	r3, r3, #10
 8001076:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001078:	6822      	ldr	r2, [r4, #0]
 800107a:	6813      	ldr	r3, [r2, #0]
 800107c:	f023 0304 	bic.w	r3, r3, #4
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e7ed      	b.n	8001060 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8001084:	2002      	movs	r0, #2
 8001086:	e7d6      	b.n	8001036 <HAL_DMA_Start_IT+0x22>

08001088 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001088:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800108c:	2b02      	cmp	r3, #2
 800108e:	d006      	beq.n	800109e <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001090:	2304      	movs	r3, #4
 8001092:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001094:	2300      	movs	r3, #0
 8001096:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 800109a:	2001      	movs	r0, #1
 800109c:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800109e:	6802      	ldr	r2, [r0, #0]
 80010a0:	6813      	ldr	r3, [r2, #0]
 80010a2:	f023 030e 	bic.w	r3, r3, #14
 80010a6:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010a8:	6802      	ldr	r2, [r0, #0]
 80010aa:	6813      	ldr	r3, [r2, #0]
 80010ac:	f023 0301 	bic.w	r3, r3, #1
 80010b0:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80010b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80010b4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80010b6:	2201      	movs	r2, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY; 
 80010be:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 80010c2:	2300      	movs	r3, #0
 80010c4:	f880 3020 	strb.w	r3, [r0, #32]
  return HAL_OK;
 80010c8:	4618      	mov	r0, r3
}
 80010ca:	4770      	bx	lr

080010cc <HAL_DMA_Abort_IT>:
{  
 80010cc:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010ce:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d003      	beq.n	80010de <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d6:	2304      	movs	r3, #4
 80010d8:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80010da:	2001      	movs	r0, #1
}
 80010dc:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010de:	6802      	ldr	r2, [r0, #0]
 80010e0:	6813      	ldr	r3, [r2, #0]
 80010e2:	f023 030e 	bic.w	r3, r3, #14
 80010e6:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010e8:	6802      	ldr	r2, [r0, #0]
 80010ea:	6813      	ldr	r3, [r2, #0]
 80010ec:	f023 0301 	bic.w	r3, r3, #1
 80010f0:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80010f2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80010f4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80010f6:	2201      	movs	r2, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80010fe:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001102:	2300      	movs	r3, #0
 8001104:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001108:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800110a:	b113      	cbz	r3, 8001112 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 800110c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800110e:	2000      	movs	r0, #0
 8001110:	e7e4      	b.n	80010dc <HAL_DMA_Abort_IT+0x10>
 8001112:	2000      	movs	r0, #0
 8001114:	e7e2      	b.n	80010dc <HAL_DMA_Abort_IT+0x10>

08001116 <HAL_DMA_IRQHandler>:
{
 8001116:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001118:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800111a:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800111c:	6804      	ldr	r4, [r0, #0]
 800111e:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001120:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001122:	2304      	movs	r3, #4
 8001124:	408b      	lsls	r3, r1
 8001126:	4213      	tst	r3, r2
 8001128:	d013      	beq.n	8001152 <HAL_DMA_IRQHandler+0x3c>
 800112a:	f015 0f04 	tst.w	r5, #4
 800112e:	d010      	beq.n	8001152 <HAL_DMA_IRQHandler+0x3c>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001130:	6823      	ldr	r3, [r4, #0]
 8001132:	f013 0f20 	tst.w	r3, #32
 8001136:	d103      	bne.n	8001140 <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001138:	6823      	ldr	r3, [r4, #0]
 800113a:	f023 0304 	bic.w	r3, r3, #4
 800113e:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001140:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001142:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001144:	2304      	movs	r3, #4
 8001146:	408b      	lsls	r3, r1
 8001148:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 800114a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800114c:	b103      	cbz	r3, 8001150 <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferHalfCpltCallback(hdma);
 800114e:	4798      	blx	r3
}  
 8001150:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001152:	2302      	movs	r3, #2
 8001154:	408b      	lsls	r3, r1
 8001156:	4213      	tst	r3, r2
 8001158:	d01a      	beq.n	8001190 <HAL_DMA_IRQHandler+0x7a>
 800115a:	f015 0f02 	tst.w	r5, #2
 800115e:	d017      	beq.n	8001190 <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001160:	6823      	ldr	r3, [r4, #0]
 8001162:	f013 0f20 	tst.w	r3, #32
 8001166:	d106      	bne.n	8001176 <HAL_DMA_IRQHandler+0x60>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001168:	6823      	ldr	r3, [r4, #0]
 800116a:	f023 030a 	bic.w	r3, r3, #10
 800116e:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001170:	2301      	movs	r3, #1
 8001172:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001176:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001178:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800117a:	2302      	movs	r3, #2
 800117c:	408b      	lsls	r3, r1
 800117e:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8001180:	2300      	movs	r3, #0
 8001182:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8001186:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0e1      	beq.n	8001150 <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferCpltCallback(hdma);
 800118c:	4798      	blx	r3
 800118e:	e7df      	b.n	8001150 <HAL_DMA_IRQHandler+0x3a>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001190:	2308      	movs	r3, #8
 8001192:	fa03 f101 	lsl.w	r1, r3, r1
 8001196:	4211      	tst	r1, r2
 8001198:	d0da      	beq.n	8001150 <HAL_DMA_IRQHandler+0x3a>
 800119a:	f015 0f08 	tst.w	r5, #8
 800119e:	d0d7      	beq.n	8001150 <HAL_DMA_IRQHandler+0x3a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011a0:	6823      	ldr	r3, [r4, #0]
 80011a2:	f023 030e 	bic.w	r3, r3, #14
 80011a6:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80011a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80011aa:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80011ac:	2301      	movs	r3, #1
 80011ae:	fa03 f202 	lsl.w	r2, r3, r2
 80011b2:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011b4:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 80011b6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 80011ba:	2300      	movs	r3, #0
 80011bc:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 80011c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0c4      	beq.n	8001150 <HAL_DMA_IRQHandler+0x3a>
    	hdma->XferErrorCallback(hdma);
 80011c6:	4798      	blx	r3
}  
 80011c8:	e7c2      	b.n	8001150 <HAL_DMA_IRQHandler+0x3a>
	...

080011cc <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <FLASH_Program_HalfWord+0x14>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80011d2:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <FLASH_Program_HalfWord+0x18>)
 80011d4:	6913      	ldr	r3, [r2, #16]
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80011dc:	8001      	strh	r1, [r0, #0]
}
 80011de:	4770      	bx	lr
 80011e0:	20000b40 	.word	0x20000b40
 80011e4:	40022000 	.word	0x40022000

080011e8 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <FLASH_SetErrorCode+0x34>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	f013 0310 	ands.w	r3, r3, #16
 80011f0:	d005      	beq.n	80011fe <FLASH_SetErrorCode+0x16>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <FLASH_SetErrorCode+0x38>)
 80011f4:	69d3      	ldr	r3, [r2, #28]
 80011f6:	f043 0302 	orr.w	r3, r3, #2
 80011fa:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80011fc:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80011fe:	4a07      	ldr	r2, [pc, #28]	; (800121c <FLASH_SetErrorCode+0x34>)
 8001200:	68d2      	ldr	r2, [r2, #12]
 8001202:	f012 0f04 	tst.w	r2, #4
 8001206:	d006      	beq.n	8001216 <FLASH_SetErrorCode+0x2e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001208:	4905      	ldr	r1, [pc, #20]	; (8001220 <FLASH_SetErrorCode+0x38>)
 800120a:	69ca      	ldr	r2, [r1, #28]
 800120c:	f042 0201 	orr.w	r2, r2, #1
 8001210:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 8001212:	f043 0304 	orr.w	r3, r3, #4
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001216:	4a01      	ldr	r2, [pc, #4]	; (800121c <FLASH_SetErrorCode+0x34>)
 8001218:	60d3      	str	r3, [r2, #12]
}  
 800121a:	4770      	bx	lr
 800121c:	40022000 	.word	0x40022000
 8001220:	20000b40 	.word	0x20000b40

08001224 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_FLASH_Unlock+0x2c>)
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	f013 0f80 	tst.w	r3, #128	; 0x80
 800122c:	d00b      	beq.n	8001246 <HAL_FLASH_Unlock+0x22>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <HAL_FLASH_Unlock+0x2c>)
 8001230:	4a08      	ldr	r2, [pc, #32]	; (8001254 <HAL_FLASH_Unlock+0x30>)
 8001232:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001234:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001238:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001240:	d103      	bne.n	800124a <HAL_FLASH_Unlock+0x26>
  HAL_StatusTypeDef status = HAL_OK;
 8001242:	2000      	movs	r0, #0
 8001244:	4770      	bx	lr
 8001246:	2000      	movs	r0, #0
 8001248:	4770      	bx	lr
      status = HAL_ERROR;
 800124a:	2001      	movs	r0, #1
}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40022000 	.word	0x40022000
 8001254:	45670123 	.word	0x45670123

08001258 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001258:	4a03      	ldr	r2, [pc, #12]	; (8001268 <HAL_FLASH_Lock+0x10>)
 800125a:	6913      	ldr	r3, [r2, #16]
 800125c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001260:	6113      	str	r3, [r2, #16]
}
 8001262:	2000      	movs	r0, #0
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40022000 	.word	0x40022000

0800126c <FLASH_WaitForLastOperation>:
{
 800126c:	b538      	push	{r3, r4, r5, lr}
 800126e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7fe ffee 	bl	8000250 <HAL_GetTick>
 8001274:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <FLASH_WaitForLastOperation+0x5c>)
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	f013 0f01 	tst.w	r3, #1
 800127e:	d00a      	beq.n	8001296 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8001280:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001284:	d0f7      	beq.n	8001276 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001286:	b124      	cbz	r4, 8001292 <FLASH_WaitForLastOperation+0x26>
 8001288:	f7fe ffe2 	bl	8000250 <HAL_GetTick>
 800128c:	1b40      	subs	r0, r0, r5
 800128e:	42a0      	cmp	r0, r4
 8001290:	d9f1      	bls.n	8001276 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8001292:	2003      	movs	r0, #3
 8001294:	e012      	b.n	80012bc <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <FLASH_WaitForLastOperation+0x5c>)
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	f013 0f20 	tst.w	r3, #32
 800129e:	d002      	beq.n	80012a6 <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <FLASH_WaitForLastOperation+0x5c>)
 80012a2:	2220      	movs	r2, #32
 80012a4:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <FLASH_WaitForLastOperation+0x5c>)
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	f013 0f10 	tst.w	r3, #16
 80012ae:	d106      	bne.n	80012be <FLASH_WaitForLastOperation+0x52>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <FLASH_WaitForLastOperation+0x5c>)
 80012b2:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80012b4:	f013 0f04 	tst.w	r3, #4
 80012b8:	d101      	bne.n	80012be <FLASH_WaitForLastOperation+0x52>
  return HAL_OK;
 80012ba:	2000      	movs	r0, #0
}
 80012bc:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 80012be:	f7ff ff93 	bl	80011e8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80012c2:	2001      	movs	r0, #1
 80012c4:	e7fa      	b.n	80012bc <FLASH_WaitForLastOperation+0x50>
 80012c6:	bf00      	nop
 80012c8:	40022000 	.word	0x40022000

080012cc <HAL_FLASH_Program>:
{
 80012cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012d0:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 80012d2:	4b23      	ldr	r3, [pc, #140]	; (8001360 <HAL_FLASH_Program+0x94>)
 80012d4:	7e1b      	ldrb	r3, [r3, #24]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d040      	beq.n	800135c <HAL_FLASH_Program+0x90>
 80012da:	4604      	mov	r4, r0
 80012dc:	460f      	mov	r7, r1
 80012de:	4690      	mov	r8, r2
 80012e0:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <HAL_FLASH_Program+0x94>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80012e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012ea:	f7ff ffbf 	bl	800126c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80012ee:	4603      	mov	r3, r0
 80012f0:	bb70      	cbnz	r0, 8001350 <HAL_FLASH_Program+0x84>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80012f2:	2c01      	cmp	r4, #1
 80012f4:	d029      	beq.n	800134a <HAL_FLASH_Program+0x7e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80012f6:	2c02      	cmp	r4, #2
 80012f8:	d024      	beq.n	8001344 <HAL_FLASH_Program+0x78>
      nbiterations = 4U;
 80012fa:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 80012fe:	461c      	mov	r4, r3
 8001300:	454c      	cmp	r4, r9
 8001302:	d225      	bcs.n	8001350 <HAL_FLASH_Program+0x84>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001304:	0121      	lsls	r1, r4, #4
 8001306:	f1c1 0220 	rsb	r2, r1, #32
 800130a:	f1a1 0320 	sub.w	r3, r1, #32
 800130e:	fa28 f101 	lsr.w	r1, r8, r1
 8001312:	fa06 f202 	lsl.w	r2, r6, r2
 8001316:	4311      	orrs	r1, r2
 8001318:	fa26 f303 	lsr.w	r3, r6, r3
 800131c:	4319      	orrs	r1, r3
 800131e:	b289      	uxth	r1, r1
 8001320:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8001324:	f7ff ff52 	bl	80011cc <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001328:	f24c 3050 	movw	r0, #50000	; 0xc350
 800132c:	f7ff ff9e 	bl	800126c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <HAL_FLASH_Program+0x98>)
 8001332:	691d      	ldr	r5, [r3, #16]
 8001334:	f025 0501 	bic.w	r5, r5, #1
 8001338:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 800133a:	4603      	mov	r3, r0
 800133c:	b940      	cbnz	r0, 8001350 <HAL_FLASH_Program+0x84>
    for (index = 0U; index < nbiterations; index++)
 800133e:	3401      	adds	r4, #1
 8001340:	b2e4      	uxtb	r4, r4
 8001342:	e7dd      	b.n	8001300 <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 8001344:	f04f 0902 	mov.w	r9, #2
 8001348:	e7d9      	b.n	80012fe <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 800134a:	f04f 0901 	mov.w	r9, #1
 800134e:	e7d6      	b.n	80012fe <HAL_FLASH_Program+0x32>
  __HAL_UNLOCK(&pFlash);
 8001350:	4a03      	ldr	r2, [pc, #12]	; (8001360 <HAL_FLASH_Program+0x94>)
 8001352:	2100      	movs	r1, #0
 8001354:	7611      	strb	r1, [r2, #24]
}
 8001356:	4618      	mov	r0, r3
 8001358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 800135c:	2302      	movs	r3, #2
 800135e:	e7fa      	b.n	8001356 <HAL_FLASH_Program+0x8a>
 8001360:	20000b40 	.word	0x20000b40
 8001364:	40022000 	.word	0x40022000

08001368 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <FLASH_MassErase+0x1c>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <FLASH_MassErase+0x20>)
 8001370:	691a      	ldr	r2, [r3, #16]
 8001372:	f042 0204 	orr.w	r2, r2, #4
 8001376:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001378:	691a      	ldr	r2, [r3, #16]
 800137a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800137e:	611a      	str	r2, [r3, #16]
}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000b40 	.word	0x20000b40
 8001388:	40022000 	.word	0x40022000

0800138c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <FLASH_PageErase+0x1c>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <FLASH_PageErase+0x20>)
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	f042 0202 	orr.w	r2, r2, #2
 800139a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800139c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013a4:	611a      	str	r2, [r3, #16]
}
 80013a6:	4770      	bx	lr
 80013a8:	20000b40 	.word	0x20000b40
 80013ac:	40022000 	.word	0x40022000

080013b0 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 80013b0:	4b26      	ldr	r3, [pc, #152]	; (800144c <HAL_FLASHEx_Erase+0x9c>)
 80013b2:	7e1b      	ldrb	r3, [r3, #24]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d045      	beq.n	8001444 <HAL_FLASHEx_Erase+0x94>
{
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	4605      	mov	r5, r0
 80013bc:	460e      	mov	r6, r1
  __HAL_LOCK(&pFlash);
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <HAL_FLASHEx_Erase+0x9c>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80013c4:	6803      	ldr	r3, [r0, #0]
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d020      	beq.n	800140c <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80013ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013ce:	f7ff ff4d 	bl	800126c <FLASH_WaitForLastOperation>
 80013d2:	bb88      	cbnz	r0, 8001438 <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFFU;
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
 80013d8:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 80013da:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80013dc:	2101      	movs	r1, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80013de:	68aa      	ldr	r2, [r5, #8]
 80013e0:	686b      	ldr	r3, [r5, #4]
 80013e2:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
        for(address = pEraseInit->PageAddress;
 80013e6:	42a3      	cmp	r3, r4
 80013e8:	d927      	bls.n	800143a <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 80013ea:	4620      	mov	r0, r4
 80013ec:	f7ff ffce 	bl	800138c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013f4:	f7ff ff3a 	bl	800126c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80013f8:	4a15      	ldr	r2, [pc, #84]	; (8001450 <HAL_FLASHEx_Erase+0xa0>)
 80013fa:	6913      	ldr	r3, [r2, #16]
 80013fc:	f023 0302 	bic.w	r3, r3, #2
 8001400:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8001402:	4601      	mov	r1, r0
 8001404:	b9b0      	cbnz	r0, 8001434 <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 8001406:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800140a:	e7e8      	b.n	80013de <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800140c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001410:	f7ff ff2c 	bl	800126c <FLASH_WaitForLastOperation>
 8001414:	b108      	cbz	r0, 800141a <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001416:	2101      	movs	r1, #1
 8001418:	e00f      	b.n	800143a <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 800141a:	f7ff ffa5 	bl	8001368 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800141e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001422:	f7ff ff23 	bl	800126c <FLASH_WaitForLastOperation>
 8001426:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001428:	4a09      	ldr	r2, [pc, #36]	; (8001450 <HAL_FLASHEx_Erase+0xa0>)
 800142a:	6913      	ldr	r3, [r2, #16]
 800142c:	f023 0304 	bic.w	r3, r3, #4
 8001430:	6113      	str	r3, [r2, #16]
 8001432:	e002      	b.n	800143a <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 8001434:	6034      	str	r4, [r6, #0]
            break;
 8001436:	e000      	b.n	800143a <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001438:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <HAL_FLASHEx_Erase+0x9c>)
 800143c:	2200      	movs	r2, #0
 800143e:	761a      	strb	r2, [r3, #24]
}
 8001440:	4608      	mov	r0, r1
 8001442:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8001444:	2102      	movs	r1, #2
}
 8001446:	4608      	mov	r0, r1
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000b40 	.word	0x20000b40
 8001450:	40022000 	.word	0x40022000

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b4f0      	push	{r4, r5, r6, r7}
 8001456:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8001458:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145a:	e05b      	b.n	8001514 <HAL_GPIO_Init+0xc0>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800145c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800145e:	005f      	lsls	r7, r3, #1
 8001460:	2503      	movs	r5, #3
 8001462:	40bd      	lsls	r5, r7
 8001464:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001468:	68cd      	ldr	r5, [r1, #12]
 800146a:	40bd      	lsls	r5, r7
 800146c:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800146e:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001470:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001472:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001476:	684d      	ldr	r5, [r1, #4]
 8001478:	f3c5 1400 	ubfx	r4, r5, #4, #1
 800147c:	409c      	lsls	r4, r3
 800147e:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8001480:	6044      	str	r4, [r0, #4]
 8001482:	e055      	b.n	8001530 <HAL_GPIO_Init+0xdc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001484:	08dd      	lsrs	r5, r3, #3
 8001486:	3508      	adds	r5, #8
 8001488:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800148c:	f003 0407 	and.w	r4, r3, #7
 8001490:	00a6      	lsls	r6, r4, #2
 8001492:	240f      	movs	r4, #15
 8001494:	40b4      	lsls	r4, r6
 8001496:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800149a:	690c      	ldr	r4, [r1, #16]
 800149c:	40b4      	lsls	r4, r6
 800149e:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 80014a0:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80014a4:	e058      	b.n	8001558 <HAL_GPIO_Init+0x104>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014a6:	2403      	movs	r4, #3
 80014a8:	e000      	b.n	80014ac <HAL_GPIO_Init+0x58>
 80014aa:	2400      	movs	r4, #0
 80014ac:	40b4      	lsls	r4, r6
 80014ae:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014b0:	3502      	adds	r5, #2
 80014b2:	4e49      	ldr	r6, [pc, #292]	; (80015d8 <HAL_GPIO_Init+0x184>)
 80014b4:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b8:	4c48      	ldr	r4, [pc, #288]	; (80015dc <HAL_GPIO_Init+0x188>)
 80014ba:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80014bc:	43d4      	mvns	r4, r2
 80014be:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014c2:	684f      	ldr	r7, [r1, #4]
 80014c4:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80014c8:	d001      	beq.n	80014ce <HAL_GPIO_Init+0x7a>
        {
          temp |= iocurrent;
 80014ca:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 80014ce:	4d43      	ldr	r5, [pc, #268]	; (80015dc <HAL_GPIO_Init+0x188>)
 80014d0:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 80014d2:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80014d4:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014d8:	684f      	ldr	r7, [r1, #4]
 80014da:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80014de:	d001      	beq.n	80014e4 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80014e0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 80014e4:	4d3d      	ldr	r5, [pc, #244]	; (80015dc <HAL_GPIO_Init+0x188>)
 80014e6:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e8:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 80014ea:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014ee:	684f      	ldr	r7, [r1, #4]
 80014f0:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80014f4:	d001      	beq.n	80014fa <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80014f6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 80014fa:	4d38      	ldr	r5, [pc, #224]	; (80015dc <HAL_GPIO_Init+0x188>)
 80014fc:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80014fe:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8001500:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001502:	684e      	ldr	r6, [r1, #4]
 8001504:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001508:	d001      	beq.n	800150e <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 800150a:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 800150e:	4a33      	ldr	r2, [pc, #204]	; (80015dc <HAL_GPIO_Init+0x188>)
 8001510:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8001512:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001514:	680a      	ldr	r2, [r1, #0]
 8001516:	fa32 f403 	lsrs.w	r4, r2, r3
 800151a:	d059      	beq.n	80015d0 <HAL_GPIO_Init+0x17c>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800151c:	2401      	movs	r4, #1
 800151e:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8001520:	4022      	ands	r2, r4
 8001522:	d0f6      	beq.n	8001512 <HAL_GPIO_Init+0xbe>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001524:	684d      	ldr	r5, [r1, #4]
 8001526:	f005 0503 	and.w	r5, r5, #3
 800152a:	3d01      	subs	r5, #1
 800152c:	2d01      	cmp	r5, #1
 800152e:	d995      	bls.n	800145c <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001530:	684c      	ldr	r4, [r1, #4]
 8001532:	f004 0403 	and.w	r4, r4, #3
 8001536:	2c03      	cmp	r4, #3
 8001538:	d009      	beq.n	800154e <HAL_GPIO_Init+0xfa>
        temp = GPIOx->PUPDR;
 800153a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800153c:	005e      	lsls	r6, r3, #1
 800153e:	2403      	movs	r4, #3
 8001540:	40b4      	lsls	r4, r6
 8001542:	ea25 0504 	bic.w	r5, r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001546:	688c      	ldr	r4, [r1, #8]
 8001548:	40b4      	lsls	r4, r6
 800154a:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800154c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800154e:	684c      	ldr	r4, [r1, #4]
 8001550:	f004 0403 	and.w	r4, r4, #3
 8001554:	2c02      	cmp	r4, #2
 8001556:	d095      	beq.n	8001484 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8001558:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800155a:	005e      	lsls	r6, r3, #1
 800155c:	2403      	movs	r4, #3
 800155e:	40b4      	lsls	r4, r6
 8001560:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001564:	684c      	ldr	r4, [r1, #4]
 8001566:	f004 0403 	and.w	r4, r4, #3
 800156a:	40b4      	lsls	r4, r6
 800156c:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 800156e:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001570:	684c      	ldr	r4, [r1, #4]
 8001572:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8001576:	d0cc      	beq.n	8001512 <HAL_GPIO_Init+0xbe>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001578:	4c19      	ldr	r4, [pc, #100]	; (80015e0 <HAL_GPIO_Init+0x18c>)
 800157a:	69a5      	ldr	r5, [r4, #24]
 800157c:	f045 0501 	orr.w	r5, r5, #1
 8001580:	61a5      	str	r5, [r4, #24]
 8001582:	69a4      	ldr	r4, [r4, #24]
 8001584:	f004 0401 	and.w	r4, r4, #1
 8001588:	9401      	str	r4, [sp, #4]
 800158a:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800158c:	089d      	lsrs	r5, r3, #2
 800158e:	1cae      	adds	r6, r5, #2
 8001590:	4c11      	ldr	r4, [pc, #68]	; (80015d8 <HAL_GPIO_Init+0x184>)
 8001592:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001596:	f003 0403 	and.w	r4, r3, #3
 800159a:	00a6      	lsls	r6, r4, #2
 800159c:	240f      	movs	r4, #15
 800159e:	40b4      	lsls	r4, r6
 80015a0:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015a4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80015a8:	f43f af7f 	beq.w	80014aa <HAL_GPIO_Init+0x56>
 80015ac:	4c0d      	ldr	r4, [pc, #52]	; (80015e4 <HAL_GPIO_Init+0x190>)
 80015ae:	42a0      	cmp	r0, r4
 80015b0:	d00a      	beq.n	80015c8 <HAL_GPIO_Init+0x174>
 80015b2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80015b6:	42a0      	cmp	r0, r4
 80015b8:	d008      	beq.n	80015cc <HAL_GPIO_Init+0x178>
 80015ba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80015be:	42a0      	cmp	r0, r4
 80015c0:	f43f af71 	beq.w	80014a6 <HAL_GPIO_Init+0x52>
 80015c4:	2405      	movs	r4, #5
 80015c6:	e771      	b.n	80014ac <HAL_GPIO_Init+0x58>
 80015c8:	2401      	movs	r4, #1
 80015ca:	e76f      	b.n	80014ac <HAL_GPIO_Init+0x58>
 80015cc:	2402      	movs	r4, #2
 80015ce:	e76d      	b.n	80014ac <HAL_GPIO_Init+0x58>
  }
}
 80015d0:	b002      	add	sp, #8
 80015d2:	bcf0      	pop	{r4, r5, r6, r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40010000 	.word	0x40010000
 80015dc:	40010400 	.word	0x40010400
 80015e0:	40021000 	.word	0x40021000
 80015e4:	48000400 	.word	0x48000400

080015e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e8:	b10a      	cbz	r2, 80015ee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ea:	6181      	str	r1, [r0, #24]
 80015ec:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ee:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80015f0:	4770      	bx	lr
	...

080015f4 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015f4:	2800      	cmp	r0, #0
 80015f6:	f000 8301 	beq.w	8001bfc <HAL_RCC_OscConfig+0x608>
{
 80015fa:	b570      	push	{r4, r5, r6, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001600:	6803      	ldr	r3, [r0, #0]
 8001602:	f013 0f01 	tst.w	r3, #1
 8001606:	d03b      	beq.n	8001680 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001608:	4bb5      	ldr	r3, [pc, #724]	; (80018e0 <HAL_RCC_OscConfig+0x2ec>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 030c 	and.w	r3, r3, #12
 8001610:	2b04      	cmp	r3, #4
 8001612:	d01e      	beq.n	8001652 <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001614:	4bb2      	ldr	r3, [pc, #712]	; (80018e0 <HAL_RCC_OscConfig+0x2ec>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 030c 	and.w	r3, r3, #12
 800161c:	2b08      	cmp	r3, #8
 800161e:	d013      	beq.n	8001648 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001620:	6863      	ldr	r3, [r4, #4]
 8001622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001626:	d068      	beq.n	80016fa <HAL_RCC_OscConfig+0x106>
 8001628:	2b00      	cmp	r3, #0
 800162a:	f040 8092 	bne.w	8001752 <HAL_RCC_OscConfig+0x15e>
 800162e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001632:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	e05d      	b.n	8001704 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001648:	4ba5      	ldr	r3, [pc, #660]	; (80018e0 <HAL_RCC_OscConfig+0x2ec>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001650:	d0e6      	beq.n	8001620 <HAL_RCC_OscConfig+0x2c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001652:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001656:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165a:	4ba1      	ldr	r3, [pc, #644]	; (80018e0 <HAL_RCC_OscConfig+0x2ec>)
 800165c:	6819      	ldr	r1, [r3, #0]
 800165e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001662:	fa93 f3a3 	rbit	r3, r3
 8001666:	fab3 f383 	clz	r3, r3
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	2201      	movs	r2, #1
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	420b      	tst	r3, r1
 8001676:	d003      	beq.n	8001680 <HAL_RCC_OscConfig+0x8c>
 8001678:	6863      	ldr	r3, [r4, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 82c0 	beq.w	8001c00 <HAL_RCC_OscConfig+0x60c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001680:	6823      	ldr	r3, [r4, #0]
 8001682:	f013 0f02 	tst.w	r3, #2
 8001686:	f000 80c5 	beq.w	8001814 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800168a:	4b95      	ldr	r3, [pc, #596]	; (80018e0 <HAL_RCC_OscConfig+0x2ec>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f013 0f0c 	tst.w	r3, #12
 8001692:	f000 809c 	beq.w	80017ce <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001696:	4b92      	ldr	r3, [pc, #584]	; (80018e0 <HAL_RCC_OscConfig+0x2ec>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b08      	cmp	r3, #8
 80016a0:	f000 808f 	beq.w	80017c2 <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016a4:	6923      	ldr	r3, [r4, #16]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 80f2 	beq.w	8001890 <HAL_RCC_OscConfig+0x29c>
 80016ac:	2201      	movs	r2, #1
 80016ae:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b2:	fab3 f383 	clz	r3, r3
 80016b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c2:	f7fe fdc5 	bl	8000250 <HAL_GetTick>
 80016c6:	4605      	mov	r5, r0
 80016c8:	2302      	movs	r3, #2
 80016ca:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ce:	4b84      	ldr	r3, [pc, #528]	; (80018e0 <HAL_RCC_OscConfig+0x2ec>)
 80016d0:	6819      	ldr	r1, [r3, #0]
 80016d2:	2302      	movs	r3, #2
 80016d4:	fa93 f3a3 	rbit	r3, r3
 80016d8:	fab3 f383 	clz	r3, r3
 80016dc:	f003 031f 	and.w	r3, r3, #31
 80016e0:	2201      	movs	r2, #1
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	420b      	tst	r3, r1
 80016e8:	f040 80c3 	bne.w	8001872 <HAL_RCC_OscConfig+0x27e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ec:	f7fe fdb0 	bl	8000250 <HAL_GetTick>
 80016f0:	1b40      	subs	r0, r0, r5
 80016f2:	2802      	cmp	r0, #2
 80016f4:	d9e8      	bls.n	80016c8 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 80016f6:	2003      	movs	r0, #3
 80016f8:	e28b      	b.n	8001c12 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fa:	4a79      	ldr	r2, [pc, #484]	; (80018e0 <HAL_RCC_OscConfig+0x2ec>)
 80016fc:	6813      	ldr	r3, [r2, #0]
 80016fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001702:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001704:	4a76      	ldr	r2, [pc, #472]	; (80018e0 <HAL_RCC_OscConfig+0x2ec>)
 8001706:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001708:	f023 030f 	bic.w	r3, r3, #15
 800170c:	68a1      	ldr	r1, [r4, #8]
 800170e:	430b      	orrs	r3, r1
 8001710:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001712:	6863      	ldr	r3, [r4, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d036      	beq.n	8001786 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8001718:	f7fe fd9a 	bl	8000250 <HAL_GetTick>
 800171c:	4605      	mov	r5, r0
 800171e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001722:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	4b6e      	ldr	r3, [pc, #440]	; (80018e0 <HAL_RCC_OscConfig+0x2ec>)
 8001728:	6819      	ldr	r1, [r3, #0]
 800172a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800172e:	fa93 f3a3 	rbit	r3, r3
 8001732:	fab3 f383 	clz	r3, r3
 8001736:	f003 031f 	and.w	r3, r3, #31
 800173a:	2201      	movs	r2, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	420b      	tst	r3, r1
 8001742:	d19d      	bne.n	8001680 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001744:	f7fe fd84 	bl	8000250 <HAL_GetTick>
 8001748:	1b40      	subs	r0, r0, r5
 800174a:	2864      	cmp	r0, #100	; 0x64
 800174c:	d9e7      	bls.n	800171e <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 800174e:	2003      	movs	r0, #3
 8001750:	e25f      	b.n	8001c12 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001752:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001756:	d009      	beq.n	800176c <HAL_RCC_OscConfig+0x178>
 8001758:	4b61      	ldr	r3, [pc, #388]	; (80018e0 <HAL_RCC_OscConfig+0x2ec>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	e7cb      	b.n	8001704 <HAL_RCC_OscConfig+0x110>
 800176c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001770:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	e7be      	b.n	8001704 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8001786:	f7fe fd63 	bl	8000250 <HAL_GetTick>
 800178a:	4605      	mov	r5, r0
 800178c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001790:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001794:	4b52      	ldr	r3, [pc, #328]	; (80018e0 <HAL_RCC_OscConfig+0x2ec>)
 8001796:	6819      	ldr	r1, [r3, #0]
 8001798:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800179c:	fa93 f3a3 	rbit	r3, r3
 80017a0:	fab3 f383 	clz	r3, r3
 80017a4:	f003 031f 	and.w	r3, r3, #31
 80017a8:	2201      	movs	r2, #1
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	420b      	tst	r3, r1
 80017b0:	f43f af66 	beq.w	8001680 <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b4:	f7fe fd4c 	bl	8000250 <HAL_GetTick>
 80017b8:	1b40      	subs	r0, r0, r5
 80017ba:	2864      	cmp	r0, #100	; 0x64
 80017bc:	d9e6      	bls.n	800178c <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 80017be:	2003      	movs	r0, #3
 80017c0:	e227      	b.n	8001c12 <HAL_RCC_OscConfig+0x61e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017c2:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <HAL_RCC_OscConfig+0x2ec>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80017ca:	f47f af6b 	bne.w	80016a4 <HAL_RCC_OscConfig+0xb0>
 80017ce:	2302      	movs	r3, #2
 80017d0:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d4:	4b42      	ldr	r3, [pc, #264]	; (80018e0 <HAL_RCC_OscConfig+0x2ec>)
 80017d6:	6819      	ldr	r1, [r3, #0]
 80017d8:	2302      	movs	r3, #2
 80017da:	fa93 f3a3 	rbit	r3, r3
 80017de:	fab3 f383 	clz	r3, r3
 80017e2:	f003 031f 	and.w	r3, r3, #31
 80017e6:	2201      	movs	r2, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	420b      	tst	r3, r1
 80017ee:	d003      	beq.n	80017f8 <HAL_RCC_OscConfig+0x204>
 80017f0:	6923      	ldr	r3, [r4, #16]
 80017f2:	4293      	cmp	r3, r2
 80017f4:	f040 8206 	bne.w	8001c04 <HAL_RCC_OscConfig+0x610>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f8:	4839      	ldr	r0, [pc, #228]	; (80018e0 <HAL_RCC_OscConfig+0x2ec>)
 80017fa:	6803      	ldr	r3, [r0, #0]
 80017fc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001800:	6961      	ldr	r1, [r4, #20]
 8001802:	22f8      	movs	r2, #248	; 0xf8
 8001804:	fa92 f2a2 	rbit	r2, r2
 8001808:	fab2 f282 	clz	r2, r2
 800180c:	fa01 f202 	lsl.w	r2, r1, r2
 8001810:	4313      	orrs	r3, r2
 8001812:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001814:	6823      	ldr	r3, [r4, #0]
 8001816:	f013 0f08 	tst.w	r3, #8
 800181a:	f000 808d 	beq.w	8001938 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800181e:	69a3      	ldr	r3, [r4, #24]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d061      	beq.n	80018e8 <HAL_RCC_OscConfig+0x2f4>
 8001824:	2101      	movs	r1, #1
 8001826:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800182a:	fab2 f282 	clz	r2, r2
 800182e:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <HAL_RCC_OscConfig+0x2f0>)
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001836:	f7fe fd0b 	bl	8000250 <HAL_GetTick>
 800183a:	4605      	mov	r5, r0
 800183c:	2302      	movs	r3, #2
 800183e:	fa93 f2a3 	rbit	r2, r3
 8001842:	fa93 f2a3 	rbit	r2, r3
 8001846:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184a:	4a25      	ldr	r2, [pc, #148]	; (80018e0 <HAL_RCC_OscConfig+0x2ec>)
 800184c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800184e:	fa93 f3a3 	rbit	r3, r3
 8001852:	fab3 f383 	clz	r3, r3
 8001856:	f003 031f 	and.w	r3, r3, #31
 800185a:	2201      	movs	r2, #1
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	420b      	tst	r3, r1
 8001862:	d169      	bne.n	8001938 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001864:	f7fe fcf4 	bl	8000250 <HAL_GetTick>
 8001868:	1b40      	subs	r0, r0, r5
 800186a:	2802      	cmp	r0, #2
 800186c:	d9e6      	bls.n	800183c <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 800186e:	2003      	movs	r0, #3
 8001870:	e1cf      	b.n	8001c12 <HAL_RCC_OscConfig+0x61e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001872:	481b      	ldr	r0, [pc, #108]	; (80018e0 <HAL_RCC_OscConfig+0x2ec>)
 8001874:	6803      	ldr	r3, [r0, #0]
 8001876:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800187a:	6961      	ldr	r1, [r4, #20]
 800187c:	22f8      	movs	r2, #248	; 0xf8
 800187e:	fa92 f2a2 	rbit	r2, r2
 8001882:	fab2 f282 	clz	r2, r2
 8001886:	fa01 f202 	lsl.w	r2, r1, r2
 800188a:	4313      	orrs	r3, r2
 800188c:	6003      	str	r3, [r0, #0]
 800188e:	e7c1      	b.n	8001814 <HAL_RCC_OscConfig+0x220>
 8001890:	2301      	movs	r3, #1
 8001892:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8001896:	fab3 f383 	clz	r3, r3
 800189a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800189e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018a8:	f7fe fcd2 	bl	8000250 <HAL_GetTick>
 80018ac:	4605      	mov	r5, r0
 80018ae:	2302      	movs	r3, #2
 80018b0:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b4:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <HAL_RCC_OscConfig+0x2ec>)
 80018b6:	6819      	ldr	r1, [r3, #0]
 80018b8:	2302      	movs	r3, #2
 80018ba:	fa93 f3a3 	rbit	r3, r3
 80018be:	fab3 f383 	clz	r3, r3
 80018c2:	f003 031f 	and.w	r3, r3, #31
 80018c6:	2201      	movs	r2, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	420b      	tst	r3, r1
 80018ce:	d0a1      	beq.n	8001814 <HAL_RCC_OscConfig+0x220>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018d0:	f7fe fcbe 	bl	8000250 <HAL_GetTick>
 80018d4:	1b40      	subs	r0, r0, r5
 80018d6:	2802      	cmp	r0, #2
 80018d8:	d9e9      	bls.n	80018ae <HAL_RCC_OscConfig+0x2ba>
            return HAL_TIMEOUT;
 80018da:	2003      	movs	r0, #3
 80018dc:	e199      	b.n	8001c12 <HAL_RCC_OscConfig+0x61e>
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	10908120 	.word	0x10908120
 80018e8:	2201      	movs	r2, #1
 80018ea:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ee:	fab2 f282 	clz	r2, r2
 80018f2:	4bb7      	ldr	r3, [pc, #732]	; (8001bd0 <HAL_RCC_OscConfig+0x5dc>)
 80018f4:	4413      	add	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fc:	f7fe fca8 	bl	8000250 <HAL_GetTick>
 8001900:	4605      	mov	r5, r0
 8001902:	2302      	movs	r3, #2
 8001904:	fa93 f2a3 	rbit	r2, r3
 8001908:	fa93 f2a3 	rbit	r2, r3
 800190c:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001910:	4ab0      	ldr	r2, [pc, #704]	; (8001bd4 <HAL_RCC_OscConfig+0x5e0>)
 8001912:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	fab3 f383 	clz	r3, r3
 800191c:	f003 031f 	and.w	r3, r3, #31
 8001920:	2201      	movs	r2, #1
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	420b      	tst	r3, r1
 8001928:	d006      	beq.n	8001938 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800192a:	f7fe fc91 	bl	8000250 <HAL_GetTick>
 800192e:	1b40      	subs	r0, r0, r5
 8001930:	2802      	cmp	r0, #2
 8001932:	d9e6      	bls.n	8001902 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8001934:	2003      	movs	r0, #3
 8001936:	e16c      	b.n	8001c12 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	f013 0f04 	tst.w	r3, #4
 800193e:	f000 80a9 	beq.w	8001a94 <HAL_RCC_OscConfig+0x4a0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001942:	4ba4      	ldr	r3, [pc, #656]	; (8001bd4 <HAL_RCC_OscConfig+0x5e0>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800194a:	d10b      	bne.n	8001964 <HAL_RCC_OscConfig+0x370>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800194c:	4ba1      	ldr	r3, [pc, #644]	; (8001bd4 <HAL_RCC_OscConfig+0x5e0>)
 800194e:	69da      	ldr	r2, [r3, #28]
 8001950:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001954:	61da      	str	r2, [r3, #28]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001960:	2501      	movs	r5, #1
 8001962:	e000      	b.n	8001966 <HAL_RCC_OscConfig+0x372>
    FlagStatus       pwrclkchanged = RESET;
 8001964:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001966:	4b9c      	ldr	r3, [pc, #624]	; (8001bd8 <HAL_RCC_OscConfig+0x5e4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800196e:	d010      	beq.n	8001992 <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001970:	68e3      	ldr	r3, [r4, #12]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d021      	beq.n	80019ba <HAL_RCC_OscConfig+0x3c6>
 8001976:	bb63      	cbnz	r3, 80019d2 <HAL_RCC_OscConfig+0x3de>
 8001978:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800197c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001980:	6a1a      	ldr	r2, [r3, #32]
 8001982:	f022 0201 	bic.w	r2, r2, #1
 8001986:	621a      	str	r2, [r3, #32]
 8001988:	6a1a      	ldr	r2, [r3, #32]
 800198a:	f022 0204 	bic.w	r2, r2, #4
 800198e:	621a      	str	r2, [r3, #32]
 8001990:	e018      	b.n	80019c4 <HAL_RCC_OscConfig+0x3d0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001992:	4a91      	ldr	r2, [pc, #580]	; (8001bd8 <HAL_RCC_OscConfig+0x5e4>)
 8001994:	6813      	ldr	r3, [r2, #0]
 8001996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800199c:	f7fe fc58 	bl	8000250 <HAL_GetTick>
 80019a0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a2:	4b8d      	ldr	r3, [pc, #564]	; (8001bd8 <HAL_RCC_OscConfig+0x5e4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80019aa:	d1e1      	bne.n	8001970 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ac:	f7fe fc50 	bl	8000250 <HAL_GetTick>
 80019b0:	1b80      	subs	r0, r0, r6
 80019b2:	2864      	cmp	r0, #100	; 0x64
 80019b4:	d9f5      	bls.n	80019a2 <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 80019b6:	2003      	movs	r0, #3
 80019b8:	e12b      	b.n	8001c12 <HAL_RCC_OscConfig+0x61e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ba:	4a86      	ldr	r2, [pc, #536]	; (8001bd4 <HAL_RCC_OscConfig+0x5e0>)
 80019bc:	6a13      	ldr	r3, [r2, #32]
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c4:	68e3      	ldr	r3, [r4, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d03c      	beq.n	8001a44 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ca:	f7fe fc41 	bl	8000250 <HAL_GetTick>
 80019ce:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d0:	e02e      	b.n	8001a30 <HAL_RCC_OscConfig+0x43c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d2:	2b05      	cmp	r3, #5
 80019d4:	d009      	beq.n	80019ea <HAL_RCC_OscConfig+0x3f6>
 80019d6:	4b7f      	ldr	r3, [pc, #508]	; (8001bd4 <HAL_RCC_OscConfig+0x5e0>)
 80019d8:	6a1a      	ldr	r2, [r3, #32]
 80019da:	f022 0201 	bic.w	r2, r2, #1
 80019de:	621a      	str	r2, [r3, #32]
 80019e0:	6a1a      	ldr	r2, [r3, #32]
 80019e2:	f022 0204 	bic.w	r2, r2, #4
 80019e6:	621a      	str	r2, [r3, #32]
 80019e8:	e7ec      	b.n	80019c4 <HAL_RCC_OscConfig+0x3d0>
 80019ea:	4b7a      	ldr	r3, [pc, #488]	; (8001bd4 <HAL_RCC_OscConfig+0x5e0>)
 80019ec:	6a1a      	ldr	r2, [r3, #32]
 80019ee:	f042 0204 	orr.w	r2, r2, #4
 80019f2:	621a      	str	r2, [r3, #32]
 80019f4:	6a1a      	ldr	r2, [r3, #32]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	621a      	str	r2, [r3, #32]
 80019fc:	e7e2      	b.n	80019c4 <HAL_RCC_OscConfig+0x3d0>
 80019fe:	2302      	movs	r3, #2
 8001a00:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a04:	4b73      	ldr	r3, [pc, #460]	; (8001bd4 <HAL_RCC_OscConfig+0x5e0>)
 8001a06:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a08:	2302      	movs	r3, #2
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	fab3 f383 	clz	r3, r3
 8001a12:	f003 031f 	and.w	r3, r3, #31
 8001a16:	2201      	movs	r2, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	4219      	tst	r1, r3
 8001a1e:	d138      	bne.n	8001a92 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a20:	f7fe fc16 	bl	8000250 <HAL_GetTick>
 8001a24:	1b80      	subs	r0, r0, r6
 8001a26:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a2a:	4298      	cmp	r0, r3
 8001a2c:	f200 80ec 	bhi.w	8001c08 <HAL_RCC_OscConfig+0x614>
 8001a30:	2302      	movs	r3, #2
 8001a32:	fa93 f2a3 	rbit	r2, r3
 8001a36:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0df      	beq.n	80019fe <HAL_RCC_OscConfig+0x40a>
 8001a3e:	4b65      	ldr	r3, [pc, #404]	; (8001bd4 <HAL_RCC_OscConfig+0x5e0>)
 8001a40:	6a19      	ldr	r1, [r3, #32]
 8001a42:	e7e1      	b.n	8001a08 <HAL_RCC_OscConfig+0x414>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a44:	f7fe fc04 	bl	8000250 <HAL_GetTick>
 8001a48:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a4a:	e018      	b.n	8001a7e <HAL_RCC_OscConfig+0x48a>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	4b60      	ldr	r3, [pc, #384]	; (8001bd4 <HAL_RCC_OscConfig+0x5e0>)
 8001a54:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a56:	2302      	movs	r3, #2
 8001a58:	fa93 f3a3 	rbit	r3, r3
 8001a5c:	fab3 f383 	clz	r3, r3
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	2201      	movs	r2, #1
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	4219      	tst	r1, r3
 8001a6c:	d011      	beq.n	8001a92 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6e:	f7fe fbef 	bl	8000250 <HAL_GetTick>
 8001a72:	1b80      	subs	r0, r0, r6
 8001a74:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a78:	4298      	cmp	r0, r3
 8001a7a:	f200 80c7 	bhi.w	8001c0c <HAL_RCC_OscConfig+0x618>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	fa93 f2a3 	rbit	r2, r3
 8001a84:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0df      	beq.n	8001a4c <HAL_RCC_OscConfig+0x458>
 8001a8c:	4b51      	ldr	r3, [pc, #324]	; (8001bd4 <HAL_RCC_OscConfig+0x5e0>)
 8001a8e:	6a19      	ldr	r1, [r3, #32]
 8001a90:	e7e1      	b.n	8001a56 <HAL_RCC_OscConfig+0x462>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a92:	bbb5      	cbnz	r5, 8001b02 <HAL_RCC_OscConfig+0x50e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a94:	69e3      	ldr	r3, [r4, #28]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 80ba 	beq.w	8001c10 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a9c:	4a4d      	ldr	r2, [pc, #308]	; (8001bd4 <HAL_RCC_OscConfig+0x5e0>)
 8001a9e:	6852      	ldr	r2, [r2, #4]
 8001aa0:	f002 020c 	and.w	r2, r2, #12
 8001aa4:	2a08      	cmp	r2, #8
 8001aa6:	f000 8099 	beq.w	8001bdc <HAL_RCC_OscConfig+0x5e8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d02f      	beq.n	8001b0e <HAL_RCC_OscConfig+0x51a>
 8001aae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ab2:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001abe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7fe fbc2 	bl	8000250 <HAL_GetTick>
 8001acc:	4604      	mov	r4, r0
 8001ace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ad2:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad6:	4b3f      	ldr	r3, [pc, #252]	; (8001bd4 <HAL_RCC_OscConfig+0x5e0>)
 8001ad8:	6819      	ldr	r1, [r3, #0]
 8001ada:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	fab3 f383 	clz	r3, r3
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	2201      	movs	r2, #1
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	4219      	tst	r1, r3
 8001af2:	d06b      	beq.n	8001bcc <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af4:	f7fe fbac 	bl	8000250 <HAL_GetTick>
 8001af8:	1b00      	subs	r0, r0, r4
 8001afa:	2802      	cmp	r0, #2
 8001afc:	d9e7      	bls.n	8001ace <HAL_RCC_OscConfig+0x4da>
          {
            return HAL_TIMEOUT;
 8001afe:	2003      	movs	r0, #3
 8001b00:	e087      	b.n	8001c12 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b02:	4a34      	ldr	r2, [pc, #208]	; (8001bd4 <HAL_RCC_OscConfig+0x5e0>)
 8001b04:	69d3      	ldr	r3, [r2, #28]
 8001b06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	61d3      	str	r3, [r2, #28]
 8001b0c:	e7c2      	b.n	8001a94 <HAL_RCC_OscConfig+0x4a0>
 8001b0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b12:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001b16:	fab3 f383 	clz	r3, r3
 8001b1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b28:	f7fe fb92 	bl	8000250 <HAL_GetTick>
 8001b2c:	4605      	mov	r5, r0
 8001b2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b32:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b36:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <HAL_RCC_OscConfig+0x5e0>)
 8001b38:	6819      	ldr	r1, [r3, #0]
 8001b3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b3e:	fa93 f3a3 	rbit	r3, r3
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	4219      	tst	r1, r3
 8001b52:	d006      	beq.n	8001b62 <HAL_RCC_OscConfig+0x56e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b54:	f7fe fb7c 	bl	8000250 <HAL_GetTick>
 8001b58:	1b40      	subs	r0, r0, r5
 8001b5a:	2802      	cmp	r0, #2
 8001b5c:	d9e7      	bls.n	8001b2e <HAL_RCC_OscConfig+0x53a>
            return HAL_TIMEOUT;
 8001b5e:	2003      	movs	r0, #3
 8001b60:	e057      	b.n	8001c12 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b62:	491c      	ldr	r1, [pc, #112]	; (8001bd4 <HAL_RCC_OscConfig+0x5e0>)
 8001b64:	684b      	ldr	r3, [r1, #4]
 8001b66:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001b6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b6c:	6a20      	ldr	r0, [r4, #32]
 8001b6e:	4302      	orrs	r2, r0
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
 8001b74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b78:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b8e:	f7fe fb5f 	bl	8000250 <HAL_GetTick>
 8001b92:	4604      	mov	r4, r0
 8001b94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b98:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <HAL_RCC_OscConfig+0x5e0>)
 8001b9e:	6819      	ldr	r1, [r3, #0]
 8001ba0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ba4:	fa93 f3a3 	rbit	r3, r3
 8001ba8:	fab3 f383 	clz	r3, r3
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	4219      	tst	r1, r3
 8001bb8:	d106      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x5d4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bba:	f7fe fb49 	bl	8000250 <HAL_GetTick>
 8001bbe:	1b00      	subs	r0, r0, r4
 8001bc0:	2802      	cmp	r0, #2
 8001bc2:	d9e7      	bls.n	8001b94 <HAL_RCC_OscConfig+0x5a0>
            return HAL_TIMEOUT;
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	e024      	b.n	8001c12 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001bc8:	2000      	movs	r0, #0
 8001bca:	e022      	b.n	8001c12 <HAL_RCC_OscConfig+0x61e>
 8001bcc:	2000      	movs	r0, #0
 8001bce:	e020      	b.n	8001c12 <HAL_RCC_OscConfig+0x61e>
 8001bd0:	10908120 	.word	0x10908120
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d01a      	beq.n	8001c16 <HAL_RCC_OscConfig+0x622>
        pll_config = RCC->CFGR;
 8001be0:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_RCC_OscConfig+0x630>)
 8001be2:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001be4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001be8:	6a22      	ldr	r2, [r4, #32]
 8001bea:	4291      	cmp	r1, r2
 8001bec:	d115      	bne.n	8001c1a <HAL_RCC_OscConfig+0x626>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001bee:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001bf2:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d112      	bne.n	8001c1e <HAL_RCC_OscConfig+0x62a>
  return HAL_OK;
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_OscConfig+0x61e>
    return HAL_ERROR;
 8001bfc:	2001      	movs	r0, #1
}
 8001bfe:	4770      	bx	lr
        return HAL_ERROR;
 8001c00:	2001      	movs	r0, #1
 8001c02:	e006      	b.n	8001c12 <HAL_RCC_OscConfig+0x61e>
        return HAL_ERROR;
 8001c04:	2001      	movs	r0, #1
 8001c06:	e004      	b.n	8001c12 <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 8001c08:	2003      	movs	r0, #3
 8001c0a:	e002      	b.n	8001c12 <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	e000      	b.n	8001c12 <HAL_RCC_OscConfig+0x61e>
  return HAL_OK;
 8001c10:	2000      	movs	r0, #0
}
 8001c12:	b002      	add	sp, #8
 8001c14:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001c16:	2001      	movs	r0, #1
 8001c18:	e7fb      	b.n	8001c12 <HAL_RCC_OscConfig+0x61e>
          return HAL_ERROR;
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	e7f9      	b.n	8001c12 <HAL_RCC_OscConfig+0x61e>
 8001c1e:	2001      	movs	r0, #1
 8001c20:	e7f7      	b.n	8001c12 <HAL_RCC_OscConfig+0x61e>
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000

08001c28 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001c28:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c2c:	f003 020c 	and.w	r2, r3, #12
 8001c30:	2a08      	cmp	r2, #8
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0x10>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c34:	4814      	ldr	r0, [pc, #80]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c36:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001c38:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8001c3c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001c40:	fa92 f2a2 	rbit	r2, r2
 8001c44:	fab2 f282 	clz	r2, r2
 8001c48:	fa21 f202 	lsr.w	r2, r1, r2
 8001c4c:	490f      	ldr	r1, [pc, #60]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x64>)
 8001c4e:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001c50:	4a0c      	ldr	r2, [pc, #48]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001c52:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c54:	f002 020f 	and.w	r2, r2, #15
 8001c58:	210f      	movs	r1, #15
 8001c5a:	fa91 f1a1 	rbit	r1, r1
 8001c5e:	fab1 f181 	clz	r1, r1
 8001c62:	40ca      	lsrs	r2, r1
 8001c64:	490a      	ldr	r1, [pc, #40]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x68>)
 8001c66:	5c8a      	ldrb	r2, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001c68:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001c6c:	d005      	beq.n	8001c7a <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x60>)
 8001c70:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c74:	fb00 f003 	mul.w	r0, r0, r3
 8001c78:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001c7c:	fb03 f000 	mul.w	r0, r3, r0
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000
 8001c88:	007a1200 	.word	0x007a1200
 8001c8c:	080066f4 	.word	0x080066f4
 8001c90:	08006704 	.word	0x08006704
 8001c94:	003d0900 	.word	0x003d0900

08001c98 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001c98:	2800      	cmp	r0, #0
 8001c9a:	f000 80be 	beq.w	8001e1a <HAL_RCC_ClockConfig+0x182>
{
 8001c9e:	b570      	push	{r4, r5, r6, lr}
 8001ca0:	460d      	mov	r5, r1
 8001ca2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b61      	ldr	r3, [pc, #388]	; (8001e2c <HAL_RCC_ClockConfig+0x194>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	428b      	cmp	r3, r1
 8001cae:	d20b      	bcs.n	8001cc8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb0:	4a5e      	ldr	r2, [pc, #376]	; (8001e2c <HAL_RCC_ClockConfig+0x194>)
 8001cb2:	6813      	ldr	r3, [r2, #0]
 8001cb4:	f023 0307 	bic.w	r3, r3, #7
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbc:	6813      	ldr	r3, [r2, #0]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	428b      	cmp	r3, r1
 8001cc4:	f040 80ab 	bne.w	8001e1e <HAL_RCC_ClockConfig+0x186>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	f013 0f02 	tst.w	r3, #2
 8001cce:	d006      	beq.n	8001cde <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd0:	4a57      	ldr	r2, [pc, #348]	; (8001e30 <HAL_RCC_ClockConfig+0x198>)
 8001cd2:	6853      	ldr	r3, [r2, #4]
 8001cd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cd8:	68a1      	ldr	r1, [r4, #8]
 8001cda:	430b      	orrs	r3, r1
 8001cdc:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	f013 0f01 	tst.w	r3, #1
 8001ce4:	d05a      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x104>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce6:	6863      	ldr	r3, [r4, #4]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d02d      	beq.n	8001d48 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d040      	beq.n	8001d72 <HAL_RCC_ClockConfig+0xda>
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf6:	4a4e      	ldr	r2, [pc, #312]	; (8001e30 <HAL_RCC_ClockConfig+0x198>)
 8001cf8:	6810      	ldr	r0, [r2, #0]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	fa92 f2a2 	rbit	r2, r2
 8001d00:	fab2 f282 	clz	r2, r2
 8001d04:	f002 021f 	and.w	r2, r2, #31
 8001d08:	2101      	movs	r1, #1
 8001d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0e:	4210      	tst	r0, r2
 8001d10:	f000 8087 	beq.w	8001e22 <HAL_RCC_ClockConfig+0x18a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d14:	4946      	ldr	r1, [pc, #280]	; (8001e30 <HAL_RCC_ClockConfig+0x198>)
 8001d16:	684a      	ldr	r2, [r1, #4]
 8001d18:	f022 0203 	bic.w	r2, r2, #3
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001d20:	f7fe fa96 	bl	8000250 <HAL_GetTick>
 8001d24:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d26:	4b42      	ldr	r3, [pc, #264]	; (8001e30 <HAL_RCC_ClockConfig+0x198>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	6862      	ldr	r2, [r4, #4]
 8001d30:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d34:	d032      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x104>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d36:	f7fe fa8b 	bl	8000250 <HAL_GetTick>
 8001d3a:	1b80      	subs	r0, r0, r6
 8001d3c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d40:	4298      	cmp	r0, r3
 8001d42:	d9f0      	bls.n	8001d26 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8001d44:	2003      	movs	r0, #3
 8001d46:	e067      	b.n	8001e18 <HAL_RCC_ClockConfig+0x180>
 8001d48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d4c:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d50:	4a37      	ldr	r2, [pc, #220]	; (8001e30 <HAL_RCC_ClockConfig+0x198>)
 8001d52:	6810      	ldr	r0, [r2, #0]
 8001d54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d58:	fa92 f2a2 	rbit	r2, r2
 8001d5c:	fab2 f282 	clz	r2, r2
 8001d60:	f002 021f 	and.w	r2, r2, #31
 8001d64:	2101      	movs	r1, #1
 8001d66:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6a:	4202      	tst	r2, r0
 8001d6c:	d1d2      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 8001d6e:	2001      	movs	r0, #1
 8001d70:	e052      	b.n	8001e18 <HAL_RCC_ClockConfig+0x180>
 8001d72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d76:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7a:	4a2d      	ldr	r2, [pc, #180]	; (8001e30 <HAL_RCC_ClockConfig+0x198>)
 8001d7c:	6810      	ldr	r0, [r2, #0]
 8001d7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d82:	fa92 f2a2 	rbit	r2, r2
 8001d86:	fab2 f282 	clz	r2, r2
 8001d8a:	f002 021f 	and.w	r2, r2, #31
 8001d8e:	2101      	movs	r1, #1
 8001d90:	fa01 f202 	lsl.w	r2, r1, r2
 8001d94:	4210      	tst	r0, r2
 8001d96:	d1bd      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 8001d98:	2001      	movs	r0, #1
 8001d9a:	e03d      	b.n	8001e18 <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <HAL_RCC_ClockConfig+0x194>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	42ab      	cmp	r3, r5
 8001da6:	d90a      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da8:	4a20      	ldr	r2, [pc, #128]	; (8001e2c <HAL_RCC_ClockConfig+0x194>)
 8001daa:	6813      	ldr	r3, [r2, #0]
 8001dac:	f023 0307 	bic.w	r3, r3, #7
 8001db0:	432b      	orrs	r3, r5
 8001db2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db4:	6813      	ldr	r3, [r2, #0]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	42ab      	cmp	r3, r5
 8001dbc:	d133      	bne.n	8001e26 <HAL_RCC_ClockConfig+0x18e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dbe:	6823      	ldr	r3, [r4, #0]
 8001dc0:	f013 0f04 	tst.w	r3, #4
 8001dc4:	d006      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x13c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc6:	4a1a      	ldr	r2, [pc, #104]	; (8001e30 <HAL_RCC_ClockConfig+0x198>)
 8001dc8:	6853      	ldr	r3, [r2, #4]
 8001dca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001dce:	68e1      	ldr	r1, [r4, #12]
 8001dd0:	430b      	orrs	r3, r1
 8001dd2:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd4:	6823      	ldr	r3, [r4, #0]
 8001dd6:	f013 0f08 	tst.w	r3, #8
 8001dda:	d007      	beq.n	8001dec <HAL_RCC_ClockConfig+0x154>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ddc:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <HAL_RCC_ClockConfig+0x198>)
 8001dde:	6853      	ldr	r3, [r2, #4]
 8001de0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001de4:	6921      	ldr	r1, [r4, #16]
 8001de6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001dea:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001dec:	f7ff ff1c 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <HAL_RCC_ClockConfig+0x198>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df8:	22f0      	movs	r2, #240	; 0xf0
 8001dfa:	fa92 f2a2 	rbit	r2, r2
 8001dfe:	fab2 f282 	clz	r2, r2
 8001e02:	40d3      	lsrs	r3, r2
 8001e04:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <HAL_RCC_ClockConfig+0x19c>)
 8001e06:	5cd3      	ldrb	r3, [r2, r3]
 8001e08:	40d8      	lsrs	r0, r3
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_RCC_ClockConfig+0x1a0>)
 8001e0c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <HAL_RCC_ClockConfig+0x1a4>)
 8001e10:	6818      	ldr	r0, [r3, #0]
 8001e12:	f7fe f9d9 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8001e16:	2000      	movs	r0, #0
}
 8001e18:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001e1a:	2001      	movs	r0, #1
}
 8001e1c:	4770      	bx	lr
      return HAL_ERROR;
 8001e1e:	2001      	movs	r0, #1
 8001e20:	e7fa      	b.n	8001e18 <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 8001e22:	2001      	movs	r0, #1
 8001e24:	e7f8      	b.n	8001e18 <HAL_RCC_ClockConfig+0x180>
      return HAL_ERROR;
 8001e26:	2001      	movs	r0, #1
 8001e28:	e7f6      	b.n	8001e18 <HAL_RCC_ClockConfig+0x180>
 8001e2a:	bf00      	nop
 8001e2c:	40022000 	.word	0x40022000
 8001e30:	40021000 	.word	0x40021000
 8001e34:	08006728 	.word	0x08006728
 8001e38:	20000020 	.word	0x20000020
 8001e3c:	20000004 	.word	0x20000004

08001e40 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001e40:	4b01      	ldr	r3, [pc, #4]	; (8001e48 <HAL_RCC_GetHCLKFreq+0x8>)
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000020 	.word	0x20000020

08001e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e4c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001e4e:	f7ff fff7 	bl	8001e40 <HAL_RCC_GetHCLKFreq>
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e5a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e5e:	fa92 f2a2 	rbit	r2, r2
 8001e62:	fab2 f282 	clz	r2, r2
 8001e66:	40d3      	lsrs	r3, r2
 8001e68:	4a02      	ldr	r2, [pc, #8]	; (8001e74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e6a:	5cd3      	ldrb	r3, [r2, r3]
}    
 8001e6c:	40d8      	lsrs	r0, r3
 8001e6e:	bd08      	pop	{r3, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	08006738 	.word	0x08006738

08001e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e78:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001e7a:	f7ff ffe1 	bl	8001e40 <HAL_RCC_GetHCLKFreq>
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001e86:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001e8a:	fa92 f2a2 	rbit	r2, r2
 8001e8e:	fab2 f282 	clz	r2, r2
 8001e92:	40d3      	lsrs	r3, r2
 8001e94:	4a02      	ldr	r2, [pc, #8]	; (8001ea0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e96:	5cd3      	ldrb	r3, [r2, r3]
} 
 8001e98:	40d8      	lsrs	r0, r3
 8001e9a:	bd08      	pop	{r3, pc}
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	08006738 	.word	0x08006738

08001ea4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001eaa:	6803      	ldr	r3, [r0, #0]
 8001eac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001eb0:	d044      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x98>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb2:	4b5c      	ldr	r3, [pc, #368]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001eba:	d16d      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ebc:	4b59      	ldr	r3, [pc, #356]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8001ebe:	69da      	ldr	r2, [r3, #28]
 8001ec0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ec4:	61da      	str	r2, [r3, #28]
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ed0:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed2:	4b55      	ldr	r3, [pc, #340]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001eda:	d05f      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xf8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001edc:	4b51      	ldr	r3, [pc, #324]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ee0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001ee4:	d021      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x86>
 8001ee6:	6862      	ldr	r2, [r4, #4]
 8001ee8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d01c      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ef0:	484c      	ldr	r0, [pc, #304]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8001ef2:	6a01      	ldr	r1, [r0, #32]
 8001ef4:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8001ef8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001efc:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f00:	fab2 f282 	clz	r2, r2
 8001f04:	4f49      	ldr	r7, [pc, #292]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001f06:	443a      	add	r2, r7
 8001f08:	0092      	lsls	r2, r2, #2
 8001f0a:	f04f 0c01 	mov.w	ip, #1
 8001f0e:	f8c2 c000 	str.w	ip, [r2]
 8001f12:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	443b      	add	r3, r7
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f22:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f24:	f011 0f01 	tst.w	r1, #1
 8001f28:	d14c      	bne.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x120>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001f2a:	4a3e      	ldr	r2, [pc, #248]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8001f2c:	6a13      	ldr	r3, [r2, #32]
 8001f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f32:	6861      	ldr	r1, [r4, #4]
 8001f34:	430b      	orrs	r3, r1
 8001f36:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f38:	2d00      	cmp	r5, #0
 8001f3a:	d169      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	f013 0f01 	tst.w	r3, #1
 8001f42:	d006      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f44:	4a37      	ldr	r2, [pc, #220]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8001f46:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f48:	f023 0303 	bic.w	r3, r3, #3
 8001f4c:	68a1      	ldr	r1, [r4, #8]
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f52:	6823      	ldr	r3, [r4, #0]
 8001f54:	f013 0f20 	tst.w	r3, #32
 8001f58:	d006      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f5a:	4a32      	ldr	r2, [pc, #200]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8001f5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f5e:	f023 0310 	bic.w	r3, r3, #16
 8001f62:	68e1      	ldr	r1, [r4, #12]
 8001f64:	430b      	orrs	r3, r1
 8001f66:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001f68:	6823      	ldr	r3, [r4, #0]
 8001f6a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f6e:	d006      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001f70:	4a2c      	ldr	r2, [pc, #176]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8001f72:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f74:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001f78:	6921      	ldr	r1, [r4, #16]
 8001f7a:	430b      	orrs	r3, r1
 8001f7c:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001f7e:	6823      	ldr	r3, [r4, #0]
 8001f80:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001f84:	d04b      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001f86:	4a27      	ldr	r2, [pc, #156]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8001f88:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f8e:	6961      	ldr	r1, [r4, #20]
 8001f90:	430b      	orrs	r3, r1
 8001f92:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001f94:	2000      	movs	r0, #0
 8001f96:	e043      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  FlagStatus       pwrclkchanged = RESET;
 8001f98:	2500      	movs	r5, #0
 8001f9a:	e79a      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f9c:	4a22      	ldr	r2, [pc, #136]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f9e:	6813      	ldr	r3, [r2, #0]
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001fa6:	f7fe f953 	bl	8000250 <HAL_GetTick>
 8001faa:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fac:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001fb4:	d192      	bne.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb6:	f7fe f94b 	bl	8000250 <HAL_GetTick>
 8001fba:	1b80      	subs	r0, r0, r6
 8001fbc:	2864      	cmp	r0, #100	; 0x64
 8001fbe:	d9f5      	bls.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x108>
          return HAL_TIMEOUT;
 8001fc0:	2003      	movs	r0, #3
 8001fc2:	e02d      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        tickstart = HAL_GetTick();
 8001fc4:	f7fe f944 	bl	8000250 <HAL_GetTick>
 8001fc8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fca:	e017      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x158>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	4b14      	ldr	r3, [pc, #80]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8001fd4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	420b      	tst	r3, r1
 8001fec:	d19d      	bne.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fee:	f7fe f92f 	bl	8000250 <HAL_GetTick>
 8001ff2:	1b80      	subs	r0, r0, r6
 8001ff4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ff8:	4298      	cmp	r0, r3
 8001ffa:	d80e      	bhi.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x176>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	fa93 f2a3 	rbit	r2, r3
 8002002:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0e0      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x128>
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800200c:	6a19      	ldr	r1, [r3, #32]
 800200e:	e7e2      	b.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x132>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002010:	69d3      	ldr	r3, [r2, #28]
 8002012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002016:	61d3      	str	r3, [r2, #28]
 8002018:	e790      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 800201a:	2003      	movs	r0, #3
 800201c:	e000      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  return HAL_OK;
 800201e:	2000      	movs	r0, #0
}
 8002020:	b003      	add	sp, #12
 8002022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002024:	40021000 	.word	0x40021000
 8002028:	40007000 	.word	0x40007000
 800202c:	10908100 	.word	0x10908100

08002030 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002030:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002032:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002034:	6a05      	ldr	r5, [r0, #32]
 8002036:	f025 0501 	bic.w	r5, r5, #1
 800203a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800203c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800203e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002042:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002046:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800204a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800204c:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 800204e:	6203      	str	r3, [r0, #32]
}
 8002050:	bc30      	pop	{r4, r5}
 8002052:	4770      	bx	lr

08002054 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002054:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002056:	6a05      	ldr	r5, [r0, #32]
 8002058:	f025 0510 	bic.w	r5, r5, #16
 800205c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800205e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002060:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002062:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002066:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800206a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800206e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002072:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8002074:	6203      	str	r3, [r0, #32]
}
 8002076:	bc30      	pop	{r4, r5}
 8002078:	4770      	bx	lr

0800207a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800207a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800207c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002080:	430b      	orrs	r3, r1
 8002082:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002086:	6083      	str	r3, [r0, #8]
}
 8002088:	4770      	bx	lr
	...

0800208c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800208c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800208e:	4a22      	ldr	r2, [pc, #136]	; (8002118 <TIM_Base_SetConfig+0x8c>)
 8002090:	4290      	cmp	r0, r2
 8002092:	d006      	beq.n	80020a2 <TIM_Base_SetConfig+0x16>
 8002094:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002098:	d003      	beq.n	80020a2 <TIM_Base_SetConfig+0x16>
 800209a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800209e:	4290      	cmp	r0, r2
 80020a0:	d103      	bne.n	80020aa <TIM_Base_SetConfig+0x1e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80020a6:	684a      	ldr	r2, [r1, #4]
 80020a8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020aa:	4a1b      	ldr	r2, [pc, #108]	; (8002118 <TIM_Base_SetConfig+0x8c>)
 80020ac:	4290      	cmp	r0, r2
 80020ae:	d012      	beq.n	80020d6 <TIM_Base_SetConfig+0x4a>
 80020b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80020b4:	d00f      	beq.n	80020d6 <TIM_Base_SetConfig+0x4a>
 80020b6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80020ba:	4290      	cmp	r0, r2
 80020bc:	d00b      	beq.n	80020d6 <TIM_Base_SetConfig+0x4a>
 80020be:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 80020c2:	4290      	cmp	r0, r2
 80020c4:	d007      	beq.n	80020d6 <TIM_Base_SetConfig+0x4a>
 80020c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020ca:	4290      	cmp	r0, r2
 80020cc:	d003      	beq.n	80020d6 <TIM_Base_SetConfig+0x4a>
 80020ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020d2:	4290      	cmp	r0, r2
 80020d4:	d103      	bne.n	80020de <TIM_Base_SetConfig+0x52>
    tmpcr1 &= ~TIM_CR1_CKD;
 80020d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020da:	68ca      	ldr	r2, [r1, #12]
 80020dc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020e2:	694a      	ldr	r2, [r1, #20]
 80020e4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80020e6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020e8:	688b      	ldr	r3, [r1, #8]
 80020ea:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80020ec:	680b      	ldr	r3, [r1, #0]
 80020ee:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020f0:	4b09      	ldr	r3, [pc, #36]	; (8002118 <TIM_Base_SetConfig+0x8c>)
 80020f2:	4298      	cmp	r0, r3
 80020f4:	d00b      	beq.n	800210e <TIM_Base_SetConfig+0x82>
 80020f6:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80020fa:	4298      	cmp	r0, r3
 80020fc:	d007      	beq.n	800210e <TIM_Base_SetConfig+0x82>
 80020fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002102:	4298      	cmp	r0, r3
 8002104:	d003      	beq.n	800210e <TIM_Base_SetConfig+0x82>
 8002106:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800210a:	4298      	cmp	r0, r3
 800210c:	d101      	bne.n	8002112 <TIM_Base_SetConfig+0x86>
    TIMx->RCR = Structure->RepetitionCounter;
 800210e:	690b      	ldr	r3, [r1, #16]
 8002110:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002112:	2301      	movs	r3, #1
 8002114:	6143      	str	r3, [r0, #20]
}
 8002116:	4770      	bx	lr
 8002118:	40012c00 	.word	0x40012c00

0800211c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800211c:	b360      	cbz	r0, 8002178 <HAL_TIM_Base_Init+0x5c>
{
 800211e:	b510      	push	{r4, lr}
 8002120:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002122:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002126:	b313      	cbz	r3, 800216e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8002128:	2302      	movs	r3, #2
 800212a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800212e:	4621      	mov	r1, r4
 8002130:	f851 0b04 	ldr.w	r0, [r1], #4
 8002134:	f7ff ffaa 	bl	800208c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002138:	2301      	movs	r3, #1
 800213a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800213e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002142:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002146:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800214a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800214e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002156:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800215a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800215e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002162:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002166:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800216a:	2000      	movs	r0, #0
}
 800216c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800216e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002172:	f004 f98b 	bl	800648c <HAL_TIM_Base_MspInit>
 8002176:	e7d7      	b.n	8002128 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002178:	2001      	movs	r0, #1
}
 800217a:	4770      	bx	lr

0800217c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800217c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800217e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002180:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002184:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002188:	430a      	orrs	r2, r1
 800218a:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800218c:	6082      	str	r2, [r0, #8]
}
 800218e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002194:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002198:	2b01      	cmp	r3, #1
 800219a:	d076      	beq.n	800228a <HAL_TIM_ConfigClockSource+0xf6>
{
 800219c:	b510      	push	{r4, lr}
 800219e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80021a0:	2301      	movs	r3, #1
 80021a2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80021a6:	2302      	movs	r3, #2
 80021a8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80021ac:	6802      	ldr	r2, [r0, #0]
 80021ae:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021b0:	4b37      	ldr	r3, [pc, #220]	; (8002290 <HAL_TIM_ConfigClockSource+0xfc>)
 80021b2:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80021b4:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80021b6:	680b      	ldr	r3, [r1, #0]
 80021b8:	2b60      	cmp	r3, #96	; 0x60
 80021ba:	d04c      	beq.n	8002256 <HAL_TIM_ConfigClockSource+0xc2>
 80021bc:	d829      	bhi.n	8002212 <HAL_TIM_ConfigClockSource+0x7e>
 80021be:	2b40      	cmp	r3, #64	; 0x40
 80021c0:	d054      	beq.n	800226c <HAL_TIM_ConfigClockSource+0xd8>
 80021c2:	d90c      	bls.n	80021de <HAL_TIM_ConfigClockSource+0x4a>
 80021c4:	2b50      	cmp	r3, #80	; 0x50
 80021c6:	d122      	bne.n	800220e <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021c8:	68ca      	ldr	r2, [r1, #12]
 80021ca:	6849      	ldr	r1, [r1, #4]
 80021cc:	6820      	ldr	r0, [r4, #0]
 80021ce:	f7ff ff2f 	bl	8002030 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021d2:	2150      	movs	r1, #80	; 0x50
 80021d4:	6820      	ldr	r0, [r4, #0]
 80021d6:	f7ff ff50 	bl	800207a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80021da:	2000      	movs	r0, #0
      break;
 80021dc:	e005      	b.n	80021ea <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80021de:	2b20      	cmp	r3, #32
 80021e0:	d00d      	beq.n	80021fe <HAL_TIM_ConfigClockSource+0x6a>
 80021e2:	d909      	bls.n	80021f8 <HAL_TIM_ConfigClockSource+0x64>
 80021e4:	2b30      	cmp	r3, #48	; 0x30
 80021e6:	d00a      	beq.n	80021fe <HAL_TIM_ConfigClockSource+0x6a>
      status = HAL_ERROR;
 80021e8:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80021ea:	2301      	movs	r3, #1
 80021ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80021f0:	2300      	movs	r3, #0
 80021f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80021f6:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80021f8:	b10b      	cbz	r3, 80021fe <HAL_TIM_ConfigClockSource+0x6a>
 80021fa:	2b10      	cmp	r3, #16
 80021fc:	d105      	bne.n	800220a <HAL_TIM_ConfigClockSource+0x76>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021fe:	4619      	mov	r1, r3
 8002200:	6820      	ldr	r0, [r4, #0]
 8002202:	f7ff ff3a 	bl	800207a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002206:	2000      	movs	r0, #0
      break;
 8002208:	e7ef      	b.n	80021ea <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 800220a:	2001      	movs	r0, #1
 800220c:	e7ed      	b.n	80021ea <HAL_TIM_ConfigClockSource+0x56>
 800220e:	2001      	movs	r0, #1
 8002210:	e7eb      	b.n	80021ea <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8002212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002216:	d034      	beq.n	8002282 <HAL_TIM_ConfigClockSource+0xee>
 8002218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800221c:	d10c      	bne.n	8002238 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance,
 800221e:	68cb      	ldr	r3, [r1, #12]
 8002220:	684a      	ldr	r2, [r1, #4]
 8002222:	6889      	ldr	r1, [r1, #8]
 8002224:	6820      	ldr	r0, [r4, #0]
 8002226:	f7ff ffa9 	bl	800217c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800222a:	6822      	ldr	r2, [r4, #0]
 800222c:	6893      	ldr	r3, [r2, #8]
 800222e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002232:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002234:	2000      	movs	r0, #0
      break;
 8002236:	e7d8      	b.n	80021ea <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8002238:	2b70      	cmp	r3, #112	; 0x70
 800223a:	d124      	bne.n	8002286 <HAL_TIM_ConfigClockSource+0xf2>
      TIM_ETR_SetConfig(htim->Instance,
 800223c:	68cb      	ldr	r3, [r1, #12]
 800223e:	684a      	ldr	r2, [r1, #4]
 8002240:	6889      	ldr	r1, [r1, #8]
 8002242:	6820      	ldr	r0, [r4, #0]
 8002244:	f7ff ff9a 	bl	800217c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002248:	6822      	ldr	r2, [r4, #0]
 800224a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800224c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002250:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002252:	2000      	movs	r0, #0
      break;
 8002254:	e7c9      	b.n	80021ea <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002256:	68ca      	ldr	r2, [r1, #12]
 8002258:	6849      	ldr	r1, [r1, #4]
 800225a:	6820      	ldr	r0, [r4, #0]
 800225c:	f7ff fefa 	bl	8002054 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002260:	2160      	movs	r1, #96	; 0x60
 8002262:	6820      	ldr	r0, [r4, #0]
 8002264:	f7ff ff09 	bl	800207a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002268:	2000      	movs	r0, #0
      break;
 800226a:	e7be      	b.n	80021ea <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800226c:	68ca      	ldr	r2, [r1, #12]
 800226e:	6849      	ldr	r1, [r1, #4]
 8002270:	6820      	ldr	r0, [r4, #0]
 8002272:	f7ff fedd 	bl	8002030 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002276:	2140      	movs	r1, #64	; 0x40
 8002278:	6820      	ldr	r0, [r4, #0]
 800227a:	f7ff fefe 	bl	800207a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800227e:	2000      	movs	r0, #0
      break;
 8002280:	e7b3      	b.n	80021ea <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8002282:	2000      	movs	r0, #0
 8002284:	e7b1      	b.n	80021ea <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 8002286:	2001      	movs	r0, #1
 8002288:	e7af      	b.n	80021ea <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 800228a:	2002      	movs	r0, #2
}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	fffe0088 	.word	0xfffe0088

08002294 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002294:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002298:	2b01      	cmp	r3, #1
 800229a:	d033      	beq.n	8002304 <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 800229c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800229e:	2301      	movs	r3, #1
 80022a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a4:	2302      	movs	r3, #2
 80022a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022aa:	6802      	ldr	r2, [r0, #0]
 80022ac:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022ae:	6895      	ldr	r5, [r2, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80022b0:	4c15      	ldr	r4, [pc, #84]	; (8002308 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 80022b2:	42a2      	cmp	r2, r4
 80022b4:	d021      	beq.n	80022fa <HAL_TIMEx_MasterConfigSynchronization+0x66>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022ba:	680c      	ldr	r4, [r1, #0]
 80022bc:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022be:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022c0:	6803      	ldr	r3, [r0, #0]
 80022c2:	4a11      	ldr	r2, [pc, #68]	; (8002308 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d00a      	beq.n	80022de <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80022c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022cc:	d007      	beq.n	80022de <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80022ce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d003      	beq.n	80022de <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80022d6:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 80022da:	4293      	cmp	r3, r2
 80022dc:	d104      	bne.n	80022e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022de:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022e2:	688a      	ldr	r2, [r1, #8]
 80022e4:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022e6:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022e8:	2301      	movs	r3, #1
 80022ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022ee:	2300      	movs	r3, #0
 80022f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80022f4:	4618      	mov	r0, r3
}
 80022f6:	bc30      	pop	{r4, r5}
 80022f8:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80022fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80022fe:	684c      	ldr	r4, [r1, #4]
 8002300:	4323      	orrs	r3, r4
 8002302:	e7d8      	b.n	80022b6 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8002304:	2002      	movs	r0, #2
}
 8002306:	4770      	bx	lr
 8002308:	40012c00 	.word	0x40012c00

0800230c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800230c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800230e:	e852 3f00 	ldrex	r3, [r2]
 8002312:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002316:	e842 3100 	strex	r1, r3, [r2]
 800231a:	2900      	cmp	r1, #0
 800231c:	d1f6      	bne.n	800230c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800231e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002320:	f102 0308 	add.w	r3, r2, #8
 8002324:	e853 3f00 	ldrex	r3, [r3]
 8002328:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800232c:	3208      	adds	r2, #8
 800232e:	e842 3100 	strex	r1, r3, [r2]
 8002332:	2900      	cmp	r1, #0
 8002334:	d1f3      	bne.n	800231e <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002336:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002338:	2b01      	cmp	r3, #1
 800233a:	d005      	beq.n	8002348 <UART_EndRxTransfer+0x3c>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800233c:	2320      	movs	r3, #32
 800233e:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002340:	2300      	movs	r3, #0
 8002342:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002344:	6643      	str	r3, [r0, #100]	; 0x64
}
 8002346:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002348:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800234a:	e852 3f00 	ldrex	r3, [r2]
 800234e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002352:	e842 3100 	strex	r1, r3, [r2]
 8002356:	2900      	cmp	r1, #0
 8002358:	d1f6      	bne.n	8002348 <UART_EndRxTransfer+0x3c>
 800235a:	e7ef      	b.n	800233c <UART_EndRxTransfer+0x30>

0800235c <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800235c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800235e:	2b21      	cmp	r3, #33	; 0x21
 8002360:	d000      	beq.n	8002364 <UART_TxISR_8BIT+0x8>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8002362:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8002364:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002368:	b29b      	uxth	r3, r3
 800236a:	b993      	cbnz	r3, 8002392 <UART_TxISR_8BIT+0x36>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800236c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800236e:	e852 3f00 	ldrex	r3, [r2]
 8002372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002376:	e842 3100 	strex	r1, r3, [r2]
 800237a:	2900      	cmp	r1, #0
 800237c:	d1f6      	bne.n	800236c <UART_TxISR_8BIT+0x10>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800237e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002380:	e852 3f00 	ldrex	r3, [r2]
 8002384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002388:	e842 3100 	strex	r1, r3, [r2]
 800238c:	2900      	cmp	r1, #0
 800238e:	d1f6      	bne.n	800237e <UART_TxISR_8BIT+0x22>
 8002390:	4770      	bx	lr
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002392:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8002394:	6803      	ldr	r3, [r0, #0]
 8002396:	7812      	ldrb	r2, [r2, #0]
 8002398:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800239a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800239c:	3301      	adds	r3, #1
 800239e:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 80023a0:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 80023ae:	e7d8      	b.n	8002362 <UART_TxISR_8BIT+0x6>

080023b0 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023b0:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80023b2:	2b21      	cmp	r3, #33	; 0x21
 80023b4:	d000      	beq.n	80023b8 <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80023b6:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 80023b8:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80023bc:	b29b      	uxth	r3, r3
 80023be:	b993      	cbnz	r3, 80023e6 <UART_TxISR_16BIT+0x36>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80023c0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023c2:	e852 3f00 	ldrex	r3, [r2]
 80023c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ca:	e842 3100 	strex	r1, r3, [r2]
 80023ce:	2900      	cmp	r1, #0
 80023d0:	d1f6      	bne.n	80023c0 <UART_TxISR_16BIT+0x10>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80023d2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d4:	e852 3f00 	ldrex	r3, [r2]
 80023d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023dc:	e842 3100 	strex	r1, r3, [r2]
 80023e0:	2900      	cmp	r1, #0
 80023e2:	d1f6      	bne.n	80023d2 <UART_TxISR_16BIT+0x22>
 80023e4:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80023e6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	6802      	ldr	r2, [r0, #0]
 80023ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f0:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80023f2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80023f4:	3302      	adds	r3, #2
 80023f6:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 80023f8:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29b      	uxth	r3, r3
 8002402:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 8002406:	e7d6      	b.n	80023b6 <UART_TxISR_16BIT+0x6>

08002408 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8002408:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800240a:	2b20      	cmp	r3, #32
 800240c:	d12c      	bne.n	8002468 <HAL_UART_Transmit_IT+0x60>
    if ((pData == NULL) || (Size == 0U))
 800240e:	b369      	cbz	r1, 800246c <HAL_UART_Transmit_IT+0x64>
 8002410:	b372      	cbz	r2, 8002470 <HAL_UART_Transmit_IT+0x68>
    __HAL_LOCK(huart);
 8002412:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8002416:	2b01      	cmp	r3, #1
 8002418:	d02c      	beq.n	8002474 <HAL_UART_Transmit_IT+0x6c>
 800241a:	2301      	movs	r3, #1
 800241c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->pTxBuffPtr  = pData;
 8002420:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002422:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 8002426:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800242a:	2300      	movs	r3, #0
 800242c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002430:	2321      	movs	r3, #33	; 0x21
 8002432:	6783      	str	r3, [r0, #120]	; 0x78
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002434:	6883      	ldr	r3, [r0, #8]
 8002436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243a:	d00f      	beq.n	800245c <HAL_UART_Transmit_IT+0x54>
      huart->TxISR = UART_TxISR_8BIT;
 800243c:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <HAL_UART_Transmit_IT+0x70>)
 800243e:	6683      	str	r3, [r0, #104]	; 0x68
    __HAL_UNLOCK(huart);
 8002440:	2300      	movs	r3, #0
 8002442:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002446:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002448:	e852 3f00 	ldrex	r3, [r2]
 800244c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002450:	e842 3100 	strex	r1, r3, [r2]
 8002454:	2900      	cmp	r1, #0
 8002456:	d1f6      	bne.n	8002446 <HAL_UART_Transmit_IT+0x3e>
    return HAL_OK;
 8002458:	2000      	movs	r0, #0
 800245a:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800245c:	6903      	ldr	r3, [r0, #16]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1ec      	bne.n	800243c <HAL_UART_Transmit_IT+0x34>
      huart->TxISR = UART_TxISR_16BIT;
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_UART_Transmit_IT+0x74>)
 8002464:	6683      	str	r3, [r0, #104]	; 0x68
 8002466:	e7eb      	b.n	8002440 <HAL_UART_Transmit_IT+0x38>
    return HAL_BUSY;
 8002468:	2002      	movs	r0, #2
 800246a:	4770      	bx	lr
      return HAL_ERROR;
 800246c:	2001      	movs	r0, #1
 800246e:	4770      	bx	lr
 8002470:	2001      	movs	r0, #1
 8002472:	4770      	bx	lr
    __HAL_LOCK(huart);
 8002474:	2002      	movs	r0, #2
}
 8002476:	4770      	bx	lr
 8002478:	0800235d 	.word	0x0800235d
 800247c:	080023b1 	.word	0x080023b1

08002480 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002480:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002482:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002484:	e852 3f00 	ldrex	r3, [r2]
 8002488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248c:	e842 3100 	strex	r1, r3, [r2]
 8002490:	2900      	cmp	r1, #0
 8002492:	d1f6      	bne.n	8002482 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002494:	2320      	movs	r3, #32
 8002496:	6783      	str	r3, [r0, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002498:	2300      	movs	r3, #0
 800249a:	6683      	str	r3, [r0, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800249c:	f001 f902 	bl	80036a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024a0:	bd08      	pop	{r3, pc}

080024a2 <HAL_UART_ErrorCallback>:
}
 80024a2:	4770      	bx	lr

080024a4 <UART_DMAAbortOnError>:
{
 80024a4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80024a6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80024ae:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80024b2:	f7ff fff6 	bl	80024a2 <HAL_UART_ErrorCallback>
}
 80024b6:	bd08      	pop	{r3, pc}

080024b8 <HAL_UARTEx_RxEventCallback>:
}
 80024b8:	4770      	bx	lr
	...

080024bc <HAL_UART_IRQHandler>:
{
 80024bc:	b570      	push	{r4, r5, r6, lr}
 80024be:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80024c0:	6801      	ldr	r1, [r0, #0]
 80024c2:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024c4:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024c6:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80024c8:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 80024cc:	401a      	ands	r2, r3
 80024ce:	d105      	bne.n	80024dc <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80024d0:	f013 0f20 	tst.w	r3, #32
 80024d4:	d002      	beq.n	80024dc <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024d6:	f010 0f20 	tst.w	r0, #32
 80024da:	d120      	bne.n	800251e <HAL_UART_IRQHandler+0x62>
  if ((errorflags != 0U)
 80024dc:	b12a      	cbz	r2, 80024ea <HAL_UART_IRQHandler+0x2e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80024de:	f015 0201 	ands.w	r2, r5, #1
 80024e2:	d122      	bne.n	800252a <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80024e4:	4eab      	ldr	r6, [pc, #684]	; (8002794 <HAL_UART_IRQHandler+0x2d8>)
 80024e6:	4230      	tst	r0, r6
 80024e8:	d11f      	bne.n	800252a <HAL_UART_IRQHandler+0x6e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024ea:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80024ec:	2a01      	cmp	r2, #1
 80024ee:	f000 80ab 	beq.w	8002648 <HAL_UART_IRQHandler+0x18c>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80024f2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80024f6:	d003      	beq.n	8002500 <HAL_UART_IRQHandler+0x44>
 80024f8:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 80024fc:	f040 8137 	bne.w	800276e <HAL_UART_IRQHandler+0x2b2>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002500:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002504:	d003      	beq.n	800250e <HAL_UART_IRQHandler+0x52>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002506:	f010 0f80 	tst.w	r0, #128	; 0x80
 800250a:	f040 8137 	bne.w	800277c <HAL_UART_IRQHandler+0x2c0>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800250e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002512:	d003      	beq.n	800251c <HAL_UART_IRQHandler+0x60>
 8002514:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002518:	f040 8137 	bne.w	800278a <HAL_UART_IRQHandler+0x2ce>
}
 800251c:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 800251e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0fb      	beq.n	800251c <HAL_UART_IRQHandler+0x60>
        huart->RxISR(huart);
 8002524:	4620      	mov	r0, r4
 8002526:	4798      	blx	r3
      return;
 8002528:	e7f8      	b.n	800251c <HAL_UART_IRQHandler+0x60>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800252a:	f013 0f01 	tst.w	r3, #1
 800252e:	d009      	beq.n	8002544 <HAL_UART_IRQHandler+0x88>
 8002530:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002534:	d006      	beq.n	8002544 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002536:	2501      	movs	r5, #1
 8002538:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800253a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800253e:	4329      	orrs	r1, r5
 8002540:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002544:	f013 0f02 	tst.w	r3, #2
 8002548:	d009      	beq.n	800255e <HAL_UART_IRQHandler+0xa2>
 800254a:	b142      	cbz	r2, 800255e <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800254c:	6821      	ldr	r1, [r4, #0]
 800254e:	2502      	movs	r5, #2
 8002550:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002552:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002556:	f041 0104 	orr.w	r1, r1, #4
 800255a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800255e:	f013 0f04 	tst.w	r3, #4
 8002562:	d009      	beq.n	8002578 <HAL_UART_IRQHandler+0xbc>
 8002564:	b142      	cbz	r2, 8002578 <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002566:	6821      	ldr	r1, [r4, #0]
 8002568:	2504      	movs	r5, #4
 800256a:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800256c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002570:	f041 0102 	orr.w	r1, r1, #2
 8002574:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002578:	f013 0f08 	tst.w	r3, #8
 800257c:	d00b      	beq.n	8002596 <HAL_UART_IRQHandler+0xda>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800257e:	f010 0f20 	tst.w	r0, #32
 8002582:	d100      	bne.n	8002586 <HAL_UART_IRQHandler+0xca>
 8002584:	b13a      	cbz	r2, 8002596 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002586:	6822      	ldr	r2, [r4, #0]
 8002588:	2108      	movs	r1, #8
 800258a:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800258c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8002590:	430a      	orrs	r2, r1
 8002592:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002596:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800259a:	d00c      	beq.n	80025b6 <HAL_UART_IRQHandler+0xfa>
 800259c:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80025a0:	d009      	beq.n	80025b6 <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025a2:	6822      	ldr	r2, [r4, #0]
 80025a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025a8:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80025aa:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80025ae:	f042 0220 	orr.w	r2, r2, #32
 80025b2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025b6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80025ba:	2a00      	cmp	r2, #0
 80025bc:	d0ae      	beq.n	800251c <HAL_UART_IRQHandler+0x60>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80025be:	f013 0f20 	tst.w	r3, #32
 80025c2:	d006      	beq.n	80025d2 <HAL_UART_IRQHandler+0x116>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80025c4:	f010 0f20 	tst.w	r0, #32
 80025c8:	d003      	beq.n	80025d2 <HAL_UART_IRQHandler+0x116>
        if (huart->RxISR != NULL)
 80025ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025cc:	b10b      	cbz	r3, 80025d2 <HAL_UART_IRQHandler+0x116>
          huart->RxISR(huart);
 80025ce:	4620      	mov	r0, r4
 80025d0:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80025d2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f013 0f40 	tst.w	r3, #64	; 0x40
 80025de:	d102      	bne.n	80025e6 <HAL_UART_IRQHandler+0x12a>
 80025e0:	f012 0f28 	tst.w	r2, #40	; 0x28
 80025e4:	d029      	beq.n	800263a <HAL_UART_IRQHandler+0x17e>
        UART_EndRxTransfer(huart);
 80025e6:	4620      	mov	r0, r4
 80025e8:	f7ff fe90 	bl	800230c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80025f4:	d01d      	beq.n	8002632 <HAL_UART_IRQHandler+0x176>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025f6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f8:	f102 0308 	add.w	r3, r2, #8
 80025fc:	e853 3f00 	ldrex	r3, [r3]
 8002600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002604:	3208      	adds	r2, #8
 8002606:	e842 3100 	strex	r1, r3, [r2]
 800260a:	2900      	cmp	r1, #0
 800260c:	d1f3      	bne.n	80025f6 <HAL_UART_IRQHandler+0x13a>
          if (huart->hdmarx != NULL)
 800260e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002610:	b15b      	cbz	r3, 800262a <HAL_UART_IRQHandler+0x16e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002612:	4a61      	ldr	r2, [pc, #388]	; (8002798 <HAL_UART_IRQHandler+0x2dc>)
 8002614:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002616:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002618:	f7fe fd58 	bl	80010cc <HAL_DMA_Abort_IT>
 800261c:	2800      	cmp	r0, #0
 800261e:	f43f af7d 	beq.w	800251c <HAL_UART_IRQHandler+0x60>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002622:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002624:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002626:	4798      	blx	r3
 8002628:	e778      	b.n	800251c <HAL_UART_IRQHandler+0x60>
            HAL_UART_ErrorCallback(huart);
 800262a:	4620      	mov	r0, r4
 800262c:	f7ff ff39 	bl	80024a2 <HAL_UART_ErrorCallback>
 8002630:	e774      	b.n	800251c <HAL_UART_IRQHandler+0x60>
          HAL_UART_ErrorCallback(huart);
 8002632:	4620      	mov	r0, r4
 8002634:	f7ff ff35 	bl	80024a2 <HAL_UART_ErrorCallback>
 8002638:	e770      	b.n	800251c <HAL_UART_IRQHandler+0x60>
        HAL_UART_ErrorCallback(huart);
 800263a:	4620      	mov	r0, r4
 800263c:	f7ff ff31 	bl	80024a2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002640:	2300      	movs	r3, #0
 8002642:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return;
 8002646:	e769      	b.n	800251c <HAL_UART_IRQHandler+0x60>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002648:	f013 0f10 	tst.w	r3, #16
 800264c:	f43f af51 	beq.w	80024f2 <HAL_UART_IRQHandler+0x36>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002650:	f010 0f10 	tst.w	r0, #16
 8002654:	f43f af4d 	beq.w	80024f2 <HAL_UART_IRQHandler+0x36>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002658:	2310      	movs	r3, #16
 800265a:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002664:	d04c      	beq.n	8002700 <HAL_UART_IRQHandler+0x244>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002666:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8002668:	6813      	ldr	r3, [r2, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800266e:	2b00      	cmp	r3, #0
 8002670:	f43f af54 	beq.w	800251c <HAL_UART_IRQHandler+0x60>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002674:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8002678:	4299      	cmp	r1, r3
 800267a:	f67f af4f 	bls.w	800251c <HAL_UART_IRQHandler+0x60>
        huart->RxXferCount = nb_remaining_rx_data;
 800267e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002682:	6993      	ldr	r3, [r2, #24]
 8002684:	2b20      	cmp	r3, #32
 8002686:	d030      	beq.n	80026ea <HAL_UART_IRQHandler+0x22e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002688:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268a:	e852 3f00 	ldrex	r3, [r2]
 800268e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002692:	e842 3100 	strex	r1, r3, [r2]
 8002696:	2900      	cmp	r1, #0
 8002698:	d1f6      	bne.n	8002688 <HAL_UART_IRQHandler+0x1cc>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800269a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269c:	f102 0308 	add.w	r3, r2, #8
 80026a0:	e853 3f00 	ldrex	r3, [r3]
 80026a4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a8:	3208      	adds	r2, #8
 80026aa:	e842 3100 	strex	r1, r3, [r2]
 80026ae:	2900      	cmp	r1, #0
 80026b0:	d1f3      	bne.n	800269a <HAL_UART_IRQHandler+0x1de>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026b2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b4:	f102 0308 	add.w	r3, r2, #8
 80026b8:	e853 3f00 	ldrex	r3, [r3]
 80026bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c0:	3208      	adds	r2, #8
 80026c2:	e842 3100 	strex	r1, r3, [r2]
 80026c6:	2900      	cmp	r1, #0
 80026c8:	d1f3      	bne.n	80026b2 <HAL_UART_IRQHandler+0x1f6>
          huart->RxState = HAL_UART_STATE_READY;
 80026ca:	2320      	movs	r3, #32
 80026cc:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ce:	2300      	movs	r3, #0
 80026d0:	6623      	str	r3, [r4, #96]	; 0x60
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026d2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d4:	e852 3f00 	ldrex	r3, [r2]
 80026d8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026dc:	e842 3100 	strex	r1, r3, [r2]
 80026e0:	2900      	cmp	r1, #0
 80026e2:	d1f6      	bne.n	80026d2 <HAL_UART_IRQHandler+0x216>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026e4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80026e6:	f7fe fccf 	bl	8001088 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026ea:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80026ee:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	1ac9      	subs	r1, r1, r3
 80026f6:	b289      	uxth	r1, r1
 80026f8:	4620      	mov	r0, r4
 80026fa:	f7ff fedd 	bl	80024b8 <HAL_UARTEx_RxEventCallback>
      return;
 80026fe:	e70d      	b.n	800251c <HAL_UART_IRQHandler+0x60>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002700:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8002704:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8002708:	b29b      	uxth	r3, r3
 800270a:	1ac9      	subs	r1, r1, r3
 800270c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800270e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8002712:	b29b      	uxth	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	f43f af01 	beq.w	800251c <HAL_UART_IRQHandler+0x60>
          && (nb_rx_data > 0U))
 800271a:	2900      	cmp	r1, #0
 800271c:	f43f aefe 	beq.w	800251c <HAL_UART_IRQHandler+0x60>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002720:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002722:	e852 3f00 	ldrex	r3, [r2]
 8002726:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272a:	e842 3000 	strex	r0, r3, [r2]
 800272e:	2800      	cmp	r0, #0
 8002730:	d1f6      	bne.n	8002720 <HAL_UART_IRQHandler+0x264>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002732:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002734:	f102 0308 	add.w	r3, r2, #8
 8002738:	e853 3f00 	ldrex	r3, [r3]
 800273c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002740:	3208      	adds	r2, #8
 8002742:	e842 3000 	strex	r0, r3, [r2]
 8002746:	2800      	cmp	r0, #0
 8002748:	d1f3      	bne.n	8002732 <HAL_UART_IRQHandler+0x276>
        huart->RxState = HAL_UART_STATE_READY;
 800274a:	2320      	movs	r3, #32
 800274c:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800274e:	2300      	movs	r3, #0
 8002750:	6623      	str	r3, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8002752:	6663      	str	r3, [r4, #100]	; 0x64
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002754:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002756:	e852 3f00 	ldrex	r3, [r2]
 800275a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275e:	e842 3000 	strex	r0, r3, [r2]
 8002762:	2800      	cmp	r0, #0
 8002764:	d1f6      	bne.n	8002754 <HAL_UART_IRQHandler+0x298>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002766:	4620      	mov	r0, r4
 8002768:	f7ff fea6 	bl	80024b8 <HAL_UARTEx_RxEventCallback>
      return;
 800276c:	e6d6      	b.n	800251c <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800276e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002772:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8002774:	4620      	mov	r0, r4
 8002776:	f000 fb2f 	bl	8002dd8 <HAL_UARTEx_WakeupCallback>
    return;
 800277a:	e6cf      	b.n	800251c <HAL_UART_IRQHandler+0x60>
    if (huart->TxISR != NULL)
 800277c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800277e:	2b00      	cmp	r3, #0
 8002780:	f43f aecc 	beq.w	800251c <HAL_UART_IRQHandler+0x60>
      huart->TxISR(huart);
 8002784:	4620      	mov	r0, r4
 8002786:	4798      	blx	r3
    return;
 8002788:	e6c8      	b.n	800251c <HAL_UART_IRQHandler+0x60>
    UART_EndTransmit_IT(huart);
 800278a:	4620      	mov	r0, r4
 800278c:	f7ff fe78 	bl	8002480 <UART_EndTransmit_IT>
    return;
 8002790:	e6c4      	b.n	800251c <HAL_UART_IRQHandler+0x60>
 8002792:	bf00      	nop
 8002794:	04000120 	.word	0x04000120
 8002798:	080024a5 	.word	0x080024a5

0800279c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800279c:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800279e:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027a2:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80027a4:	2a22      	cmp	r2, #34	; 0x22
 80027a6:	d005      	beq.n	80027b4 <UART_RxISR_8BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80027a8:	6802      	ldr	r2, [r0, #0]
 80027aa:	6993      	ldr	r3, [r2, #24]
 80027ac:	f043 0308 	orr.w	r3, r3, #8
 80027b0:	6193      	str	r3, [r2, #24]
  }
}
 80027b2:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80027b4:	6802      	ldr	r2, [r0, #0]
 80027b6:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80027bc:	400b      	ands	r3, r1
 80027be:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80027c0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80027c2:	3301      	adds	r3, #1
 80027c4:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80027c6:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 80027d4:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1e9      	bne.n	80027b2 <UART_RxISR_8BIT+0x16>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027de:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e0:	e852 3f00 	ldrex	r3, [r2]
 80027e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e8:	e842 3100 	strex	r1, r3, [r2]
 80027ec:	2900      	cmp	r1, #0
 80027ee:	d1f6      	bne.n	80027de <UART_RxISR_8BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f2:	f102 0308 	add.w	r3, r2, #8
 80027f6:	e853 3f00 	ldrex	r3, [r3]
 80027fa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fe:	3208      	adds	r2, #8
 8002800:	e842 3100 	strex	r1, r3, [r2]
 8002804:	2900      	cmp	r1, #0
 8002806:	d1f3      	bne.n	80027f0 <UART_RxISR_8BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8002808:	2320      	movs	r3, #32
 800280a:	67c3      	str	r3, [r0, #124]	; 0x7c
      huart->RxISR = NULL;
 800280c:	2300      	movs	r3, #0
 800280e:	6643      	str	r3, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002810:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002812:	2b01      	cmp	r3, #1
 8002814:	d116      	bne.n	8002844 <UART_RxISR_8BIT+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002816:	2300      	movs	r3, #0
 8002818:	6603      	str	r3, [r0, #96]	; 0x60
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800281a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281c:	e852 3f00 	ldrex	r3, [r2]
 8002820:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002824:	e842 3100 	strex	r1, r3, [r2]
 8002828:	2900      	cmp	r1, #0
 800282a:	d1f6      	bne.n	800281a <UART_RxISR_8BIT+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800282c:	6803      	ldr	r3, [r0, #0]
 800282e:	69da      	ldr	r2, [r3, #28]
 8002830:	f012 0f10 	tst.w	r2, #16
 8002834:	d001      	beq.n	800283a <UART_RxISR_8BIT+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002836:	2210      	movs	r2, #16
 8002838:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800283a:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 800283e:	f7ff fe3b 	bl	80024b8 <HAL_UARTEx_RxEventCallback>
 8002842:	e7b6      	b.n	80027b2 <UART_RxISR_8BIT+0x16>
        HAL_UART_RxCpltCallback(huart);
 8002844:	f002 f9ba 	bl	8004bbc <HAL_UART_RxCpltCallback>
 8002848:	e7b3      	b.n	80027b2 <UART_RxISR_8BIT+0x16>

0800284a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800284a:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800284c:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002850:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8002852:	2a22      	cmp	r2, #34	; 0x22
 8002854:	d005      	beq.n	8002862 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002856:	6802      	ldr	r2, [r0, #0]
 8002858:	6993      	ldr	r3, [r2, #24]
 800285a:	f043 0308 	orr.w	r3, r3, #8
 800285e:	6193      	str	r3, [r2, #24]
  }
}
 8002860:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002862:	6802      	ldr	r2, [r0, #0]
 8002864:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002866:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8002868:	400b      	ands	r3, r1
 800286a:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 800286c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800286e:	3302      	adds	r3, #2
 8002870:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8002872:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29b      	uxth	r3, r3
 800287c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8002880:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8002884:	b29b      	uxth	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1ea      	bne.n	8002860 <UART_RxISR_16BIT+0x16>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800288a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288c:	e852 3f00 	ldrex	r3, [r2]
 8002890:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002894:	e842 3100 	strex	r1, r3, [r2]
 8002898:	2900      	cmp	r1, #0
 800289a:	d1f6      	bne.n	800288a <UART_RxISR_16BIT+0x40>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800289c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289e:	f102 0308 	add.w	r3, r2, #8
 80028a2:	e853 3f00 	ldrex	r3, [r3]
 80028a6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028aa:	3208      	adds	r2, #8
 80028ac:	e842 3100 	strex	r1, r3, [r2]
 80028b0:	2900      	cmp	r1, #0
 80028b2:	d1f3      	bne.n	800289c <UART_RxISR_16BIT+0x52>
      huart->RxState = HAL_UART_STATE_READY;
 80028b4:	2320      	movs	r3, #32
 80028b6:	67c3      	str	r3, [r0, #124]	; 0x7c
      huart->RxISR = NULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	6643      	str	r3, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028bc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d116      	bne.n	80028f0 <UART_RxISR_16BIT+0xa6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c2:	2300      	movs	r3, #0
 80028c4:	6603      	str	r3, [r0, #96]	; 0x60
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028c6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c8:	e852 3f00 	ldrex	r3, [r2]
 80028cc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d0:	e842 3100 	strex	r1, r3, [r2]
 80028d4:	2900      	cmp	r1, #0
 80028d6:	d1f6      	bne.n	80028c6 <UART_RxISR_16BIT+0x7c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80028d8:	6803      	ldr	r3, [r0, #0]
 80028da:	69da      	ldr	r2, [r3, #28]
 80028dc:	f012 0f10 	tst.w	r2, #16
 80028e0:	d001      	beq.n	80028e6 <UART_RxISR_16BIT+0x9c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80028e2:	2210      	movs	r2, #16
 80028e4:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028e6:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 80028ea:	f7ff fde5 	bl	80024b8 <HAL_UARTEx_RxEventCallback>
 80028ee:	e7b7      	b.n	8002860 <UART_RxISR_16BIT+0x16>
        HAL_UART_RxCpltCallback(huart);
 80028f0:	f002 f964 	bl	8004bbc <HAL_UART_RxCpltCallback>
 80028f4:	e7b4      	b.n	8002860 <UART_RxISR_16BIT+0x16>
	...

080028f8 <UART_SetConfig>:
{
 80028f8:	b510      	push	{r4, lr}
 80028fa:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028fc:	6883      	ldr	r3, [r0, #8]
 80028fe:	6902      	ldr	r2, [r0, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	6942      	ldr	r2, [r0, #20]
 8002904:	4313      	orrs	r3, r2
 8002906:	69c2      	ldr	r2, [r0, #28]
 8002908:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800290a:	6801      	ldr	r1, [r0, #0]
 800290c:	6808      	ldr	r0, [r1, #0]
 800290e:	4a4e      	ldr	r2, [pc, #312]	; (8002a48 <UART_SetConfig+0x150>)
 8002910:	4002      	ands	r2, r0
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002916:	6822      	ldr	r2, [r4, #0]
 8002918:	6853      	ldr	r3, [r2, #4]
 800291a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800291e:	68e1      	ldr	r1, [r4, #12]
 8002920:	430b      	orrs	r3, r1
 8002922:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002924:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8002926:	6a23      	ldr	r3, [r4, #32]
 8002928:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800292a:	6821      	ldr	r1, [r4, #0]
 800292c:	688b      	ldr	r3, [r1, #8]
 800292e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002936:	6823      	ldr	r3, [r4, #0]
 8002938:	4a44      	ldr	r2, [pc, #272]	; (8002a4c <UART_SetConfig+0x154>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d014      	beq.n	8002968 <UART_SetConfig+0x70>
 800293e:	4a44      	ldr	r2, [pc, #272]	; (8002a50 <UART_SetConfig+0x158>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d027      	beq.n	8002994 <UART_SetConfig+0x9c>
 8002944:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002948:	4293      	cmp	r3, r2
 800294a:	d01f      	beq.n	800298c <UART_SetConfig+0x94>
 800294c:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800294e:	69e0      	ldr	r0, [r4, #28]
 8002950:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002954:	d020      	beq.n	8002998 <UART_SetConfig+0xa0>
    switch (clocksource)
 8002956:	2b08      	cmp	r3, #8
 8002958:	d870      	bhi.n	8002a3c <UART_SetConfig+0x144>
 800295a:	e8df f003 	tbb	[pc, r3]
 800295e:	604a      	.short	0x604a
 8002960:	6f636f48 	.word	0x6f636f48
 8002964:	6f6f      	.short	0x6f6f
 8002966:	66          	.byte	0x66
 8002967:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002968:	4b3a      	ldr	r3, [pc, #232]	; (8002a54 <UART_SetConfig+0x15c>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	2b03      	cmp	r3, #3
 8002972:	d809      	bhi.n	8002988 <UART_SetConfig+0x90>
 8002974:	e8df f003 	tbb	[pc, r3]
 8002978:	0c060402 	.word	0x0c060402
 800297c:	2300      	movs	r3, #0
 800297e:	e7e6      	b.n	800294e <UART_SetConfig+0x56>
 8002980:	2304      	movs	r3, #4
 8002982:	e7e4      	b.n	800294e <UART_SetConfig+0x56>
 8002984:	2308      	movs	r3, #8
 8002986:	e7e2      	b.n	800294e <UART_SetConfig+0x56>
 8002988:	2310      	movs	r3, #16
 800298a:	e7e0      	b.n	800294e <UART_SetConfig+0x56>
 800298c:	2300      	movs	r3, #0
 800298e:	e7de      	b.n	800294e <UART_SetConfig+0x56>
 8002990:	2302      	movs	r3, #2
 8002992:	e7dc      	b.n	800294e <UART_SetConfig+0x56>
 8002994:	2300      	movs	r3, #0
 8002996:	e7da      	b.n	800294e <UART_SetConfig+0x56>
    switch (clocksource)
 8002998:	2b08      	cmp	r3, #8
 800299a:	d849      	bhi.n	8002a30 <UART_SetConfig+0x138>
 800299c:	e8df f003 	tbb	[pc, r3]
 80029a0:	48251f05 	.word	0x48251f05
 80029a4:	48484822 	.word	0x48484822
 80029a8:	09          	.byte	0x09
 80029a9:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80029aa:	f7ff fa4f 	bl	8001e4c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80029ae:	2800      	cmp	r0, #0
 80029b0:	d040      	beq.n	8002a34 <UART_SetConfig+0x13c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029b2:	6862      	ldr	r2, [r4, #4]
 80029b4:	0853      	lsrs	r3, r2, #1
 80029b6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80029ba:	fbb0 f0f2 	udiv	r0, r0, r2
 80029be:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029c0:	f1a0 0210 	sub.w	r2, r0, #16
 80029c4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d835      	bhi.n	8002a38 <UART_SetConfig+0x140>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029cc:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029d0:	f3c0 0042 	ubfx	r0, r0, #1, #3
 80029d4:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	60d8      	str	r0, [r3, #12]
 80029da:	2000      	movs	r0, #0
 80029dc:	e01b      	b.n	8002a16 <UART_SetConfig+0x11e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80029de:	f7ff fa4b 	bl	8001e78 <HAL_RCC_GetPCLK2Freq>
        break;
 80029e2:	e7e4      	b.n	80029ae <UART_SetConfig+0xb6>
        pclk = HAL_RCC_GetSysClockFreq();
 80029e4:	f7ff f920 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
        break;
 80029e8:	e7e1      	b.n	80029ae <UART_SetConfig+0xb6>
        pclk = (uint32_t) HSI_VALUE;
 80029ea:	481b      	ldr	r0, [pc, #108]	; (8002a58 <UART_SetConfig+0x160>)
 80029ec:	e7e1      	b.n	80029b2 <UART_SetConfig+0xba>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029ee:	481a      	ldr	r0, [pc, #104]	; (8002a58 <UART_SetConfig+0x160>)
 80029f0:	e002      	b.n	80029f8 <UART_SetConfig+0x100>
        pclk = HAL_RCC_GetPCLK1Freq();
 80029f2:	f7ff fa2b 	bl	8001e4c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80029f6:	b318      	cbz	r0, 8002a40 <UART_SetConfig+0x148>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80029f8:	6863      	ldr	r3, [r4, #4]
 80029fa:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80029fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a02:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a04:	f1a0 0210 	sub.w	r2, r0, #16
 8002a08:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d819      	bhi.n	8002a44 <UART_SetConfig+0x14c>
        huart->Instance->BRR = usartdiv;
 8002a10:	6823      	ldr	r3, [r4, #0]
 8002a12:	60d8      	str	r0, [r3, #12]
 8002a14:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8002a1a:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8002a1c:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a1e:	f7ff fa2b 	bl	8001e78 <HAL_RCC_GetPCLK2Freq>
        break;
 8002a22:	e7e8      	b.n	80029f6 <UART_SetConfig+0xfe>
        pclk = HAL_RCC_GetSysClockFreq();
 8002a24:	f7ff f900 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
        break;
 8002a28:	e7e5      	b.n	80029f6 <UART_SetConfig+0xfe>
        pclk = (uint32_t) LSE_VALUE;
 8002a2a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002a2e:	e7e3      	b.n	80029f8 <UART_SetConfig+0x100>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a30:	2001      	movs	r0, #1
 8002a32:	e7f0      	b.n	8002a16 <UART_SetConfig+0x11e>
 8002a34:	2000      	movs	r0, #0
 8002a36:	e7ee      	b.n	8002a16 <UART_SetConfig+0x11e>
        ret = HAL_ERROR;
 8002a38:	2001      	movs	r0, #1
 8002a3a:	e7ec      	b.n	8002a16 <UART_SetConfig+0x11e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	e7ea      	b.n	8002a16 <UART_SetConfig+0x11e>
 8002a40:	2000      	movs	r0, #0
 8002a42:	e7e8      	b.n	8002a16 <UART_SetConfig+0x11e>
        ret = HAL_ERROR;
 8002a44:	2001      	movs	r0, #1
 8002a46:	e7e6      	b.n	8002a16 <UART_SetConfig+0x11e>
 8002a48:	efff69f3 	.word	0xefff69f3
 8002a4c:	40013800 	.word	0x40013800
 8002a50:	40004400 	.word	0x40004400
 8002a54:	40021000 	.word	0x40021000
 8002a58:	007a1200 	.word	0x007a1200

08002a5c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a5e:	f013 0f01 	tst.w	r3, #1
 8002a62:	d006      	beq.n	8002a72 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a64:	6802      	ldr	r2, [r0, #0]
 8002a66:	6853      	ldr	r3, [r2, #4]
 8002a68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002a6c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002a6e:	430b      	orrs	r3, r1
 8002a70:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a72:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a74:	f013 0f02 	tst.w	r3, #2
 8002a78:	d006      	beq.n	8002a88 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a7a:	6802      	ldr	r2, [r0, #0]
 8002a7c:	6853      	ldr	r3, [r2, #4]
 8002a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a82:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002a84:	430b      	orrs	r3, r1
 8002a86:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a8a:	f013 0f04 	tst.w	r3, #4
 8002a8e:	d006      	beq.n	8002a9e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a90:	6802      	ldr	r2, [r0, #0]
 8002a92:	6853      	ldr	r3, [r2, #4]
 8002a94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a98:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002a9a:	430b      	orrs	r3, r1
 8002a9c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a9e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002aa0:	f013 0f08 	tst.w	r3, #8
 8002aa4:	d006      	beq.n	8002ab4 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002aa6:	6802      	ldr	r2, [r0, #0]
 8002aa8:	6853      	ldr	r3, [r2, #4]
 8002aaa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002aae:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ab4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ab6:	f013 0f10 	tst.w	r3, #16
 8002aba:	d006      	beq.n	8002aca <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002abc:	6802      	ldr	r2, [r0, #0]
 8002abe:	6893      	ldr	r3, [r2, #8]
 8002ac0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ac4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002aca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002acc:	f013 0f20 	tst.w	r3, #32
 8002ad0:	d006      	beq.n	8002ae0 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ad2:	6802      	ldr	r2, [r0, #0]
 8002ad4:	6893      	ldr	r3, [r2, #8]
 8002ad6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ada:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002adc:	430b      	orrs	r3, r1
 8002ade:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ae0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ae2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ae6:	d00a      	beq.n	8002afe <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ae8:	6802      	ldr	r2, [r0, #0]
 8002aea:	6853      	ldr	r3, [r2, #4]
 8002aec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002af0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002af2:	430b      	orrs	r3, r1
 8002af4:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002af6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002afc:	d00b      	beq.n	8002b16 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002afe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002b00:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002b04:	d006      	beq.n	8002b14 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b06:	6802      	ldr	r2, [r0, #0]
 8002b08:	6853      	ldr	r3, [r2, #4]
 8002b0a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002b0e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002b10:	430b      	orrs	r3, r1
 8002b12:	6053      	str	r3, [r2, #4]
}
 8002b14:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b16:	6802      	ldr	r2, [r0, #0]
 8002b18:	6853      	ldr	r3, [r2, #4]
 8002b1a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b1e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6053      	str	r3, [r2, #4]
 8002b24:	e7eb      	b.n	8002afe <UART_AdvFeatureConfig+0xa2>

08002b26 <UART_WaitOnFlagUntilTimeout>:
{
 8002b26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b2a:	4605      	mov	r5, r0
 8002b2c:	460f      	mov	r7, r1
 8002b2e:	4616      	mov	r6, r2
 8002b30:	4699      	mov	r9, r3
 8002b32:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b36:	682c      	ldr	r4, [r5, #0]
 8002b38:	69e4      	ldr	r4, [r4, #28]
 8002b3a:	ea37 0304 	bics.w	r3, r7, r4
 8002b3e:	bf0c      	ite	eq
 8002b40:	2401      	moveq	r4, #1
 8002b42:	2400      	movne	r4, #0
 8002b44:	42b4      	cmp	r4, r6
 8002b46:	d153      	bne.n	8002bf0 <UART_WaitOnFlagUntilTimeout+0xca>
    if (Timeout != HAL_MAX_DELAY)
 8002b48:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002b4c:	d0f3      	beq.n	8002b36 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4e:	f7fd fb7f 	bl	8000250 <HAL_GetTick>
 8002b52:	eba0 0009 	sub.w	r0, r0, r9
 8002b56:	4540      	cmp	r0, r8
 8002b58:	d82d      	bhi.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0x90>
 8002b5a:	f1b8 0f00 	cmp.w	r8, #0
 8002b5e:	d02a      	beq.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0x90>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b60:	682b      	ldr	r3, [r5, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	f012 0f04 	tst.w	r2, #4
 8002b68:	d0e5      	beq.n	8002b36 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b6a:	69da      	ldr	r2, [r3, #28]
 8002b6c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002b70:	d0e1      	beq.n	8002b36 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b76:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b78:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7a:	e852 3f00 	ldrex	r3, [r2]
 8002b7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b82:	e842 3100 	strex	r1, r3, [r2]
 8002b86:	2900      	cmp	r1, #0
 8002b88:	d1f6      	bne.n	8002b78 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b8a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8c:	f102 0308 	add.w	r3, r2, #8
 8002b90:	e853 3f00 	ldrex	r3, [r3]
 8002b94:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b98:	3208      	adds	r2, #8
 8002b9a:	e842 3100 	strex	r1, r3, [r2]
 8002b9e:	2900      	cmp	r1, #0
 8002ba0:	d1f3      	bne.n	8002b8a <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002ba6:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ba8:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
          __HAL_UNLOCK(huart);
 8002bac:	2300      	movs	r3, #0
 8002bae:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
          return HAL_TIMEOUT;
 8002bb2:	2003      	movs	r0, #3
 8002bb4:	e01d      	b.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0xcc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bb6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb8:	e852 3f00 	ldrex	r3, [r2]
 8002bbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc0:	e842 3100 	strex	r1, r3, [r2]
 8002bc4:	2900      	cmp	r1, #0
 8002bc6:	d1f6      	bne.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0x90>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc8:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bca:	f102 0308 	add.w	r3, r2, #8
 8002bce:	e853 3f00 	ldrex	r3, [r3]
 8002bd2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd6:	3208      	adds	r2, #8
 8002bd8:	e842 3100 	strex	r1, r3, [r2]
 8002bdc:	2900      	cmp	r1, #0
 8002bde:	d1f3      	bne.n	8002bc8 <UART_WaitOnFlagUntilTimeout+0xa2>
        huart->gState = HAL_UART_STATE_READY;
 8002be0:	2320      	movs	r3, #32
 8002be2:	67ab      	str	r3, [r5, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002be4:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8002be6:	2300      	movs	r3, #0
 8002be8:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
        return HAL_TIMEOUT;
 8002bec:	2003      	movs	r0, #3
 8002bee:	e000      	b.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0xcc>
  return HAL_OK;
 8002bf0:	2000      	movs	r0, #0
}
 8002bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002bf6 <UART_CheckIdleState>:
{
 8002bf6:	b530      	push	{r4, r5, lr}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8002c02:	f7fd fb25 	bl	8000250 <HAL_GetTick>
 8002c06:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f013 0f08 	tst.w	r3, #8
 8002c10:	d10d      	bne.n	8002c2e <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c12:	6823      	ldr	r3, [r4, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f013 0f04 	tst.w	r3, #4
 8002c1a:	d116      	bne.n	8002c4a <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8002c1c:	2320      	movs	r3, #32
 8002c1e:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002c20:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c22:	2000      	movs	r0, #0
 8002c24:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8002c26:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 8002c2a:	b003      	add	sp, #12
 8002c2c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	4603      	mov	r3, r0
 8002c36:	2200      	movs	r2, #0
 8002c38:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f7ff ff72 	bl	8002b26 <UART_WaitOnFlagUntilTimeout>
 8002c42:	2800      	cmp	r0, #0
 8002c44:	d0e5      	beq.n	8002c12 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8002c46:	2003      	movs	r0, #3
 8002c48:	e7ef      	b.n	8002c2a <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	462b      	mov	r3, r5
 8002c52:	2200      	movs	r2, #0
 8002c54:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c58:	4620      	mov	r0, r4
 8002c5a:	f7ff ff64 	bl	8002b26 <UART_WaitOnFlagUntilTimeout>
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	d0dc      	beq.n	8002c1c <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8002c62:	2003      	movs	r0, #3
 8002c64:	e7e1      	b.n	8002c2a <UART_CheckIdleState+0x34>

08002c66 <HAL_UART_Init>:
  if (huart == NULL)
 8002c66:	b368      	cbz	r0, 8002cc4 <HAL_UART_Init+0x5e>
{
 8002c68:	b510      	push	{r4, lr}
 8002c6a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002c6c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002c6e:	b303      	cbz	r3, 8002cb2 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8002c70:	2324      	movs	r3, #36	; 0x24
 8002c72:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8002c74:	6822      	ldr	r2, [r4, #0]
 8002c76:	6813      	ldr	r3, [r2, #0]
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c7e:	4620      	mov	r0, r4
 8002c80:	f7ff fe3a 	bl	80028f8 <UART_SetConfig>
 8002c84:	2801      	cmp	r0, #1
 8002c86:	d013      	beq.n	8002cb0 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c8a:	b9bb      	cbnz	r3, 8002cbc <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c8c:	6822      	ldr	r2, [r4, #0]
 8002c8e:	6853      	ldr	r3, [r2, #4]
 8002c90:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002c94:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c96:	6822      	ldr	r2, [r4, #0]
 8002c98:	6893      	ldr	r3, [r2, #8]
 8002c9a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002c9e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002ca0:	6822      	ldr	r2, [r4, #0]
 8002ca2:	6813      	ldr	r3, [r2, #0]
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002caa:	4620      	mov	r0, r4
 8002cac:	f7ff ffa3 	bl	8002bf6 <UART_CheckIdleState>
}
 8002cb0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002cb2:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8002cb6:	f003 fc47 	bl	8006548 <HAL_UART_MspInit>
 8002cba:	e7d9      	b.n	8002c70 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8002cbc:	4620      	mov	r0, r4
 8002cbe:	f7ff fecd 	bl	8002a5c <UART_AdvFeatureConfig>
 8002cc2:	e7e3      	b.n	8002c8c <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8002cc4:	2001      	movs	r0, #1
}
 8002cc6:	4770      	bx	lr

08002cc8 <UART_Start_Receive_IT>:
  huart->pRxBuffPtr  = pData;
 8002cc8:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002cca:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 8002cce:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	6643      	str	r3, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8002cd6:	6883      	ldr	r3, [r0, #8]
 8002cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cdc:	d006      	beq.n	8002cec <UART_Start_Receive_IT+0x24>
 8002cde:	b9a3      	cbnz	r3, 8002d0a <UART_Start_Receive_IT+0x42>
 8002ce0:	6903      	ldr	r3, [r0, #16]
 8002ce2:	b973      	cbnz	r3, 8002d02 <UART_Start_Receive_IT+0x3a>
 8002ce4:	23ff      	movs	r3, #255	; 0xff
 8002ce6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002cea:	e014      	b.n	8002d16 <UART_Start_Receive_IT+0x4e>
 8002cec:	6903      	ldr	r3, [r0, #16]
 8002cee:	b923      	cbnz	r3, 8002cfa <UART_Start_Receive_IT+0x32>
 8002cf0:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002cf4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002cf8:	e00d      	b.n	8002d16 <UART_Start_Receive_IT+0x4e>
 8002cfa:	23ff      	movs	r3, #255	; 0xff
 8002cfc:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002d00:	e009      	b.n	8002d16 <UART_Start_Receive_IT+0x4e>
 8002d02:	237f      	movs	r3, #127	; 0x7f
 8002d04:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002d08:	e005      	b.n	8002d16 <UART_Start_Receive_IT+0x4e>
 8002d0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d0e:	d027      	beq.n	8002d60 <UART_Start_Receive_IT+0x98>
 8002d10:	2300      	movs	r3, #0
 8002d12:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d1c:	2322      	movs	r3, #34	; 0x22
 8002d1e:	67c3      	str	r3, [r0, #124]	; 0x7c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d20:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d22:	f102 0308 	add.w	r3, r2, #8
 8002d26:	e853 3f00 	ldrex	r3, [r3]
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2e:	3208      	adds	r2, #8
 8002d30:	e842 3100 	strex	r1, r3, [r2]
 8002d34:	2900      	cmp	r1, #0
 8002d36:	d1f3      	bne.n	8002d20 <UART_Start_Receive_IT+0x58>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d38:	6883      	ldr	r3, [r0, #8]
 8002d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d3e:	d019      	beq.n	8002d74 <UART_Start_Receive_IT+0xac>
    huart->RxISR = UART_RxISR_8BIT;
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <UART_Start_Receive_IT+0xb8>)
 8002d42:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8002d44:	2300      	movs	r3, #0
 8002d46:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002d4a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4c:	e852 3f00 	ldrex	r3, [r2]
 8002d50:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d54:	e842 3100 	strex	r1, r3, [r2]
 8002d58:	2900      	cmp	r1, #0
 8002d5a:	d1f6      	bne.n	8002d4a <UART_Start_Receive_IT+0x82>
}
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8002d60:	6903      	ldr	r3, [r0, #16]
 8002d62:	b91b      	cbnz	r3, 8002d6c <UART_Start_Receive_IT+0xa4>
 8002d64:	237f      	movs	r3, #127	; 0x7f
 8002d66:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002d6a:	e7d4      	b.n	8002d16 <UART_Start_Receive_IT+0x4e>
 8002d6c:	233f      	movs	r3, #63	; 0x3f
 8002d6e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002d72:	e7d0      	b.n	8002d16 <UART_Start_Receive_IT+0x4e>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d74:	6903      	ldr	r3, [r0, #16]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1e2      	bne.n	8002d40 <UART_Start_Receive_IT+0x78>
    huart->RxISR = UART_RxISR_16BIT;
 8002d7a:	4b02      	ldr	r3, [pc, #8]	; (8002d84 <UART_Start_Receive_IT+0xbc>)
 8002d7c:	6643      	str	r3, [r0, #100]	; 0x64
 8002d7e:	e7e1      	b.n	8002d44 <UART_Start_Receive_IT+0x7c>
 8002d80:	0800279d 	.word	0x0800279d
 8002d84:	0800284b 	.word	0x0800284b

08002d88 <HAL_UART_Receive_IT>:
{
 8002d88:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d8a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d11b      	bne.n	8002dc8 <HAL_UART_Receive_IT+0x40>
    if ((pData == NULL) || (Size == 0U))
 8002d90:	b1e1      	cbz	r1, 8002dcc <HAL_UART_Receive_IT+0x44>
 8002d92:	b1ea      	cbz	r2, 8002dd0 <HAL_UART_Receive_IT+0x48>
    __HAL_LOCK(huart);
 8002d94:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d01b      	beq.n	8002dd4 <HAL_UART_Receive_IT+0x4c>
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da2:	2300      	movs	r3, #0
 8002da4:	6603      	str	r3, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002da6:	6803      	ldr	r3, [r0, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8002dae:	d008      	beq.n	8002dc2 <HAL_UART_Receive_IT+0x3a>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002db0:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db2:	e854 3f00 	ldrex	r3, [r4]
 8002db6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dba:	e844 3500 	strex	r5, r3, [r4]
 8002dbe:	2d00      	cmp	r5, #0
 8002dc0:	d1f6      	bne.n	8002db0 <HAL_UART_Receive_IT+0x28>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8002dc2:	f7ff ff81 	bl	8002cc8 <UART_Start_Receive_IT>
 8002dc6:	e000      	b.n	8002dca <HAL_UART_Receive_IT+0x42>
    return HAL_BUSY;
 8002dc8:	2002      	movs	r0, #2
}
 8002dca:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002dcc:	2001      	movs	r0, #1
 8002dce:	e7fc      	b.n	8002dca <HAL_UART_Receive_IT+0x42>
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	e7fa      	b.n	8002dca <HAL_UART_Receive_IT+0x42>
    __HAL_LOCK(huart);
 8002dd4:	2002      	movs	r0, #2
 8002dd6:	e7f8      	b.n	8002dca <HAL_UART_Receive_IT+0x42>

08002dd8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002dd8:	4770      	bx	lr
	...

08002ddc <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002ddc:	b500      	push	{lr}
 8002dde:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002de0:	2300      	movs	r3, #0
 8002de2:	9307      	str	r3, [sp, #28]
 8002de4:	9308      	str	r3, [sp, #32]
 8002de6:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8002de8:	9301      	str	r3, [sp, #4]
 8002dea:	9302      	str	r3, [sp, #8]
 8002dec:	9303      	str	r3, [sp, #12]
 8002dee:	9304      	str	r3, [sp, #16]
 8002df0:	9305      	str	r3, [sp, #20]
 8002df2:	9306      	str	r3, [sp, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002df4:	4823      	ldr	r0, [pc, #140]	; (8002e84 <MX_ADC1_Init+0xa8>)
 8002df6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002dfa:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002dfc:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002dfe:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002e00:	2201      	movs	r2, #1
 8002e02:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e04:	7642      	strb	r2, [r0, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e06:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e0a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e0c:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e0e:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002e10:	2102      	movs	r1, #2
 8002e12:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002e14:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002e18:	2208      	movs	r2, #8
 8002e1a:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002e1c:	7603      	strb	r3, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002e1e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e20:	f7fd faf0 	bl	8000404 <HAL_ADC_Init>
 8002e24:	bb10      	cbnz	r0, 8002e6c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002e26:	2300      	movs	r3, #0
 8002e28:	9307      	str	r3, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002e2a:	a907      	add	r1, sp, #28
 8002e2c:	4815      	ldr	r0, [pc, #84]	; (8002e84 <MX_ADC1_Init+0xa8>)
 8002e2e:	f7fd ffa9 	bl	8000d84 <HAL_ADCEx_MultiModeConfigChannel>
 8002e32:	b9f0      	cbnz	r0, 8002e72 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002e34:	230b      	movs	r3, #11
 8002e36:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	9304      	str	r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8002e40:	2204      	movs	r2, #4
 8002e42:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002e44:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 8002e46:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e48:	eb0d 0102 	add.w	r1, sp, r2
 8002e4c:	480d      	ldr	r0, [pc, #52]	; (8002e84 <MX_ADC1_Init+0xa8>)
 8002e4e:	f7fd fde3 	bl	8000a18 <HAL_ADC_ConfigChannel>
 8002e52:	b988      	cbnz	r0, 8002e78 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002e54:	230c      	movs	r3, #12
 8002e56:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e5c:	a901      	add	r1, sp, #4
 8002e5e:	4809      	ldr	r0, [pc, #36]	; (8002e84 <MX_ADC1_Init+0xa8>)
 8002e60:	f7fd fdda 	bl	8000a18 <HAL_ADC_ConfigChannel>
 8002e64:	b958      	cbnz	r0, 8002e7e <MX_ADC1_Init+0xa2>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e66:	b00b      	add	sp, #44	; 0x2c
 8002e68:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002e6c:	f003 fa6c 	bl	8006348 <Error_Handler>
 8002e70:	e7d9      	b.n	8002e26 <MX_ADC1_Init+0x4a>
    Error_Handler();
 8002e72:	f003 fa69 	bl	8006348 <Error_Handler>
 8002e76:	e7dd      	b.n	8002e34 <MX_ADC1_Init+0x58>
    Error_Handler();
 8002e78:	f003 fa66 	bl	8006348 <Error_Handler>
 8002e7c:	e7ea      	b.n	8002e54 <MX_ADC1_Init+0x78>
    Error_Handler();
 8002e7e:	f003 fa63 	bl	8006348 <Error_Handler>
}
 8002e82:	e7f0      	b.n	8002e66 <MX_ADC1_Init+0x8a>
 8002e84:	20000bb0 	.word	0x20000bb0

08002e88 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8002e88:	b500      	push	{lr}
 8002e8a:	b087      	sub	sp, #28

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	9302      	str	r3, [sp, #8]
 8002e94:	9303      	str	r3, [sp, #12]
 8002e96:	9304      	str	r3, [sp, #16]
 8002e98:	9305      	str	r3, [sp, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8002e9a:	4824      	ldr	r0, [pc, #144]	; (8002f2c <MX_ADC2_Init+0xa4>)
 8002e9c:	4a24      	ldr	r2, [pc, #144]	; (8002f30 <MX_ADC2_Init+0xa8>)
 8002e9e:	6002      	str	r2, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002ea0:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002ea2:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	6102      	str	r2, [r0, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002ea8:	7642      	strb	r2, [r0, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002eaa:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002eae:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002eb0:	6282      	str	r2, [r0, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002eb2:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 3;
 8002eb4:	2103      	movs	r1, #3
 8002eb6:	61c1      	str	r1, [r0, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002eb8:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	6142      	str	r2, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002ec0:	7603      	strb	r3, [r0, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002ec2:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002ec4:	f7fd fa9e 	bl	8000404 <HAL_ADC_Init>
 8002ec8:	bb18      	cbnz	r0, 8002f12 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	9301      	str	r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	9202      	str	r2, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002eda:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8002edc:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002ede:	4669      	mov	r1, sp
 8002ee0:	4812      	ldr	r0, [pc, #72]	; (8002f2c <MX_ADC2_Init+0xa4>)
 8002ee2:	f7fd fd99 	bl	8000a18 <HAL_ADC_ConfigChannel>
 8002ee6:	b9b8      	cbnz	r0, 8002f18 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002ee8:	230e      	movs	r3, #14
 8002eea:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002eec:	2302      	movs	r3, #2
 8002eee:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002ef0:	4669      	mov	r1, sp
 8002ef2:	480e      	ldr	r0, [pc, #56]	; (8002f2c <MX_ADC2_Init+0xa4>)
 8002ef4:	f7fd fd90 	bl	8000a18 <HAL_ADC_ConfigChannel>
 8002ef8:	b988      	cbnz	r0, 8002f1e <MX_ADC2_Init+0x96>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002efa:	230f      	movs	r3, #15
 8002efc:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002efe:	2303      	movs	r3, #3
 8002f00:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002f02:	4669      	mov	r1, sp
 8002f04:	4809      	ldr	r0, [pc, #36]	; (8002f2c <MX_ADC2_Init+0xa4>)
 8002f06:	f7fd fd87 	bl	8000a18 <HAL_ADC_ConfigChannel>
 8002f0a:	b958      	cbnz	r0, 8002f24 <MX_ADC2_Init+0x9c>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002f0c:	b007      	add	sp, #28
 8002f0e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002f12:	f003 fa19 	bl	8006348 <Error_Handler>
 8002f16:	e7d8      	b.n	8002eca <MX_ADC2_Init+0x42>
    Error_Handler();
 8002f18:	f003 fa16 	bl	8006348 <Error_Handler>
 8002f1c:	e7e4      	b.n	8002ee8 <MX_ADC2_Init+0x60>
    Error_Handler();
 8002f1e:	f003 fa13 	bl	8006348 <Error_Handler>
 8002f22:	e7ea      	b.n	8002efa <MX_ADC2_Init+0x72>
    Error_Handler();
 8002f24:	f003 fa10 	bl	8006348 <Error_Handler>
}
 8002f28:	e7f0      	b.n	8002f0c <MX_ADC2_Init+0x84>
 8002f2a:	bf00      	nop
 8002f2c:	20000b60 	.word	0x20000b60
 8002f30:	50000100 	.word	0x50000100

08002f34 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f36:	b08b      	sub	sp, #44	; 0x2c
 8002f38:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	9305      	str	r3, [sp, #20]
 8002f3e:	9306      	str	r3, [sp, #24]
 8002f40:	9307      	str	r3, [sp, #28]
 8002f42:	9308      	str	r3, [sp, #32]
 8002f44:	9309      	str	r3, [sp, #36]	; 0x24
  if(adcHandle->Instance==ADC1)
 8002f46:	6803      	ldr	r3, [r0, #0]
 8002f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f4c:	d004      	beq.n	8002f58 <HAL_ADC_MspInit+0x24>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8002f4e:	4a52      	ldr	r2, [pc, #328]	; (8003098 <HAL_ADC_MspInit+0x164>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d047      	beq.n	8002fe4 <HAL_ADC_MspInit+0xb0>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8002f54:	b00b      	add	sp, #44	; 0x2c
 8002f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002f58:	4a50      	ldr	r2, [pc, #320]	; (800309c <HAL_ADC_MspInit+0x168>)
 8002f5a:	6813      	ldr	r3, [r2, #0]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d031      	beq.n	8002fc8 <HAL_ADC_MspInit+0x94>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f64:	4b4e      	ldr	r3, [pc, #312]	; (80030a0 <HAL_ADC_MspInit+0x16c>)
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002f6c:	615a      	str	r2, [r3, #20]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = aCurHOT_ADC1_IN11_Pin|aCurCOLD_ADC1_IN12_Pin;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f7c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2500      	movs	r5, #0
 8002f80:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f82:	a905      	add	r1, sp, #20
 8002f84:	4847      	ldr	r0, [pc, #284]	; (80030a4 <HAL_ADC_MspInit+0x170>)
 8002f86:	f7fe fa65 	bl	8001454 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8002f8a:	4847      	ldr	r0, [pc, #284]	; (80030a8 <HAL_ADC_MspInit+0x174>)
 8002f8c:	4b47      	ldr	r3, [pc, #284]	; (80030ac <HAL_ADC_MspInit+0x178>)
 8002f8e:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f90:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f92:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f9c:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fa2:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002fa4:	2320      	movs	r3, #32
 8002fa6:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002fa8:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002faa:	f7fe f80b 	bl	8000fc4 <HAL_DMA_Init>
 8002fae:	b9b0      	cbnz	r0, 8002fde <HAL_ADC_MspInit+0xaa>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002fb0:	4b3d      	ldr	r3, [pc, #244]	; (80030a8 <HAL_ADC_MspInit+0x174>)
 8002fb2:	63a3      	str	r3, [r4, #56]	; 0x38
 8002fb4:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	4611      	mov	r1, r2
 8002fba:	2012      	movs	r0, #18
 8002fbc:	f7fd ff7e 	bl	8000ebc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002fc0:	2012      	movs	r0, #18
 8002fc2:	f7fd ffaf 	bl	8000f24 <HAL_NVIC_EnableIRQ>
 8002fc6:	e7c5      	b.n	8002f54 <HAL_ADC_MspInit+0x20>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002fc8:	4b35      	ldr	r3, [pc, #212]	; (80030a0 <HAL_ADC_MspInit+0x16c>)
 8002fca:	695a      	ldr	r2, [r3, #20]
 8002fcc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002fd0:	615a      	str	r2, [r3, #20]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	9b00      	ldr	r3, [sp, #0]
 8002fdc:	e7c2      	b.n	8002f64 <HAL_ADC_MspInit+0x30>
      Error_Handler();
 8002fde:	f003 f9b3 	bl	8006348 <Error_Handler>
 8002fe2:	e7e5      	b.n	8002fb0 <HAL_ADC_MspInit+0x7c>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002fe4:	4a2d      	ldr	r2, [pc, #180]	; (800309c <HAL_ADC_MspInit+0x168>)
 8002fe6:	6813      	ldr	r3, [r2, #0]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d044      	beq.n	800307a <HAL_ADC_MspInit+0x146>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff0:	4b2b      	ldr	r3, [pc, #172]	; (80030a0 <HAL_ADC_MspInit+0x16c>)
 8002ff2:	695a      	ldr	r2, [r3, #20]
 8002ff4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002ff8:	615a      	str	r2, [r3, #20]
 8002ffa:	695a      	ldr	r2, [r3, #20]
 8002ffc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003000:	9203      	str	r2, [sp, #12]
 8003002:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003004:	695a      	ldr	r2, [r3, #20]
 8003006:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800300a:	615a      	str	r2, [r3, #20]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003012:	9304      	str	r3, [sp, #16]
 8003014:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = aVBRA_ADC2_IN2_Pin;
 8003016:	2620      	movs	r6, #32
 8003018:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800301a:	2703      	movs	r7, #3
 800301c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	2500      	movs	r5, #0
 8003020:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(aVBRA_ADC2_IN2_GPIO_Port, &GPIO_InitStruct);
 8003022:	a905      	add	r1, sp, #20
 8003024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003028:	f7fe fa14 	bl	8001454 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = aVBRB_ADC2_14_Pin|aSens_swSens_ADC2_IN15_Pin;
 800302c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003030:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003032:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003036:	a905      	add	r1, sp, #20
 8003038:	481a      	ldr	r0, [pc, #104]	; (80030a4 <HAL_ADC_MspInit+0x170>)
 800303a:	f7fe fa0b 	bl	8001454 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800303e:	481c      	ldr	r0, [pc, #112]	; (80030b0 <HAL_ADC_MspInit+0x17c>)
 8003040:	4b1c      	ldr	r3, [pc, #112]	; (80030b4 <HAL_ADC_MspInit+0x180>)
 8003042:	6003      	str	r3, [r0, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003044:	6045      	str	r5, [r0, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003046:	6085      	str	r5, [r0, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003048:	2380      	movs	r3, #128	; 0x80
 800304a:	60c3      	str	r3, [r0, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800304c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003050:	6103      	str	r3, [r0, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003056:	6143      	str	r3, [r0, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003058:	6186      	str	r6, [r0, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800305a:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800305c:	f7fd ffb2 	bl	8000fc4 <HAL_DMA_Init>
 8003060:	b9b0      	cbnz	r0, 8003090 <HAL_ADC_MspInit+0x15c>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8003062:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <HAL_ADC_MspInit+0x17c>)
 8003064:	63a3      	str	r3, [r4, #56]	; 0x38
 8003066:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003068:	2200      	movs	r2, #0
 800306a:	4611      	mov	r1, r2
 800306c:	2012      	movs	r0, #18
 800306e:	f7fd ff25 	bl	8000ebc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003072:	2012      	movs	r0, #18
 8003074:	f7fd ff56 	bl	8000f24 <HAL_NVIC_EnableIRQ>
}
 8003078:	e76c      	b.n	8002f54 <HAL_ADC_MspInit+0x20>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800307a:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <HAL_ADC_MspInit+0x16c>)
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003082:	615a      	str	r2, [r3, #20]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308a:	9302      	str	r3, [sp, #8]
 800308c:	9b02      	ldr	r3, [sp, #8]
 800308e:	e7af      	b.n	8002ff0 <HAL_ADC_MspInit+0xbc>
      Error_Handler();
 8003090:	f003 f95a 	bl	8006348 <Error_Handler>
 8003094:	e7e5      	b.n	8003062 <HAL_ADC_MspInit+0x12e>
 8003096:	bf00      	nop
 8003098:	50000100 	.word	0x50000100
 800309c:	20000044 	.word	0x20000044
 80030a0:	40021000 	.word	0x40021000
 80030a4:	48000400 	.word	0x48000400
 80030a8:	20000c00 	.word	0x20000c00
 80030ac:	40020008 	.word	0x40020008
 80030b0:	20000c44 	.word	0x20000c44
 80030b4:	4002001c 	.word	0x4002001c

080030b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80030b8:	b500      	push	{lr}
 80030ba:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030bc:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <MX_DMA_Init+0x40>)
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	f042 0201 	orr.w	r2, r2, #1
 80030c4:	615a      	str	r2, [r3, #20]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	9301      	str	r3, [sp, #4]
 80030ce:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80030d0:	2200      	movs	r2, #0
 80030d2:	4611      	mov	r1, r2
 80030d4:	200b      	movs	r0, #11
 80030d6:	f7fd fef1 	bl	8000ebc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80030da:	200b      	movs	r0, #11
 80030dc:	f7fd ff22 	bl	8000f24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80030e0:	2200      	movs	r2, #0
 80030e2:	4611      	mov	r1, r2
 80030e4:	200c      	movs	r0, #12
 80030e6:	f7fd fee9 	bl	8000ebc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80030ea:	200c      	movs	r0, #12
 80030ec:	f7fd ff1a 	bl	8000f24 <HAL_NVIC_EnableIRQ>

}
 80030f0:	b003      	add	sp, #12
 80030f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000

080030fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80030fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030fe:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003100:	2400      	movs	r4, #0
 8003102:	9405      	str	r4, [sp, #20]
 8003104:	9406      	str	r4, [sp, #24]
 8003106:	9407      	str	r4, [sp, #28]
 8003108:	9408      	str	r4, [sp, #32]
 800310a:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800310c:	4b41      	ldr	r3, [pc, #260]	; (8003214 <MX_GPIO_Init+0x118>)
 800310e:	695a      	ldr	r2, [r3, #20]
 8003110:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003114:	615a      	str	r2, [r3, #20]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800311c:	9201      	str	r2, [sp, #4]
 800311e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003126:	615a      	str	r2, [r3, #20]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800312e:	9202      	str	r2, [sp, #8]
 8003130:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003138:	615a      	str	r2, [r3, #20]
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003140:	9203      	str	r2, [sp, #12]
 8003142:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003144:	695a      	ldr	r2, [r3, #20]
 8003146:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800314a:	615a      	str	r2, [r3, #20]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003152:	9304      	str	r3, [sp, #16]
 8003154:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(oSens_swTHER_GPIO_Port, oSens_swTHER_Pin, GPIO_PIN_RESET);
 8003156:	4d30      	ldr	r5, [pc, #192]	; (8003218 <MX_GPIO_Init+0x11c>)
 8003158:	4622      	mov	r2, r4
 800315a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800315e:	4628      	mov	r0, r5
 8003160:	f7fe fa42 	bl	80015e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(oPLC_RESETN_GPIO_Port, oPLC_RESETN_Pin, GPIO_PIN_SET);
 8003164:	2201      	movs	r2, #1
 8003166:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800316a:	4628      	mov	r0, r5
 800316c:	f7fe fa3c 	bl	80015e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(oT_REQ_GPIO_Port, oT_REQ_Pin, GPIO_PIN_SET);
 8003170:	2201      	movs	r2, #1
 8003172:	4611      	mov	r1, r2
 8003174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003178:	f7fe fa36 	bl	80015e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, oLED_Pin|oRel_A_Reset_Pin|oRel_A_Set_Pin|o485_PWR_EN_Pin
 800317c:	4622      	mov	r2, r4
 800317e:	f641 11c2 	movw	r1, #6594	; 0x19c2
 8003182:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003186:	f7fe fa2f 	bl	80015e8 <HAL_GPIO_WritePin>
                          |oSens_swSEL_Pin|USART1_DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, oFAULT_RESET_Pin|oRel_B_Reset_Pin|oRel_B_Set_Pin|oSens_swDIAGEN_Pin
 800318a:	4e24      	ldr	r6, [pc, #144]	; (800321c <MX_GPIO_Init+0x120>)
 800318c:	4622      	mov	r2, r4
 800318e:	f243 6170 	movw	r1, #13936	; 0x3670
 8003192:	4630      	mov	r0, r6
 8003194:	f7fe fa28 	bl	80015e8 <HAL_GPIO_WritePin>
                          |oSens_IsON_2_Pin|oSens_IsON_1_Pin|oCurMod_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = oSens_swTHER_Pin|oPLC_RESETN_Pin;
 8003198:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800319c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800319e:	2701      	movs	r7, #1
 80031a0:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031a6:	a905      	add	r1, sp, #20
 80031a8:	4628      	mov	r0, r5
 80031aa:	f7fe f953 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = iPL_RX_ON_Pin;
 80031ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031b2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031b4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(iPL_RX_ON_GPIO_Port, &GPIO_InitStruct);
 80031b8:	a905      	add	r1, sp, #20
 80031ba:	4628      	mov	r0, r5
 80031bc:	f7fe f94a 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = oT_REQ_Pin|oLED_Pin|oRel_A_Reset_Pin|oRel_A_Set_Pin
 80031c0:	f641 13c3 	movw	r3, #6595	; 0x19c3
 80031c4:	9305      	str	r3, [sp, #20]
                          |o485_PWR_EN_Pin|oSens_swSEL_Pin|USART1_DE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c6:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ca:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031cc:	a905      	add	r1, sp, #20
 80031ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031d2:	f7fe f93f 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = iPL_TX_ON_Pin|iSens_swFAULT_Pin;
 80031d6:	f248 0310 	movw	r3, #32784	; 0x8010
 80031da:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031dc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e0:	a905      	add	r1, sp, #20
 80031e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031e6:	f7fe f935 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = iFAULTB_HOT_Pin|iFAULTB_COLD_Pin;
 80031ea:	f640 0304 	movw	r3, #2052	; 0x804
 80031ee:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031f0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f4:	a905      	add	r1, sp, #20
 80031f6:	4630      	mov	r0, r6
 80031f8:	f7fe f92c 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = oFAULT_RESET_Pin|oRel_B_Reset_Pin|oRel_B_Set_Pin|oSens_swDIAGEN_Pin
 80031fc:	f243 6370 	movw	r3, #13936	; 0x3670
 8003200:	9305      	str	r3, [sp, #20]
                          |oSens_IsON_2_Pin|oSens_IsON_1_Pin|oCurMod_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003202:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003206:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003208:	a905      	add	r1, sp, #20
 800320a:	4630      	mov	r0, r6
 800320c:	f7fe f922 	bl	8001454 <HAL_GPIO_Init>

}
 8003210:	b00b      	add	sp, #44	; 0x2c
 8003212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003214:	40021000 	.word	0x40021000
 8003218:	48000800 	.word	0x48000800
 800321c:	48000400 	.word	0x48000400

08003220 <_ZL19ST7580FrameChecksumP11ST7580Frame>:
* @brief  Computes the checksum of a frame
* @param  frame Input frame for timeout coumputing
* @retval None
*/
static void ST7580FrameChecksum(ST7580Frame* frame)
{
 8003220:	b410      	push	{r4}
  uint8_t i;
  
  frame->checksum = frame->command + frame->length; 
 8003222:	7883      	ldrb	r3, [r0, #2]
 8003224:	7844      	ldrb	r4, [r0, #1]
 8003226:	4423      	add	r3, r4
 8003228:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
  for (i = 0; i < frame->length; i++)
 800322c:	2300      	movs	r3, #0
 800322e:	429c      	cmp	r4, r3
 8003230:	d909      	bls.n	8003246 <_ZL19ST7580FrameChecksumP11ST7580Frame+0x26>
  {
    frame->checksum += frame->data[i];
 8003232:	18c2      	adds	r2, r0, r3
 8003234:	78d2      	ldrb	r2, [r2, #3]
 8003236:	f8b0 1102 	ldrh.w	r1, [r0, #258]	; 0x102
 800323a:	440a      	add	r2, r1
 800323c:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
  for (i = 0; i < frame->length; i++)
 8003240:	3301      	adds	r3, #1
 8003242:	b2db      	uxtb	r3, r3
 8003244:	e7f3      	b.n	800322e <_ZL19ST7580FrameChecksumP11ST7580Frame+0xe>
  }
}
 8003246:	f85d 4b04 	ldr.w	r4, [sp], #4
 800324a:	4770      	bx	lr

0800324c <_ZL16ST7580FrameReadyv>:
* @param  None
* @retval true if a frame has beeen received, false otherwise
*/
static bool ST7580FrameReady()
{
	if (ch.confirm_rx)
 800324c:	4b04      	ldr	r3, [pc, #16]	; (8003260 <_ZL16ST7580FrameReadyv+0x14>)
 800324e:	795b      	ldrb	r3, [r3, #5]
 8003250:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8003254:	b903      	cbnz	r3, 8003258 <_ZL16ST7580FrameReadyv+0xc>
	{
		ch.confirm_rx = false;
		return true;
	}
	return false;
}
 8003256:	4770      	bx	lr
		ch.confirm_rx = false;
 8003258:	4b01      	ldr	r3, [pc, #4]	; (8003260 <_ZL16ST7580FrameReadyv+0x14>)
 800325a:	2200      	movs	r2, #0
 800325c:	715a      	strb	r2, [r3, #5]
		return true;
 800325e:	e7fa      	b.n	8003256 <_ZL16ST7580FrameReadyv+0xa>
 8003260:	20000048 	.word	0x20000048

08003264 <_ZL17ST7580RecvConfirmv>:
* @retval The received confirm frame
*/
static ST7580Frame* ST7580RecvConfirm()
{
  return &(ch.confirm_frame);
}
 8003264:	4800      	ldr	r0, [pc, #0]	; (8003268 <_ZL17ST7580RecvConfirmv+0x4>)
 8003266:	4770      	bx	lr
 8003268:	20000178 	.word	0x20000178

0800326c <_Z41__static_initialization_and_destruction_0ii>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800326c:	2801      	cmp	r0, #1
 800326e:	d000      	beq.n	8003272 <_Z41__static_initialization_and_destruction_0ii+0x6>
 8003270:	4770      	bx	lr
 8003272:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003276:	4299      	cmp	r1, r3
 8003278:	d1fa      	bne.n	8003270 <_Z41__static_initialization_and_destruction_0ii+0x4>
 800327a:	b470      	push	{r4, r5, r6}
/*########################################################################################*/
/******************** KLASY ***************************************************************/      

  

  class M485E{
 800327c:	4a2d      	ldr	r2, [pc, #180]	; (8003334 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800327e:	2300      	movs	r3, #0
 8003280:	7113      	strb	r3, [r2, #4]
 8003282:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
 8003286:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800328a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800328c:	6413      	str	r3, [r2, #64]	; 0x40
 800328e:	6453      	str	r3, [r2, #68]	; 0x44
 8003290:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
 8003294:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
 8003298:	6713      	str	r3, [r2, #112]	; 0x70
 800329a:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
 800329e:	2101      	movs	r1, #1
 80032a0:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
 80032a4:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
 80032a8:	f882 3077 	strb.w	r3, [r2, #119]	; 0x77

uint16_t gADC1_Tab[5];  // [0]=IA; [1]=IB
uint16_t gADC2_Tab[5];  // [0]=UA; [1]=UB


  class MADC{
 80032ac:	4a22      	ldr	r2, [pc, #136]	; (8003338 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80032ae:	2105      	movs	r1, #5
 80032b0:	7011      	strb	r1, [r2, #0]
 80032b2:	8093      	strh	r3, [r2, #4]
 80032b4:	80d3      	strh	r3, [r2, #6]
 80032b6:	f44f 3648 	mov.w	r6, #204800	; 0x32000
 80032ba:	6096      	str	r6, [r2, #8]
 80032bc:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80032c0:	8195      	strh	r5, [r2, #12]
 80032c2:	81d3      	strh	r3, [r2, #14]
 80032c4:	f44f 147a 	mov.w	r4, #4096000	; 0x3e8000
 80032c8:	6114      	str	r4, [r2, #16]
 80032ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80032ce:	8290      	strh	r0, [r2, #20]
 80032d0:	6193      	str	r3, [r2, #24]
 80032d2:	8393      	strh	r3, [r2, #28]
 80032d4:	83d3      	strh	r3, [r2, #30]
 80032d6:	6216      	str	r6, [r2, #32]
 80032d8:	8495      	strh	r5, [r2, #36]	; 0x24
 80032da:	84d3      	strh	r3, [r2, #38]	; 0x26
 80032dc:	6294      	str	r4, [r2, #40]	; 0x28
 80032de:	8590      	strh	r0, [r2, #44]	; 0x2c
 80032e0:	6313      	str	r3, [r2, #48]	; 0x30
 80032e2:	8693      	strh	r3, [r2, #52]	; 0x34

/*########################################################################################*/
/******************** KLASY ***************************************************************/      

// byc moze FIFO ???
  class MBufCircular{
 80032e4:	4a15      	ldr	r2, [pc, #84]	; (800333c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80032e6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80032ea:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
//  if( gTXBuf_Index >= 100 ) gTXBuf_Index = 0;
    
}//---------------------------------------------------------------------------


  class MST7580{
 80032ee:	8793      	strh	r3, [r2, #60]	; 0x3c
 80032f0:	6453      	str	r3, [r2, #68]	; 0x44
 80032f2:	6493      	str	r3, [r2, #72]	; 0x48
 80032f4:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
 80032f8:	f882 304e 	strb.w	r3, [r2, #78]	; 0x4e
#else
    #define _Ith_value  260
#endif


  class MRelays{
 80032fc:	4a10      	ldr	r2, [pc, #64]	; (8003340 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	6053      	str	r3, [r2, #4]
 8003302:	8153      	strh	r3, [r2, #10]
 8003304:	8193      	strh	r3, [r2, #12]

enum EPwrSupSource: uint8_t{ NOT_KNOWN=0, A=1, B=2 };



  class MSystem{
 8003306:	4a0f      	ldr	r2, [pc, #60]	; (8003344 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8003308:	2003      	movs	r0, #3
 800330a:	8010      	strh	r0, [r2, #0]
 800330c:	7093      	strb	r3, [r2, #2]
 800330e:	70d1      	strb	r1, [r2, #3]
 8003310:	7113      	strb	r3, [r2, #4]
 8003312:	7153      	strb	r3, [r2, #5]
 8003314:	7193      	strb	r3, [r2, #6]
 8003316:	71d3      	strb	r3, [r2, #7]
 8003318:	210f      	movs	r1, #15
 800331a:	7211      	strb	r1, [r2, #8]
 800331c:	7253      	strb	r3, [r2, #9]
 800331e:	490a      	ldr	r1, [pc, #40]	; (8003348 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8003320:	60d1      	str	r1, [r2, #12]

#include "MFlash.h"

#define _SSD_TABSIZE_  8

  class MFlash_SSD{
 8003322:	4a0a      	ldr	r2, [pc, #40]	; (800334c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8003324:	213f      	movs	r1, #63	; 0x3f
 8003326:	6011      	str	r1, [r2, #0]
 8003328:	4909      	ldr	r1, [pc, #36]	; (8003350 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 800332a:	6051      	str	r1, [r2, #4]
 800332c:	6093      	str	r3, [r2, #8]
 800332e:	7313      	strb	r3, [r2, #12]
 8003330:	bc70      	pop	{r4, r5, r6}
 8003332:	4770      	bx	lr
 8003334:	200008a8 	.word	0x200008a8
 8003338:	20000920 	.word	0x20000920
 800333c:	20000a64 	.word	0x20000a64
 8003340:	20000a54 	.word	0x20000a54
 8003344:	20000ac4 	.word	0x20000ac4
 8003348:	21070a01 	.word	0x21070a01
 800334c:	20000970 	.word	0x20000970
 8003350:	0801f800 	.word	0x0801f800

08003354 <_ZL12ST7580TmoSethm>:
{
 8003354:	b510      	push	{r4, lr}
	ch.timeout[tmo_idx].tmo = tmo;
 8003356:	3001      	adds	r0, #1
 8003358:	4c03      	ldr	r4, [pc, #12]	; (8003368 <_ZL12ST7580TmoSethm+0x14>)
 800335a:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800335e:	6061      	str	r1, [r4, #4]
	ch.timeout[tmo_idx].tmo_start_time = HAL_GetTick();
 8003360:	f7fc ff76 	bl	8000250 <HAL_GetTick>
 8003364:	60a0      	str	r0, [r4, #8]
}
 8003366:	bd10      	pop	{r4, pc}
 8003368:	20000048 	.word	0x20000048

0800336c <_ZL16ST7580TmoExpiredh>:
{
 800336c:	b510      	push	{r4, lr}
 800336e:	4604      	mov	r4, r0
	time = HAL_GetTick();
 8003370:	f7fc ff6e 	bl	8000250 <HAL_GetTick>
	if (time >= ch.timeout[tmoIdx].tmo_start_time)
 8003374:	1c62      	adds	r2, r4, #1
 8003376:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <_ZL16ST7580TmoExpiredh+0x44>)
 8003378:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	4283      	cmp	r3, r0
 8003380:	d80a      	bhi.n	8003398 <_ZL16ST7580TmoExpiredh+0x2c>
		return (time - ch.timeout[tmoIdx].tmo_start_time) >= ch.timeout[tmoIdx].tmo;
 8003382:	1ac3      	subs	r3, r0, r3
 8003384:	4614      	mov	r4, r2
 8003386:	4a0a      	ldr	r2, [pc, #40]	; (80033b0 <_ZL16ST7580TmoExpiredh+0x44>)
 8003388:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 800338c:	6860      	ldr	r0, [r4, #4]
 800338e:	4283      	cmp	r3, r0
 8003390:	bf34      	ite	cc
 8003392:	2000      	movcc	r0, #0
 8003394:	2001      	movcs	r0, #1
}
 8003396:	bd10      	pop	{r4, pc}
		return (time + (0xFFFFFFFF - ch.timeout[tmoIdx].tmo_start_time) >= ch.timeout[tmoIdx].tmo); 
 8003398:	1ac3      	subs	r3, r0, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	3401      	adds	r4, #1
 800339e:	4804      	ldr	r0, [pc, #16]	; (80033b0 <_ZL16ST7580TmoExpiredh+0x44>)
 80033a0:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80033a4:	6860      	ldr	r0, [r4, #4]
 80033a6:	4283      	cmp	r3, r0
 80033a8:	bf34      	ite	cc
 80033aa:	2000      	movcc	r0, #0
 80033ac:	2001      	movcs	r0, #1
 80033ae:	e7f2      	b.n	8003396 <_ZL16ST7580TmoExpiredh+0x2a>
 80033b0:	20000048 	.word	0x20000048

080033b4 <_Z18SystemClock_Configv>:
{
 80033b4:	b530      	push	{r4, r5, lr}
 80033b6:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033b8:	2400      	movs	r4, #0
 80033ba:	940d      	str	r4, [sp, #52]	; 0x34
 80033bc:	940e      	str	r4, [sp, #56]	; 0x38
 80033be:	940f      	str	r4, [sp, #60]	; 0x3c
 80033c0:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033c2:	9407      	str	r4, [sp, #28]
 80033c4:	9408      	str	r4, [sp, #32]
 80033c6:	9409      	str	r4, [sp, #36]	; 0x24
 80033c8:	940a      	str	r4, [sp, #40]	; 0x28
 80033ca:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033cc:	9401      	str	r4, [sp, #4]
 80033ce:	9402      	str	r4, [sp, #8]
 80033d0:	9403      	str	r4, [sp, #12]
 80033d2:	9404      	str	r4, [sp, #16]
 80033d4:	9405      	str	r4, [sp, #20]
 80033d6:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033d8:	2502      	movs	r5, #2
 80033da:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033dc:	2301      	movs	r3, #1
 80033de:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033e0:	2310      	movs	r3, #16
 80033e2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033e4:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80033e6:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80033e8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80033ec:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033ee:	a80c      	add	r0, sp, #48	; 0x30
 80033f0:	f7fe f900 	bl	80015f4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033f4:	230f      	movs	r3, #15
 80033f6:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033f8:	9508      	str	r5, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033fa:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003400:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003402:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003404:	4629      	mov	r1, r5
 8003406:	a807      	add	r0, sp, #28
 8003408:	f7fe fc46 	bl	8001c98 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 800340c:	f241 0381 	movw	r3, #4225	; 0x1081
 8003410:	9301      	str	r3, [sp, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003412:	9403      	str	r4, [sp, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV32;
 8003414:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003418:	9305      	str	r3, [sp, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800341a:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800341c:	a801      	add	r0, sp, #4
 800341e:	f7fe fd41 	bl	8001ea4 <HAL_RCCEx_PeriphCLKConfig>
}
 8003422:	b017      	add	sp, #92	; 0x5c
 8003424:	bd30      	pop	{r4, r5, pc}
	...

08003428 <_Z12debRXBuf_addhh>:
void debRXBuf_add(uint8_t aCh, uint8_t aStep){
 8003428:	b410      	push	{r4}
  gRXBuf[ gRXBuf_Index ] = aCh;
 800342a:	4a08      	ldr	r2, [pc, #32]	; (800344c <_Z12debRXBuf_addhh+0x24>)
 800342c:	8813      	ldrh	r3, [r2, #0]
 800342e:	4c08      	ldr	r4, [pc, #32]	; (8003450 <_Z12debRXBuf_addhh+0x28>)
 8003430:	54e0      	strb	r0, [r4, r3]
  gRXStep[ gRXBuf_Index ] = aStep;
 8003432:	4808      	ldr	r0, [pc, #32]	; (8003454 <_Z12debRXBuf_addhh+0x2c>)
 8003434:	54c1      	strb	r1, [r0, r3]
  gRXBuf_Index = gRXBuf_Index + 1;
 8003436:	3301      	adds	r3, #1
 8003438:	b29b      	uxth	r3, r3
 800343a:	8013      	strh	r3, [r2, #0]
  if( gRXBuf_Index >= 100 ) gRXBuf_Index = 0;
 800343c:	2b63      	cmp	r3, #99	; 0x63
 800343e:	d902      	bls.n	8003446 <_Z12debRXBuf_addhh+0x1e>
 8003440:	4613      	mov	r3, r2
 8003442:	2200      	movs	r2, #0
 8003444:	801a      	strh	r2, [r3, #0]
}//---------------------------------------------------------------------------
 8003446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	200009ec 	.word	0x200009ec
 8003450:	20000988 	.word	0x20000988
 8003454:	200009f0 	.word	0x200009f0

08003458 <ST7580InitChannel>:
{
 8003458:	b082      	sub	sp, #8
	Timeout tmo_ini = {0,0};
 800345a:	2300      	movs	r3, #0
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	9301      	str	r3, [sp, #4]
	ch.ack_rx = false;
 8003460:	4a0e      	ldr	r2, [pc, #56]	; (800349c <ST7580InitChannel+0x44>)
 8003462:	7093      	strb	r3, [r2, #2]
	ch.status_rx = false;
 8003464:	7113      	strb	r3, [r2, #4]
	ch.confirm_rx = false;
 8003466:	7153      	strb	r3, [r2, #5]
	ch.local_frame_tx = false;
 8003468:	7193      	strb	r3, [r2, #6]
	ch.ack_tx = false;
 800346a:	71d3      	strb	r3, [r2, #7]
	ch.wait_ack = false;
 800346c:	7013      	strb	r3, [r2, #0]
	ch.wait_status = false; 
 800346e:	7053      	strb	r3, [r2, #1]
	for (i=0;i<N_TIMEOUTS;i++)
 8003470:	e00a      	b.n	8003488 <ST7580InitChannel+0x30>
		ch.timeout[i] = tmo_ini;
 8003472:	3301      	adds	r3, #1
 8003474:	4a09      	ldr	r2, [pc, #36]	; (800349c <ST7580InitChannel+0x44>)
 8003476:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800347a:	3204      	adds	r2, #4
 800347c:	a902      	add	r1, sp, #8
 800347e:	e911 0003 	ldmdb	r1, {r0, r1}
 8003482:	e882 0003 	stmia.w	r2, {r0, r1}
	for (i=0;i<N_TIMEOUTS;i++)
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b03      	cmp	r3, #3
 800348a:	d9f2      	bls.n	8003472 <ST7580InitChannel+0x1a>
	ch.ind_frames.rd_idx = 0;
 800348c:	4b03      	ldr	r3, [pc, #12]	; (800349c <ST7580InitChannel+0x44>)
 800348e:	2200      	movs	r2, #0
 8003490:	f883 284d 	strb.w	r2, [r3, #2125]	; 0x84d
	ch.ind_frames.wr_idx = 0;
 8003494:	f883 284c 	strb.w	r2, [r3, #2124]	; 0x84c
}
 8003498:	b002      	add	sp, #8
 800349a:	4770      	bx	lr
 800349c:	20000048 	.word	0x20000048

080034a0 <ST7580NextIndicationFrame>:
	if (ch.ind_frames.rd_idx != ch.ind_frames.wr_idx)
 80034a0:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <ST7580NextIndicationFrame+0x48>)
 80034a2:	f893 284d 	ldrb.w	r2, [r3, #2125]	; 0x84d
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	f893 384c 	ldrb.w	r3, [r3, #2124]	; 0x84c
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d018      	beq.n	80034e4 <ST7580NextIndicationFrame+0x44>
		ret_frame = &(ch.ind_frames.frames[ch.ind_frames.rd_idx++]);
 80034b2:	4a0d      	ldr	r2, [pc, #52]	; (80034e8 <ST7580NextIndicationFrame+0x48>)
 80034b4:	f892 384d 	ldrb.w	r3, [r2, #2125]	; 0x84d
 80034b8:	1c59      	adds	r1, r3, #1
 80034ba:	b2c9      	uxtb	r1, r1
 80034bc:	f882 184d 	strb.w	r1, [r2, #2125]	; 0x84d
 80034c0:	eb03 1383 	add.w	r3, r3, r3, lsl #6
 80034c4:	0098      	lsls	r0, r3, #2
 80034c6:	f500 700c 	add.w	r0, r0, #560	; 0x230
 80034ca:	4410      	add	r0, r2
 80034cc:	3004      	adds	r0, #4
		if (ch.ind_frames.rd_idx == IND_FRAMES_QUEUE_LEN)
 80034ce:	f892 384d 	ldrb.w	r3, [r2, #2125]	; 0x84d
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b06      	cmp	r3, #6
 80034d6:	d000      	beq.n	80034da <ST7580NextIndicationFrame+0x3a>
}
 80034d8:	4770      	bx	lr
			ch.ind_frames.rd_idx = 0;
 80034da:	4613      	mov	r3, r2
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 284d 	strb.w	r2, [r3, #2125]	; 0x84d
 80034e2:	4770      	bx	lr
	ST7580Frame *ret_frame = NULL;
 80034e4:	2000      	movs	r0, #0
	return ret_frame;
 80034e6:	e7f7      	b.n	80034d8 <ST7580NextIndicationFrame+0x38>
 80034e8:	20000048 	.word	0x20000048

080034ec <ST7580InterfaceInit>:
{
 80034ec:	b538      	push	{r3, r4, r5, lr}
            ST7580InitChannel();
 80034ee:	f7ff ffb3 	bl	8003458 <ST7580InitChannel>
    
    
  //+++ OBSLUGA PINOW DLA EXT.DRIVER +++++++++++++++++++++++++++++++++++
    
    public: void pinRESETN( int aPinState /*GPIO_PinState aPinState*/ ){
        HAL_GPIO_WritePin(PLM_GPIO_RESETN_PORT,PLM_GPIO_RESETN_PIN, (GPIO_PinState)aPinState );
 80034f2:	4c13      	ldr	r4, [pc, #76]	; (8003540 <ST7580InterfaceInit+0x54>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034fa:	4620      	mov	r0, r4
 80034fc:	f7fe f874 	bl	80015e8 <HAL_GPIO_WritePin>
            HAL_Delay( 1500 );
 8003500:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003504:	f7fc feaa 	bl	800025c <HAL_Delay>
 8003508:	2201      	movs	r2, #1
 800350a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800350e:	4620      	mov	r0, r4
 8003510:	f7fe f86a 	bl	80015e8 <HAL_GPIO_WritePin>
            waitCnt = 0;
 8003514:	2500      	movs	r5, #0
                                    rx_frame = ST7580NextIndicationFrame();
 8003516:	f7ff ffc3 	bl	80034a0 <ST7580NextIndicationFrame>
 800351a:	4604      	mov	r4, r0
                                    HAL_Delay(100);
 800351c:	2064      	movs	r0, #100	; 0x64
 800351e:	f7fc fe9d 	bl	800025c <HAL_Delay>
                                    if( waitCnt > 100) break;
 8003522:	2d64      	cmp	r5, #100	; 0x64
 8003524:	dc05      	bgt.n	8003532 <ST7580InterfaceInit+0x46>
                                    waitCnt += 1;
 8003526:	3501      	adds	r5, #1
            }while( (rx_frame==NULL)||(rx_frame->command != CMD_RESET_IND)  );
 8003528:	2c00      	cmp	r4, #0
 800352a:	d0f4      	beq.n	8003516 <ST7580InterfaceInit+0x2a>
 800352c:	78a3      	ldrb	r3, [r4, #2]
 800352e:	2b3e      	cmp	r3, #62	; 0x3e
 8003530:	d1f1      	bne.n	8003516 <ST7580InterfaceInit+0x2a>
        }while( (rx_frame==NULL)||(rx_frame->command != CMD_RESET_IND) );
 8003532:	2c00      	cmp	r4, #0
 8003534:	d0db      	beq.n	80034ee <ST7580InterfaceInit+0x2>
 8003536:	78a3      	ldrb	r3, [r4, #2]
 8003538:	2b3e      	cmp	r3, #62	; 0x3e
 800353a:	d1d8      	bne.n	80034ee <ST7580InterfaceInit+0x2>
}
 800353c:	bd38      	pop	{r3, r4, r5, pc}
 800353e:	bf00      	nop
 8003540:	48000800 	.word	0x48000800

08003544 <NucleoST7580TxInt>:
*/



void NucleoST7580TxInt(/*UART_HandleTypeDef* UartHandle*/)
{
 8003544:	b508      	push	{r3, lr}
	static TxIrqStatus step = SEND_STX;
	static uint8_t i = 0;
	
	// Send ack or nack, if requested  
	if (ch.ack_tx)
 8003546:	4b53      	ldr	r3, [pc, #332]	; (8003694 <NucleoST7580TxInt+0x150>)
 8003548:	79db      	ldrb	r3, [r3, #7]
 800354a:	b11b      	cbz	r3, 8003554 <NucleoST7580TxInt+0x10>
	{
          if( step != TX_DONE ){
 800354c:	4b52      	ldr	r3, [pc, #328]	; (8003698 <NucleoST7580TxInt+0x154>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b06      	cmp	r3, #6
 8003552:	d109      	bne.n	8003568 <NucleoST7580TxInt+0x24>
		step = TX_DONE;
                return;
          }
	}
	// Switch on tx status  
	switch(step)
 8003554:	4b50      	ldr	r3, [pc, #320]	; (8003698 <NucleoST7580TxInt+0x154>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b06      	cmp	r3, #6
 800355a:	d812      	bhi.n	8003582 <NucleoST7580TxInt+0x3e>
 800355c:	e8df f003 	tbb	[pc, r3]
 8003560:	45362112 	.word	0x45362112
 8003564:	7a6b      	.short	0x7a6b
 8003566:	8a          	.byte	0x8a
 8003567:	00          	.byte	0x00
                gST7580.sendUART8(ch.ack_tx_value, step| 0x80);
 8003568:	4b4a      	ldr	r3, [pc, #296]	; (8003694 <NucleoST7580TxInt+0x150>)
 800356a:	7a1a      	ldrb	r2, [r3, #8]
        //__HAL_UART_DISABLE_IT(mhUart,UART_IT_TXE);	// !!!!	
    }//-------------------------------------------------------------------------
    
    
    public: void sendUART8( uint8_t aCh, uint8_t aStep ){
        mTXBuf[0] = aCh;
 800356c:	4b4b      	ldr	r3, [pc, #300]	; (800369c <NucleoST7580TxInt+0x158>)
 800356e:	4619      	mov	r1, r3
 8003570:	f801 2f31 	strb.w	r2, [r1, #49]!
        HAL_StatusTypeDef uartRes = HAL_UART_Transmit_IT( mhUart, mTXBuf,  1 );
 8003574:	2201      	movs	r2, #1
 8003576:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003578:	f7fe ff46 	bl	8002408 <HAL_UART_Transmit_IT>
		step = TX_DONE;
 800357c:	4b46      	ldr	r3, [pc, #280]	; (8003698 <NucleoST7580TxInt+0x154>)
 800357e:	2206      	movs	r2, #6
 8003580:	701a      	strb	r2, [r3, #0]
			
			step = SEND_STX;
			i = 0;
			break;
	}
}
 8003582:	bd08      	pop	{r3, pc}
                        gST7580.sendUART8(ch.tx_frame.stx, step);
 8003584:	4b43      	ldr	r3, [pc, #268]	; (8003694 <NucleoST7580TxInt+0x150>)
 8003586:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
        mTXBuf[0] = aCh;
 800358a:	4b44      	ldr	r3, [pc, #272]	; (800369c <NucleoST7580TxInt+0x158>)
 800358c:	4619      	mov	r1, r3
 800358e:	f801 2f31 	strb.w	r2, [r1, #49]!
        HAL_StatusTypeDef uartRes = HAL_UART_Transmit_IT( mhUart, mTXBuf,  1 );
 8003592:	2201      	movs	r2, #1
 8003594:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003596:	f7fe ff37 	bl	8002408 <HAL_UART_Transmit_IT>
			step = SEND_LENGTH;
 800359a:	4b3f      	ldr	r3, [pc, #252]	; (8003698 <NucleoST7580TxInt+0x154>)
 800359c:	2201      	movs	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]
			break;
 80035a0:	e7ef      	b.n	8003582 <NucleoST7580TxInt+0x3e>
        HAL_GPIO_WritePin(PLM_GPIO_T_REQ_PORT2,PLM_GPIO_T_REQ_PIN2, (GPIO_PinState)aPinState );
 80035a2:	2201      	movs	r2, #1
 80035a4:	4611      	mov	r1, r2
 80035a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035aa:	f7fe f81d 	bl	80015e8 <HAL_GPIO_WritePin>
                        gST7580.sendUART8(ch.tx_frame.length, step);
 80035ae:	4b39      	ldr	r3, [pc, #228]	; (8003694 <NucleoST7580TxInt+0x150>)
 80035b0:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
        mTXBuf[0] = aCh;
 80035b4:	4b39      	ldr	r3, [pc, #228]	; (800369c <NucleoST7580TxInt+0x158>)
 80035b6:	4619      	mov	r1, r3
 80035b8:	f801 2f31 	strb.w	r2, [r1, #49]!
        HAL_StatusTypeDef uartRes = HAL_UART_Transmit_IT( mhUart, mTXBuf,  1 );
 80035bc:	2201      	movs	r2, #1
 80035be:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80035c0:	f7fe ff22 	bl	8002408 <HAL_UART_Transmit_IT>
			step = SEND_COMMAND;
 80035c4:	4b34      	ldr	r3, [pc, #208]	; (8003698 <NucleoST7580TxInt+0x154>)
 80035c6:	2202      	movs	r2, #2
 80035c8:	701a      	strb	r2, [r3, #0]
			break;
 80035ca:	e7da      	b.n	8003582 <NucleoST7580TxInt+0x3e>
                        gST7580.sendUART8(ch.tx_frame.command, step);
 80035cc:	4b31      	ldr	r3, [pc, #196]	; (8003694 <NucleoST7580TxInt+0x150>)
 80035ce:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
        mTXBuf[0] = aCh;
 80035d2:	4b32      	ldr	r3, [pc, #200]	; (800369c <NucleoST7580TxInt+0x158>)
 80035d4:	4619      	mov	r1, r3
 80035d6:	f801 2f31 	strb.w	r2, [r1, #49]!
        HAL_StatusTypeDef uartRes = HAL_UART_Transmit_IT( mhUart, mTXBuf,  1 );
 80035da:	2201      	movs	r2, #1
 80035dc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80035de:	f7fe ff13 	bl	8002408 <HAL_UART_Transmit_IT>
			step = SEND_DATA;
 80035e2:	4b2d      	ldr	r3, [pc, #180]	; (8003698 <NucleoST7580TxInt+0x154>)
 80035e4:	2203      	movs	r2, #3
 80035e6:	701a      	strb	r2, [r3, #0]
			break; 
 80035e8:	e7cb      	b.n	8003582 <NucleoST7580TxInt+0x3e>
			if (i == ch.tx_frame.length)
 80035ea:	4b2a      	ldr	r3, [pc, #168]	; (8003694 <NucleoST7580TxInt+0x150>)
 80035ec:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80035f0:	4b2b      	ldr	r3, [pc, #172]	; (80036a0 <NucleoST7580TxInt+0x15c>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d00f      	beq.n	8003618 <NucleoST7580TxInt+0xd4>
                          gST7580.sendUART8(ch.tx_frame.data[i++], step);
 80035f8:	1c59      	adds	r1, r3, #1
 80035fa:	4a29      	ldr	r2, [pc, #164]	; (80036a0 <NucleoST7580TxInt+0x15c>)
 80035fc:	7011      	strb	r1, [r2, #0]
 80035fe:	4a25      	ldr	r2, [pc, #148]	; (8003694 <NucleoST7580TxInt+0x150>)
 8003600:	4413      	add	r3, r2
 8003602:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
        mTXBuf[0] = aCh;
 8003606:	4b25      	ldr	r3, [pc, #148]	; (800369c <NucleoST7580TxInt+0x158>)
 8003608:	4619      	mov	r1, r3
 800360a:	f801 2f31 	strb.w	r2, [r1, #49]!
        HAL_StatusTypeDef uartRes = HAL_UART_Transmit_IT( mhUart, mTXBuf,  1 );
 800360e:	2201      	movs	r2, #1
 8003610:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003612:	f7fe fef9 	bl	8002408 <HAL_UART_Transmit_IT>
        
        debTXBuf_add( aCh, aStep );
        
    }//-------------------------------------------------------------------------
 8003616:	e7b4      	b.n	8003582 <NucleoST7580TxInt+0x3e>
                            gST7580.sendUART8(ch.tx_frame.checksum, step);
 8003618:	4b1e      	ldr	r3, [pc, #120]	; (8003694 <NucleoST7580TxInt+0x150>)
 800361a:	f893 212e 	ldrb.w	r2, [r3, #302]	; 0x12e
        mTXBuf[0] = aCh;
 800361e:	4b1f      	ldr	r3, [pc, #124]	; (800369c <NucleoST7580TxInt+0x158>)
 8003620:	4619      	mov	r1, r3
 8003622:	f801 2f31 	strb.w	r2, [r1, #49]!
        HAL_StatusTypeDef uartRes = HAL_UART_Transmit_IT( mhUart, mTXBuf,  1 );
 8003626:	2201      	movs	r2, #1
 8003628:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800362a:	f7fe feed 	bl	8002408 <HAL_UART_Transmit_IT>
                            step = SEND_CHECKSUM_MSB;
 800362e:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <NucleoST7580TxInt+0x154>)
 8003630:	2205      	movs	r2, #5
 8003632:	701a      	strb	r2, [r3, #0]
 8003634:	e7a5      	b.n	8003582 <NucleoST7580TxInt+0x3e>
                        gST7580.sendUART8(ch.tx_frame.checksum, step);
 8003636:	4b17      	ldr	r3, [pc, #92]	; (8003694 <NucleoST7580TxInt+0x150>)
 8003638:	f893 212e 	ldrb.w	r2, [r3, #302]	; 0x12e
        mTXBuf[0] = aCh;
 800363c:	4b17      	ldr	r3, [pc, #92]	; (800369c <NucleoST7580TxInt+0x158>)
 800363e:	4619      	mov	r1, r3
 8003640:	f801 2f31 	strb.w	r2, [r1, #49]!
        HAL_StatusTypeDef uartRes = HAL_UART_Transmit_IT( mhUart, mTXBuf,  1 );
 8003644:	2201      	movs	r2, #1
 8003646:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003648:	f7fe fede 	bl	8002408 <HAL_UART_Transmit_IT>
			step = SEND_CHECKSUM_MSB;
 800364c:	4b12      	ldr	r3, [pc, #72]	; (8003698 <NucleoST7580TxInt+0x154>)
 800364e:	2205      	movs	r2, #5
 8003650:	701a      	strb	r2, [r3, #0]
			break;
 8003652:	e796      	b.n	8003582 <NucleoST7580TxInt+0x3e>
                        gST7580.sendUART8(ch.tx_frame.checksum >> 8, step);
 8003654:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <NucleoST7580TxInt+0x150>)
 8003656:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 800365a:	0a1b      	lsrs	r3, r3, #8
        mTXBuf[0] = aCh;
 800365c:	480f      	ldr	r0, [pc, #60]	; (800369c <NucleoST7580TxInt+0x158>)
 800365e:	4601      	mov	r1, r0
 8003660:	f801 3f31 	strb.w	r3, [r1, #49]!
        HAL_StatusTypeDef uartRes = HAL_UART_Transmit_IT( mhUart, mTXBuf,  1 );
 8003664:	2201      	movs	r2, #1
 8003666:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003668:	f7fe fece 	bl	8002408 <HAL_UART_Transmit_IT>
			step = TX_DONE;
 800366c:	4b0a      	ldr	r3, [pc, #40]	; (8003698 <NucleoST7580TxInt+0x154>)
 800366e:	2206      	movs	r2, #6
 8003670:	701a      	strb	r2, [r3, #0]
			break;
 8003672:	e786      	b.n	8003582 <NucleoST7580TxInt+0x3e>
			if (!ch.ack_tx)
 8003674:	4b07      	ldr	r3, [pc, #28]	; (8003694 <NucleoST7580TxInt+0x150>)
 8003676:	79db      	ldrb	r3, [r3, #7]
 8003678:	b943      	cbnz	r3, 800368c <NucleoST7580TxInt+0x148>
				ch.local_frame_tx = true;
 800367a:	4b06      	ldr	r3, [pc, #24]	; (8003694 <NucleoST7580TxInt+0x150>)
 800367c:	2201      	movs	r2, #1
 800367e:	719a      	strb	r2, [r3, #6]
			step = SEND_STX;
 8003680:	2300      	movs	r3, #0
 8003682:	4a05      	ldr	r2, [pc, #20]	; (8003698 <NucleoST7580TxInt+0x154>)
 8003684:	7013      	strb	r3, [r2, #0]
			i = 0;
 8003686:	4a06      	ldr	r2, [pc, #24]	; (80036a0 <NucleoST7580TxInt+0x15c>)
 8003688:	7013      	strb	r3, [r2, #0]
			break;
 800368a:	e77a      	b.n	8003582 <NucleoST7580TxInt+0x3e>
				ch.ack_tx = false;
 800368c:	4b01      	ldr	r3, [pc, #4]	; (8003694 <NucleoST7580TxInt+0x150>)
 800368e:	2200      	movs	r2, #0
 8003690:	71da      	strb	r2, [r3, #7]
 8003692:	e7f5      	b.n	8003680 <NucleoST7580TxInt+0x13c>
 8003694:	20000048 	.word	0x20000048
 8003698:	2000089a 	.word	0x2000089a
 800369c:	20000a64 	.word	0x20000a64
 80036a0:	20000899 	.word	0x20000899

080036a4 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback( UART_HandleTypeDef *huart ){ 
 80036a4:	b570      	push	{r4, r5, r6, lr}
 80036a6:	4604      	mov	r4, r0
  if( huart == g485E.mhUart   )  g485E.onIT_TX(); 
 80036a8:	4b34      	ldr	r3, [pc, #208]	; (800377c <HAL_UART_TxCpltCallback+0xd8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4283      	cmp	r3, r0
 80036ae:	d004      	beq.n	80036ba <HAL_UART_TxCpltCallback+0x16>
  if( huart == gST7580.mhUart )  gST7580.onIT_TX();
 80036b0:	4b33      	ldr	r3, [pc, #204]	; (8003780 <HAL_UART_TxCpltCallback+0xdc>)
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	42a3      	cmp	r3, r4
 80036b6:	d05e      	beq.n	8003776 <HAL_UART_TxCpltCallback+0xd2>
 }//----------------------------------------------------------------------------
 80036b8:	bd70      	pop	{r4, r5, r6, pc}
    public: void onIT_TX(){
      // wyczysc bufor
      
      
      //ITM_EVENT8( 2, mIsEN_to_0 );
      if( mIsEN_to_0 != 0 ){
 80036ba:	4b30      	ldr	r3, [pc, #192]	; (800377c <HAL_UART_TxCpltCallback+0xd8>)
 80036bc:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80036c0:	b11b      	cbz	r3, 80036ca <HAL_UART_TxCpltCallback+0x26>
        // ITM_EVENT8( 2, mIsEN_to_0 );
        mIsEN_to_0 = 0;
 80036c2:	4b2e      	ldr	r3, [pc, #184]	; (800377c <HAL_UART_TxCpltCallback+0xd8>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
      }
      
      
      bufRemoveN(  mhUart->TxXferSize );
 80036ca:	4b2c      	ldr	r3, [pc, #176]	; (800377c <HAL_UART_TxCpltCallback+0xd8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
    //--------------------------------------------------------------------------
    // kasuje N elementow (po nadaniu po UART)
    // zwraca liczbe skasowanych elementow
    int bufRemoveN( int aN ){

      for( int i=0; i<aN; i++ ){
 80036d2:	2000      	movs	r0, #0
 80036d4:	4286      	cmp	r6, r0
 80036d6:	dd13      	ble.n	8003700 <HAL_UART_TxCpltCallback+0x5c>
        // sprawdz czy mozna usunac
        if( mIndexSTART == mIndexSTOP ) return i;       // bufor pusty
 80036d8:	4b28      	ldr	r3, [pc, #160]	; (800377c <HAL_UART_TxCpltCallback+0xd8>)
 80036da:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80036de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d00c      	beq.n	8003700 <HAL_UART_TxCpltCallback+0x5c>
        int startTmp = (mIndexSTART+1) % cBufLength;    // probne kasowanie
 80036e6:	3201      	adds	r2, #1
 80036e8:	4b26      	ldr	r3, [pc, #152]	; (8003784 <HAL_UART_TxCpltCallback+0xe0>)
 80036ea:	fb83 5302 	smull	r5, r3, r3, r2
 80036ee:	111b      	asrs	r3, r3, #4
 80036f0:	2532      	movs	r5, #50	; 0x32
 80036f2:	fb05 2313 	mls	r3, r5, r3, r2
        
        // kasuj element
        mIndexSTART = startTmp;                         // kasuj element
 80036f6:	4a21      	ldr	r2, [pc, #132]	; (800377c <HAL_UART_TxCpltCallback+0xd8>)
 80036f8:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
      for( int i=0; i<aN; i++ ){
 80036fc:	3001      	adds	r0, #1
 80036fe:	e7e9      	b.n	80036d4 <HAL_UART_TxCpltCallback+0x30>
      if( mIndexSTART == mIndexSTOP ) return false;
 8003700:	4a1e      	ldr	r2, [pc, #120]	; (800377c <HAL_UART_TxCpltCallback+0xd8>)
 8003702:	f892 3037 	ldrb.w	r3, [r2, #55]	; 0x37
 8003706:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800370a:	4293      	cmp	r3, r2
 800370c:	d01c      	beq.n	8003748 <HAL_UART_TxCpltCallback+0xa4>
      if( mIndexSTART < mIndexSTOP )  (*aCnt) = mIndexSTOP - mIndexSTART;
 800370e:	d218      	bcs.n	8003742 <HAL_UART_TxCpltCallback+0x9e>
 8003710:	1ad5      	subs	r5, r2, r3
      (*aBuf) = &(mBuf[mIndexSTART]);
 8003712:	491a      	ldr	r1, [pc, #104]	; (800377c <HAL_UART_TxCpltCallback+0xd8>)
 8003714:	4419      	add	r1, r3
 8003716:	3105      	adds	r1, #5
      return true;
 8003718:	2301      	movs	r3, #1
         if( res ){
 800371a:	b9c3      	cbnz	r3, 800374e <HAL_UART_TxCpltCallback+0xaa>
       if( mIsEN_to_0 <= 0 ){
 800371c:	4b17      	ldr	r3, [pc, #92]	; (800377c <HAL_UART_TxCpltCallback+0xd8>)
 800371e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1c4      	bne.n	80036b0 <HAL_UART_TxCpltCallback+0xc>
      return ( mIndexSTART == mIndexSTOP );
 8003726:	4b15      	ldr	r3, [pc, #84]	; (800377c <HAL_UART_TxCpltCallback+0xd8>)
 8003728:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800372c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
          if( isEmpty() ){
 8003730:	429a      	cmp	r2, r3
 8003732:	d1bd      	bne.n	80036b0 <HAL_UART_TxCpltCallback+0xc>
            _o485E_EN = 0;
 8003734:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003738:	7d53      	ldrb	r3, [r2, #21]
 800373a:	f36f 1304 	bfc	r3, #4, #1
 800373e:	7553      	strb	r3, [r2, #21]
    }//-------------------------------------------------------------------------
 8003740:	e7b6      	b.n	80036b0 <HAL_UART_TxCpltCallback+0xc>
      else                            (*aCnt) = cBufLength - mIndexSTART;
 8003742:	f1c3 0532 	rsb	r5, r3, #50	; 0x32
 8003746:	e7e4      	b.n	8003712 <HAL_UART_TxCpltCallback+0x6e>
         int cnt = 0;
 8003748:	2500      	movs	r5, #0
      if( mIndexSTART == mIndexSTOP ) return false;
 800374a:	462b      	mov	r3, r5
 800374c:	e7e5      	b.n	800371a <HAL_UART_TxCpltCallback+0x76>
             _o485E_EN = 1;
 800374e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003752:	7d53      	ldrb	r3, [r2, #21]
 8003754:	f043 0310 	orr.w	r3, r3, #16
 8003758:	7553      	strb	r3, [r2, #21]
             HAL_StatusTypeDef uartRes = HAL_UART_Transmit_IT( mhUart, buf,  cnt );
 800375a:	4e08      	ldr	r6, [pc, #32]	; (800377c <HAL_UART_TxCpltCallback+0xd8>)
 800375c:	b2aa      	uxth	r2, r5
 800375e:	6830      	ldr	r0, [r6, #0]
 8003760:	f7fe fe52 	bl	8002408 <HAL_UART_Transmit_IT>
             mIsEN_to_0 += cnt;
 8003764:	f896 3077 	ldrb.w	r3, [r6, #119]	; 0x77
 8003768:	442b      	add	r3, r5
 800376a:	f886 3077 	strb.w	r3, [r6, #119]	; 0x77
             if( uartRes == HAL_OK ){   
 800376e:	2800      	cmp	r0, #0
 8003770:	d1d4      	bne.n	800371c <HAL_UART_TxCpltCallback+0x78>
               mSendingTXCnt = cnt;
 8003772:	63f5      	str	r5, [r6, #60]	; 0x3c
 8003774:	e7d2      	b.n	800371c <HAL_UART_TxCpltCallback+0x78>
        NucleoST7580TxInt( /*mhUart*/ );
 8003776:	f7ff fee5 	bl	8003544 <NucleoST7580TxInt>
 800377a:	e79d      	b.n	80036b8 <HAL_UART_TxCpltCallback+0x14>
 800377c:	200008a8 	.word	0x200008a8
 8003780:	20000a64 	.word	0x20000a64
 8003784:	51eb851f 	.word	0x51eb851f

08003788 <_ZL15ST7580SendFrameP11ST7580Frame>:
* @brief  Send frame state machine
* @param  frame Frame to be sent
* @retval Next iteration state machine's step
*/
static int ST7580SendFrame(ST7580Frame *frame)
{
 8003788:	b508      	push	{r3, lr}
	static TxStatus step = TXREQ_LOW;
	int ret = ST7580_TX_IN_PROGRESS;
	static bool firstIter = true;
		
	// Switch on tx state machine step */
	switch(step)
 800378a:	4b50      	ldr	r3, [pc, #320]	; (80038cc <_ZL15ST7580SendFrameP11ST7580Frame+0x144>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b03      	cmp	r3, #3
 8003790:	f200 8092 	bhi.w	80038b8 <_ZL15ST7580SendFrameP11ST7580Frame+0x130>
 8003794:	e8df f003 	tbb	[pc, r3]
 8003798:	63531502 	.word	0x63531502
	{
		// Pull down the TXREQ */
		case TXREQ_LOW:
			// Frame not sent yet */
			ch.local_frame_tx = false;
 800379c:	4b4c      	ldr	r3, [pc, #304]	; (80038d0 <_ZL15ST7580SendFrameP11ST7580Frame+0x148>)
 800379e:	2200      	movs	r2, #0
 80037a0:	719a      	strb	r2, [r3, #6]
			// Status frame not received yet */
			ch.status_rx = false;	
 80037a2:	711a      	strb	r2, [r3, #4]
        HAL_GPIO_WritePin(PLM_GPIO_T_REQ_PORT2,PLM_GPIO_T_REQ_PIN2, (GPIO_PinState)aPinState );
 80037a4:	2101      	movs	r1, #1
 80037a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037aa:	f7fd ff1d 	bl	80015e8 <HAL_GPIO_WritePin>
			// Pull down the T_REQ */
			//HAL_GPIO_WritePin(PLM_GPIO_T_REQ_PORT,PLM_GPIO_T_REQ_PIN,GPIO_PIN_RESET);				
                        gST7580.pinTREQ( 0 );
			// Initialize the status message rcv time */
			ST7580TmoSet(STATUS_MSG_TMO_IDX, STATUS_MSG_TMO);
 80037ae:	21c8      	movs	r1, #200	; 0xc8
 80037b0:	2002      	movs	r0, #2
 80037b2:	f7ff fdcf 	bl	8003354 <_ZL12ST7580TmoSethm>
			// Wait for status frame */
			step = WAIT_STATUS_FRAME;
 80037b6:	4b45      	ldr	r3, [pc, #276]	; (80038cc <_ZL15ST7580SendFrameP11ST7580Frame+0x144>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	701a      	strb	r2, [r3, #0]
	int ret = ST7580_TX_IN_PROGRESS;
 80037bc:	f04f 30ff 	mov.w	r0, #4294967295
				firstIter = true;
			}
			break;
	}		
	return ret;
}
 80037c0:	bd08      	pop	{r3, pc}
			if (firstIter)
 80037c2:	4b44      	ldr	r3, [pc, #272]	; (80038d4 <_ZL15ST7580SendFrameP11ST7580Frame+0x14c>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	b12b      	cbz	r3, 80037d4 <_ZL15ST7580SendFrameP11ST7580Frame+0x4c>
				ch.wait_status = true;
 80037c8:	4b41      	ldr	r3, [pc, #260]	; (80038d0 <_ZL15ST7580SendFrameP11ST7580Frame+0x148>)
 80037ca:	2201      	movs	r2, #1
 80037cc:	705a      	strb	r2, [r3, #1]
				firstIter = false;
 80037ce:	4b41      	ldr	r3, [pc, #260]	; (80038d4 <_ZL15ST7580SendFrameP11ST7580Frame+0x14c>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
			if (!ST7580TmoExpired(STATUS_MSG_TMO_IDX))
 80037d4:	2002      	movs	r0, #2
 80037d6:	f7ff fdc9 	bl	800336c <_ZL16ST7580TmoExpiredh>
 80037da:	b9f8      	cbnz	r0, 800381c <_ZL15ST7580SendFrameP11ST7580Frame+0x94>
				if (ch.status_rx)
 80037dc:	4b3c      	ldr	r3, [pc, #240]	; (80038d0 <_ZL15ST7580SendFrameP11ST7580Frame+0x148>)
 80037de:	791b      	ldrb	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d06c      	beq.n	80038be <_ZL15ST7580SendFrameP11ST7580Frame+0x136>
					if (ch.status_value & BUSY_MASK)
 80037e4:	4b3a      	ldr	r3, [pc, #232]	; (80038d0 <_ZL15ST7580SendFrameP11ST7580Frame+0x148>)
 80037e6:	7a5b      	ldrb	r3, [r3, #9]
 80037e8:	f013 0f06 	tst.w	r3, #6
 80037ec:	d00e      	beq.n	800380c <_ZL15ST7580SendFrameP11ST7580Frame+0x84>
 80037ee:	2201      	movs	r2, #1
 80037f0:	4611      	mov	r1, r2
 80037f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037f6:	f7fd fef7 	bl	80015e8 <HAL_GPIO_WritePin>
						step = TXREQ_LOW;
 80037fa:	4b34      	ldr	r3, [pc, #208]	; (80038cc <_ZL15ST7580SendFrameP11ST7580Frame+0x144>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
						ret =  ST7580_TXERR_BUSY;
 8003800:	f06f 000c 	mvn.w	r0, #12
					firstIter = true;				
 8003804:	4b33      	ldr	r3, [pc, #204]	; (80038d4 <_ZL15ST7580SendFrameP11ST7580Frame+0x14c>)
 8003806:	2201      	movs	r2, #1
 8003808:	701a      	strb	r2, [r3, #0]
 800380a:	e7d9      	b.n	80037c0 <_ZL15ST7580SendFrameP11ST7580Frame+0x38>
							step = WAIT_TX_FRAME_DONE;
 800380c:	4b2f      	ldr	r3, [pc, #188]	; (80038cc <_ZL15ST7580SendFrameP11ST7580Frame+0x144>)
 800380e:	2202      	movs	r2, #2
 8003810:	701a      	strb	r2, [r3, #0]
      NucleoST7580TxInt();
 8003812:	f7ff fe97 	bl	8003544 <NucleoST7580TxInt>
	int ret = ST7580_TX_IN_PROGRESS;
 8003816:	f04f 30ff 	mov.w	r0, #4294967295
    }//-------------------------------------------------------------------------
 800381a:	e7f3      	b.n	8003804 <_ZL15ST7580SendFrameP11ST7580Frame+0x7c>
        HAL_GPIO_WritePin(PLM_GPIO_T_REQ_PORT2,PLM_GPIO_T_REQ_PIN2, (GPIO_PinState)aPinState );
 800381c:	2201      	movs	r2, #1
 800381e:	4611      	mov	r1, r2
 8003820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003824:	f7fd fee0 	bl	80015e8 <HAL_GPIO_WritePin>
				step = TXREQ_LOW;
 8003828:	2300      	movs	r3, #0
 800382a:	4a28      	ldr	r2, [pc, #160]	; (80038cc <_ZL15ST7580SendFrameP11ST7580Frame+0x144>)
 800382c:	7013      	strb	r3, [r2, #0]
				ch.wait_status = false;
 800382e:	4a28      	ldr	r2, [pc, #160]	; (80038d0 <_ZL15ST7580SendFrameP11ST7580Frame+0x148>)
 8003830:	7053      	strb	r3, [r2, #1]
				firstIter = true;
 8003832:	4b28      	ldr	r3, [pc, #160]	; (80038d4 <_ZL15ST7580SendFrameP11ST7580Frame+0x14c>)
 8003834:	2201      	movs	r2, #1
 8003836:	701a      	strb	r2, [r3, #0]
				ret =  ST7580_TXERR_NO_STATUS;
 8003838:	f06f 000a 	mvn.w	r0, #10
 800383c:	e7c0      	b.n	80037c0 <_ZL15ST7580SendFrameP11ST7580Frame+0x38>
			if (ch.local_frame_tx == true)
 800383e:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <_ZL15ST7580SendFrameP11ST7580Frame+0x148>)
 8003840:	799b      	ldrb	r3, [r3, #6]
 8003842:	b913      	cbnz	r3, 800384a <_ZL15ST7580SendFrameP11ST7580Frame+0xc2>
	int ret = ST7580_TX_IN_PROGRESS;
 8003844:	f04f 30ff 	mov.w	r0, #4294967295
 8003848:	e7ba      	b.n	80037c0 <_ZL15ST7580SendFrameP11ST7580Frame+0x38>
				ST7580TmoSet(ACK_TMO_IDX, ACK_TMO);
 800384a:	2128      	movs	r1, #40	; 0x28
 800384c:	2001      	movs	r0, #1
 800384e:	f7ff fd81 	bl	8003354 <_ZL12ST7580TmoSethm>
				step = WAIT_ACK;
 8003852:	4b1e      	ldr	r3, [pc, #120]	; (80038cc <_ZL15ST7580SendFrameP11ST7580Frame+0x144>)
 8003854:	2203      	movs	r2, #3
 8003856:	701a      	strb	r2, [r3, #0]
	int ret = ST7580_TX_IN_PROGRESS;
 8003858:	f04f 30ff 	mov.w	r0, #4294967295
 800385c:	e7b0      	b.n	80037c0 <_ZL15ST7580SendFrameP11ST7580Frame+0x38>
			if (firstIter)
 800385e:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <_ZL15ST7580SendFrameP11ST7580Frame+0x14c>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	b12b      	cbz	r3, 8003870 <_ZL15ST7580SendFrameP11ST7580Frame+0xe8>
				ch.wait_ack = true;
 8003864:	4b1a      	ldr	r3, [pc, #104]	; (80038d0 <_ZL15ST7580SendFrameP11ST7580Frame+0x148>)
 8003866:	2201      	movs	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]
				firstIter = false;
 800386a:	4b1a      	ldr	r3, [pc, #104]	; (80038d4 <_ZL15ST7580SendFrameP11ST7580Frame+0x14c>)
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
			if (!ST7580TmoExpired(ACK_TMO_IDX))
 8003870:	2001      	movs	r0, #1
 8003872:	f7ff fd7b 	bl	800336c <_ZL16ST7580TmoExpiredh>
 8003876:	b9a0      	cbnz	r0, 80038a2 <_ZL15ST7580SendFrameP11ST7580Frame+0x11a>
				if (ch.ack_rx)
 8003878:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <_ZL15ST7580SendFrameP11ST7580Frame+0x148>)
 800387a:	789b      	ldrb	r3, [r3, #2]
 800387c:	b313      	cbz	r3, 80038c4 <_ZL15ST7580SendFrameP11ST7580Frame+0x13c>
					ch.ack_rx = false;					
 800387e:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <_ZL15ST7580SendFrameP11ST7580Frame+0x148>)
 8003880:	2200      	movs	r2, #0
 8003882:	709a      	strb	r2, [r3, #2]
					ret = (ch.ack_rx_value == ST7580_ACK)?(ST7580_OK):(ST7580_TXERR_NAK);					
 8003884:	78db      	ldrb	r3, [r3, #3]
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b06      	cmp	r3, #6
 800388a:	d008      	beq.n	800389e <_ZL15ST7580SendFrameP11ST7580Frame+0x116>
 800388c:	f06f 0009 	mvn.w	r0, #9
					step = TXREQ_LOW;
 8003890:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <_ZL15ST7580SendFrameP11ST7580Frame+0x144>)
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
					firstIter = true;
 8003896:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <_ZL15ST7580SendFrameP11ST7580Frame+0x14c>)
 8003898:	2201      	movs	r2, #1
 800389a:	701a      	strb	r2, [r3, #0]
 800389c:	e790      	b.n	80037c0 <_ZL15ST7580SendFrameP11ST7580Frame+0x38>
					ret = (ch.ack_rx_value == ST7580_ACK)?(ST7580_OK):(ST7580_TXERR_NAK);					
 800389e:	4610      	mov	r0, r2
 80038a0:	e7f6      	b.n	8003890 <_ZL15ST7580SendFrameP11ST7580Frame+0x108>
				step = TXREQ_LOW;
 80038a2:	2300      	movs	r3, #0
 80038a4:	4a09      	ldr	r2, [pc, #36]	; (80038cc <_ZL15ST7580SendFrameP11ST7580Frame+0x144>)
 80038a6:	7013      	strb	r3, [r2, #0]
				ch.wait_ack = false;
 80038a8:	4a09      	ldr	r2, [pc, #36]	; (80038d0 <_ZL15ST7580SendFrameP11ST7580Frame+0x148>)
 80038aa:	7013      	strb	r3, [r2, #0]
				firstIter = true;
 80038ac:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <_ZL15ST7580SendFrameP11ST7580Frame+0x14c>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	701a      	strb	r2, [r3, #0]
				ret = ST7580_TXERR_ACK_TMO;				
 80038b2:	f06f 000b 	mvn.w	r0, #11
 80038b6:	e783      	b.n	80037c0 <_ZL15ST7580SendFrameP11ST7580Frame+0x38>
	switch(step)
 80038b8:	f04f 30ff 	mov.w	r0, #4294967295
 80038bc:	e780      	b.n	80037c0 <_ZL15ST7580SendFrameP11ST7580Frame+0x38>
	int ret = ST7580_TX_IN_PROGRESS;
 80038be:	f04f 30ff 	mov.w	r0, #4294967295
 80038c2:	e77d      	b.n	80037c0 <_ZL15ST7580SendFrameP11ST7580Frame+0x38>
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295
	return ret;
 80038c8:	e77a      	b.n	80037c0 <_ZL15ST7580SendFrameP11ST7580Frame+0x38>
 80038ca:	bf00      	nop
 80038cc:	2000089b 	.word	0x2000089b
 80038d0:	20000048 	.word	0x20000048
 80038d4:	20000008 	.word	0x20000008

080038d8 <ST7580MibWrite>:
{
 80038d8:	b510      	push	{r4, lr}
  ch.tx_frame.stx = ST7580_STX_02;
 80038da:	4c1f      	ldr	r4, [pc, #124]	; (8003958 <ST7580MibWrite+0x80>)
 80038dc:	2302      	movs	r3, #2
 80038de:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  ch.tx_frame.command = CMD_MIB_WRITE_REQ;
 80038e2:	2308      	movs	r3, #8
 80038e4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  ch.tx_frame.length = lenBuf + 1;
 80038e8:	1c53      	adds	r3, r2, #1
 80038ea:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  ch.tx_frame.data[0] = indexMib;
 80038ee:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
  memcpy(&(ch.tx_frame.data[1]), bufMib, lenBuf);
 80038f2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80038f6:	f002 fee3 	bl	80066c0 <memcpy>
  ST7580FrameChecksum(&(ch.tx_frame));
 80038fa:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80038fe:	f7ff fc8f 	bl	8003220 <_ZL19ST7580FrameChecksumP11ST7580Frame>
	while ((ret=ST7580SendFrame(&(ch.tx_frame))) == ST7580_TX_IN_PROGRESS);
 8003902:	4816      	ldr	r0, [pc, #88]	; (800395c <ST7580MibWrite+0x84>)
 8003904:	f7ff ff40 	bl	8003788 <_ZL15ST7580SendFrameP11ST7580Frame>
 8003908:	4604      	mov	r4, r0
 800390a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800390e:	d0f8      	beq.n	8003902 <ST7580MibWrite+0x2a>
	if (ret != ST7580_OK)
 8003910:	b108      	cbz	r0, 8003916 <ST7580MibWrite+0x3e>
}
 8003912:	4620      	mov	r0, r4
 8003914:	bd10      	pop	{r4, pc}
  ST7580TmoSet(CMD_TMO_IDX, CMD_TMO);
 8003916:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800391a:	2003      	movs	r0, #3
 800391c:	f7ff fd1a 	bl	8003354 <_ZL12ST7580TmoSethm>
	while(!ST7580FrameReady() && !ST7580TmoExpired(CMD_TMO_IDX)){};
 8003920:	f7ff fc94 	bl	800324c <_ZL16ST7580FrameReadyv>
 8003924:	b920      	cbnz	r0, 8003930 <ST7580MibWrite+0x58>
 8003926:	2003      	movs	r0, #3
 8003928:	f7ff fd20 	bl	800336c <_ZL16ST7580TmoExpiredh>
 800392c:	2800      	cmp	r0, #0
 800392e:	d0f7      	beq.n	8003920 <ST7580MibWrite+0x48>
  if (ST7580TmoExpired(CMD_TMO_IDX))
 8003930:	2003      	movs	r0, #3
 8003932:	f7ff fd1b 	bl	800336c <_ZL16ST7580TmoExpiredh>
 8003936:	b958      	cbnz	r0, 8003950 <ST7580MibWrite+0x78>
  rxframe = ST7580RecvConfirm();
 8003938:	f7ff fc94 	bl	8003264 <_ZL17ST7580RecvConfirmv>
  if (rxframe->command == CMD_MIB_WRITE_ERR)
 800393c:	7883      	ldrb	r3, [r0, #2]
 800393e:	2b0b      	cmp	r3, #11
 8003940:	d004      	beq.n	800394c <ST7580MibWrite+0x74>
  else if (rxframe->command != CMD_MIB_WRITE_CNF)
 8003942:	2b09      	cmp	r3, #9
 8003944:	d0e5      	beq.n	8003912 <ST7580MibWrite+0x3a>
    return ST7580_ERR_CONFIRM;
 8003946:	f06f 0401 	mvn.w	r4, #1
 800394a:	e7e2      	b.n	8003912 <ST7580MibWrite+0x3a>
    return rxframe->data[0];
 800394c:	78c4      	ldrb	r4, [r0, #3]
 800394e:	e7e0      	b.n	8003912 <ST7580MibWrite+0x3a>
    return ST7580_ERR_TIMEOUT;
 8003950:	f06f 0403 	mvn.w	r4, #3
 8003954:	e7dd      	b.n	8003912 <ST7580MibWrite+0x3a>
 8003956:	bf00      	nop
 8003958:	20000048 	.word	0x20000048
 800395c:	20000074 	.word	0x20000074

08003960 <ST7580DlData>:
{
 8003960:	b538      	push	{r3, r4, r5, lr}
	if (dataLen > DL_DATALEN_MAX)
 8003962:	2af2      	cmp	r2, #242	; 0xf2
 8003964:	d840      	bhi.n	80039e8 <ST7580DlData+0x88>
 8003966:	461d      	mov	r5, r3
  ch.tx_frame.stx = ST7580_STX_02;
 8003968:	4c24      	ldr	r4, [pc, #144]	; (80039fc <ST7580DlData+0x9c>)
 800396a:	2302      	movs	r3, #2
 800396c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  ch.tx_frame.command = CMD_DL_DATA_REQ;
 8003970:	2350      	movs	r3, #80	; 0x50
 8003972:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  ch.tx_frame.length = dataLen + 1;
 8003976:	1c53      	adds	r3, r2, #1
 8003978:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  ch.tx_frame.data[0] = plmOpts;	
 800397c:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
  memcpy(&(ch.tx_frame.data[offset]), dataBuf, dataLen);
 8003980:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003984:	f002 fe9c 	bl	80066c0 <memcpy>
  ST7580FrameChecksum(&(ch.tx_frame));
 8003988:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800398c:	f7ff fc48 	bl	8003220 <_ZL19ST7580FrameChecksumP11ST7580Frame>
	while ((ret=ST7580SendFrame(&(ch.tx_frame))) == ST7580_TX_IN_PROGRESS);
 8003990:	481b      	ldr	r0, [pc, #108]	; (8003a00 <ST7580DlData+0xa0>)
 8003992:	f7ff fef9 	bl	8003788 <_ZL15ST7580SendFrameP11ST7580Frame>
 8003996:	4604      	mov	r4, r0
 8003998:	f1b0 3fff 	cmp.w	r0, #4294967295
 800399c:	d0f8      	beq.n	8003990 <ST7580DlData+0x30>
	if (ret != ST7580_OK)
 800399e:	b108      	cbz	r0, 80039a4 <ST7580DlData+0x44>
}
 80039a0:	4620      	mov	r0, r4
 80039a2:	bd38      	pop	{r3, r4, r5, pc}
  ST7580TmoSet(CMD_TMO_IDX, CMD_TMO);
 80039a4:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80039a8:	2003      	movs	r0, #3
 80039aa:	f7ff fcd3 	bl	8003354 <_ZL12ST7580TmoSethm>
	while(!ST7580FrameReady() && !ST7580TmoExpired(CMD_TMO_IDX)){};
 80039ae:	f7ff fc4d 	bl	800324c <_ZL16ST7580FrameReadyv>
 80039b2:	b920      	cbnz	r0, 80039be <ST7580DlData+0x5e>
 80039b4:	2003      	movs	r0, #3
 80039b6:	f7ff fcd9 	bl	800336c <_ZL16ST7580TmoExpiredh>
 80039ba:	2800      	cmp	r0, #0
 80039bc:	d0f7      	beq.n	80039ae <ST7580DlData+0x4e>
  if (ST7580TmoExpired(CMD_TMO_IDX))
 80039be:	2003      	movs	r0, #3
 80039c0:	f7ff fcd4 	bl	800336c <_ZL16ST7580TmoExpiredh>
 80039c4:	b998      	cbnz	r0, 80039ee <ST7580DlData+0x8e>
  rxframe = ST7580RecvConfirm();
 80039c6:	f7ff fc4d 	bl	8003264 <_ZL17ST7580RecvConfirmv>
  if (rxframe->command == CMD_DL_DATA_ERR)
 80039ca:	7883      	ldrb	r3, [r0, #2]
 80039cc:	2b53      	cmp	r3, #83	; 0x53
 80039ce:	d009      	beq.n	80039e4 <ST7580DlData+0x84>
  else if (rxframe->command != CMD_DL_DATA_CNF)
 80039d0:	2b51      	cmp	r3, #81	; 0x51
 80039d2:	d10f      	bne.n	80039f4 <ST7580DlData+0x94>
  if (confData)
 80039d4:	2d00      	cmp	r5, #0
 80039d6:	d0e3      	beq.n	80039a0 <ST7580DlData+0x40>
    memcpy(confData, rxframe->data, 5);
 80039d8:	f850 3f03 	ldr.w	r3, [r0, #3]!
 80039dc:	602b      	str	r3, [r5, #0]
 80039de:	7903      	ldrb	r3, [r0, #4]
 80039e0:	712b      	strb	r3, [r5, #4]
 80039e2:	e7dd      	b.n	80039a0 <ST7580DlData+0x40>
    return rxframe->data[0];
 80039e4:	78c4      	ldrb	r4, [r0, #3]
 80039e6:	e7db      	b.n	80039a0 <ST7580DlData+0x40>
		return ST7580_ERR_ARGS;
 80039e8:	f06f 0405 	mvn.w	r4, #5
 80039ec:	e7d8      	b.n	80039a0 <ST7580DlData+0x40>
    return ST7580_ERR_TIMEOUT;
 80039ee:	f06f 0403 	mvn.w	r4, #3
 80039f2:	e7d5      	b.n	80039a0 <ST7580DlData+0x40>
    return ST7580_ERR_CONFIRM;
 80039f4:	f06f 0401 	mvn.w	r4, #1
 80039f8:	e7d2      	b.n	80039a0 <ST7580DlData+0x40>
 80039fa:	bf00      	nop
 80039fc:	20000048 	.word	0x20000048
 8003a00:	20000074 	.word	0x20000074

08003a04 <_ZL19ST7580RcvLocalFrame11RxIrqStatush>:
{
 8003a04:	b538      	push	{r3, r4, r5, lr}
 8003a06:	4604      	mov	r4, r0
	switch(step)
 8003a08:	1e83      	subs	r3, r0, #2
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d818      	bhi.n	8003a40 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x3c>
 8003a0e:	e8df f003 	tbb	[pc, r3]
 8003a12:	1803      	.short	0x1803
 8003a14:	644d      	.short	0x644d
 8003a16:	6f          	.byte	0x6f
 8003a17:	00          	.byte	0x00
			len = c;
 8003a18:	4b51      	ldr	r3, [pc, #324]	; (8003b60 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x15c>)
 8003a1a:	7019      	strb	r1, [r3, #0]
			ch.confirm_frame.length = len;
 8003a1c:	4b51      	ldr	r3, [pc, #324]	; (8003b64 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x160>)
 8003a1e:	f883 1131 	strb.w	r1, [r3, #305]	; 0x131
			ch.ind_frames.frames[ch.ind_frames.wr_idx].length = len;
 8003a22:	f893 284c 	ldrb.w	r2, [r3, #2124]	; 0x84c
 8003a26:	eb02 1282 	add.w	r2, r2, r2, lsl #6
 8003a2a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8003a2e:	f883 1235 	strb.w	r1, [r3, #565]	; 0x235
			checksum = c;
 8003a32:	4b4d      	ldr	r3, [pc, #308]	; (8003b68 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x164>)
 8003a34:	8019      	strh	r1, [r3, #0]
			ST7580TmoSet(IC_TMO_IDX,IC_TMO);
 8003a36:	210a      	movs	r1, #10
 8003a38:	2000      	movs	r0, #0
 8003a3a:	f7ff fc8b 	bl	8003354 <_ZL12ST7580TmoSethm>
			step = RCV_COMMAND;
 8003a3e:	2003      	movs	r0, #3
}
 8003a40:	bd38      	pop	{r3, r4, r5, pc}
			if (IS_INDICATION(c))
 8003a42:	293e      	cmp	r1, #62	; 0x3e
 8003a44:	d010      	beq.n	8003a68 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x64>
 8003a46:	2926      	cmp	r1, #38	; 0x26
 8003a48:	d00e      	beq.n	8003a68 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x64>
 8003a4a:	2952      	cmp	r1, #82	; 0x52
 8003a4c:	d00c      	beq.n	8003a68 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x64>
 8003a4e:	295a      	cmp	r1, #90	; 0x5a
 8003a50:	d00a      	beq.n	8003a68 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x64>
 8003a52:	2956      	cmp	r1, #86	; 0x56
 8003a54:	d008      	beq.n	8003a68 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x64>
 8003a56:	295e      	cmp	r1, #94	; 0x5e
 8003a58:	d006      	beq.n	8003a68 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x64>
				rcv_indication = false;
 8003a5a:	4b44      	ldr	r3, [pc, #272]	; (8003b6c <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x168>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	701a      	strb	r2, [r3, #0]
				local_frame = &(ch.confirm_frame);
 8003a60:	4b43      	ldr	r3, [pc, #268]	; (8003b70 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x16c>)
 8003a62:	4a44      	ldr	r2, [pc, #272]	; (8003b74 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x170>)
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e00e      	b.n	8003a86 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x82>
				rcv_indication = true;
 8003a68:	4b40      	ldr	r3, [pc, #256]	; (8003b6c <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x168>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	701a      	strb	r2, [r3, #0]
				local_frame = &(ch.ind_frames.frames[ch.ind_frames.wr_idx]);
 8003a6e:	4a3d      	ldr	r2, [pc, #244]	; (8003b64 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x160>)
 8003a70:	f892 384c 	ldrb.w	r3, [r2, #2124]	; 0x84c
 8003a74:	eb03 1383 	add.w	r3, r3, r3, lsl #6
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003a7e:	4413      	add	r3, r2
 8003a80:	3304      	adds	r3, #4
 8003a82:	4a3b      	ldr	r2, [pc, #236]	; (8003b70 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x16c>)
 8003a84:	6013      	str	r3, [r2, #0]
			local_frame->command = c;
 8003a86:	4c3a      	ldr	r4, [pc, #232]	; (8003b70 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x16c>)
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	7099      	strb	r1, [r3, #2]
			checksum += c;
 8003a8c:	4a36      	ldr	r2, [pc, #216]	; (8003b68 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x164>)
 8003a8e:	8813      	ldrh	r3, [r2, #0]
 8003a90:	4419      	add	r1, r3
 8003a92:	8011      	strh	r1, [r2, #0]
			i = 0;
 8003a94:	2000      	movs	r0, #0
 8003a96:	4b38      	ldr	r3, [pc, #224]	; (8003b78 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x174>)
 8003a98:	7018      	strb	r0, [r3, #0]
			ST7580TmoSet(IC_TMO_IDX,IC_TMO);		
 8003a9a:	210a      	movs	r1, #10
 8003a9c:	f7ff fc5a 	bl	8003354 <_ZL12ST7580TmoSethm>
			if (local_frame->length == 0)
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	785b      	ldrb	r3, [r3, #1]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d157      	bne.n	8003b58 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x154>
				step = RCV_CHECKSUM_LSB;
 8003aa8:	2005      	movs	r0, #5
 8003aaa:	e7c9      	b.n	8003a40 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x3c>
			local_frame->data[i++] = c;
 8003aac:	4b30      	ldr	r3, [pc, #192]	; (8003b70 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x16c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4d31      	ldr	r5, [pc, #196]	; (8003b78 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x174>)
 8003ab2:	782a      	ldrb	r2, [r5, #0]
 8003ab4:	1c50      	adds	r0, r2, #1
 8003ab6:	7028      	strb	r0, [r5, #0]
 8003ab8:	4413      	add	r3, r2
 8003aba:	70d9      	strb	r1, [r3, #3]
			checksum += c;
 8003abc:	4a2a      	ldr	r2, [pc, #168]	; (8003b68 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x164>)
 8003abe:	8813      	ldrh	r3, [r2, #0]
 8003ac0:	4419      	add	r1, r3
 8003ac2:	8011      	strh	r1, [r2, #0]
			ST7580TmoSet(IC_TMO_IDX,IC_TMO);
 8003ac4:	210a      	movs	r1, #10
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	f7ff fc44 	bl	8003354 <_ZL12ST7580TmoSethm>
			if (i==len)
 8003acc:	782a      	ldrb	r2, [r5, #0]
 8003ace:	4b24      	ldr	r3, [pc, #144]	; (8003b60 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x15c>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d042      	beq.n	8003b5c <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x158>
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	e7b2      	b.n	8003a40 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x3c>
			local_frame->checksum = c;
 8003ada:	4b25      	ldr	r3, [pc, #148]	; (8003b70 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x16c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	b289      	uxth	r1, r1
 8003ae0:	f8a3 1102 	strh.w	r1, [r3, #258]	; 0x102
			ST7580TmoSet(IC_TMO_IDX,IC_TMO);
 8003ae4:	210a      	movs	r1, #10
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	f7ff fc34 	bl	8003354 <_ZL12ST7580TmoSethm>
			step = RCV_CHECKSUM_MSB;
 8003aec:	2006      	movs	r0, #6
			break;
 8003aee:	e7a7      	b.n	8003a40 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x3c>
			local_frame->checksum |= ((uint16_t)(c<<8));	
 8003af0:	4b1f      	ldr	r3, [pc, #124]	; (8003b70 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x16c>)
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	f8b2 3102 	ldrh.w	r3, [r2, #258]	; 0x102
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003afe:	f8a2 1102 	strh.w	r1, [r2, #258]	; 0x102
			ch.ack_tx = true;
 8003b02:	4b18      	ldr	r3, [pc, #96]	; (8003b64 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x160>)
 8003b04:	2101      	movs	r1, #1
 8003b06:	71d9      	strb	r1, [r3, #7]
			if (local_frame->checksum == checksum)
 8003b08:	f8b2 3102 	ldrh.w	r3, [r2, #258]	; 0x102
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	4a16      	ldr	r2, [pc, #88]	; (8003b68 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x164>)
 8003b10:	8812      	ldrh	r2, [r2, #0]
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d006      	beq.n	8003b24 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x120>
				ch.ack_tx_value = ST7580_NAK;
 8003b16:	4b13      	ldr	r3, [pc, #76]	; (8003b64 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x160>)
 8003b18:	2215      	movs	r2, #21
 8003b1a:	721a      	strb	r2, [r3, #8]
      NucleoST7580TxInt();
 8003b1c:	f7ff fd12 	bl	8003544 <NucleoST7580TxInt>
			step = RCV_FIRST_BYTE;
 8003b20:	2000      	movs	r0, #0
			break;
 8003b22:	e78d      	b.n	8003a40 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x3c>
				if (!rcv_indication)
 8003b24:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x168>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	b92b      	cbnz	r3, 8003b36 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x132>
					ch.confirm_rx = true;
 8003b2a:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x160>)
 8003b2c:	7159      	strb	r1, [r3, #5]
				ch.ack_tx_value = ST7580_ACK;
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x160>)
 8003b30:	2206      	movs	r2, #6
 8003b32:	721a      	strb	r2, [r3, #8]
 8003b34:	e7f2      	b.n	8003b1c <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x118>
					ch.ind_frames.wr_idx++;				
 8003b36:	4a0b      	ldr	r2, [pc, #44]	; (8003b64 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x160>)
 8003b38:	f892 384c 	ldrb.w	r3, [r2, #2124]	; 0x84c
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f882 384c 	strb.w	r3, [r2, #2124]	; 0x84c
					if (ch.ind_frames.wr_idx == IND_FRAMES_QUEUE_LEN)
 8003b44:	f892 384c 	ldrb.w	r3, [r2, #2124]	; 0x84c
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b06      	cmp	r3, #6
 8003b4c:	d1ef      	bne.n	8003b2e <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x12a>
						ch.ind_frames.wr_idx = 0;
 8003b4e:	4613      	mov	r3, r2
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 284c 	strb.w	r2, [r3, #2124]	; 0x84c
 8003b56:	e7ea      	b.n	8003b2e <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x12a>
				step = RCV_DATA;
 8003b58:	2004      	movs	r0, #4
 8003b5a:	e771      	b.n	8003a40 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x3c>
				step = RCV_CHECKSUM_LSB;
 8003b5c:	2005      	movs	r0, #5
 8003b5e:	e76f      	b.n	8003a40 <_ZL19ST7580RcvLocalFrame11RxIrqStatush+0x3c>
 8003b60:	200008a2 	.word	0x200008a2
 8003b64:	20000048 	.word	0x20000048
 8003b68:	200008a4 	.word	0x200008a4
 8003b6c:	200008a0 	.word	0x200008a0
 8003b70:	2000089c 	.word	0x2000089c
 8003b74:	20000178 	.word	0x20000178
 8003b78:	200008a1 	.word	0x200008a1

08003b7c <NucleoST7580RxInt>:
{
 8003b7c:	b538      	push	{r3, r4, r5, lr}
 8003b7e:	4604      	mov	r4, r0
	if (ST7580TmoExpired(IC_TMO_IDX))
 8003b80:	2000      	movs	r0, #0
 8003b82:	f7ff fbf3 	bl	800336c <_ZL16ST7580TmoExpiredh>
 8003b86:	b110      	cbz	r0, 8003b8e <NucleoST7580RxInt+0x12>
		step = RCV_FIRST_BYTE;
 8003b88:	4b2d      	ldr	r3, [pc, #180]	; (8003c40 <NucleoST7580RxInt+0xc4>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	701a      	strb	r2, [r3, #0]
	debRXBuf_add( c, step ); // !!!!!!!!!!!!!!!!!!!!!
 8003b8e:	4d2c      	ldr	r5, [pc, #176]	; (8003c40 <NucleoST7580RxInt+0xc4>)
 8003b90:	7829      	ldrb	r1, [r5, #0]
 8003b92:	4620      	mov	r0, r4
 8003b94:	f7ff fc48 	bl	8003428 <_Z12debRXBuf_addhh>
	switch(step)
 8003b98:	7828      	ldrb	r0, [r5, #0]
 8003b9a:	b138      	cbz	r0, 8003bac <NucleoST7580RxInt+0x30>
 8003b9c:	2801      	cmp	r0, #1
 8003b9e:	d045      	beq.n	8003c2c <NucleoST7580RxInt+0xb0>
			step = ST7580RcvLocalFrame(step, c);
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	f7ff ff2f 	bl	8003a04 <_ZL19ST7580RcvLocalFrame11RxIrqStatush>
 8003ba6:	4b26      	ldr	r3, [pc, #152]	; (8003c40 <NucleoST7580RxInt+0xc4>)
 8003ba8:	7018      	strb	r0, [r3, #0]
}
 8003baa:	e047      	b.n	8003c3c <NucleoST7580RxInt+0xc0>
			switch(c)
 8003bac:	2c15      	cmp	r4, #21
 8003bae:	d019      	beq.n	8003be4 <NucleoST7580RxInt+0x68>
 8003bb0:	d822      	bhi.n	8003bf8 <NucleoST7580RxInt+0x7c>
 8003bb2:	2c03      	cmp	r4, #3
 8003bb4:	d814      	bhi.n	8003be0 <NucleoST7580RxInt+0x64>
 8003bb6:	2c02      	cmp	r4, #2
 8003bb8:	d333      	bcc.n	8003c22 <NucleoST7580RxInt+0xa6>
					ch.confirm_frame.stx = c;
 8003bba:	4b22      	ldr	r3, [pc, #136]	; (8003c44 <NucleoST7580RxInt+0xc8>)
 8003bbc:	f883 4130 	strb.w	r4, [r3, #304]	; 0x130
					ch.ind_frames.frames[ch.ind_frames.wr_idx].stx = c;
 8003bc0:	f893 284c 	ldrb.w	r2, [r3, #2124]	; 0x84c
 8003bc4:	eb02 1282 	add.w	r2, r2, r2, lsl #6
 8003bc8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8003bcc:	f883 4234 	strb.w	r4, [r3, #564]	; 0x234
					ST7580TmoSet(IC_TMO_IDX,IC_TMO);
 8003bd0:	210a      	movs	r1, #10
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	f7ff fbbe 	bl	8003354 <_ZL12ST7580TmoSethm>
					step = RCV_LENGTH;
 8003bd8:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <NucleoST7580RxInt+0xc4>)
 8003bda:	2202      	movs	r2, #2
 8003bdc:	701a      	strb	r2, [r3, #0]
					break;
 8003bde:	e02d      	b.n	8003c3c <NucleoST7580RxInt+0xc0>
 8003be0:	2c06      	cmp	r4, #6
 8003be2:	d11e      	bne.n	8003c22 <NucleoST7580RxInt+0xa6>
					if(ch.wait_ack)
 8003be4:	4b17      	ldr	r3, [pc, #92]	; (8003c44 <NucleoST7580RxInt+0xc8>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	b17b      	cbz	r3, 8003c0a <NucleoST7580RxInt+0x8e>
						ch.ack_rx = true;
 8003bea:	4b16      	ldr	r3, [pc, #88]	; (8003c44 <NucleoST7580RxInt+0xc8>)
 8003bec:	2201      	movs	r2, #1
 8003bee:	709a      	strb	r2, [r3, #2]
						ch.ack_rx_value = c;
 8003bf0:	70dc      	strb	r4, [r3, #3]
						ch.wait_ack = false;
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
 8003bf6:	e021      	b.n	8003c3c <NucleoST7580RxInt+0xc0>
 8003bf8:	2c3f      	cmp	r4, #63	; 0x3f
 8003bfa:	d112      	bne.n	8003c22 <NucleoST7580RxInt+0xa6>
					if (ch.wait_status)
 8003bfc:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <NucleoST7580RxInt+0xc8>)
 8003bfe:	785b      	ldrb	r3, [r3, #1]
 8003c00:	b93b      	cbnz	r3, 8003c12 <NucleoST7580RxInt+0x96>
						ch.wait_ack = false;
 8003c02:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <NucleoST7580RxInt+0xc8>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	701a      	strb	r2, [r3, #0]
 8003c08:	e018      	b.n	8003c3c <NucleoST7580RxInt+0xc0>
						ch.wait_status = false;
 8003c0a:	4b0e      	ldr	r3, [pc, #56]	; (8003c44 <NucleoST7580RxInt+0xc8>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	705a      	strb	r2, [r3, #1]
 8003c10:	e014      	b.n	8003c3c <NucleoST7580RxInt+0xc0>
						ST7580TmoSet(IC_TMO_IDX,IC_TMO);
 8003c12:	210a      	movs	r1, #10
 8003c14:	2000      	movs	r0, #0
 8003c16:	f7ff fb9d 	bl	8003354 <_ZL12ST7580TmoSethm>
						step = RCV_STATUS_VALUE;
 8003c1a:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <NucleoST7580RxInt+0xc4>)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	701a      	strb	r2, [r3, #0]
 8003c20:	e00c      	b.n	8003c3c <NucleoST7580RxInt+0xc0>
					ch.wait_status = false;
 8003c22:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <NucleoST7580RxInt+0xc8>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	705a      	strb	r2, [r3, #1]
					ch.wait_ack = false;
 8003c28:	701a      	strb	r2, [r3, #0]
					break;
 8003c2a:	e007      	b.n	8003c3c <NucleoST7580RxInt+0xc0>
			ch.status_value = c;
 8003c2c:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <NucleoST7580RxInt+0xc8>)
 8003c2e:	725c      	strb	r4, [r3, #9]
			ch.status_rx = true;
 8003c30:	2201      	movs	r2, #1
 8003c32:	711a      	strb	r2, [r3, #4]
			step = RCV_FIRST_BYTE;
 8003c34:	2200      	movs	r2, #0
 8003c36:	4902      	ldr	r1, [pc, #8]	; (8003c40 <NucleoST7580RxInt+0xc4>)
 8003c38:	700a      	strb	r2, [r1, #0]
			ch.wait_status = false;
 8003c3a:	705a      	strb	r2, [r3, #1]
}
 8003c3c:	bd38      	pop	{r3, r4, r5, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000898 	.word	0x20000898
 8003c44:	20000048 	.word	0x20000048

08003c48 <_ZN7MST75809initModemEv>:
/*########################################################################################*/



//-----------------------------------------------------------------------------
void MST7580::initModem(){
 8003c48:	b510      	push	{r4, lr}
 8003c4a:	4604      	mov	r4, r0
              
  ST7580InterfaceInit();
 8003c4c:	f7ff fc4e 	bl	80034ec <ST7580InterfaceInit>
  
  HAL_Delay(100);
 8003c50:	2064      	movs	r0, #100	; 0x64
 8003c52:	f7fc fb03 	bl	800025c <HAL_Delay>
  
  ST7580MibWrite(MIB_MODEM_CONF, modem_config, sizeof(modem_config));
 8003c56:	2201      	movs	r2, #1
 8003c58:	4908      	ldr	r1, [pc, #32]	; (8003c7c <_ZN7MST75809initModemEv+0x34>)
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	f7ff fe3c 	bl	80038d8 <ST7580MibWrite>
  HAL_Delay(10);
 8003c60:	200a      	movs	r0, #10
 8003c62:	f7fc fafb 	bl	800025c <HAL_Delay>
  //ST7580MibWrite(MIB_PHY_CONF, phy_config, sizeof(phy_config));
  ST7580MibWrite(MIB_PHY_CONF, this->modemConf_Phy, sizeof(phy_config));
 8003c66:	220e      	movs	r2, #14
 8003c68:	f104 014f 	add.w	r1, r4, #79	; 0x4f
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	f7ff fe33 	bl	80038d8 <ST7580MibWrite>
  HAL_Delay(10);
 8003c72:	200a      	movs	r0, #10
 8003c74:	f7fc faf2 	bl	800025c <HAL_Delay>
  
}//----------------------------------------------------------------------------
 8003c78:	bd10      	pop	{r4, pc}
 8003c7a:	bf00      	nop
 8003c7c:	08006714 	.word	0x08006714

08003c80 <_ZN7MST758014sendTX_hiUnregEh>:
  
}// -----------------------------------------------------------

/// ----------------------------------------------------------
/// FRAME unReg
void MST7580::sendTX_hiUnreg( uint8_t gateway ){
 8003c80:	b430      	push	{r4, r5}
 8003c82:	b082      	sub	sp, #8
    // --- zmienne --------------------------------------

    // --- wysylanie ------------------------------------
	const int cnt = 2;
	uint8_t frame[cnt];
	frame[0] = 0x56;    // cmd = AskStatus
 8003c84:	2356      	movs	r3, #86	; 0x56
 8003c86:	f88d 3004 	strb.w	r3, [sp, #4]
	frame[1] = gateway;
 8003c8a:	f88d 1005 	strb.w	r1, [sp, #5]
        
    ///--------------------------------------------------------------------------
    /// Liczba elementow w buforze
    public: int getN(){
      
      int dif = mIndexSTOP - mIndexSTART;
 8003c8e:	4b1c      	ldr	r3, [pc, #112]	; (8003d00 <_ZN7MST758014sendTX_hiUnregEh+0x80>)
 8003c90:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8003c94:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
      if( dif < 0 ) dif = cBufLength + dif;
 8003c98:	1a53      	subs	r3, r2, r1
 8003c9a:	d414      	bmi.n	8003cc6 <_ZN7MST758014sendTX_hiUnregEh+0x46>
      int N2 = N + cnt + 1;
 8003c9c:	3302      	adds	r3, #2
      if( N2 >= cBufLength ) return false;
 8003c9e:	2b26      	cmp	r3, #38	; 0x26
 8003ca0:	dc2b      	bgt.n	8003cfa <_ZN7MST758014sendTX_hiUnregEh+0x7a>
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8003ca2:	1c50      	adds	r0, r2, #1
 8003ca4:	4b17      	ldr	r3, [pc, #92]	; (8003d04 <_ZN7MST758014sendTX_hiUnregEh+0x84>)
 8003ca6:	fb83 4300 	smull	r4, r3, r3, r0
 8003caa:	111b      	asrs	r3, r3, #4
 8003cac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003cb0:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8003cb4:	4299      	cmp	r1, r3
 8003cb6:	d004      	beq.n	8003cc2 <_ZN7MST758014sendTX_hiUnregEh+0x42>
      mBuf[ stopPrev ] = aData;
 8003cb8:	4811      	ldr	r0, [pc, #68]	; (8003d00 <_ZN7MST758014sendTX_hiUnregEh+0x80>)
 8003cba:	2402      	movs	r4, #2
 8003cbc:	5484      	strb	r4, [r0, r2]
      mIndexSTOP = stopTmp;
 8003cbe:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void MST7580::sendTX_hiUnreg( uint8_t gateway ){
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	e006      	b.n	8003cd4 <_ZN7MST758014sendTX_hiUnregEh+0x54>
      if( dif < 0 ) dif = cBufLength + dif;
 8003cc6:	3328      	adds	r3, #40	; 0x28
 8003cc8:	e7e8      	b.n	8003c9c <_ZN7MST758014sendTX_hiUnregEh+0x1c>
      mBuf[ stopPrev ] = aData;
 8003cca:	480d      	ldr	r0, [pc, #52]	; (8003d00 <_ZN7MST758014sendTX_hiUnregEh+0x80>)
 8003ccc:	5505      	strb	r5, [r0, r4]
      mIndexSTOP = stopTmp;
 8003cce:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
      for( int i=0; i<cnt; i++ ) bufAdd( frame[i] );
 8003cd2:	3201      	adds	r2, #1
 8003cd4:	2a01      	cmp	r2, #1
 8003cd6:	dc10      	bgt.n	8003cfa <_ZN7MST758014sendTX_hiUnregEh+0x7a>
 8003cd8:	ab01      	add	r3, sp, #4
 8003cda:	5c9d      	ldrb	r5, [r3, r2]
      int stopPrev = mIndexSTOP;
 8003cdc:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <_ZN7MST758014sendTX_hiUnregEh+0x80>)
 8003cde:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8003ce2:	1c60      	adds	r0, r4, #1
 8003ce4:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <_ZN7MST758014sendTX_hiUnregEh+0x84>)
 8003ce6:	fb83 c300 	smull	ip, r3, r3, r0
 8003cea:	111b      	asrs	r3, r3, #4
 8003cec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003cf0:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8003cf4:	4299      	cmp	r1, r3
 8003cf6:	d1e8      	bne.n	8003cca <_ZN7MST758014sendTX_hiUnregEh+0x4a>
 8003cf8:	e7eb      	b.n	8003cd2 <_ZN7MST758014sendTX_hiUnregEh+0x52>

	gST7580.mBuf_Frames.bufAddFrame( cnt, frame );


}// -----------------------------------------------------------
 8003cfa:	b002      	add	sp, #8
 8003cfc:	bc30      	pop	{r4, r5}
 8003cfe:	4770      	bx	lr
 8003d00:	20000a64 	.word	0x20000a64
 8003d04:	66666667 	.word	0x66666667

08003d08 <_ZN5M485E13frameRX_unRegEv>:

}// -----------------------------------------------------------

/// ----------------------------------------------------------
/// FRAME Unregister
void M485E::frameRX_unReg(){
 8003d08:	b508      	push	{r3, lr}

    uint16_t crc = (uint16_t)((mRXFrameBuf[4] << 8) | (mRXFrameBuf[5])); // ZMIENIC!
 8003d0a:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
 8003d0e:	f890 3052 	ldrb.w	r3, [r0, #82]	; 0x52
 8003d12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003d16:	b21b      	sxth	r3, r3
    if (crc != 0xE0E1) return;  // nie poprawne CRC
 8003d18:	4a0a      	ldr	r2, [pc, #40]	; (8003d44 <_ZN5M485E13frameRX_unRegEv+0x3c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d108      	bne.n	8003d30 <_ZN5M485E13frameRX_unRegEv+0x28>

    uint8_t loop = mRXFrameBuf[0];
 8003d1e:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
    uint8_t gateway = mRXFrameBuf[1];
 8003d22:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e

    if(gateway == g485E.mMyAddr && loop == g485E.loopNr)
 8003d26:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <_ZN5M485E13frameRX_unRegEv+0x40>)
 8003d28:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d2c:	428b      	cmp	r3, r1
 8003d2e:	d000      	beq.n	8003d32 <_ZN5M485E13frameRX_unRegEv+0x2a>
    {
    	gST7580.sendTX_hiUnreg(gateway);
    }

}
 8003d30:	bd08      	pop	{r3, pc}
    if(gateway == g485E.mMyAddr && loop == g485E.loopNr)
 8003d32:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <_ZN5M485E13frameRX_unRegEv+0x40>)
 8003d34:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d1f9      	bne.n	8003d30 <_ZN5M485E13frameRX_unRegEv+0x28>
    	gST7580.sendTX_hiUnreg(gateway);
 8003d3c:	4803      	ldr	r0, [pc, #12]	; (8003d4c <_ZN5M485E13frameRX_unRegEv+0x44>)
 8003d3e:	f7ff ff9f 	bl	8003c80 <_ZN7MST758014sendTX_hiUnregEh>
 8003d42:	e7f5      	b.n	8003d30 <_ZN5M485E13frameRX_unRegEv+0x28>
 8003d44:	ffffe0e1 	.word	0xffffe0e1
 8003d48:	200008a8 	.word	0x200008a8
 8003d4c:	20000a64 	.word	0x20000a64

08003d50 <_ZN7MST758016sendTX_getStatusEhh>:

/// ----------------------------------------------------------
/// FRAME getStatus
void MST7580::sendTX_getStatus( uint8_t addr, uint8_t gateway ){
 8003d50:	b430      	push	{r4, r5}
 8003d52:	b082      	sub	sp, #8
    // --- zmienne --------------------------------------

    // --- wysylanie ------------------------------------
	const int cnt = 3;
	uint8_t frame[cnt];
	frame[0] = 0x53;    // cmd = AskStatus
 8003d54:	2353      	movs	r3, #83	; 0x53
 8003d56:	f88d 3004 	strb.w	r3, [sp, #4]
	frame[1] = addr;    // addr
 8003d5a:	f88d 1005 	strb.w	r1, [sp, #5]
	frame[2] = gateway; // gateway
 8003d5e:	f88d 2006 	strb.w	r2, [sp, #6]
      int dif = mIndexSTOP - mIndexSTART;
 8003d62:	4b1c      	ldr	r3, [pc, #112]	; (8003dd4 <_ZN7MST758016sendTX_getStatusEhh+0x84>)
 8003d64:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8003d68:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
      if( dif < 0 ) dif = cBufLength + dif;
 8003d6c:	1a53      	subs	r3, r2, r1
 8003d6e:	d414      	bmi.n	8003d9a <_ZN7MST758016sendTX_getStatusEhh+0x4a>
      int N2 = N + cnt + 1;
 8003d70:	3303      	adds	r3, #3
      if( N2 >= cBufLength ) return false;
 8003d72:	2b26      	cmp	r3, #38	; 0x26
 8003d74:	dc2b      	bgt.n	8003dce <_ZN7MST758016sendTX_getStatusEhh+0x7e>
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8003d76:	1c50      	adds	r0, r2, #1
 8003d78:	4b17      	ldr	r3, [pc, #92]	; (8003dd8 <_ZN7MST758016sendTX_getStatusEhh+0x88>)
 8003d7a:	fb83 4300 	smull	r4, r3, r3, r0
 8003d7e:	111b      	asrs	r3, r3, #4
 8003d80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d84:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8003d88:	4299      	cmp	r1, r3
 8003d8a:	d004      	beq.n	8003d96 <_ZN7MST758016sendTX_getStatusEhh+0x46>
      mBuf[ stopPrev ] = aData;
 8003d8c:	4811      	ldr	r0, [pc, #68]	; (8003dd4 <_ZN7MST758016sendTX_getStatusEhh+0x84>)
 8003d8e:	2403      	movs	r4, #3
 8003d90:	5484      	strb	r4, [r0, r2]
      mIndexSTOP = stopTmp;
 8003d92:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void MST7580::sendTX_getStatus( uint8_t addr, uint8_t gateway ){
 8003d96:	2200      	movs	r2, #0
 8003d98:	e006      	b.n	8003da8 <_ZN7MST758016sendTX_getStatusEhh+0x58>
      if( dif < 0 ) dif = cBufLength + dif;
 8003d9a:	3328      	adds	r3, #40	; 0x28
 8003d9c:	e7e8      	b.n	8003d70 <_ZN7MST758016sendTX_getStatusEhh+0x20>
      mBuf[ stopPrev ] = aData;
 8003d9e:	480d      	ldr	r0, [pc, #52]	; (8003dd4 <_ZN7MST758016sendTX_getStatusEhh+0x84>)
 8003da0:	5505      	strb	r5, [r0, r4]
      mIndexSTOP = stopTmp;
 8003da2:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
      for( int i=0; i<cnt; i++ ) bufAdd( frame[i] );
 8003da6:	3201      	adds	r2, #1
 8003da8:	2a02      	cmp	r2, #2
 8003daa:	dc10      	bgt.n	8003dce <_ZN7MST758016sendTX_getStatusEhh+0x7e>
 8003dac:	ab01      	add	r3, sp, #4
 8003dae:	5c9d      	ldrb	r5, [r3, r2]
      int stopPrev = mIndexSTOP;
 8003db0:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <_ZN7MST758016sendTX_getStatusEhh+0x84>)
 8003db2:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8003db6:	1c60      	adds	r0, r4, #1
 8003db8:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <_ZN7MST758016sendTX_getStatusEhh+0x88>)
 8003dba:	fb83 c300 	smull	ip, r3, r3, r0
 8003dbe:	111b      	asrs	r3, r3, #4
 8003dc0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003dc4:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8003dc8:	4299      	cmp	r1, r3
 8003dca:	d1e8      	bne.n	8003d9e <_ZN7MST758016sendTX_getStatusEhh+0x4e>
 8003dcc:	e7eb      	b.n	8003da6 <_ZN7MST758016sendTX_getStatusEhh+0x56>
	gST7580.mBuf_Frames.bufAddFrame( cnt, frame );


}// -----------------------------------------------------------
 8003dce:	b002      	add	sp, #8
 8003dd0:	bc30      	pop	{r4, r5}
 8003dd2:	4770      	bx	lr
 8003dd4:	20000a64 	.word	0x20000a64
 8003dd8:	66666667 	.word	0x66666667

08003ddc <_ZN5M485E17frameRX_getStatusEv>:
    uint16_t crc = (uint16_t)((mRXFrameBuf[4] << 8) | (mRXFrameBuf[5]));
 8003ddc:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
 8003de0:	f890 3052 	ldrb.w	r3, [r0, #82]	; 0x52
 8003de4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003de8:	b21b      	sxth	r3, r3
    if (crc != 0xE0E1) return;  // nie poprawne CRC
 8003dea:	4ac4      	ldr	r2, [pc, #784]	; (80040fc <_ZN5M485E17frameRX_getStatusEv+0x320>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	f040 83d0 	bne.w	8004592 <_ZN5M485E17frameRX_getStatusEv+0x7b6>
void M485E::frameRX_getStatus(){
 8003df2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df6:	b08b      	sub	sp, #44	; 0x2c
 8003df8:	4604      	mov	r4, r0
    uint8_t loop = mRXFrameBuf[0];
 8003dfa:	f890 804d 	ldrb.w	r8, [r0, #77]	; 0x4d
    uint8_t gateway = mRXFrameBuf[1];
 8003dfe:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
    uint8_t addr = mRXFrameBuf[2];
 8003e02:	f890 104f 	ldrb.w	r1, [r0, #79]	; 0x4f
    if( ( addr == g485E.mMyAddr) && ( gateway == g485E.mMyAddr ) && (loop == g485E.loopNr) ){
 8003e06:	4bbe      	ldr	r3, [pc, #760]	; (8004100 <_ZN5M485E17frameRX_getStatusEv+0x324>)
 8003e08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e0c:	428b      	cmp	r3, r1
 8003e0e:	d005      	beq.n	8003e1c <_ZN5M485E17frameRX_getStatusEv+0x40>
    	if(gateway == g485E.mMyAddr && loop == g485E.loopNr)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	f000 83b4 	beq.w	800457e <_ZN5M485E17frameRX_getStatusEv+0x7a2>
}// -----------------------------------------------------------
 8003e16:	b00b      	add	sp, #44	; 0x2c
 8003e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ( addr == g485E.mMyAddr) && ( gateway == g485E.mMyAddr ) && (loop == g485E.loopNr) ){
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d1f7      	bne.n	8003e10 <_ZN5M485E17frameRX_getStatusEv+0x34>
 8003e20:	48b7      	ldr	r0, [pc, #732]	; (8004100 <_ZN5M485E17frameRX_getStatusEv+0x324>)
 8003e22:	f890 0075 	ldrb.w	r0, [r0, #117]	; 0x75
 8003e26:	4540      	cmp	r0, r8
 8003e28:	d1f2      	bne.n	8003e10 <_ZN5M485E17frameRX_getStatusEv+0x34>
    	    if( gRelays.mRelA_IsON ) rels2 |= 0x01;
 8003e2a:	49b6      	ldr	r1, [pc, #728]	; (8004104 <_ZN5M485E17frameRX_getStatusEv+0x328>)
 8003e2c:	7a0d      	ldrb	r5, [r1, #8]
 8003e2e:	b105      	cbz	r5, 8003e32 <_ZN5M485E17frameRX_getStatusEv+0x56>
 8003e30:	2501      	movs	r5, #1
    	    if( gRelays.mRelB_IsON ) rels2 |= 0x04;
 8003e32:	49b4      	ldr	r1, [pc, #720]	; (8004104 <_ZN5M485E17frameRX_getStatusEv+0x328>)
 8003e34:	7a49      	ldrb	r1, [r1, #9]
 8003e36:	b109      	cbz	r1, 8003e3c <_ZN5M485E17frameRX_getStatusEv+0x60>
 8003e38:	f045 0504 	orr.w	r5, r5, #4
    	    uint8_t prad1 = gADC.mS0;             // Prad sens 1
 8003e3c:	49b2      	ldr	r1, [pc, #712]	; (8004108 <_ZN5M485E17frameRX_getStatusEv+0x32c>)
 8003e3e:	f9b1 9004 	ldrsh.w	r9, [r1, #4]
 8003e42:	fa5f f089 	uxtb.w	r0, r9
 8003e46:	9002      	str	r0, [sp, #8]
    	    uint8_t uA_H  = (gADC.mUA_avr>>8);    // UA linii
 8003e48:	f9b1 a00c 	ldrsh.w	sl, [r1, #12]
 8003e4c:	f991 c00d 	ldrsb.w	ip, [r1, #13]
 8003e50:	fa5f fc8c 	uxtb.w	ip, ip
    	    uint8_t uA_L  = (gADC.mUA_avr>>0);    // UA linii
 8003e54:	fa5f f08a 	uxtb.w	r0, sl
 8003e58:	9005      	str	r0, [sp, #20]
    	    uint8_t uB_H  = (gADC.mUB_avr>>8);    // UB linii
 8003e5a:	f9b1 b024 	ldrsh.w	fp, [r1, #36]	; 0x24
 8003e5e:	f991 7025 	ldrsb.w	r7, [r1, #37]	; 0x25
 8003e62:	b2ff      	uxtb	r7, r7
    	    uint8_t uB_L  = (gADC.mUB_avr>>0);    // UB linii
 8003e64:	fa5f f08b 	uxtb.w	r0, fp
 8003e68:	9006      	str	r0, [sp, #24]
    	    uint8_t iA_H  = (gADC.mIAabs_avr>>8); // IA linii
 8003e6a:	f9b1 001c 	ldrsh.w	r0, [r1, #28]
 8003e6e:	9003      	str	r0, [sp, #12]
 8003e70:	f991 601d 	ldrsb.w	r6, [r1, #29]
 8003e74:	b2f6      	uxtb	r6, r6
    	    uint8_t iA_L  = (gADC.mIAabs_avr>>0); // IA linii
 8003e76:	b2c0      	uxtb	r0, r0
 8003e78:	9007      	str	r0, [sp, #28]
    	    uint8_t iB_H  = (gADC.mIBabs_avr>>8); // IB linii
 8003e7a:	f9b1 0034 	ldrsh.w	r0, [r1, #52]	; 0x34
 8003e7e:	9004      	str	r0, [sp, #16]
 8003e80:	f991 1035 	ldrsb.w	r1, [r1, #53]	; 0x35
 8003e84:	b2c9      	uxtb	r1, r1
 8003e86:	9101      	str	r1, [sp, #4]
    	    uint8_t iB_L  = (gADC.mIBabs_avr>>0); // IB linii
 8003e88:	b2c1      	uxtb	r1, r0
 8003e8a:	9108      	str	r1, [sp, #32]
		c = ((crc >> 8) ^ b) << 8;
 8003e8c:	f44f 41b4 	mov.w	r1, #23040	; 0x5a00
		i = 0;
 8003e90:	2000      	movs	r0, #0
 8003e92:	e008      	b.n	8003ea6 <_ZN5M485E17frameRX_getStatusEv+0xca>
				c = (c << 1) ^ 0x1021;
 8003e94:	f241 0e21 	movw	lr, #4129	; 0x1021
 8003e98:	ea8e 0141 	eor.w	r1, lr, r1, lsl #1
 8003e9c:	b289      	uxth	r1, r1
		} while( ++i < 8 );
 8003e9e:	3001      	adds	r0, #1
 8003ea0:	b2c0      	uxtb	r0, r0
 8003ea2:	2807      	cmp	r0, #7
 8003ea4:	d805      	bhi.n	8003eb2 <_ZN5M485E17frameRX_getStatusEv+0xd6>
			if( (c & 0x8000) > 0 )
 8003ea6:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8003eaa:	d1f3      	bne.n	8003e94 <_ZN5M485E17frameRX_getStatusEv+0xb8>
				c = c << 1;
 8003eac:	0049      	lsls	r1, r1, #1
 8003eae:	b289      	uxth	r1, r1
 8003eb0:	e7f5      	b.n	8003e9e <_ZN5M485E17frameRX_getStatusEv+0xc2>
		c = ((crc >> 8) ^ b) << 8;
 8003eb2:	468e      	mov	lr, r1
 8003eb4:	ea88 2121 	eor.w	r1, r8, r1, asr #8
 8003eb8:	0209      	lsls	r1, r1, #8
 8003eba:	b289      	uxth	r1, r1
		i = 0;
 8003ebc:	f04f 0800 	mov.w	r8, #0
 8003ec0:	e00b      	b.n	8003eda <_ZN5M485E17frameRX_getStatusEv+0xfe>
				c = (c << 1) ^ 0x1021;
 8003ec2:	f241 0021 	movw	r0, #4129	; 0x1021
 8003ec6:	ea80 0141 	eor.w	r1, r0, r1, lsl #1
 8003eca:	b289      	uxth	r1, r1
		} while( ++i < 8 );
 8003ecc:	f108 0801 	add.w	r8, r8, #1
 8003ed0:	fa5f f888 	uxtb.w	r8, r8
 8003ed4:	f1b8 0f07 	cmp.w	r8, #7
 8003ed8:	d805      	bhi.n	8003ee6 <_ZN5M485E17frameRX_getStatusEv+0x10a>
			if( (c & 0x8000) > 0 )
 8003eda:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8003ede:	d1f0      	bne.n	8003ec2 <_ZN5M485E17frameRX_getStatusEv+0xe6>
				c = c << 1;
 8003ee0:	0049      	lsls	r1, r1, #1
 8003ee2:	b289      	uxth	r1, r1
 8003ee4:	e7f2      	b.n	8003ecc <_ZN5M485E17frameRX_getStatusEv+0xf0>
		crc = c ^ ((crc) << 8);
 8003ee6:	ea81 210e 	eor.w	r1, r1, lr, lsl #8
 8003eea:	b288      	uxth	r0, r1
		c = ((crc >> 8) ^ b) << 8;
 8003eec:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8003ef0:	404a      	eors	r2, r1
 8003ef2:	0212      	lsls	r2, r2, #8
		i = 0;
 8003ef4:	f04f 0e00 	mov.w	lr, #0
 8003ef8:	e00b      	b.n	8003f12 <_ZN5M485E17frameRX_getStatusEv+0x136>
				c = (c << 1) ^ 0x1021;
 8003efa:	f241 0121 	movw	r1, #4129	; 0x1021
 8003efe:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
 8003f02:	b292      	uxth	r2, r2
		} while( ++i < 8 );
 8003f04:	f10e 0e01 	add.w	lr, lr, #1
 8003f08:	fa5f fe8e 	uxtb.w	lr, lr
 8003f0c:	f1be 0f07 	cmp.w	lr, #7
 8003f10:	d805      	bhi.n	8003f1e <_ZN5M485E17frameRX_getStatusEv+0x142>
			if( (c & 0x8000) > 0 )
 8003f12:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003f16:	d1f0      	bne.n	8003efa <_ZN5M485E17frameRX_getStatusEv+0x11e>
				c = c << 1;
 8003f18:	0052      	lsls	r2, r2, #1
 8003f1a:	b292      	uxth	r2, r2
 8003f1c:	e7f2      	b.n	8003f04 <_ZN5M485E17frameRX_getStatusEv+0x128>
		crc = c ^ ((crc) << 8);
 8003f1e:	ea82 2200 	eor.w	r2, r2, r0, lsl #8
 8003f22:	fa1f fe82 	uxth.w	lr, r2
		c = ((crc >> 8) ^ b) << 8;
 8003f26:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003f2a:	405a      	eors	r2, r3
 8003f2c:	0212      	lsls	r2, r2, #8
		i = 0;
 8003f2e:	2000      	movs	r0, #0
 8003f30:	e008      	b.n	8003f44 <_ZN5M485E17frameRX_getStatusEv+0x168>
				c = (c << 1) ^ 0x1021;
 8003f32:	f241 0121 	movw	r1, #4129	; 0x1021
 8003f36:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
 8003f3a:	b292      	uxth	r2, r2
		} while( ++i < 8 );
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	b2c0      	uxtb	r0, r0
 8003f40:	2807      	cmp	r0, #7
 8003f42:	d805      	bhi.n	8003f50 <_ZN5M485E17frameRX_getStatusEv+0x174>
			if( (c & 0x8000) > 0 )
 8003f44:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003f48:	d1f3      	bne.n	8003f32 <_ZN5M485E17frameRX_getStatusEv+0x156>
				c = c << 1;
 8003f4a:	0052      	lsls	r2, r2, #1
 8003f4c:	b292      	uxth	r2, r2
 8003f4e:	e7f5      	b.n	8003f3c <_ZN5M485E17frameRX_getStatusEv+0x160>
		crc = c ^ ((crc) << 8);
 8003f50:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
 8003f54:	fa1f fe82 	uxth.w	lr, r2
		c = ((crc >> 8) ^ b) << 8;
 8003f58:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8003f5c:	f482 4243 	eor.w	r2, r2, #49920	; 0xc300
		i = 0;
 8003f60:	2000      	movs	r0, #0
 8003f62:	e008      	b.n	8003f76 <_ZN5M485E17frameRX_getStatusEv+0x19a>
				c = (c << 1) ^ 0x1021;
 8003f64:	f241 0121 	movw	r1, #4129	; 0x1021
 8003f68:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
 8003f6c:	b292      	uxth	r2, r2
		} while( ++i < 8 );
 8003f6e:	3001      	adds	r0, #1
 8003f70:	b2c0      	uxtb	r0, r0
 8003f72:	2807      	cmp	r0, #7
 8003f74:	d805      	bhi.n	8003f82 <_ZN5M485E17frameRX_getStatusEv+0x1a6>
			if( (c & 0x8000) > 0 )
 8003f76:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003f7a:	d1f3      	bne.n	8003f64 <_ZN5M485E17frameRX_getStatusEv+0x188>
				c = c << 1;
 8003f7c:	0052      	lsls	r2, r2, #1
 8003f7e:	b292      	uxth	r2, r2
 8003f80:	e7f5      	b.n	8003f6e <_ZN5M485E17frameRX_getStatusEv+0x192>
		crc = c ^ ((crc) << 8);
 8003f82:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
 8003f86:	fa1f fe82 	uxth.w	lr, r2
		c = ((crc >> 8) ^ b) << 8;
 8003f8a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8003f8e:	f482 6240 	eor.w	r2, r2, #3072	; 0xc00
		i = 0;
 8003f92:	2000      	movs	r0, #0
 8003f94:	e008      	b.n	8003fa8 <_ZN5M485E17frameRX_getStatusEv+0x1cc>
				c = (c << 1) ^ 0x1021;
 8003f96:	f241 0121 	movw	r1, #4129	; 0x1021
 8003f9a:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
 8003f9e:	b292      	uxth	r2, r2
		} while( ++i < 8 );
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	b2c0      	uxtb	r0, r0
 8003fa4:	2807      	cmp	r0, #7
 8003fa6:	d805      	bhi.n	8003fb4 <_ZN5M485E17frameRX_getStatusEv+0x1d8>
			if( (c & 0x8000) > 0 )
 8003fa8:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003fac:	d1f3      	bne.n	8003f96 <_ZN5M485E17frameRX_getStatusEv+0x1ba>
				c = c << 1;
 8003fae:	0052      	lsls	r2, r2, #1
 8003fb0:	b292      	uxth	r2, r2
 8003fb2:	e7f5      	b.n	8003fa0 <_ZN5M485E17frameRX_getStatusEv+0x1c4>
		crc = c ^ ((crc) << 8);
 8003fb4:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
 8003fb8:	fa1f fe82 	uxth.w	lr, r2
		c = ((crc >> 8) ^ b) << 8;
 8003fbc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8003fc0:	f482 7280 	eor.w	r2, r2, #256	; 0x100
		i = 0;
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	e008      	b.n	8003fda <_ZN5M485E17frameRX_getStatusEv+0x1fe>
				c = (c << 1) ^ 0x1021;
 8003fc8:	f241 0121 	movw	r1, #4129	; 0x1021
 8003fcc:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
 8003fd0:	b292      	uxth	r2, r2
		} while( ++i < 8 );
 8003fd2:	3001      	adds	r0, #1
 8003fd4:	b2c0      	uxtb	r0, r0
 8003fd6:	2807      	cmp	r0, #7
 8003fd8:	d805      	bhi.n	8003fe6 <_ZN5M485E17frameRX_getStatusEv+0x20a>
			if( (c & 0x8000) > 0 )
 8003fda:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003fde:	d1f3      	bne.n	8003fc8 <_ZN5M485E17frameRX_getStatusEv+0x1ec>
				c = c << 1;
 8003fe0:	0052      	lsls	r2, r2, #1
 8003fe2:	b292      	uxth	r2, r2
 8003fe4:	e7f5      	b.n	8003fd2 <_ZN5M485E17frameRX_getStatusEv+0x1f6>
		crc = c ^ ((crc) << 8);
 8003fe6:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
 8003fea:	fa1f fe82 	uxth.w	lr, r2
		c = ((crc >> 8) ^ b) << 8;
 8003fee:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003ff2:	406a      	eors	r2, r5
 8003ff4:	0212      	lsls	r2, r2, #8
 8003ff6:	b292      	uxth	r2, r2
		i = 0;
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	e008      	b.n	800400e <_ZN5M485E17frameRX_getStatusEv+0x232>
				c = (c << 1) ^ 0x1021;
 8003ffc:	f241 0121 	movw	r1, #4129	; 0x1021
 8004000:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
 8004004:	b292      	uxth	r2, r2
		} while( ++i < 8 );
 8004006:	3001      	adds	r0, #1
 8004008:	b2c0      	uxtb	r0, r0
 800400a:	2807      	cmp	r0, #7
 800400c:	d805      	bhi.n	800401a <_ZN5M485E17frameRX_getStatusEv+0x23e>
			if( (c & 0x8000) > 0 )
 800400e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004012:	d1f3      	bne.n	8003ffc <_ZN5M485E17frameRX_getStatusEv+0x220>
				c = c << 1;
 8004014:	0052      	lsls	r2, r2, #1
 8004016:	b292      	uxth	r2, r2
 8004018:	e7f5      	b.n	8004006 <_ZN5M485E17frameRX_getStatusEv+0x22a>
		crc = c ^ ((crc) << 8);
 800401a:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
 800401e:	fa1f f882 	uxth.w	r8, r2
		c = ((crc >> 8) ^ b) << 8;
 8004022:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004026:	fa5f f089 	uxtb.w	r0, r9
 800402a:	4042      	eors	r2, r0
 800402c:	0212      	lsls	r2, r2, #8
		i = 0;
 800402e:	f04f 0e00 	mov.w	lr, #0
 8004032:	e00b      	b.n	800404c <_ZN5M485E17frameRX_getStatusEv+0x270>
				c = (c << 1) ^ 0x1021;
 8004034:	f241 0121 	movw	r1, #4129	; 0x1021
 8004038:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
 800403c:	b292      	uxth	r2, r2
		} while( ++i < 8 );
 800403e:	f10e 0e01 	add.w	lr, lr, #1
 8004042:	fa5f fe8e 	uxtb.w	lr, lr
 8004046:	f1be 0f07 	cmp.w	lr, #7
 800404a:	d805      	bhi.n	8004058 <_ZN5M485E17frameRX_getStatusEv+0x27c>
			if( (c & 0x8000) > 0 )
 800404c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004050:	d1f0      	bne.n	8004034 <_ZN5M485E17frameRX_getStatusEv+0x258>
				c = c << 1;
 8004052:	0052      	lsls	r2, r2, #1
 8004054:	b292      	uxth	r2, r2
 8004056:	e7f2      	b.n	800403e <_ZN5M485E17frameRX_getStatusEv+0x262>
		crc = c ^ ((crc) << 8);
 8004058:	ea82 2208 	eor.w	r2, r2, r8, lsl #8
 800405c:	b291      	uxth	r1, r2
		c = ((crc >> 8) ^ b) << 8;
 800405e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004062:	4050      	eors	r0, r2
 8004064:	0200      	lsls	r0, r0, #8
		i = 0;
 8004066:	f04f 0e00 	mov.w	lr, #0
 800406a:	e00b      	b.n	8004084 <_ZN5M485E17frameRX_getStatusEv+0x2a8>
				c = (c << 1) ^ 0x1021;
 800406c:	f241 0221 	movw	r2, #4129	; 0x1021
 8004070:	ea82 0040 	eor.w	r0, r2, r0, lsl #1
 8004074:	b280      	uxth	r0, r0
		} while( ++i < 8 );
 8004076:	f10e 0e01 	add.w	lr, lr, #1
 800407a:	fa5f fe8e 	uxtb.w	lr, lr
 800407e:	f1be 0f07 	cmp.w	lr, #7
 8004082:	d805      	bhi.n	8004090 <_ZN5M485E17frameRX_getStatusEv+0x2b4>
			if( (c & 0x8000) > 0 )
 8004084:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8004088:	d1f0      	bne.n	800406c <_ZN5M485E17frameRX_getStatusEv+0x290>
				c = c << 1;
 800408a:	0040      	lsls	r0, r0, #1
 800408c:	b280      	uxth	r0, r0
 800408e:	e7f2      	b.n	8004076 <_ZN5M485E17frameRX_getStatusEv+0x29a>
		crc = c ^ ((crc) << 8);
 8004090:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
 8004094:	fa1f fe80 	uxth.w	lr, r0
		c = ((crc >> 8) ^ b) << 8;
 8004098:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800409c:	ea80 020c 	eor.w	r2, r0, ip
 80040a0:	0212      	lsls	r2, r2, #8
		i = 0;
 80040a2:	2000      	movs	r0, #0
 80040a4:	e008      	b.n	80040b8 <_ZN5M485E17frameRX_getStatusEv+0x2dc>
				c = (c << 1) ^ 0x1021;
 80040a6:	f241 0121 	movw	r1, #4129	; 0x1021
 80040aa:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
 80040ae:	b292      	uxth	r2, r2
		} while( ++i < 8 );
 80040b0:	3001      	adds	r0, #1
 80040b2:	b2c0      	uxtb	r0, r0
 80040b4:	2807      	cmp	r0, #7
 80040b6:	d805      	bhi.n	80040c4 <_ZN5M485E17frameRX_getStatusEv+0x2e8>
			if( (c & 0x8000) > 0 )
 80040b8:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80040bc:	d1f3      	bne.n	80040a6 <_ZN5M485E17frameRX_getStatusEv+0x2ca>
				c = c << 1;
 80040be:	0052      	lsls	r2, r2, #1
 80040c0:	b292      	uxth	r2, r2
 80040c2:	e7f5      	b.n	80040b0 <_ZN5M485E17frameRX_getStatusEv+0x2d4>
		crc = c ^ ((crc) << 8);
 80040c4:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
 80040c8:	fa1f fe82 	uxth.w	lr, r2
		c = ((crc >> 8) ^ b) << 8;
 80040cc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80040d0:	fa5f f18a 	uxtb.w	r1, sl
 80040d4:	404a      	eors	r2, r1
 80040d6:	0212      	lsls	r2, r2, #8
		i = 0;
 80040d8:	2000      	movs	r0, #0
 80040da:	e008      	b.n	80040ee <_ZN5M485E17frameRX_getStatusEv+0x312>
				c = (c << 1) ^ 0x1021;
 80040dc:	f241 0121 	movw	r1, #4129	; 0x1021
 80040e0:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
 80040e4:	b292      	uxth	r2, r2
		} while( ++i < 8 );
 80040e6:	3001      	adds	r0, #1
 80040e8:	b2c0      	uxtb	r0, r0
 80040ea:	2807      	cmp	r0, #7
 80040ec:	d80e      	bhi.n	800410c <_ZN5M485E17frameRX_getStatusEv+0x330>
			if( (c & 0x8000) > 0 )
 80040ee:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80040f2:	d1f3      	bne.n	80040dc <_ZN5M485E17frameRX_getStatusEv+0x300>
				c = c << 1;
 80040f4:	0052      	lsls	r2, r2, #1
 80040f6:	b292      	uxth	r2, r2
 80040f8:	e7f5      	b.n	80040e6 <_ZN5M485E17frameRX_getStatusEv+0x30a>
 80040fa:	bf00      	nop
 80040fc:	ffffe0e1 	.word	0xffffe0e1
 8004100:	200008a8 	.word	0x200008a8
 8004104:	20000a54 	.word	0x20000a54
 8004108:	20000920 	.word	0x20000920
		crc = c ^ ((crc) << 8);
 800410c:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
 8004110:	fa1f fe82 	uxth.w	lr, r2
		c = ((crc >> 8) ^ b) << 8;
 8004114:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004118:	407a      	eors	r2, r7
 800411a:	0212      	lsls	r2, r2, #8
		i = 0;
 800411c:	2000      	movs	r0, #0
 800411e:	e008      	b.n	8004132 <_ZN5M485E17frameRX_getStatusEv+0x356>
				c = (c << 1) ^ 0x1021;
 8004120:	f241 0121 	movw	r1, #4129	; 0x1021
 8004124:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
 8004128:	b292      	uxth	r2, r2
		} while( ++i < 8 );
 800412a:	3001      	adds	r0, #1
 800412c:	b2c0      	uxtb	r0, r0
 800412e:	2807      	cmp	r0, #7
 8004130:	d805      	bhi.n	800413e <_ZN5M485E17frameRX_getStatusEv+0x362>
			if( (c & 0x8000) > 0 )
 8004132:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004136:	d1f3      	bne.n	8004120 <_ZN5M485E17frameRX_getStatusEv+0x344>
				c = c << 1;
 8004138:	0052      	lsls	r2, r2, #1
 800413a:	b292      	uxth	r2, r2
 800413c:	e7f5      	b.n	800412a <_ZN5M485E17frameRX_getStatusEv+0x34e>
		crc = c ^ ((crc) << 8);
 800413e:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
 8004142:	fa1f fe82 	uxth.w	lr, r2
		c = ((crc >> 8) ^ b) << 8;
 8004146:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800414a:	fa5f f18b 	uxtb.w	r1, fp
 800414e:	404a      	eors	r2, r1
 8004150:	0212      	lsls	r2, r2, #8
		i = 0;
 8004152:	2000      	movs	r0, #0
 8004154:	e008      	b.n	8004168 <_ZN5M485E17frameRX_getStatusEv+0x38c>
				c = (c << 1) ^ 0x1021;
 8004156:	f241 0121 	movw	r1, #4129	; 0x1021
 800415a:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
 800415e:	b292      	uxth	r2, r2
		} while( ++i < 8 );
 8004160:	3001      	adds	r0, #1
 8004162:	b2c0      	uxtb	r0, r0
 8004164:	2807      	cmp	r0, #7
 8004166:	d805      	bhi.n	8004174 <_ZN5M485E17frameRX_getStatusEv+0x398>
			if( (c & 0x8000) > 0 )
 8004168:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800416c:	d1f3      	bne.n	8004156 <_ZN5M485E17frameRX_getStatusEv+0x37a>
				c = c << 1;
 800416e:	0052      	lsls	r2, r2, #1
 8004170:	b292      	uxth	r2, r2
 8004172:	e7f5      	b.n	8004160 <_ZN5M485E17frameRX_getStatusEv+0x384>
		crc = c ^ ((crc) << 8);
 8004174:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
 8004178:	fa1f fe82 	uxth.w	lr, r2
		c = ((crc >> 8) ^ b) << 8;
 800417c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004180:	4072      	eors	r2, r6
 8004182:	0212      	lsls	r2, r2, #8
		i = 0;
 8004184:	2000      	movs	r0, #0
 8004186:	e008      	b.n	800419a <_ZN5M485E17frameRX_getStatusEv+0x3be>
				c = (c << 1) ^ 0x1021;
 8004188:	f241 0121 	movw	r1, #4129	; 0x1021
 800418c:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
 8004190:	b292      	uxth	r2, r2
		} while( ++i < 8 );
 8004192:	3001      	adds	r0, #1
 8004194:	b2c0      	uxtb	r0, r0
 8004196:	2807      	cmp	r0, #7
 8004198:	d805      	bhi.n	80041a6 <_ZN5M485E17frameRX_getStatusEv+0x3ca>
			if( (c & 0x8000) > 0 )
 800419a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800419e:	d1f3      	bne.n	8004188 <_ZN5M485E17frameRX_getStatusEv+0x3ac>
				c = c << 1;
 80041a0:	0052      	lsls	r2, r2, #1
 80041a2:	b292      	uxth	r2, r2
 80041a4:	e7f5      	b.n	8004192 <_ZN5M485E17frameRX_getStatusEv+0x3b6>
		crc = c ^ ((crc) << 8);
 80041a6:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
 80041aa:	fa1f fe82 	uxth.w	lr, r2
		c = ((crc >> 8) ^ b) << 8;
 80041ae:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80041b2:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80041b6:	404a      	eors	r2, r1
 80041b8:	0212      	lsls	r2, r2, #8
		i = 0;
 80041ba:	2000      	movs	r0, #0
 80041bc:	e008      	b.n	80041d0 <_ZN5M485E17frameRX_getStatusEv+0x3f4>
				c = (c << 1) ^ 0x1021;
 80041be:	f241 0121 	movw	r1, #4129	; 0x1021
 80041c2:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
 80041c6:	b292      	uxth	r2, r2
		} while( ++i < 8 );
 80041c8:	3001      	adds	r0, #1
 80041ca:	b2c0      	uxtb	r0, r0
 80041cc:	2807      	cmp	r0, #7
 80041ce:	d805      	bhi.n	80041dc <_ZN5M485E17frameRX_getStatusEv+0x400>
			if( (c & 0x8000) > 0 )
 80041d0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80041d4:	d1f3      	bne.n	80041be <_ZN5M485E17frameRX_getStatusEv+0x3e2>
				c = c << 1;
 80041d6:	0052      	lsls	r2, r2, #1
 80041d8:	b292      	uxth	r2, r2
 80041da:	e7f5      	b.n	80041c8 <_ZN5M485E17frameRX_getStatusEv+0x3ec>
		crc = c ^ ((crc) << 8);
 80041dc:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
 80041e0:	fa1f fe82 	uxth.w	lr, r2
		c = ((crc >> 8) ^ b) << 8;
 80041e4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80041e8:	9901      	ldr	r1, [sp, #4]
 80041ea:	404a      	eors	r2, r1
 80041ec:	0212      	lsls	r2, r2, #8
		i = 0;
 80041ee:	2000      	movs	r0, #0
 80041f0:	e008      	b.n	8004204 <_ZN5M485E17frameRX_getStatusEv+0x428>
				c = (c << 1) ^ 0x1021;
 80041f2:	f241 0121 	movw	r1, #4129	; 0x1021
 80041f6:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
 80041fa:	b292      	uxth	r2, r2
		} while( ++i < 8 );
 80041fc:	3001      	adds	r0, #1
 80041fe:	b2c0      	uxtb	r0, r0
 8004200:	2807      	cmp	r0, #7
 8004202:	d805      	bhi.n	8004210 <_ZN5M485E17frameRX_getStatusEv+0x434>
			if( (c & 0x8000) > 0 )
 8004204:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004208:	d1f3      	bne.n	80041f2 <_ZN5M485E17frameRX_getStatusEv+0x416>
				c = c << 1;
 800420a:	0052      	lsls	r2, r2, #1
 800420c:	b292      	uxth	r2, r2
 800420e:	e7f5      	b.n	80041fc <_ZN5M485E17frameRX_getStatusEv+0x420>
		crc = c ^ ((crc) << 8);
 8004210:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
 8004214:	fa1f fe82 	uxth.w	lr, r2
		c = ((crc >> 8) ^ b) << 8;
 8004218:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800421c:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8004220:	404a      	eors	r2, r1
 8004222:	0212      	lsls	r2, r2, #8
		i = 0;
 8004224:	2000      	movs	r0, #0
 8004226:	e008      	b.n	800423a <_ZN5M485E17frameRX_getStatusEv+0x45e>
				c = (c << 1) ^ 0x1021;
 8004228:	f241 0121 	movw	r1, #4129	; 0x1021
 800422c:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
 8004230:	b292      	uxth	r2, r2
		} while( ++i < 8 );
 8004232:	3001      	adds	r0, #1
 8004234:	b2c0      	uxtb	r0, r0
 8004236:	2807      	cmp	r0, #7
 8004238:	d805      	bhi.n	8004246 <_ZN5M485E17frameRX_getStatusEv+0x46a>
			if( (c & 0x8000) > 0 )
 800423a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800423e:	d1f3      	bne.n	8004228 <_ZN5M485E17frameRX_getStatusEv+0x44c>
				c = c << 1;
 8004240:	0052      	lsls	r2, r2, #1
 8004242:	b292      	uxth	r2, r2
 8004244:	e7f5      	b.n	8004232 <_ZN5M485E17frameRX_getStatusEv+0x456>
		crc = c ^ ((crc) << 8);
 8004246:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
    	    uint8_t crc_H = (crc >> 8);
 800424a:	f3c2 2a07 	ubfx	sl, r2, #8, #8
    	    uint8_t crc_L = (crc >> 0);
 800424e:	b2d2      	uxtb	r2, r2
      int stopPrev = mIndexSTOP;
 8004250:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8004254:	f10e 0101 	add.w	r1, lr, #1
 8004258:	48ce      	ldr	r0, [pc, #824]	; (8004594 <_ZN5M485E17frameRX_getStatusEv+0x7b8>)
 800425a:	fb80 8001 	smull	r8, r0, r0, r1
 800425e:	1100      	asrs	r0, r0, #4
 8004260:	f04f 0832 	mov.w	r8, #50	; 0x32
 8004264:	fb08 1010 	mls	r0, r8, r0, r1
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8004268:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
 800426c:	4288      	cmp	r0, r1
 800426e:	d006      	beq.n	800427e <_ZN5M485E17frameRX_getStatusEv+0x4a2>
      mBuf[ stopPrev ] = aData;
 8004270:	44a6      	add	lr, r4
 8004272:	f04f 085a 	mov.w	r8, #90	; 0x5a
 8004276:	f88e 8005 	strb.w	r8, [lr, #5]
      mIndexSTOP = stopTmp;
 800427a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    	    this->bufAdd(g485E.loopNr); // numberOfLoop
 800427e:	48c6      	ldr	r0, [pc, #792]	; (8004598 <_ZN5M485E17frameRX_getStatusEv+0x7bc>)
 8004280:	f890 b075 	ldrb.w	fp, [r0, #117]	; 0x75
      int stopPrev = mIndexSTOP;
 8004284:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8004288:	f10e 0801 	add.w	r8, lr, #1
 800428c:	48c1      	ldr	r0, [pc, #772]	; (8004594 <_ZN5M485E17frameRX_getStatusEv+0x7b8>)
 800428e:	fb80 9008 	smull	r9, r0, r0, r8
 8004292:	1100      	asrs	r0, r0, #4
 8004294:	f04f 0932 	mov.w	r9, #50	; 0x32
 8004298:	fb09 8010 	mls	r0, r9, r0, r8
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 800429c:	4288      	cmp	r0, r1
 800429e:	d004      	beq.n	80042aa <_ZN5M485E17frameRX_getStatusEv+0x4ce>
      mBuf[ stopPrev ] = aData;
 80042a0:	44a6      	add	lr, r4
 80042a2:	f88e b005 	strb.w	fp, [lr, #5]
      mIndexSTOP = stopTmp;
 80042a6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80042aa:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80042ae:	f10e 0801 	add.w	r8, lr, #1
 80042b2:	48b8      	ldr	r0, [pc, #736]	; (8004594 <_ZN5M485E17frameRX_getStatusEv+0x7b8>)
 80042b4:	fb80 9008 	smull	r9, r0, r0, r8
 80042b8:	1100      	asrs	r0, r0, #4
 80042ba:	f04f 0932 	mov.w	r9, #50	; 0x32
 80042be:	fb09 8010 	mls	r0, r9, r0, r8
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80042c2:	4288      	cmp	r0, r1
 80042c4:	d004      	beq.n	80042d0 <_ZN5M485E17frameRX_getStatusEv+0x4f4>
      mBuf[ stopPrev ] = aData;
 80042c6:	44a6      	add	lr, r4
 80042c8:	f88e 3005 	strb.w	r3, [lr, #5]
      mIndexSTOP = stopTmp;
 80042cc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80042d0:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80042d4:	f10e 0801 	add.w	r8, lr, #1
 80042d8:	48ae      	ldr	r0, [pc, #696]	; (8004594 <_ZN5M485E17frameRX_getStatusEv+0x7b8>)
 80042da:	fb80 9008 	smull	r9, r0, r0, r8
 80042de:	1100      	asrs	r0, r0, #4
 80042e0:	f04f 0932 	mov.w	r9, #50	; 0x32
 80042e4:	fb09 8010 	mls	r0, r9, r0, r8
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80042e8:	4288      	cmp	r0, r1
 80042ea:	d004      	beq.n	80042f6 <_ZN5M485E17frameRX_getStatusEv+0x51a>
      mBuf[ stopPrev ] = aData;
 80042ec:	44a6      	add	lr, r4
 80042ee:	f88e 3005 	strb.w	r3, [lr, #5]
      mIndexSTOP = stopTmp;
 80042f2:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80042f6:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80042fa:	f100 0e01 	add.w	lr, r0, #1
 80042fe:	4ba5      	ldr	r3, [pc, #660]	; (8004594 <_ZN5M485E17frameRX_getStatusEv+0x7b8>)
 8004300:	fb83 830e 	smull	r8, r3, r3, lr
 8004304:	111b      	asrs	r3, r3, #4
 8004306:	f04f 0832 	mov.w	r8, #50	; 0x32
 800430a:	fb08 e313 	mls	r3, r8, r3, lr
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 800430e:	428b      	cmp	r3, r1
 8004310:	d006      	beq.n	8004320 <_ZN5M485E17frameRX_getStatusEv+0x544>
      mBuf[ stopPrev ] = aData;
 8004312:	4420      	add	r0, r4
 8004314:	f04f 0ec3 	mov.w	lr, #195	; 0xc3
 8004318:	f880 e005 	strb.w	lr, [r0, #5]
      mIndexSTOP = stopTmp;
 800431c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8004320:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8004324:	f100 0e01 	add.w	lr, r0, #1
 8004328:	4b9a      	ldr	r3, [pc, #616]	; (8004594 <_ZN5M485E17frameRX_getStatusEv+0x7b8>)
 800432a:	fb83 830e 	smull	r8, r3, r3, lr
 800432e:	111b      	asrs	r3, r3, #4
 8004330:	f04f 0832 	mov.w	r8, #50	; 0x32
 8004334:	fb08 e313 	mls	r3, r8, r3, lr
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8004338:	428b      	cmp	r3, r1
 800433a:	d006      	beq.n	800434a <_ZN5M485E17frameRX_getStatusEv+0x56e>
      mBuf[ stopPrev ] = aData;
 800433c:	4420      	add	r0, r4
 800433e:	f04f 0e0c 	mov.w	lr, #12
 8004342:	f880 e005 	strb.w	lr, [r0, #5]
      mIndexSTOP = stopTmp;
 8004346:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 800434a:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 800434e:	f100 0e01 	add.w	lr, r0, #1
 8004352:	4b90      	ldr	r3, [pc, #576]	; (8004594 <_ZN5M485E17frameRX_getStatusEv+0x7b8>)
 8004354:	fb83 830e 	smull	r8, r3, r3, lr
 8004358:	111b      	asrs	r3, r3, #4
 800435a:	f04f 0832 	mov.w	r8, #50	; 0x32
 800435e:	fb08 e313 	mls	r3, r8, r3, lr
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8004362:	428b      	cmp	r3, r1
 8004364:	d004      	beq.n	8004370 <_ZN5M485E17frameRX_getStatusEv+0x594>
      mBuf[ stopPrev ] = aData;
 8004366:	4420      	add	r0, r4
 8004368:	f880 a005 	strb.w	sl, [r0, #5]
      mIndexSTOP = stopTmp;
 800436c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8004370:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8004374:	f100 0e01 	add.w	lr, r0, #1
 8004378:	4b86      	ldr	r3, [pc, #536]	; (8004594 <_ZN5M485E17frameRX_getStatusEv+0x7b8>)
 800437a:	fb83 830e 	smull	r8, r3, r3, lr
 800437e:	111b      	asrs	r3, r3, #4
 8004380:	f04f 0832 	mov.w	r8, #50	; 0x32
 8004384:	fb08 e313 	mls	r3, r8, r3, lr
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8004388:	428b      	cmp	r3, r1
 800438a:	d003      	beq.n	8004394 <_ZN5M485E17frameRX_getStatusEv+0x5b8>
      mBuf[ stopPrev ] = aData;
 800438c:	4420      	add	r0, r4
 800438e:	7142      	strb	r2, [r0, #5]
      mIndexSTOP = stopTmp;
 8004390:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8004394:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8004398:	1c50      	adds	r0, r2, #1
 800439a:	4b7e      	ldr	r3, [pc, #504]	; (8004594 <_ZN5M485E17frameRX_getStatusEv+0x7b8>)
 800439c:	fb83 e300 	smull	lr, r3, r3, r0
 80043a0:	111b      	asrs	r3, r3, #4
 80043a2:	f04f 0e32 	mov.w	lr, #50	; 0x32
 80043a6:	fb0e 0313 	mls	r3, lr, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80043aa:	428b      	cmp	r3, r1
 80043ac:	d004      	beq.n	80043b8 <_ZN5M485E17frameRX_getStatusEv+0x5dc>
      mBuf[ stopPrev ] = aData;
 80043ae:	4422      	add	r2, r4
 80043b0:	2001      	movs	r0, #1
 80043b2:	7150      	strb	r0, [r2, #5]
      mIndexSTOP = stopTmp;
 80043b4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80043b8:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80043bc:	1c50      	adds	r0, r2, #1
 80043be:	4b75      	ldr	r3, [pc, #468]	; (8004594 <_ZN5M485E17frameRX_getStatusEv+0x7b8>)
 80043c0:	fb83 e300 	smull	lr, r3, r3, r0
 80043c4:	111b      	asrs	r3, r3, #4
 80043c6:	f04f 0e32 	mov.w	lr, #50	; 0x32
 80043ca:	fb0e 0313 	mls	r3, lr, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80043ce:	428b      	cmp	r3, r1
 80043d0:	d003      	beq.n	80043da <_ZN5M485E17frameRX_getStatusEv+0x5fe>
      mBuf[ stopPrev ] = aData;
 80043d2:	4422      	add	r2, r4
 80043d4:	7155      	strb	r5, [r2, #5]
      mIndexSTOP = stopTmp;
 80043d6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80043da:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80043de:	1c50      	adds	r0, r2, #1
 80043e0:	4b6c      	ldr	r3, [pc, #432]	; (8004594 <_ZN5M485E17frameRX_getStatusEv+0x7b8>)
 80043e2:	fb83 5300 	smull	r5, r3, r3, r0
 80043e6:	111b      	asrs	r3, r3, #4
 80043e8:	2532      	movs	r5, #50	; 0x32
 80043ea:	fb05 0313 	mls	r3, r5, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80043ee:	428b      	cmp	r3, r1
 80043f0:	d004      	beq.n	80043fc <_ZN5M485E17frameRX_getStatusEv+0x620>
      mBuf[ stopPrev ] = aData;
 80043f2:	4422      	add	r2, r4
 80043f4:	9802      	ldr	r0, [sp, #8]
 80043f6:	7150      	strb	r0, [r2, #5]
      mIndexSTOP = stopTmp;
 80043f8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80043fc:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8004400:	1c50      	adds	r0, r2, #1
 8004402:	4b64      	ldr	r3, [pc, #400]	; (8004594 <_ZN5M485E17frameRX_getStatusEv+0x7b8>)
 8004404:	fb83 5300 	smull	r5, r3, r3, r0
 8004408:	111b      	asrs	r3, r3, #4
 800440a:	2532      	movs	r5, #50	; 0x32
 800440c:	fb05 0313 	mls	r3, r5, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8004410:	428b      	cmp	r3, r1
 8004412:	d004      	beq.n	800441e <_ZN5M485E17frameRX_getStatusEv+0x642>
      mBuf[ stopPrev ] = aData;
 8004414:	4422      	add	r2, r4
 8004416:	9802      	ldr	r0, [sp, #8]
 8004418:	7150      	strb	r0, [r2, #5]
      mIndexSTOP = stopTmp;
 800441a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 800441e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8004422:	1c50      	adds	r0, r2, #1
 8004424:	4b5b      	ldr	r3, [pc, #364]	; (8004594 <_ZN5M485E17frameRX_getStatusEv+0x7b8>)
 8004426:	fb83 5300 	smull	r5, r3, r3, r0
 800442a:	111b      	asrs	r3, r3, #4
 800442c:	2532      	movs	r5, #50	; 0x32
 800442e:	fb05 0313 	mls	r3, r5, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8004432:	428b      	cmp	r3, r1
 8004434:	d004      	beq.n	8004440 <_ZN5M485E17frameRX_getStatusEv+0x664>
      mBuf[ stopPrev ] = aData;
 8004436:	4422      	add	r2, r4
 8004438:	f882 c005 	strb.w	ip, [r2, #5]
      mIndexSTOP = stopTmp;
 800443c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8004440:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8004444:	1c50      	adds	r0, r2, #1
 8004446:	4b53      	ldr	r3, [pc, #332]	; (8004594 <_ZN5M485E17frameRX_getStatusEv+0x7b8>)
 8004448:	fb83 5300 	smull	r5, r3, r3, r0
 800444c:	111b      	asrs	r3, r3, #4
 800444e:	2532      	movs	r5, #50	; 0x32
 8004450:	fb05 0313 	mls	r3, r5, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8004454:	428b      	cmp	r3, r1
 8004456:	d004      	beq.n	8004462 <_ZN5M485E17frameRX_getStatusEv+0x686>
      mBuf[ stopPrev ] = aData;
 8004458:	4422      	add	r2, r4
 800445a:	9805      	ldr	r0, [sp, #20]
 800445c:	7150      	strb	r0, [r2, #5]
      mIndexSTOP = stopTmp;
 800445e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8004462:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8004466:	1c50      	adds	r0, r2, #1
 8004468:	4b4a      	ldr	r3, [pc, #296]	; (8004594 <_ZN5M485E17frameRX_getStatusEv+0x7b8>)
 800446a:	fb83 5300 	smull	r5, r3, r3, r0
 800446e:	111b      	asrs	r3, r3, #4
 8004470:	2532      	movs	r5, #50	; 0x32
 8004472:	fb05 0313 	mls	r3, r5, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8004476:	428b      	cmp	r3, r1
 8004478:	d003      	beq.n	8004482 <_ZN5M485E17frameRX_getStatusEv+0x6a6>
      mBuf[ stopPrev ] = aData;
 800447a:	4422      	add	r2, r4
 800447c:	7157      	strb	r7, [r2, #5]
      mIndexSTOP = stopTmp;
 800447e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8004482:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8004486:	1c50      	adds	r0, r2, #1
 8004488:	4b42      	ldr	r3, [pc, #264]	; (8004594 <_ZN5M485E17frameRX_getStatusEv+0x7b8>)
 800448a:	fb83 5300 	smull	r5, r3, r3, r0
 800448e:	111b      	asrs	r3, r3, #4
 8004490:	2532      	movs	r5, #50	; 0x32
 8004492:	fb05 0313 	mls	r3, r5, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8004496:	428b      	cmp	r3, r1
 8004498:	d004      	beq.n	80044a4 <_ZN5M485E17frameRX_getStatusEv+0x6c8>
      mBuf[ stopPrev ] = aData;
 800449a:	4422      	add	r2, r4
 800449c:	9806      	ldr	r0, [sp, #24]
 800449e:	7150      	strb	r0, [r2, #5]
      mIndexSTOP = stopTmp;
 80044a0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80044a4:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80044a8:	1c50      	adds	r0, r2, #1
 80044aa:	4b3a      	ldr	r3, [pc, #232]	; (8004594 <_ZN5M485E17frameRX_getStatusEv+0x7b8>)
 80044ac:	fb83 5300 	smull	r5, r3, r3, r0
 80044b0:	111b      	asrs	r3, r3, #4
 80044b2:	2532      	movs	r5, #50	; 0x32
 80044b4:	fb05 0313 	mls	r3, r5, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80044b8:	428b      	cmp	r3, r1
 80044ba:	d003      	beq.n	80044c4 <_ZN5M485E17frameRX_getStatusEv+0x6e8>
      mBuf[ stopPrev ] = aData;
 80044bc:	4422      	add	r2, r4
 80044be:	7156      	strb	r6, [r2, #5]
      mIndexSTOP = stopTmp;
 80044c0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80044c4:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80044c8:	1c50      	adds	r0, r2, #1
 80044ca:	4b32      	ldr	r3, [pc, #200]	; (8004594 <_ZN5M485E17frameRX_getStatusEv+0x7b8>)
 80044cc:	fb83 5300 	smull	r5, r3, r3, r0
 80044d0:	111b      	asrs	r3, r3, #4
 80044d2:	2532      	movs	r5, #50	; 0x32
 80044d4:	fb05 0313 	mls	r3, r5, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80044d8:	428b      	cmp	r3, r1
 80044da:	d004      	beq.n	80044e6 <_ZN5M485E17frameRX_getStatusEv+0x70a>
      mBuf[ stopPrev ] = aData;
 80044dc:	4422      	add	r2, r4
 80044de:	9807      	ldr	r0, [sp, #28]
 80044e0:	7150      	strb	r0, [r2, #5]
      mIndexSTOP = stopTmp;
 80044e2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80044e6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80044ea:	1c50      	adds	r0, r2, #1
 80044ec:	4b29      	ldr	r3, [pc, #164]	; (8004594 <_ZN5M485E17frameRX_getStatusEv+0x7b8>)
 80044ee:	fb83 5300 	smull	r5, r3, r3, r0
 80044f2:	111b      	asrs	r3, r3, #4
 80044f4:	2532      	movs	r5, #50	; 0x32
 80044f6:	fb05 0313 	mls	r3, r5, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80044fa:	428b      	cmp	r3, r1
 80044fc:	d004      	beq.n	8004508 <_ZN5M485E17frameRX_getStatusEv+0x72c>
      mBuf[ stopPrev ] = aData;
 80044fe:	4422      	add	r2, r4
 8004500:	9801      	ldr	r0, [sp, #4]
 8004502:	7150      	strb	r0, [r2, #5]
      mIndexSTOP = stopTmp;
 8004504:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8004508:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 800450c:	1c50      	adds	r0, r2, #1
 800450e:	4b21      	ldr	r3, [pc, #132]	; (8004594 <_ZN5M485E17frameRX_getStatusEv+0x7b8>)
 8004510:	fb83 5300 	smull	r5, r3, r3, r0
 8004514:	111b      	asrs	r3, r3, #4
 8004516:	2532      	movs	r5, #50	; 0x32
 8004518:	fb05 0313 	mls	r3, r5, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 800451c:	428b      	cmp	r3, r1
 800451e:	d004      	beq.n	800452a <_ZN5M485E17frameRX_getStatusEv+0x74e>
      mBuf[ stopPrev ] = aData;
 8004520:	4422      	add	r2, r4
 8004522:	9908      	ldr	r1, [sp, #32]
 8004524:	7151      	strb	r1, [r2, #5]
      mIndexSTOP = stopTmp;
 8004526:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if( mIndexSTART == mIndexSTOP ) return false;
 800452a:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 800452e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8004532:	4293      	cmp	r3, r2
 8004534:	d020      	beq.n	8004578 <_ZN5M485E17frameRX_getStatusEv+0x79c>
      if( mIndexSTART < mIndexSTOP )  (*aCnt) = mIndexSTOP - mIndexSTART;
 8004536:	d21c      	bcs.n	8004572 <_ZN5M485E17frameRX_getStatusEv+0x796>
 8004538:	1ad5      	subs	r5, r2, r3
      (*aBuf) = &(mBuf[mIndexSTART]);
 800453a:	4423      	add	r3, r4
 800453c:	3305      	adds	r3, #5
 800453e:	9309      	str	r3, [sp, #36]	; 0x24
      return true;
 8004540:	2301      	movs	r3, #1
      if( res ){
 8004542:	2b00      	cmp	r3, #0
 8004544:	f43f ac67 	beq.w	8003e16 <_ZN5M485E17frameRX_getStatusEv+0x3a>
          _o485E_EN = 1;
 8004548:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800454c:	7d53      	ldrb	r3, [r2, #21]
 800454e:	f043 0310 	orr.w	r3, r3, #16
 8004552:	7553      	strb	r3, [r2, #21]
          HAL_StatusTypeDef uartRes = HAL_UART_Transmit_IT( mhUart, buf,  cnt );
 8004554:	b2aa      	uxth	r2, r5
 8004556:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004558:	6820      	ldr	r0, [r4, #0]
 800455a:	f7fd ff55 	bl	8002408 <HAL_UART_Transmit_IT>
           mIsEN_to_0 += cnt;
 800455e:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 8004562:	442b      	add	r3, r5
 8004564:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
          if( uartRes == HAL_OK ){   
 8004568:	2800      	cmp	r0, #0
 800456a:	f47f ac54 	bne.w	8003e16 <_ZN5M485E17frameRX_getStatusEv+0x3a>
            mSendingTXCnt = cnt;
 800456e:	63e5      	str	r5, [r4, #60]	; 0x3c
    }//-------------------------------------------------------------------------
 8004570:	e451      	b.n	8003e16 <_ZN5M485E17frameRX_getStatusEv+0x3a>
      else                            (*aCnt) = cBufLength - mIndexSTART;
 8004572:	f1c3 0532 	rsb	r5, r3, #50	; 0x32
 8004576:	e7e0      	b.n	800453a <_ZN5M485E17frameRX_getStatusEv+0x75e>
      int cnt = 0;
 8004578:	2500      	movs	r5, #0
      if( mIndexSTART == mIndexSTOP ) return false;
 800457a:	462b      	mov	r3, r5
 800457c:	e7e1      	b.n	8004542 <_ZN5M485E17frameRX_getStatusEv+0x766>
    	if(gateway == g485E.mMyAddr && loop == g485E.loopNr)
 800457e:	4b06      	ldr	r3, [pc, #24]	; (8004598 <_ZN5M485E17frameRX_getStatusEv+0x7bc>)
 8004580:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8004584:	4543      	cmp	r3, r8
 8004586:	f47f ac46 	bne.w	8003e16 <_ZN5M485E17frameRX_getStatusEv+0x3a>
    		gST7580.sendTX_getStatus(addr, gateway);
 800458a:	4804      	ldr	r0, [pc, #16]	; (800459c <_ZN5M485E17frameRX_getStatusEv+0x7c0>)
 800458c:	f7ff fbe0 	bl	8003d50 <_ZN7MST758016sendTX_getStatusEhh>
 8004590:	e441      	b.n	8003e16 <_ZN5M485E17frameRX_getStatusEv+0x3a>
 8004592:	4770      	bx	lr
 8004594:	51eb851f 	.word	0x51eb851f
 8004598:	200008a8 	.word	0x200008a8
 800459c:	20000a64 	.word	0x20000a64

080045a0 <_ZN7MST758014sendTX_setAddrEhh>:

/// ----------------------------------------------------------
/// FRAME setAddr
void MST7580::sendTX_setAddr( uint8_t addr ,uint8_t newAddr ){
 80045a0:	b430      	push	{r4, r5}
 80045a2:	b082      	sub	sp, #8
    // --- zmienne --------------------------------------

    // --- wysylanie ------------------------------------
	const int cnt = 3;
	uint8_t frame[cnt];
	frame[0] = 0x55;    // cmd = AskStatus
 80045a4:	2355      	movs	r3, #85	; 0x55
 80045a6:	f88d 3004 	strb.w	r3, [sp, #4]
	frame[1] = addr;    // addr
 80045aa:	f88d 1005 	strb.w	r1, [sp, #5]
	frame[2] = newAddr;
 80045ae:	f88d 2006 	strb.w	r2, [sp, #6]
      int dif = mIndexSTOP - mIndexSTART;
 80045b2:	4b1c      	ldr	r3, [pc, #112]	; (8004624 <_ZN7MST758014sendTX_setAddrEhh+0x84>)
 80045b4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80045b8:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
      if( dif < 0 ) dif = cBufLength + dif;
 80045bc:	1a53      	subs	r3, r2, r1
 80045be:	d414      	bmi.n	80045ea <_ZN7MST758014sendTX_setAddrEhh+0x4a>
      int N2 = N + cnt + 1;
 80045c0:	3303      	adds	r3, #3
      if( N2 >= cBufLength ) return false;
 80045c2:	2b26      	cmp	r3, #38	; 0x26
 80045c4:	dc2b      	bgt.n	800461e <_ZN7MST758014sendTX_setAddrEhh+0x7e>
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80045c6:	1c50      	adds	r0, r2, #1
 80045c8:	4b17      	ldr	r3, [pc, #92]	; (8004628 <_ZN7MST758014sendTX_setAddrEhh+0x88>)
 80045ca:	fb83 4300 	smull	r4, r3, r3, r0
 80045ce:	111b      	asrs	r3, r3, #4
 80045d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80045d4:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80045d8:	4299      	cmp	r1, r3
 80045da:	d004      	beq.n	80045e6 <_ZN7MST758014sendTX_setAddrEhh+0x46>
      mBuf[ stopPrev ] = aData;
 80045dc:	4811      	ldr	r0, [pc, #68]	; (8004624 <_ZN7MST758014sendTX_setAddrEhh+0x84>)
 80045de:	2403      	movs	r4, #3
 80045e0:	5484      	strb	r4, [r0, r2]
      mIndexSTOP = stopTmp;
 80045e2:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void MST7580::sendTX_setAddr( uint8_t addr ,uint8_t newAddr ){
 80045e6:	2200      	movs	r2, #0
 80045e8:	e006      	b.n	80045f8 <_ZN7MST758014sendTX_setAddrEhh+0x58>
      if( dif < 0 ) dif = cBufLength + dif;
 80045ea:	3328      	adds	r3, #40	; 0x28
 80045ec:	e7e8      	b.n	80045c0 <_ZN7MST758014sendTX_setAddrEhh+0x20>
      mBuf[ stopPrev ] = aData;
 80045ee:	480d      	ldr	r0, [pc, #52]	; (8004624 <_ZN7MST758014sendTX_setAddrEhh+0x84>)
 80045f0:	5505      	strb	r5, [r0, r4]
      mIndexSTOP = stopTmp;
 80045f2:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
      for( int i=0; i<cnt; i++ ) bufAdd( frame[i] );
 80045f6:	3201      	adds	r2, #1
 80045f8:	2a02      	cmp	r2, #2
 80045fa:	dc10      	bgt.n	800461e <_ZN7MST758014sendTX_setAddrEhh+0x7e>
 80045fc:	ab01      	add	r3, sp, #4
 80045fe:	5c9d      	ldrb	r5, [r3, r2]
      int stopPrev = mIndexSTOP;
 8004600:	4b08      	ldr	r3, [pc, #32]	; (8004624 <_ZN7MST758014sendTX_setAddrEhh+0x84>)
 8004602:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8004606:	1c60      	adds	r0, r4, #1
 8004608:	4b07      	ldr	r3, [pc, #28]	; (8004628 <_ZN7MST758014sendTX_setAddrEhh+0x88>)
 800460a:	fb83 c300 	smull	ip, r3, r3, r0
 800460e:	111b      	asrs	r3, r3, #4
 8004610:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004614:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8004618:	4299      	cmp	r1, r3
 800461a:	d1e8      	bne.n	80045ee <_ZN7MST758014sendTX_setAddrEhh+0x4e>
 800461c:	e7eb      	b.n	80045f6 <_ZN7MST758014sendTX_setAddrEhh+0x56>
	gST7580.mBuf_Frames.bufAddFrame( cnt, frame );


}// -----------------------------------------------------------
 800461e:	b002      	add	sp, #8
 8004620:	bc30      	pop	{r4, r5}
 8004622:	4770      	bx	lr
 8004624:	20000a64 	.word	0x20000a64
 8004628:	66666667 	.word	0x66666667

0800462c <_ZN5M485E15frameRX_setAddrEv>:

/// ----------------------------------------------------------
/// FRAME setAddr
void M485E::frameRX_setAddr(){

    uint16_t crc = (uint16_t)((mRXFrameBuf[4] << 8) | (mRXFrameBuf[5]));
 800462c:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
 8004630:	f890 3052 	ldrb.w	r3, [r0, #82]	; 0x52
 8004634:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004638:	b21b      	sxth	r3, r3
    if (crc != 0xE0E1) return;  // nie poprawne CRC
 800463a:	4a6c      	ldr	r2, [pc, #432]	; (80047ec <_ZN5M485E15frameRX_setAddrEv+0x1c0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	f040 80d4 	bne.w	80047ea <_ZN5M485E15frameRX_setAddrEv+0x1be>
void M485E::frameRX_setAddr(){
 8004642:	b530      	push	{r4, r5, lr}
 8004644:	b085      	sub	sp, #20

    uint8_t loop = mRXFrameBuf[0];
 8004646:	f890 504d 	ldrb.w	r5, [r0, #77]	; 0x4d
    uint8_t gateway = mRXFrameBuf[1];
 800464a:	f890 404e 	ldrb.w	r4, [r0, #78]	; 0x4e
    uint8_t addr = mRXFrameBuf[2];
 800464e:	f890 104f 	ldrb.w	r1, [r0, #79]	; 0x4f
    uint8_t newAddr = mRXFrameBuf[6];
 8004652:	f890 2053 	ldrb.w	r2, [r0, #83]	; 0x53

    if(( addr == g485E.mMyAddr) && ( gateway == g485E.mMyAddr ) && (loop == g485E.loopNr)){
 8004656:	4b66      	ldr	r3, [pc, #408]	; (80047f0 <_ZN5M485E15frameRX_setAddrEv+0x1c4>)
 8004658:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800465c:	428b      	cmp	r3, r1
 800465e:	d004      	beq.n	800466a <_ZN5M485E15frameRX_setAddrEv+0x3e>
    	g485E.mMyAddr = newAddr;
        gFlash_SSD.set8( 0, g485E.mMyAddr );
        gFlash_SSD.flush();
    }else{
    	if(gateway == g485E.mMyAddr && loop == g485E.loopNr)
 8004660:	42a3      	cmp	r3, r4
 8004662:	f000 80b8 	beq.w	80047d6 <_ZN5M485E15frameRX_setAddrEv+0x1aa>
    	{
    		gST7580.sendTX_setAddr(addr, newAddr);
    	}
    }

    }
 8004666:	b005      	add	sp, #20
 8004668:	bd30      	pop	{r4, r5, pc}
    if(( addr == g485E.mMyAddr) && ( gateway == g485E.mMyAddr ) && (loop == g485E.loopNr)){
 800466a:	42a3      	cmp	r3, r4
 800466c:	d1f8      	bne.n	8004660 <_ZN5M485E15frameRX_setAddrEv+0x34>
 800466e:	4860      	ldr	r0, [pc, #384]	; (80047f0 <_ZN5M485E15frameRX_setAddrEv+0x1c4>)
 8004670:	f890 0075 	ldrb.w	r0, [r0, #117]	; 0x75
 8004674:	42a8      	cmp	r0, r5
 8004676:	d1f3      	bne.n	8004660 <_ZN5M485E15frameRX_setAddrEv+0x34>
    	g485E.mMyAddr = newAddr;
 8004678:	4b5d      	ldr	r3, [pc, #372]	; (80047f0 <_ZN5M485E15frameRX_setAddrEv+0x1c4>)
 800467a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    
    // *** Table ***************************************************
    public: uint8_t get8( uint16_t aIndex ){
      if( aIndex >= _SSD_TABSIZE_ ) return 0xFF;         // blad indeksu
      return mTable[ aIndex ];
 800467e:	4b5d      	ldr	r3, [pc, #372]	; (80047f4 <_ZN5M485E15frameRX_setAddrEv+0x1c8>)
 8004680:	7b5b      	ldrb	r3, [r3, #13]

    
    public: void set8( uint16_t aIndex, uint8_t aValue ){
      if( aIndex >= _SSD_TABSIZE_ ) return;             // blad indeksu
      uint8_t prevWrt = get8(aIndex);
      if( prevWrt != aValue ){
 8004682:	429a      	cmp	r2, r3
 8004684:	d005      	beq.n	8004692 <_ZN5M485E15frameRX_setAddrEv+0x66>
          mTable[ aIndex ] = aValue;
 8004686:	4b5b      	ldr	r3, [pc, #364]	; (80047f4 <_ZN5M485E15frameRX_setAddrEv+0x1c8>)
 8004688:	735a      	strb	r2, [r3, #13]
        mChangeTable[ind8A] |= (maska);      
 800468a:	7d5a      	ldrb	r2, [r3, #21]
 800468c:	f042 0201 	orr.w	r2, r2, #1
 8004690:	755a      	strb	r2, [r3, #21]
  public: uint8_t flush(){
      // zapisz wszystkie wpisy z tablicy stosownie do mChangeTable
      
    // idz po kolei po bitach mChange Table
        // tutaj zmieniac index oraz maske - troche trudniejsze
     for( int i=0; i<(_SSD_TABSIZE_); i++ ){
 8004692:	2400      	movs	r4, #0
 8004694:	e004      	b.n	80046a0 <_ZN5M485E15frameRX_setAddrEv+0x74>
    
  
  // index <= 126
  public: uint16_t flushIndex(uint16_t aIndex ){
      // zapisz wszystkie wpisy z tablicy stosownie do mChangeTable
      if( aIndex >= _SSD_TABSIZE_ ) return 1; // blad indeksu: za duzy
 8004696:	2301      	movs	r3, #1
            uint8_t res = flushIndex( i );
 8004698:	b2db      	uxtb	r3, r3
            if( res == 2 ){     // flash czyszczony !!!
 800469a:	2b02      	cmp	r3, #2
 800469c:	d07c      	beq.n	8004798 <_ZN5M485E15frameRX_setAddrEv+0x16c>
     for( int i=0; i<(_SSD_TABSIZE_); i++ ){
 800469e:	3401      	adds	r4, #1
 80046a0:	2c07      	cmp	r4, #7
 80046a2:	dce0      	bgt.n	8004666 <_ZN5M485E15frameRX_setAddrEv+0x3a>
        uint8_t bitChange = changeTable_getBit( i );
 80046a4:	b2a5      	uxth	r5, r4
        if( aIndex >= _SSD_TABSIZE_ ) return 0;         // blad indeksu
 80046a6:	2d07      	cmp	r5, #7
 80046a8:	d8f9      	bhi.n	800469e <_ZN5M485E15frameRX_setAddrEv+0x72>
        int ind8A = aIndex / 8;
 80046aa:	08e8      	lsrs	r0, r5, #3
        int ind8B = aIndex - ind8A*8;
 80046ac:	eba5 01c0 	sub.w	r1, r5, r0, lsl #3
        uint8_t maska = 0x01 << ind8B; 
 80046b0:	2301      	movs	r3, #1
 80046b2:	408b      	lsls	r3, r1
        return  (mChangeTable[ind8A] & maska);
 80046b4:	4a4f      	ldr	r2, [pc, #316]	; (80047f4 <_ZN5M485E15frameRX_setAddrEv+0x1c8>)
 80046b6:	4402      	add	r2, r0
 80046b8:	7d52      	ldrb	r2, [r2, #21]
        if( bitChange != 0 ){
 80046ba:	4213      	tst	r3, r2
 80046bc:	d0ef      	beq.n	800469e <_ZN5M485E15frameRX_setAddrEv+0x72>
      if( aIndex >= _SSD_TABSIZE_ ) return 1; // blad indeksu: za duzy
 80046be:	2d07      	cmp	r5, #7
 80046c0:	d8e9      	bhi.n	8004696 <_ZN5M485E15frameRX_setAddrEv+0x6a>
            
      if( mOffset >= (2048-1) )     return 2; // blad FLASH: ERASE REQ
 80046c2:	4b4c      	ldr	r3, [pc, #304]	; (80047f4 <_ZN5M485E15frameRX_setAddrEv+0x1c8>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80046ca:	4293      	cmp	r3, r2
 80046cc:	dc5e      	bgt.n	800478c <_ZN5M485E15frameRX_setAddrEv+0x160>
      uint8_t res = *(__IO uint8_t*)(addr);
      return res;
    };//------------------------------------------------------------------ 
    //--------------------------------------------------------------------  
    public: static  uint16_t read16( uint16_t aPage, uint16_t aOffset ){
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 80046ce:	4a49      	ldr	r2, [pc, #292]	; (80047f4 <_ZN5M485E15frameRX_setAddrEv+0x1c8>)
 80046d0:	8810      	ldrh	r0, [r2, #0]
 80046d2:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80046d6:	02c0      	lsls	r0, r0, #11
 80046d8:	b29b      	uxth	r3, r3
      uint16_t res = *(__IO uint16_t*)(addr);
 80046da:	5a1b      	ldrh	r3, [r3, r0]
 80046dc:	b29b      	uxth	r3, r3
            
      // --- upewnij sie ze mOffset jest ok -----
      { uint16_t dana = MFlash::read16( mPage, mOffset );
        if( dana != 0xFFFF ){
 80046de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d012      	beq.n	800470c <_ZN5M485E15frameRX_setAddrEv+0xe0>
          mOffset = 0;  flash_searchFF();
 80046e6:	4b43      	ldr	r3, [pc, #268]	; (80047f4 <_ZN5M485E15frameRX_setAddrEv+0x1c8>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	609a      	str	r2, [r3, #8]
          uint16_t dana = MFlash::read16( mPage, mOffset );
 80046ec:	4b41      	ldr	r3, [pc, #260]	; (80047f4 <_ZN5M485E15frameRX_setAddrEv+0x1c8>)
 80046ee:	689b      	ldr	r3, [r3, #8]
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 80046f0:	b29a      	uxth	r2, r3
      uint16_t res = *(__IO uint16_t*)(addr);
 80046f2:	5a12      	ldrh	r2, [r2, r0]
 80046f4:	b292      	uxth	r2, r2
          if( dana == 0xFFFF ) return;         // koniec przetwarzania
 80046f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80046fa:	428a      	cmp	r2, r1
 80046fc:	d006      	beq.n	800470c <_ZN5M485E15frameRX_setAddrEv+0xe0>
          mOffset += 2;
 80046fe:	3302      	adds	r3, #2
 8004700:	4a3c      	ldr	r2, [pc, #240]	; (80047f4 <_ZN5M485E15frameRX_setAddrEv+0x1c8>)
 8004702:	6093      	str	r3, [r2, #8]
       }while( mOffset < (2048-1) );
 8004704:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004708:	4293      	cmp	r3, r2
 800470a:	ddef      	ble.n	80046ec <_ZN5M485E15frameRX_setAddrEv+0xc0>
        }
      }
      if( mOffset >= (2048-1) )     return 2;   // blad FLASH: ERASE REQ
 800470c:	4b39      	ldr	r3, [pc, #228]	; (80047f4 <_ZN5M485E15frameRX_setAddrEv+0x1c8>)
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8004714:	429a      	cmp	r2, r3
 8004716:	dc3b      	bgt.n	8004790 <_ZN5M485E15frameRX_setAddrEv+0x164>
      HAL_StatusTypeDef res = HAL_FLASH_Lock();
      return res;
    };//------------------------------------------------------------------
    //--------------------------------------------------------------------
    public: static HAL_StatusTypeDef unlock(){
      HAL_StatusTypeDef res = HAL_FLASH_Unlock();
 8004718:	f7fc fd84 	bl	8001224 <HAL_FLASH_Unlock>
      
      // --- ZAPIS ------------------------------
      MFlash::unlock();
      uint8_t index = aIndex;
 800471c:	b2eb      	uxtb	r3, r5
      if( index > 126 ) return 3;               // blad indeksu: za duzy
 800471e:	2b7e      	cmp	r3, #126	; 0x7e
 8004720:	d838      	bhi.n	8004794 <_ZN5M485E15frameRX_setAddrEv+0x168>
      uint8_t wrt = mTable[aIndex];
 8004722:	4834      	ldr	r0, [pc, #208]	; (80047f4 <_ZN5M485E15frameRX_setAddrEv+0x1c8>)
 8004724:	1942      	adds	r2, r0, r5
 8004726:	7b52      	ldrb	r2, [r2, #13]
      
      uint16_t dana2 = ((index+1)<<8) | (wrt);
 8004728:	3301      	adds	r3, #1
 800472a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    
    
    /// WRITE ............................................................
    //--------------------------------------------------------------------  
    public: static HAL_StatusTypeDef write16( uint16_t aPage, uint16_t aOffset, uint16_t aData ){
       uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 800472e:	8801      	ldrh	r1, [r0, #0]
 8004730:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8004734:	8900      	ldrh	r0, [r0, #8]
       HAL_StatusTypeDef res = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD , addr, aData );
 8004736:	b292      	uxth	r2, r2
 8004738:	2300      	movs	r3, #0
 800473a:	eb00 21c1 	add.w	r1, r0, r1, lsl #11
 800473e:	2001      	movs	r0, #1
 8004740:	f7fc fdc4 	bl	80012cc <HAL_FLASH_Program>
      HAL_StatusTypeDef res = HAL_FLASH_Lock();
 8004744:	f7fc fd88 	bl	8001258 <HAL_FLASH_Lock>
          uint16_t dana = MFlash::read16( mPage, mOffset );
 8004748:	4b2a      	ldr	r3, [pc, #168]	; (80047f4 <_ZN5M485E15frameRX_setAddrEv+0x1c8>)
 800474a:	689a      	ldr	r2, [r3, #8]
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004752:	02db      	lsls	r3, r3, #11
 8004754:	b291      	uxth	r1, r2
      uint16_t res = *(__IO uint16_t*)(addr);
 8004756:	5acb      	ldrh	r3, [r1, r3]
 8004758:	b29b      	uxth	r3, r3
          if( dana == 0xFFFF ) return;         // koniec przetwarzania
 800475a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800475e:	428b      	cmp	r3, r1
 8004760:	d006      	beq.n	8004770 <_ZN5M485E15frameRX_setAddrEv+0x144>
          mOffset += 2;
 8004762:	3202      	adds	r2, #2
 8004764:	4b23      	ldr	r3, [pc, #140]	; (80047f4 <_ZN5M485E15frameRX_setAddrEv+0x1c8>)
 8004766:	609a      	str	r2, [r3, #8]
       }while( mOffset < (2048-1) );
 8004768:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800476c:	429a      	cmp	r2, r3
 800476e:	ddeb      	ble.n	8004748 <_ZN5M485E15frameRX_setAddrEv+0x11c>
        int ind8B = aIndex - ind8A*8;
 8004770:	f005 0207 	and.w	r2, r5, #7
        uint8_t maska = 0x01 << ind8B; 
 8004774:	2301      	movs	r3, #1
 8004776:	fa03 f202 	lsl.w	r2, r3, r2
        mChangeTable[ind8A] &= (~maska);
 800477a:	4b1e      	ldr	r3, [pc, #120]	; (80047f4 <_ZN5M485E15frameRX_setAddrEv+0x1c8>)
 800477c:	eb03 05d5 	add.w	r5, r3, r5, lsr #3
 8004780:	7d6b      	ldrb	r3, [r5, #21]
 8004782:	ea23 0302 	bic.w	r3, r3, r2
 8004786:	756b      	strb	r3, [r5, #21]
      flash_searchFF(); // update do mOffset
      
      // --- uaktualnij index w changeTable -----
      changeTable_bitClear( aIndex );
      
      return 0;
 8004788:	2300      	movs	r3, #0
 800478a:	e785      	b.n	8004698 <_ZN5M485E15frameRX_setAddrEv+0x6c>
      if( mOffset >= (2048-1) )     return 2; // blad FLASH: ERASE REQ
 800478c:	2302      	movs	r3, #2
 800478e:	e783      	b.n	8004698 <_ZN5M485E15frameRX_setAddrEv+0x6c>
      if( mOffset >= (2048-1) )     return 2;   // blad FLASH: ERASE REQ
 8004790:	2302      	movs	r3, #2
 8004792:	e781      	b.n	8004698 <_ZN5M485E15frameRX_setAddrEv+0x6c>
      if( index > 126 ) return 3;               // blad indeksu: za duzy
 8004794:	2303      	movs	r3, #3
 8004796:	e77f      	b.n	8004698 <_ZN5M485E15frameRX_setAddrEv+0x6c>
      HAL_StatusTypeDef res = HAL_FLASH_Unlock();
 8004798:	f7fc fd44 	bl	8001224 <HAL_FLASH_Unlock>
               MFlash::MFlash::erasePage(mPage);
 800479c:	4d15      	ldr	r5, [pc, #84]	; (80047f4 <_ZN5M485E15frameRX_setAddrEv+0x1c8>)
 800479e:	882b      	ldrh	r3, [r5, #0]
    
    /// ERASE ............................................................
    //--------------------------------------------------------------------  
    public: static HAL_StatusTypeDef erasePage( uint16_t aPage ){
      
       uint32_t addr = 0x08000000 + (aPage * 0x800);
 80047a0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80047a4:	02db      	lsls	r3, r3, #11
      
       FLASH_EraseInitTypeDef f;
       f.TypeErase = FLASH_TYPEERASE_PAGES;
 80047a6:	2400      	movs	r4, #0
 80047a8:	9401      	str	r4, [sp, #4]
       f.PageAddress = addr;
 80047aa:	9302      	str	r3, [sp, #8]
       f.NbPages = 1;
 80047ac:	2301      	movs	r3, #1
 80047ae:	9303      	str	r3, [sp, #12]
      
       uint32_t PageError = 0;
 80047b0:	9400      	str	r4, [sp, #0]
       HAL_StatusTypeDef res = HAL_FLASHEx_Erase(&f, &PageError);
 80047b2:	4669      	mov	r1, sp
 80047b4:	a801      	add	r0, sp, #4
 80047b6:	f7fc fdfb 	bl	80013b0 <HAL_FLASHEx_Erase>
      HAL_StatusTypeDef res = HAL_FLASH_Lock();
 80047ba:	f7fc fd4d 	bl	8001258 <HAL_FLASH_Lock>
               mOffset = 0;
 80047be:	60ac      	str	r4, [r5, #8]
        for( int i=0; i<((_SSD_TABSIZE_/8)+1); i++ ) mChangeTable[i] = 0xFF;
 80047c0:	4623      	mov	r3, r4
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	dc05      	bgt.n	80047d2 <_ZN5M485E15frameRX_setAddrEv+0x1a6>
 80047c6:	4a0b      	ldr	r2, [pc, #44]	; (80047f4 <_ZN5M485E15frameRX_setAddrEv+0x1c8>)
 80047c8:	441a      	add	r2, r3
 80047ca:	21ff      	movs	r1, #255	; 0xff
 80047cc:	7551      	strb	r1, [r2, #21]
 80047ce:	3301      	adds	r3, #1
 80047d0:	e7f7      	b.n	80047c2 <_ZN5M485E15frameRX_setAddrEv+0x196>
               i = 0; continue;
 80047d2:	2400      	movs	r4, #0
 80047d4:	e763      	b.n	800469e <_ZN5M485E15frameRX_setAddrEv+0x72>
    	if(gateway == g485E.mMyAddr && loop == g485E.loopNr)
 80047d6:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <_ZN5M485E15frameRX_setAddrEv+0x1c4>)
 80047d8:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80047dc:	42ab      	cmp	r3, r5
 80047de:	f47f af42 	bne.w	8004666 <_ZN5M485E15frameRX_setAddrEv+0x3a>
    		gST7580.sendTX_setAddr(addr, newAddr);
 80047e2:	4805      	ldr	r0, [pc, #20]	; (80047f8 <_ZN5M485E15frameRX_setAddrEv+0x1cc>)
 80047e4:	f7ff fedc 	bl	80045a0 <_ZN7MST758014sendTX_setAddrEhh>
 80047e8:	e73d      	b.n	8004666 <_ZN5M485E15frameRX_setAddrEv+0x3a>
 80047ea:	4770      	bx	lr
 80047ec:	ffffe0e1 	.word	0xffffe0e1
 80047f0:	200008a8 	.word	0x200008a8
 80047f4:	20000970 	.word	0x20000970
 80047f8:	20000a64 	.word	0x20000a64

080047fc <_ZN7MST758016sendTX_setRelaysEhh>:

/// ----------------------------------------------------------
/// FRAME setRelays
void MST7580::sendTX_setRelays( uint8_t addr, uint8_t relays  ){
 80047fc:	b430      	push	{r4, r5}
 80047fe:	b082      	sub	sp, #8
    // --- zmienne --------------------------------------

    // --- wysylanie ------------------------------------
	const int cnt = 3;
	uint8_t frame[cnt];
	frame[0] = 0x54;    // cmd = AskStatus
 8004800:	2354      	movs	r3, #84	; 0x54
 8004802:	f88d 3004 	strb.w	r3, [sp, #4]
	frame[1] = addr;    // addr
 8004806:	f88d 1005 	strb.w	r1, [sp, #5]
	frame[2] = relays;
 800480a:	f88d 2006 	strb.w	r2, [sp, #6]
      int dif = mIndexSTOP - mIndexSTART;
 800480e:	4b1c      	ldr	r3, [pc, #112]	; (8004880 <_ZN7MST758016sendTX_setRelaysEhh+0x84>)
 8004810:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8004814:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
      if( dif < 0 ) dif = cBufLength + dif;
 8004818:	1a53      	subs	r3, r2, r1
 800481a:	d414      	bmi.n	8004846 <_ZN7MST758016sendTX_setRelaysEhh+0x4a>
      int N2 = N + cnt + 1;
 800481c:	3303      	adds	r3, #3
      if( N2 >= cBufLength ) return false;
 800481e:	2b26      	cmp	r3, #38	; 0x26
 8004820:	dc2b      	bgt.n	800487a <_ZN7MST758016sendTX_setRelaysEhh+0x7e>
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8004822:	1c50      	adds	r0, r2, #1
 8004824:	4b17      	ldr	r3, [pc, #92]	; (8004884 <_ZN7MST758016sendTX_setRelaysEhh+0x88>)
 8004826:	fb83 4300 	smull	r4, r3, r3, r0
 800482a:	111b      	asrs	r3, r3, #4
 800482c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004830:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8004834:	4299      	cmp	r1, r3
 8004836:	d004      	beq.n	8004842 <_ZN7MST758016sendTX_setRelaysEhh+0x46>
      mBuf[ stopPrev ] = aData;
 8004838:	4811      	ldr	r0, [pc, #68]	; (8004880 <_ZN7MST758016sendTX_setRelaysEhh+0x84>)
 800483a:	2403      	movs	r4, #3
 800483c:	5484      	strb	r4, [r0, r2]
      mIndexSTOP = stopTmp;
 800483e:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void MST7580::sendTX_setRelays( uint8_t addr, uint8_t relays  ){
 8004842:	2200      	movs	r2, #0
 8004844:	e006      	b.n	8004854 <_ZN7MST758016sendTX_setRelaysEhh+0x58>
      if( dif < 0 ) dif = cBufLength + dif;
 8004846:	3328      	adds	r3, #40	; 0x28
 8004848:	e7e8      	b.n	800481c <_ZN7MST758016sendTX_setRelaysEhh+0x20>
      mBuf[ stopPrev ] = aData;
 800484a:	480d      	ldr	r0, [pc, #52]	; (8004880 <_ZN7MST758016sendTX_setRelaysEhh+0x84>)
 800484c:	5505      	strb	r5, [r0, r4]
      mIndexSTOP = stopTmp;
 800484e:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
      for( int i=0; i<cnt; i++ ) bufAdd( frame[i] );
 8004852:	3201      	adds	r2, #1
 8004854:	2a02      	cmp	r2, #2
 8004856:	dc10      	bgt.n	800487a <_ZN7MST758016sendTX_setRelaysEhh+0x7e>
 8004858:	ab01      	add	r3, sp, #4
 800485a:	5c9d      	ldrb	r5, [r3, r2]
      int stopPrev = mIndexSTOP;
 800485c:	4b08      	ldr	r3, [pc, #32]	; (8004880 <_ZN7MST758016sendTX_setRelaysEhh+0x84>)
 800485e:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8004862:	1c60      	adds	r0, r4, #1
 8004864:	4b07      	ldr	r3, [pc, #28]	; (8004884 <_ZN7MST758016sendTX_setRelaysEhh+0x88>)
 8004866:	fb83 c300 	smull	ip, r3, r3, r0
 800486a:	111b      	asrs	r3, r3, #4
 800486c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004870:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8004874:	4299      	cmp	r1, r3
 8004876:	d1e8      	bne.n	800484a <_ZN7MST758016sendTX_setRelaysEhh+0x4e>
 8004878:	e7eb      	b.n	8004852 <_ZN7MST758016sendTX_setRelaysEhh+0x56>
	gST7580.mBuf_Frames.bufAddFrame( cnt, frame );

}// -----------------------------------------------------------
 800487a:	b002      	add	sp, #8
 800487c:	bc30      	pop	{r4, r5}
 800487e:	4770      	bx	lr
 8004880:	20000a64 	.word	0x20000a64
 8004884:	66666667 	.word	0x66666667

08004888 <_ZN5M485E17frameRX_setRelaysEv>:
void M485E::frameRX_setRelays(){
 8004888:	b538      	push	{r3, r4, r5, lr}
	uint16_t crc = (uint16_t)((mRXFrameBuf[4] << 8) | (mRXFrameBuf[5]));
 800488a:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
 800488e:	f890 3052 	ldrb.w	r3, [r0, #82]	; 0x52
 8004892:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004896:	b21b      	sxth	r3, r3
	if (crc != 0xE0E1) return;  // nie poprawne CRC
 8004898:	4a26      	ldr	r2, [pc, #152]	; (8004934 <_ZN5M485E17frameRX_setRelaysEv+0xac>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d10e      	bne.n	80048bc <_ZN5M485E17frameRX_setRelaysEv+0x34>
	uint8_t loop = mRXFrameBuf[0];
 800489e:	f890 504d 	ldrb.w	r5, [r0, #77]	; 0x4d
	uint8_t gateway = mRXFrameBuf[1];
 80048a2:	f890 404e 	ldrb.w	r4, [r0, #78]	; 0x4e
	uint8_t addr = mRXFrameBuf[2];
 80048a6:	f890 104f 	ldrb.w	r1, [r0, #79]	; 0x4f
	uint8_t rel = mRXFrameBuf[6];
 80048aa:	f890 2053 	ldrb.w	r2, [r0, #83]	; 0x53
	if(( addr == g485E.mMyAddr) && ( gateway == g485E.mMyAddr ) && (loop == g485E.loopNr) )
 80048ae:	4b22      	ldr	r3, [pc, #136]	; (8004938 <_ZN5M485E17frameRX_setRelaysEv+0xb0>)
 80048b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80048b4:	428b      	cmp	r3, r1
 80048b6:	d002      	beq.n	80048be <_ZN5M485E17frameRX_setRelaysEv+0x36>
    	if(gateway == g485E.mMyAddr && loop == g485E.loopNr)
 80048b8:	42a3      	cmp	r3, r4
 80048ba:	d032      	beq.n	8004922 <_ZN5M485E17frameRX_setRelaysEv+0x9a>
    }
 80048bc:	bd38      	pop	{r3, r4, r5, pc}
	if(( addr == g485E.mMyAddr) && ( gateway == g485E.mMyAddr ) && (loop == g485E.loopNr) )
 80048be:	42a3      	cmp	r3, r4
 80048c0:	d1fa      	bne.n	80048b8 <_ZN5M485E17frameRX_setRelaysEv+0x30>
 80048c2:	481d      	ldr	r0, [pc, #116]	; (8004938 <_ZN5M485E17frameRX_setRelaysEv+0xb0>)
 80048c4:	f890 0075 	ldrb.w	r0, [r0, #117]	; 0x75
 80048c8:	42a8      	cmp	r0, r5
 80048ca:	d1f5      	bne.n	80048b8 <_ZN5M485E17frameRX_setRelaysEv+0x30>
		bool isRelA = rel & 0x01;
 80048cc:	f002 0401 	and.w	r4, r2, #1
		bool isRelB = rel & 0x04;
 80048d0:	f002 0104 	and.w	r1, r2, #4
 80048d4:	f3c2 0080 	ubfx	r0, r2, #2, #1
    

    
    public: void setREL_A( bool aIsON ){
      
      mRelA_IsON = aIsON;
 80048d8:	4b18      	ldr	r3, [pc, #96]	; (800493c <_ZN5M485E17frameRX_setRelaysEv+0xb4>)
 80048da:	721c      	strb	r4, [r3, #8]
      if( aIsON ) _oREL_A_SET = 1;
 80048dc:	f012 0f01 	tst.w	r2, #1
 80048e0:	d012      	beq.n	8004908 <_ZN5M485E17frameRX_setRelaysEv+0x80>
 80048e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80048e6:	7d13      	ldrb	r3, [r2, #20]
 80048e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ec:	7513      	strb	r3, [r2, #20]
      else        _oREL_A_RESET = 1;
      gRelayCnt = 30;
 80048ee:	4b13      	ldr	r3, [pc, #76]	; (800493c <_ZN5M485E17frameRX_setRelaysEv+0xb4>)
 80048f0:	221e      	movs	r2, #30
 80048f2:	601a      	str	r2, [r3, #0]
#ifdef _MODULE_0        
        gShortDeadCnt = 50;
 80048f4:	2232      	movs	r2, #50	; 0x32
 80048f6:	605a      	str	r2, [r3, #4]
#endif      
    };// -----------------------------------
    
    public: void setREL_B( bool aIsON ){
      
      mRelB_IsON = aIsON;
 80048f8:	7258      	strb	r0, [r3, #9]
      if( aIsON ) _oREL_B_SET = 1;
 80048fa:	b161      	cbz	r1, 8004916 <_ZN5M485E17frameRX_setRelaysEv+0x8e>
 80048fc:	4a10      	ldr	r2, [pc, #64]	; (8004940 <_ZN5M485E17frameRX_setRelaysEv+0xb8>)
 80048fe:	7d53      	ldrb	r3, [r2, #21]
 8004900:	f043 0310 	orr.w	r3, r3, #16
 8004904:	7553      	strb	r3, [r2, #21]
 8004906:	e7d9      	b.n	80048bc <_ZN5M485E17frameRX_setRelaysEv+0x34>
      else        _oREL_A_RESET = 1;
 8004908:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800490c:	7d13      	ldrb	r3, [r2, #20]
 800490e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004912:	7513      	strb	r3, [r2, #20]
 8004914:	e7eb      	b.n	80048ee <_ZN5M485E17frameRX_setRelaysEv+0x66>
      else        _oREL_B_RESET = 1;
 8004916:	4a0a      	ldr	r2, [pc, #40]	; (8004940 <_ZN5M485E17frameRX_setRelaysEv+0xb8>)
 8004918:	7d53      	ldrb	r3, [r2, #21]
 800491a:	f043 0320 	orr.w	r3, r3, #32
 800491e:	7553      	strb	r3, [r2, #21]
 8004920:	e7cc      	b.n	80048bc <_ZN5M485E17frameRX_setRelaysEv+0x34>
    	if(gateway == g485E.mMyAddr && loop == g485E.loopNr)
 8004922:	4b05      	ldr	r3, [pc, #20]	; (8004938 <_ZN5M485E17frameRX_setRelaysEv+0xb0>)
 8004924:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8004928:	42ab      	cmp	r3, r5
 800492a:	d1c7      	bne.n	80048bc <_ZN5M485E17frameRX_setRelaysEv+0x34>
    		gST7580.sendTX_setRelays(addr, rel);
 800492c:	4805      	ldr	r0, [pc, #20]	; (8004944 <_ZN5M485E17frameRX_setRelaysEv+0xbc>)
 800492e:	f7ff ff65 	bl	80047fc <_ZN7MST758016sendTX_setRelaysEhh>
 8004932:	e7c3      	b.n	80048bc <_ZN5M485E17frameRX_setRelaysEv+0x34>
 8004934:	ffffe0e1 	.word	0xffffe0e1
 8004938:	200008a8 	.word	0x200008a8
 800493c:	20000a54 	.word	0x20000a54
 8004940:	48000400 	.word	0x48000400
 8004944:	20000a64 	.word	0x20000a64

08004948 <_ZN7MST758026sendTX_ToNode_setAddrUnregEh>:

/// ----------------------------------------------------------
/// FRAME ToNode set specific address for specific nodes. Triggered from RS485.
void MST7580::sendTX_ToNode_setAddrUnreg( uint8_t newAddr){
 8004948:	b430      	push	{r4, r5}
 800494a:	b082      	sub	sp, #8
    // --- zmienne --------------------------------------

    // --- wysylanie ------------------------------------
	const int cnt = 2;
	uint8_t frame[cnt];
	frame[0] = 0x57;    // cmd = AskStatus
 800494c:	2357      	movs	r3, #87	; 0x57
 800494e:	f88d 3004 	strb.w	r3, [sp, #4]
	frame[1] = newAddr;    // newAddr
 8004952:	f88d 1005 	strb.w	r1, [sp, #5]
      int dif = mIndexSTOP - mIndexSTART;
 8004956:	4b1c      	ldr	r3, [pc, #112]	; (80049c8 <_ZN7MST758026sendTX_ToNode_setAddrUnregEh+0x80>)
 8004958:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800495c:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
      if( dif < 0 ) dif = cBufLength + dif;
 8004960:	1a53      	subs	r3, r2, r1
 8004962:	d414      	bmi.n	800498e <_ZN7MST758026sendTX_ToNode_setAddrUnregEh+0x46>
      int N2 = N + cnt + 1;
 8004964:	3302      	adds	r3, #2
      if( N2 >= cBufLength ) return false;
 8004966:	2b26      	cmp	r3, #38	; 0x26
 8004968:	dc2b      	bgt.n	80049c2 <_ZN7MST758026sendTX_ToNode_setAddrUnregEh+0x7a>
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 800496a:	1c50      	adds	r0, r2, #1
 800496c:	4b17      	ldr	r3, [pc, #92]	; (80049cc <_ZN7MST758026sendTX_ToNode_setAddrUnregEh+0x84>)
 800496e:	fb83 4300 	smull	r4, r3, r3, r0
 8004972:	111b      	asrs	r3, r3, #4
 8004974:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004978:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 800497c:	4299      	cmp	r1, r3
 800497e:	d004      	beq.n	800498a <_ZN7MST758026sendTX_ToNode_setAddrUnregEh+0x42>
      mBuf[ stopPrev ] = aData;
 8004980:	4811      	ldr	r0, [pc, #68]	; (80049c8 <_ZN7MST758026sendTX_ToNode_setAddrUnregEh+0x80>)
 8004982:	2402      	movs	r4, #2
 8004984:	5484      	strb	r4, [r0, r2]
      mIndexSTOP = stopTmp;
 8004986:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void MST7580::sendTX_ToNode_setAddrUnreg( uint8_t newAddr){
 800498a:	2200      	movs	r2, #0
 800498c:	e006      	b.n	800499c <_ZN7MST758026sendTX_ToNode_setAddrUnregEh+0x54>
      if( dif < 0 ) dif = cBufLength + dif;
 800498e:	3328      	adds	r3, #40	; 0x28
 8004990:	e7e8      	b.n	8004964 <_ZN7MST758026sendTX_ToNode_setAddrUnregEh+0x1c>
      mBuf[ stopPrev ] = aData;
 8004992:	480d      	ldr	r0, [pc, #52]	; (80049c8 <_ZN7MST758026sendTX_ToNode_setAddrUnregEh+0x80>)
 8004994:	5505      	strb	r5, [r0, r4]
      mIndexSTOP = stopTmp;
 8004996:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
      for( int i=0; i<cnt; i++ ) bufAdd( frame[i] );
 800499a:	3201      	adds	r2, #1
 800499c:	2a01      	cmp	r2, #1
 800499e:	dc10      	bgt.n	80049c2 <_ZN7MST758026sendTX_ToNode_setAddrUnregEh+0x7a>
 80049a0:	ab01      	add	r3, sp, #4
 80049a2:	5c9d      	ldrb	r5, [r3, r2]
      int stopPrev = mIndexSTOP;
 80049a4:	4b08      	ldr	r3, [pc, #32]	; (80049c8 <_ZN7MST758026sendTX_ToNode_setAddrUnregEh+0x80>)
 80049a6:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80049aa:	1c60      	adds	r0, r4, #1
 80049ac:	4b07      	ldr	r3, [pc, #28]	; (80049cc <_ZN7MST758026sendTX_ToNode_setAddrUnregEh+0x84>)
 80049ae:	fb83 c300 	smull	ip, r3, r3, r0
 80049b2:	111b      	asrs	r3, r3, #4
 80049b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80049b8:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80049bc:	4299      	cmp	r1, r3
 80049be:	d1e8      	bne.n	8004992 <_ZN7MST758026sendTX_ToNode_setAddrUnregEh+0x4a>
 80049c0:	e7eb      	b.n	800499a <_ZN7MST758026sendTX_ToNode_setAddrUnregEh+0x52>
	gST7580.mBuf_Frames.bufAddFrame( cnt, frame );

}// -----------------------------------------------------------
 80049c2:	b002      	add	sp, #8
 80049c4:	bc30      	pop	{r4, r5}
 80049c6:	4770      	bx	lr
 80049c8:	20000a64 	.word	0x20000a64
 80049cc:	66666667 	.word	0x66666667

080049d0 <_ZN5M485E20frameRX_setAddrUnregEv>:
void M485E::frameRX_setAddrUnreg(){
 80049d0:	b508      	push	{r3, lr}
    uint16_t crc = (uint16_t)((mRXFrameBuf[2] << 8) | (mRXFrameBuf[3])); // ZMIENIC!
 80049d2:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
 80049d6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80049da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80049de:	b21b      	sxth	r3, r3
    if (crc != 0xE0E1) return;  // nie poprawne CRC
 80049e0:	4a08      	ldr	r2, [pc, #32]	; (8004a04 <_ZN5M485E20frameRX_setAddrUnregEv+0x34>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d108      	bne.n	80049f8 <_ZN5M485E20frameRX_setAddrUnregEv+0x28>
    uint8_t gateway = mRXFrameBuf[0];
 80049e6:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
    uint8_t newAddr = mRXFrameBuf[1];
 80049ea:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
    if(gateway == g485E.mMyAddr)
 80049ee:	4a06      	ldr	r2, [pc, #24]	; (8004a08 <_ZN5M485E20frameRX_setAddrUnregEv+0x38>)
 80049f0:	f892 2074 	ldrb.w	r2, [r2, #116]	; 0x74
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d000      	beq.n	80049fa <_ZN5M485E20frameRX_setAddrUnregEv+0x2a>
}
 80049f8:	bd08      	pop	{r3, pc}
    	gST7580.sendTX_ToNode_setAddrUnreg(newAddr);
 80049fa:	4804      	ldr	r0, [pc, #16]	; (8004a0c <_ZN5M485E20frameRX_setAddrUnregEv+0x3c>)
 80049fc:	f7ff ffa4 	bl	8004948 <_ZN7MST758026sendTX_ToNode_setAddrUnregEh>
 8004a00:	e7fa      	b.n	80049f8 <_ZN5M485E20frameRX_setAddrUnregEv+0x28>
 8004a02:	bf00      	nop
 8004a04:	ffffe0e1 	.word	0xffffe0e1
 8004a08:	200008a8 	.word	0x200008a8
 8004a0c:	20000a64 	.word	0x20000a64

08004a10 <_ZN5M485E9onReceiveEh>:

int tabIndex = 0;
uint8_t tab[100];


void M485E::onReceive( uint8_t aCh ){
 8004a10:	b510      	push	{r4, lr}
 8004a12:	4604      	mov	r4, r0
  
//  ITM_EVENT8( 1, mRXBuf[0] );

	//DEBUG
	tab[tabIndex] = aCh;
 8004a14:	4a67      	ldr	r2, [pc, #412]	; (8004bb4 <_ZN5M485E9onReceiveEh+0x1a4>)
 8004a16:	6813      	ldr	r3, [r2, #0]
 8004a18:	4867      	ldr	r0, [pc, #412]	; (8004bb8 <_ZN5M485E9onReceiveEh+0x1a8>)
 8004a1a:	54c1      	strb	r1, [r0, r3]
	tabIndex += 1;
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	6013      	str	r3, [r2, #0]
	if( tabIndex >= 100 ) tabIndex = 0;
 8004a20:	2b63      	cmp	r3, #99	; 0x63
 8004a22:	dd02      	ble.n	8004a2a <_ZN5M485E9onReceiveEh+0x1a>
 8004a24:	4613      	mov	r3, r2
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]



      
INTTOPC_PROC_LABEL:
    switch( mRecState ){
 8004a2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a2c:	2b2c      	cmp	r3, #44	; 0x2c
 8004a2e:	f200 80be 	bhi.w	8004bae <_ZN5M485E9onReceiveEh+0x19e>
 8004a32:	e8df f003 	tbb	[pc, r3]
 8004a36:	1c17      	.short	0x1c17
 8004a38:	4b2f2a25 	.word	0x4b2f2a25
 8004a3c:	bcbc5550 	.word	0xbcbc5550
 8004a40:	6c67625d 	.word	0x6c67625d
 8004a44:	bcbcbcbc 	.word	0xbcbcbcbc
 8004a48:	7b76bcbc 	.word	0x7b76bcbc
 8004a4c:	bcbc8580 	.word	0xbcbc8580
 8004a50:	bcbcbcbc 	.word	0xbcbcbcbc
 8004a54:	bc97928d 	.word	0xbc97928d
 8004a58:	bcbcbcbc 	.word	0xbcbcbcbc
 8004a5c:	a49fbcbc 	.word	0xa49fbcbc
 8004a60:	aea9      	.short	0xaea9
 8004a62:	b3          	.byte	0xb3
 8004a63:	00          	.byte	0x00
      // ------------------------------------------------

    case 0: if( aCh == 0xA5 )
 8004a64:	29a5      	cmp	r1, #165	; 0xa5
 8004a66:	d106      	bne.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
		mRecState += 1;
 8004a68:	3301      	adds	r3, #1
 8004a6a:	6423      	str	r3, [r4, #64]	; 0x40
 8004a6c:	e003      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
		break; // 0

    case 1:
    	mRXFrameBuf[0] = aCh; mRecState += 1; break;  // loop nr
 8004a6e:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
 8004a72:	3301      	adds	r3, #1
 8004a74:	6423      	str	r3, [r4, #64]	; 0x40
        goto INTTOPC_PROC_LABEL; }; 
        break;
    };      
    
    // --- RESET WDT ---------------------
    if( mRecState == 0 )
 8004a76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a78:	b90b      	cbnz	r3, 8004a7e <_ZN5M485E9onReceiveEh+0x6e>
       mFrameTimeOutCnt = 20; // 100 = 1s
 8004a7a:	2314      	movs	r3, #20
 8004a7c:	6463      	str	r3, [r4, #68]	; 0x44
    
 /*   uint16_t wrt = (mRecState<<8) | (aCh<<0);*/



}//-------------------------------------------------------------------------
 8004a7e:	bd10      	pop	{r4, pc}
    	mRXFrameBuf[1] = aCh; mRecState += 1; break;  // gateway
 8004a80:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
 8004a84:	3301      	adds	r3, #1
 8004a86:	6423      	str	r3, [r4, #64]	; 0x40
 8004a88:	e7f5      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
    	mRXFrameBuf[2] = aCh; mRecState += 1; break;  // address
 8004a8a:	f884 104f 	strb.w	r1, [r4, #79]	; 0x4f
 8004a8e:	3301      	adds	r3, #1
 8004a90:	6423      	str	r3, [r4, #64]	; 0x40
 8004a92:	e7f0      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
          if( aCh == 0xC3 )
 8004a94:	29c3      	cmp	r1, #195	; 0xc3
 8004a96:	d00a      	beq.n	8004aae <_ZN5M485E9onReceiveEh+0x9e>
          else if( aCh == 0xC4)
 8004a98:	29c4      	cmp	r1, #196	; 0xc4
 8004a9a:	d00b      	beq.n	8004ab4 <_ZN5M485E9onReceiveEh+0xa4>
          else if ( aCh == 0xC5)
 8004a9c:	29c5      	cmp	r1, #197	; 0xc5
 8004a9e:	d00c      	beq.n	8004aba <_ZN5M485E9onReceiveEh+0xaa>
          else if ( aCh == 0xC6)
 8004aa0:	29c6      	cmp	r1, #198	; 0xc6
 8004aa2:	d00d      	beq.n	8004ac0 <_ZN5M485E9onReceiveEh+0xb0>
          else if ( aCh == 0xC7)
 8004aa4:	29c7      	cmp	r1, #199	; 0xc7
 8004aa6:	d00e      	beq.n	8004ac6 <_ZN5M485E9onReceiveEh+0xb6>
         else{ mRecState = 0; goto INTTOPC_PROC_LABEL; }
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	6423      	str	r3, [r4, #64]	; 0x40
 8004aac:	e7bd      	b.n	8004a2a <_ZN5M485E9onReceiveEh+0x1a>
        	  mRecState = 5;
 8004aae:	2305      	movs	r3, #5
 8004ab0:	6423      	str	r3, [r4, #64]	; 0x40
 8004ab2:	e7e0      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
        	  mRecState = 10;
 8004ab4:	230a      	movs	r3, #10
 8004ab6:	6423      	str	r3, [r4, #64]	; 0x40
 8004ab8:	e7dd      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
        	  mRecState = 20;
 8004aba:	2314      	movs	r3, #20
 8004abc:	6423      	str	r3, [r4, #64]	; 0x40
 8004abe:	e7da      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
        	  mRecState = 30;
 8004ac0:	231e      	movs	r3, #30
 8004ac2:	6423      	str	r3, [r4, #64]	; 0x40
 8004ac4:	e7d7      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
        	  mRecState = 40;
 8004ac6:	2328      	movs	r3, #40	; 0x28
 8004ac8:	6423      	str	r3, [r4, #64]	; 0x40
 8004aca:	e7d4      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
    case 5: mRXFrameBuf[3] = aCh; mRecState += 1; break;  // dataLen
 8004acc:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	6423      	str	r3, [r4, #64]	; 0x40
 8004ad4:	e7cf      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
    case 6: mRXFrameBuf[4] = aCh; mRecState += 1; break;  // CRC.H
 8004ad6:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
 8004ada:	3301      	adds	r3, #1
 8004adc:	6423      	str	r3, [r4, #64]	; 0x40
 8004ade:	e7ca      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
    case 7: mRXFrameBuf[5] = aCh; frameRX_getStatus(); mRecState = 0; break; //if(g485E.crcCheck(mRXFrameBuf)) { mRecState += 1; break; } else {mRecState = 0; break;}; // CRC.L i sprawdzanie
 8004ae0:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	f7ff f979 	bl	8003ddc <_ZN5M485E17frameRX_getStatusEv>
 8004aea:	2300      	movs	r3, #0
 8004aec:	6423      	str	r3, [r4, #64]	; 0x40
 8004aee:	e7c2      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
    case 10: mRXFrameBuf[3] = aCh; mRecState += 1; break;  // dataLen
 8004af0:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 8004af4:	3301      	adds	r3, #1
 8004af6:	6423      	str	r3, [r4, #64]	; 0x40
 8004af8:	e7bd      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
    case 11: mRXFrameBuf[4] = aCh; mRecState += 1; break;  // CRC.H  0xE0
 8004afa:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
 8004afe:	3301      	adds	r3, #1
 8004b00:	6423      	str	r3, [r4, #64]	; 0x40
 8004b02:	e7b8      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
    case 12: mRXFrameBuf[5] = aCh; mRecState += 1; break;  // CRC.L  0xE1
 8004b04:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
 8004b08:	3301      	adds	r3, #1
 8004b0a:	6423      	str	r3, [r4, #64]	; 0x40
 8004b0c:	e7b3      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
    case 13: mRXFrameBuf[6] = aCh; mRecState += 1; frameRX_setRelays(); mRecState = 0; break;  // relay
 8004b0e:	f884 1053 	strb.w	r1, [r4, #83]	; 0x53
 8004b12:	3301      	adds	r3, #1
 8004b14:	6423      	str	r3, [r4, #64]	; 0x40
 8004b16:	4620      	mov	r0, r4
 8004b18:	f7ff feb6 	bl	8004888 <_ZN5M485E17frameRX_setRelaysEv>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	6423      	str	r3, [r4, #64]	; 0x40
 8004b20:	e7a9      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
    case 20: mRXFrameBuf[3] = aCh; mRecState += 1; break;  // dataLen
 8004b22:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 8004b26:	3301      	adds	r3, #1
 8004b28:	6423      	str	r3, [r4, #64]	; 0x40
 8004b2a:	e7a4      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
    case 21: mRXFrameBuf[4] = aCh; mRecState += 1; break;  // CRC.H  0xE0
 8004b2c:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
 8004b30:	3301      	adds	r3, #1
 8004b32:	6423      	str	r3, [r4, #64]	; 0x40
 8004b34:	e79f      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
    case 22: mRXFrameBuf[5] = aCh; mRecState += 1; break;  // CRC.L  0xE1
 8004b36:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	6423      	str	r3, [r4, #64]	; 0x40
 8004b3e:	e79a      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
    case 23: mRXFrameBuf[6] = aCh; frameRX_setAddr(); mRecState = 0; break;  // newAddr
 8004b40:	f884 1053 	strb.w	r1, [r4, #83]	; 0x53
 8004b44:	4620      	mov	r0, r4
 8004b46:	f7ff fd71 	bl	800462c <_ZN5M485E15frameRX_setAddrEv>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	6423      	str	r3, [r4, #64]	; 0x40
 8004b4e:	e792      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
     case 30: mRXFrameBuf[3] = aCh; mRecState += 1; break;  // dataLen
 8004b50:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 8004b54:	3301      	adds	r3, #1
 8004b56:	6423      	str	r3, [r4, #64]	; 0x40
 8004b58:	e78d      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
     case 31: mRXFrameBuf[4] = aCh; mRecState += 1; break;  // CRC.H  0xE0
 8004b5a:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
 8004b5e:	3301      	adds	r3, #1
 8004b60:	6423      	str	r3, [r4, #64]	; 0x40
 8004b62:	e788      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
     case 32: mRXFrameBuf[5] = aCh; frameRX_unReg(); mRecState = 0; break; // CRC.L  0xE1
 8004b64:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f7ff f8cd 	bl	8003d08 <_ZN5M485E13frameRX_unRegEv>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	6423      	str	r3, [r4, #64]	; 0x40
 8004b72:	e780      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
     case 40: mRXFrameBuf[3] = aCh; mRecState += 1; break;  // newAddr
 8004b74:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 8004b78:	3301      	adds	r3, #1
 8004b7a:	6423      	str	r3, [r4, #64]	; 0x40
 8004b7c:	e77b      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
     case 41: mRXFrameBuf[4] = aCh; mRecState += 1; break;  // dataLen
 8004b7e:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
 8004b82:	3301      	adds	r3, #1
 8004b84:	6423      	str	r3, [r4, #64]	; 0x40
 8004b86:	e776      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
     case 42: mRXFrameBuf[5] = aCh; mRecState += 1; break;  // CRC.H  0xE0
 8004b88:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	6423      	str	r3, [r4, #64]	; 0x40
 8004b90:	e771      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
     case 43: mRXFrameBuf[6] = aCh; mRecState += 1; break;  // CRC.L  0xE1
 8004b92:	f884 1053 	strb.w	r1, [r4, #83]	; 0x53
 8004b96:	3301      	adds	r3, #1
 8004b98:	6423      	str	r3, [r4, #64]	; 0x40
 8004b9a:	e76c      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
     case 44: if( aCh == 0xFF )
 8004b9c:	29ff      	cmp	r1, #255	; 0xff
 8004b9e:	d002      	beq.n	8004ba6 <_ZN5M485E9onReceiveEh+0x196>
    mRecState = 0; break;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	6423      	str	r3, [r4, #64]	; 0x40
 8004ba4:	e767      	b.n	8004a76 <_ZN5M485E9onReceiveEh+0x66>
    	 frameRX_setAddrUnreg();
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	f7ff ff12 	bl	80049d0 <_ZN5M485E20frameRX_setAddrUnregEv>
 8004bac:	e7f8      	b.n	8004ba0 <_ZN5M485E9onReceiveEh+0x190>
        mRecState = 0;	
 8004bae:	2300      	movs	r3, #0
 8004bb0:	6423      	str	r3, [r4, #64]	; 0x40
        goto INTTOPC_PROC_LABEL; }; 
 8004bb2:	e73a      	b.n	8004a2a <_ZN5M485E9onReceiveEh+0x1a>
 8004bb4:	20000b38 	.word	0x20000b38
 8004bb8:	20000ad4 	.word	0x20000ad4

08004bbc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart ) { 
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	4604      	mov	r4, r0
  if( huart == g485E.mhUart   )  g485E.onIT_RX(); 
 8004bc0:	4b1e      	ldr	r3, [pc, #120]	; (8004c3c <HAL_UART_RxCpltCallback+0x80>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4283      	cmp	r3, r0
 8004bc6:	d004      	beq.n	8004bd2 <HAL_UART_RxCpltCallback+0x16>
  if( huart == gST7580.mhUart )  gST7580.onIT_RX();
 8004bc8:	4b1d      	ldr	r3, [pc, #116]	; (8004c40 <HAL_UART_RxCpltCallback+0x84>)
 8004bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bcc:	42a3      	cmp	r3, r4
 8004bce:	d029      	beq.n	8004c24 <HAL_UART_RxCpltCallback+0x68>
 }//----------------------------------------------------------------------------
 8004bd0:	bd38      	pop	{r3, r4, r5, pc}
          if( _o485E_EN == 0 ){
 8004bd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bd6:	7d5b      	ldrb	r3, [r3, #21]
 8004bd8:	f013 0f10 	tst.w	r3, #16
 8004bdc:	d011      	beq.n	8004c02 <HAL_UART_RxCpltCallback+0x46>
        if( mIsEN_to_0 <= 0 ){
 8004bde:	4b17      	ldr	r3, [pc, #92]	; (8004c3c <HAL_UART_RxCpltCallback+0x80>)
 8004be0:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8004be4:	b99b      	cbnz	r3, 8004c0e <HAL_UART_RxCpltCallback+0x52>
      return ( mIndexSTART == mIndexSTOP );
 8004be6:	4b15      	ldr	r3, [pc, #84]	; (8004c3c <HAL_UART_RxCpltCallback+0x80>)
 8004be8:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8004bec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
          if( isEmpty() ){
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d110      	bne.n	8004c16 <HAL_UART_RxCpltCallback+0x5a>
            _o485E_EN = 0;
 8004bf4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004bf8:	7d53      	ldrb	r3, [r2, #21]
 8004bfa:	f36f 1304 	bfc	r3, #4, #1
 8004bfe:	7553      	strb	r3, [r2, #21]
 8004c00:	e009      	b.n	8004c16 <HAL_UART_RxCpltCallback+0x5a>
            onReceive( mRXBuf[0] );
 8004c02:	480e      	ldr	r0, [pc, #56]	; (8004c3c <HAL_UART_RxCpltCallback+0x80>)
 8004c04:	f890 104a 	ldrb.w	r1, [r0, #74]	; 0x4a
 8004c08:	f7ff ff02 	bl	8004a10 <_ZN5M485E9onReceiveEh>
 8004c0c:	e7e7      	b.n	8004bde <HAL_UART_RxCpltCallback+0x22>
          mIsEN_to_0 -= 1;
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	4a0a      	ldr	r2, [pc, #40]	; (8004c3c <HAL_UART_RxCpltCallback+0x80>)
 8004c12:	f882 3077 	strb.w	r3, [r2, #119]	; 0x77
      HAL_UART_Receive_IT(  mhUart, mRXBuf, 1 );
 8004c16:	4909      	ldr	r1, [pc, #36]	; (8004c3c <HAL_UART_RxCpltCallback+0x80>)
 8004c18:	f851 0b4a 	ldr.w	r0, [r1], #74
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f7fe f8b3 	bl	8002d88 <HAL_UART_Receive_IT>
    }//-------------------------------------------------------------------------
 8004c22:	e7d1      	b.n	8004bc8 <HAL_UART_RxCpltCallback+0xc>
      NucleoST7580RxInt( mRXBuf[0] );
 8004c24:	4d06      	ldr	r5, [pc, #24]	; (8004c40 <HAL_UART_RxCpltCallback+0x84>)
 8004c26:	462c      	mov	r4, r5
 8004c28:	f814 0f30 	ldrb.w	r0, [r4, #48]!
 8004c2c:	f7fe ffa6 	bl	8003b7c <NucleoST7580RxInt>
      HAL_UART_Receive_IT(  mhUart, mRXBuf, 1 );
 8004c30:	2201      	movs	r2, #1
 8004c32:	4621      	mov	r1, r4
 8004c34:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004c36:	f7fe f8a7 	bl	8002d88 <HAL_UART_Receive_IT>
 8004c3a:	e7c9      	b.n	8004bd0 <HAL_UART_RxCpltCallback+0x14>
 8004c3c:	200008a8 	.word	0x200008a8
 8004c40:	20000a64 	.word	0x20000a64

08004c44 <_ZN7MST758024frameRX_ToNode_getStatusEPh>:
  
}// -----------------------------------------------------------

/// ----------------------------------------------------------
/// FRAME AskStatus  ToNode
void MST7580::frameRX_ToNode_getStatus( uint8_t *frame ){
 8004c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c48:	b085      	sub	sp, #20

    // ... params RX ................
    uint8_t fr_addr   	 = frame[1];
 8004c4a:	784b      	ldrb	r3, [r1, #1]
    uint8_t fr_gateway   = frame[2];
 8004c4c:	788c      	ldrb	r4, [r1, #2]

    if( fr_addr != g485E.mMyAddr ) return;
 8004c4e:	4a42      	ldr	r2, [pc, #264]	; (8004d58 <_ZN7MST758024frameRX_ToNode_getStatusEPh+0x114>)
 8004c50:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
 8004c54:	4299      	cmp	r1, r3
 8004c56:	d17b      	bne.n	8004d50 <_ZN7MST758024frameRX_ToNode_getStatusEPh+0x10c>

    // ... params ToSend ............
    uint8_t addr   = g485E.mMyAddr;
    uint8_t status = 0x01;
    uint8_t rels2 = 0x00;
    if( gRelays.mRelA_IsON ) rels2 |= 0x01;
 8004c58:	4b40      	ldr	r3, [pc, #256]	; (8004d5c <_ZN7MST758024frameRX_ToNode_getStatusEPh+0x118>)
 8004c5a:	7a18      	ldrb	r0, [r3, #8]
 8004c5c:	b100      	cbz	r0, 8004c60 <_ZN7MST758024frameRX_ToNode_getStatusEPh+0x1c>
 8004c5e:	2001      	movs	r0, #1
    if( gRelays.mRelB_IsON ) rels2 |= 0x04;
 8004c60:	4b3e      	ldr	r3, [pc, #248]	; (8004d5c <_ZN7MST758024frameRX_ToNode_getStatusEPh+0x118>)
 8004c62:	7a5b      	ldrb	r3, [r3, #9]
 8004c64:	b10b      	cbz	r3, 8004c6a <_ZN7MST758024frameRX_ToNode_getStatusEPh+0x26>
 8004c66:	f040 0004 	orr.w	r0, r0, #4

    uint8_t prad1 = gADC.mS0;             // Prad sens 1
 8004c6a:	4b3d      	ldr	r3, [pc, #244]	; (8004d60 <_ZN7MST758024frameRX_ToNode_getStatusEPh+0x11c>)
 8004c6c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004c70:	b2d2      	uxtb	r2, r2
    uint8_t prad2 = gADC.mS0;             // Prad sens 2
    uint8_t uA_H  = (gADC.mUA_avr>>8);    // UA linii
 8004c72:	f9b3 900c 	ldrsh.w	r9, [r3, #12]
 8004c76:	f993 a00d 	ldrsb.w	sl, [r3, #13]
    uint8_t uA_L  = (gADC.mUA_avr>>0);    // UA linii
    uint8_t uB_H  = (gADC.mUB_avr>>8);    // UB linii
 8004c7a:	f9b3 e024 	ldrsh.w	lr, [r3, #36]	; 0x24
 8004c7e:	f993 8025 	ldrsb.w	r8, [r3, #37]	; 0x25
    uint8_t uB_L  = (gADC.mUB_avr>>0);    // UB linii
    uint8_t iA_H  = (gADC.mIAabs_avr>>8); // IA linii
 8004c82:	f9b3 701c 	ldrsh.w	r7, [r3, #28]
 8004c86:	f993 c01d 	ldrsb.w	ip, [r3, #29]
    uint8_t iA_L  = (gADC.mIAabs_avr>>0); // IA linii
    uint8_t iB_H  = (gADC.mIBabs_avr>>8); // IB linii
 8004c8a:	f9b3 5034 	ldrsh.w	r5, [r3, #52]	; 0x34
 8004c8e:	f993 6035 	ldrsb.w	r6, [r3, #53]	; 0x35
    uint8_t iB_L  = (gADC.mIBabs_avr>>0); // IB linii

    gSystem.mIsReg = true;
 8004c92:	2301      	movs	r3, #1
 8004c94:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8004d6c <_ZN7MST758024frameRX_ToNode_getStatusEPh+0x128>
 8004c98:	f88b 3009 	strb.w	r3, [fp, #9]

    // ... send .....................
    uint8_t frameTX[] = {
 8004c9c:	f04f 0b23 	mov.w	fp, #35	; 0x23
 8004ca0:	f88d b000 	strb.w	fp, [sp]
 8004ca4:	f04f 0bc3 	mov.w	fp, #195	; 0xc3
 8004ca8:	f88d b001 	strb.w	fp, [sp, #1]
        uB_L,
        iA_H,
        iA_L,
        iB_H,
        iB_L
    };
 8004cac:	f88d 4002 	strb.w	r4, [sp, #2]
 8004cb0:	f88d 1003 	strb.w	r1, [sp, #3]
 8004cb4:	f88d 3004 	strb.w	r3, [sp, #4]
 8004cb8:	f88d 0005 	strb.w	r0, [sp, #5]
 8004cbc:	f88d 2006 	strb.w	r2, [sp, #6]
 8004cc0:	f88d 2007 	strb.w	r2, [sp, #7]
 8004cc4:	f88d a008 	strb.w	sl, [sp, #8]
 8004cc8:	f88d 9009 	strb.w	r9, [sp, #9]
 8004ccc:	f88d 800a 	strb.w	r8, [sp, #10]
 8004cd0:	f88d e00b 	strb.w	lr, [sp, #11]
 8004cd4:	f88d c00c 	strb.w	ip, [sp, #12]
 8004cd8:	f88d 700d 	strb.w	r7, [sp, #13]
 8004cdc:	f88d 600e 	strb.w	r6, [sp, #14]
 8004ce0:	f88d 500f 	strb.w	r5, [sp, #15]
      int dif = mIndexSTOP - mIndexSTART;
 8004ce4:	4b1f      	ldr	r3, [pc, #124]	; (8004d64 <_ZN7MST758024frameRX_ToNode_getStatusEPh+0x120>)
 8004ce6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8004cea:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
      if( dif < 0 ) dif = cBufLength + dif;
 8004cee:	1b13      	subs	r3, r2, r4
 8004cf0:	d414      	bmi.n	8004d1c <_ZN7MST758024frameRX_ToNode_getStatusEPh+0xd8>
      int N2 = N + cnt + 1;
 8004cf2:	3310      	adds	r3, #16
      if( N2 >= cBufLength ) return false;
 8004cf4:	2b26      	cmp	r3, #38	; 0x26
 8004cf6:	dc2b      	bgt.n	8004d50 <_ZN7MST758024frameRX_ToNode_getStatusEPh+0x10c>
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8004cf8:	1c51      	adds	r1, r2, #1
 8004cfa:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <_ZN7MST758024frameRX_ToNode_getStatusEPh+0x124>)
 8004cfc:	fb83 0301 	smull	r0, r3, r3, r1
 8004d00:	111b      	asrs	r3, r3, #4
 8004d02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004d06:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8004d0a:	429c      	cmp	r4, r3
 8004d0c:	d004      	beq.n	8004d18 <_ZN7MST758024frameRX_ToNode_getStatusEPh+0xd4>
      mBuf[ stopPrev ] = aData;
 8004d0e:	4915      	ldr	r1, [pc, #84]	; (8004d64 <_ZN7MST758024frameRX_ToNode_getStatusEPh+0x120>)
 8004d10:	2010      	movs	r0, #16
 8004d12:	5488      	strb	r0, [r1, r2]
      mIndexSTOP = stopTmp;
 8004d14:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
    if( gRelays.mRelA_IsON ) rels2 |= 0x01;
 8004d18:	2200      	movs	r2, #0
 8004d1a:	e006      	b.n	8004d2a <_ZN7MST758024frameRX_ToNode_getStatusEPh+0xe6>
      if( dif < 0 ) dif = cBufLength + dif;
 8004d1c:	3328      	adds	r3, #40	; 0x28
 8004d1e:	e7e8      	b.n	8004cf2 <_ZN7MST758024frameRX_ToNode_getStatusEPh+0xae>
      mBuf[ stopPrev ] = aData;
 8004d20:	4910      	ldr	r1, [pc, #64]	; (8004d64 <_ZN7MST758024frameRX_ToNode_getStatusEPh+0x120>)
 8004d22:	540d      	strb	r5, [r1, r0]
      mIndexSTOP = stopTmp;
 8004d24:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
      for( int i=0; i<cnt; i++ ) bufAdd( frame[i] );
 8004d28:	3201      	adds	r2, #1
 8004d2a:	2a0f      	cmp	r2, #15
 8004d2c:	dc10      	bgt.n	8004d50 <_ZN7MST758024frameRX_ToNode_getStatusEPh+0x10c>
 8004d2e:	f81d 5002 	ldrb.w	r5, [sp, r2]
      int stopPrev = mIndexSTOP;
 8004d32:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <_ZN7MST758024frameRX_ToNode_getStatusEPh+0x120>)
 8004d34:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8004d38:	1c41      	adds	r1, r0, #1
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <_ZN7MST758024frameRX_ToNode_getStatusEPh+0x124>)
 8004d3c:	fb83 6301 	smull	r6, r3, r3, r1
 8004d40:	111b      	asrs	r3, r3, #4
 8004d42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004d46:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8004d4a:	429c      	cmp	r4, r3
 8004d4c:	d1e8      	bne.n	8004d20 <_ZN7MST758024frameRX_ToNode_getStatusEPh+0xdc>
 8004d4e:	e7eb      	b.n	8004d28 <_ZN7MST758024frameRX_ToNode_getStatusEPh+0xe4>

    int cnt = sizeof( frameTX );
    gST7580.mBuf_Frames.bufAddFrame( cnt, frameTX );

}// -----------------------------------------------------------
 8004d50:	b005      	add	sp, #20
 8004d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d56:	bf00      	nop
 8004d58:	200008a8 	.word	0x200008a8
 8004d5c:	20000a54 	.word	0x20000a54
 8004d60:	20000920 	.word	0x20000920
 8004d64:	20000a64 	.word	0x20000a64
 8004d68:	66666667 	.word	0x66666667
 8004d6c:	20000ac4 	.word	0x20000ac4

08004d70 <_ZN7MST758024frameRX_ToNode_setRelaysEPh>:
/// ----------------------------------------------------------
/// FRAME AskStatus  ToNode
void MST7580::frameRX_ToNode_setRelays( uint8_t *frame ){

    // ... params RX ................
    uint8_t addr   = frame[1];
 8004d70:	784a      	ldrb	r2, [r1, #1]
    uint8_t relays = frame[2];
 8004d72:	788b      	ldrb	r3, [r1, #2]

    if( addr != g485E.mMyAddr ) return;
 8004d74:	4919      	ldr	r1, [pc, #100]	; (8004ddc <_ZN7MST758024frameRX_ToNode_setRelaysEPh+0x6c>)
 8004d76:	f891 1074 	ldrb.w	r1, [r1, #116]	; 0x74
 8004d7a:	4291      	cmp	r1, r2
 8004d7c:	d12d      	bne.n	8004dda <_ZN7MST758024frameRX_ToNode_setRelaysEPh+0x6a>
void MST7580::frameRX_ToNode_setRelays( uint8_t *frame ){
 8004d7e:	b410      	push	{r4}

    bool isRelA = relays & 0x01;
 8004d80:	f003 0401 	and.w	r4, r3, #1
	bool isRelB = relays & 0x04;
 8004d84:	f003 0204 	and.w	r2, r3, #4
 8004d88:	f3c3 0180 	ubfx	r1, r3, #2, #1
      mRelA_IsON = aIsON;
 8004d8c:	4814      	ldr	r0, [pc, #80]	; (8004de0 <_ZN7MST758024frameRX_ToNode_setRelaysEPh+0x70>)
 8004d8e:	7204      	strb	r4, [r0, #8]
      if( aIsON ) _oREL_A_SET = 1;
 8004d90:	f013 0f01 	tst.w	r3, #1
 8004d94:	d014      	beq.n	8004dc0 <_ZN7MST758024frameRX_ToNode_setRelaysEPh+0x50>
 8004d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d9a:	7d03      	ldrb	r3, [r0, #20]
 8004d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004da0:	7503      	strb	r3, [r0, #20]
      gRelayCnt = 30;
 8004da2:	4b0f      	ldr	r3, [pc, #60]	; (8004de0 <_ZN7MST758024frameRX_ToNode_setRelaysEPh+0x70>)
 8004da4:	201e      	movs	r0, #30
 8004da6:	6018      	str	r0, [r3, #0]
        gShortDeadCnt = 50;
 8004da8:	2032      	movs	r0, #50	; 0x32
 8004daa:	6058      	str	r0, [r3, #4]
      mRelB_IsON = aIsON;
 8004dac:	7259      	strb	r1, [r3, #9]
      if( aIsON ) _oREL_B_SET = 1;
 8004dae:	b172      	cbz	r2, 8004dce <_ZN7MST758024frameRX_ToNode_setRelaysEPh+0x5e>
 8004db0:	4a0c      	ldr	r2, [pc, #48]	; (8004de4 <_ZN7MST758024frameRX_ToNode_setRelaysEPh+0x74>)
 8004db2:	7d53      	ldrb	r3, [r2, #21]
 8004db4:	f043 0310 	orr.w	r3, r3, #16
 8004db8:	7553      	strb	r3, [r2, #21]
	gRelays.setREL_A( isRelA );
	gRelays.setREL_B( isRelB );

	// BRAKUJE POTWIERDZENIA !!!

}// -----------------------------------------------------------
 8004dba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dbe:	4770      	bx	lr
      else        _oREL_A_RESET = 1;
 8004dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004dc4:	7d03      	ldrb	r3, [r0, #20]
 8004dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dca:	7503      	strb	r3, [r0, #20]
 8004dcc:	e7e9      	b.n	8004da2 <_ZN7MST758024frameRX_ToNode_setRelaysEPh+0x32>
      else        _oREL_B_RESET = 1;
 8004dce:	4a05      	ldr	r2, [pc, #20]	; (8004de4 <_ZN7MST758024frameRX_ToNode_setRelaysEPh+0x74>)
 8004dd0:	7d53      	ldrb	r3, [r2, #21]
 8004dd2:	f043 0320 	orr.w	r3, r3, #32
 8004dd6:	7553      	strb	r3, [r2, #21]
 8004dd8:	e7ef      	b.n	8004dba <_ZN7MST758024frameRX_ToNode_setRelaysEPh+0x4a>
 8004dda:	4770      	bx	lr
 8004ddc:	200008a8 	.word	0x200008a8
 8004de0:	20000a54 	.word	0x20000a54
 8004de4:	48000400 	.word	0x48000400

08004de8 <_ZN7MST758022frameRX_ToNode_setAddrEPh>:
/// ----------------------------------------------------------
/// FRAME AskStatus  ToNode
void MST7580::frameRX_ToNode_setAddr( uint8_t *frame ){

    // ... params RX ................
    uint8_t addr    = frame[1];
 8004de8:	784a      	ldrb	r2, [r1, #1]
    uint8_t newAddr = frame[2];
 8004dea:	788b      	ldrb	r3, [r1, #2]

    if( addr != g485E.mMyAddr ) return;
 8004dec:	495d      	ldr	r1, [pc, #372]	; (8004f64 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x17c>)
 8004dee:	f891 1074 	ldrb.w	r1, [r1, #116]	; 0x74
 8004df2:	4291      	cmp	r1, r2
 8004df4:	f040 80b4 	bne.w	8004f60 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x178>
void MST7580::frameRX_ToNode_setAddr( uint8_t *frame ){
 8004df8:	b530      	push	{r4, r5, lr}
 8004dfa:	b085      	sub	sp, #20

    g485E.mMyAddr = newAddr;
 8004dfc:	4a59      	ldr	r2, [pc, #356]	; (8004f64 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x17c>)
 8004dfe:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
      return mTable[ aIndex ];
 8004e02:	4a59      	ldr	r2, [pc, #356]	; (8004f68 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x180>)
 8004e04:	7b52      	ldrb	r2, [r2, #13]
      if( prevWrt != aValue ){
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d005      	beq.n	8004e16 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x2e>
          mTable[ aIndex ] = aValue;
 8004e0a:	4a57      	ldr	r2, [pc, #348]	; (8004f68 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x180>)
 8004e0c:	7353      	strb	r3, [r2, #13]
        mChangeTable[ind8A] |= (maska);      
 8004e0e:	7d53      	ldrb	r3, [r2, #21]
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	7553      	strb	r3, [r2, #21]
     for( int i=0; i<(_SSD_TABSIZE_); i++ ){
 8004e16:	2400      	movs	r4, #0
 8004e18:	e004      	b.n	8004e24 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x3c>
      if( aIndex >= _SSD_TABSIZE_ ) return 1; // blad indeksu: za duzy
 8004e1a:	2301      	movs	r3, #1
            uint8_t res = flushIndex( i );
 8004e1c:	b2db      	uxtb	r3, r3
            if( res == 2 ){     // flash czyszczony !!!
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d07d      	beq.n	8004f1e <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x136>
     for( int i=0; i<(_SSD_TABSIZE_); i++ ){
 8004e22:	3401      	adds	r4, #1
 8004e24:	2c07      	cmp	r4, #7
 8004e26:	f300 8099 	bgt.w	8004f5c <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x174>
        uint8_t bitChange = changeTable_getBit( i );
 8004e2a:	b2a5      	uxth	r5, r4
        if( aIndex >= _SSD_TABSIZE_ ) return 0;         // blad indeksu
 8004e2c:	2d07      	cmp	r5, #7
 8004e2e:	d8f8      	bhi.n	8004e22 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x3a>
        int ind8A = aIndex / 8;
 8004e30:	08e8      	lsrs	r0, r5, #3
        int ind8B = aIndex - ind8A*8;
 8004e32:	eba5 01c0 	sub.w	r1, r5, r0, lsl #3
        uint8_t maska = 0x01 << ind8B; 
 8004e36:	2301      	movs	r3, #1
 8004e38:	408b      	lsls	r3, r1
        return  (mChangeTable[ind8A] & maska);
 8004e3a:	4a4b      	ldr	r2, [pc, #300]	; (8004f68 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x180>)
 8004e3c:	4402      	add	r2, r0
 8004e3e:	7d52      	ldrb	r2, [r2, #21]
        if( bitChange != 0 ){
 8004e40:	4213      	tst	r3, r2
 8004e42:	d0ee      	beq.n	8004e22 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x3a>
      if( aIndex >= _SSD_TABSIZE_ ) return 1; // blad indeksu: za duzy
 8004e44:	2d07      	cmp	r5, #7
 8004e46:	d8e8      	bhi.n	8004e1a <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x32>
      if( mOffset >= (2048-1) )     return 2; // blad FLASH: ERASE REQ
 8004e48:	4b47      	ldr	r3, [pc, #284]	; (8004f68 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x180>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004e50:	4293      	cmp	r3, r2
 8004e52:	dc5e      	bgt.n	8004f12 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x12a>
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 8004e54:	4a44      	ldr	r2, [pc, #272]	; (8004f68 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x180>)
 8004e56:	8811      	ldrh	r1, [r2, #0]
 8004e58:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8004e5c:	02c9      	lsls	r1, r1, #11
 8004e5e:	b29b      	uxth	r3, r3
      uint16_t res = *(__IO uint16_t*)(addr);
 8004e60:	5a5b      	ldrh	r3, [r3, r1]
 8004e62:	b29b      	uxth	r3, r3
        if( dana != 0xFFFF ){
 8004e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d012      	beq.n	8004e92 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0xaa>
          mOffset = 0;  flash_searchFF();
 8004e6c:	4b3e      	ldr	r3, [pc, #248]	; (8004f68 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x180>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	609a      	str	r2, [r3, #8]
          uint16_t dana = MFlash::read16( mPage, mOffset );
 8004e72:	4b3d      	ldr	r3, [pc, #244]	; (8004f68 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x180>)
 8004e74:	689b      	ldr	r3, [r3, #8]
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 8004e76:	b29a      	uxth	r2, r3
      uint16_t res = *(__IO uint16_t*)(addr);
 8004e78:	5a52      	ldrh	r2, [r2, r1]
 8004e7a:	b292      	uxth	r2, r2
          if( dana == 0xFFFF ) return;         // koniec przetwarzania
 8004e7c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004e80:	4282      	cmp	r2, r0
 8004e82:	d006      	beq.n	8004e92 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0xaa>
          mOffset += 2;
 8004e84:	3302      	adds	r3, #2
 8004e86:	4a38      	ldr	r2, [pc, #224]	; (8004f68 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x180>)
 8004e88:	6093      	str	r3, [r2, #8]
       }while( mOffset < (2048-1) );
 8004e8a:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	ddef      	ble.n	8004e72 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x8a>
      if( mOffset >= (2048-1) )     return 2;   // blad FLASH: ERASE REQ
 8004e92:	4b35      	ldr	r3, [pc, #212]	; (8004f68 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x180>)
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	dc3b      	bgt.n	8004f16 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x12e>
      HAL_StatusTypeDef res = HAL_FLASH_Unlock();
 8004e9e:	f7fc f9c1 	bl	8001224 <HAL_FLASH_Unlock>
      uint8_t index = aIndex;
 8004ea2:	b2eb      	uxtb	r3, r5
      if( index > 126 ) return 3;               // blad indeksu: za duzy
 8004ea4:	2b7e      	cmp	r3, #126	; 0x7e
 8004ea6:	d838      	bhi.n	8004f1a <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x132>
      uint8_t wrt = mTable[aIndex];
 8004ea8:	482f      	ldr	r0, [pc, #188]	; (8004f68 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x180>)
 8004eaa:	1942      	adds	r2, r0, r5
 8004eac:	7b52      	ldrb	r2, [r2, #13]
      uint16_t dana2 = ((index+1)<<8) | (wrt);
 8004eae:	3301      	adds	r3, #1
 8004eb0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
       uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 8004eb4:	8801      	ldrh	r1, [r0, #0]
 8004eb6:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8004eba:	8900      	ldrh	r0, [r0, #8]
       HAL_StatusTypeDef res = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD , addr, aData );
 8004ebc:	b292      	uxth	r2, r2
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	eb00 21c1 	add.w	r1, r0, r1, lsl #11
 8004ec4:	2001      	movs	r0, #1
 8004ec6:	f7fc fa01 	bl	80012cc <HAL_FLASH_Program>
      HAL_StatusTypeDef res = HAL_FLASH_Lock();
 8004eca:	f7fc f9c5 	bl	8001258 <HAL_FLASH_Lock>
          uint16_t dana = MFlash::read16( mPage, mOffset );
 8004ece:	4a26      	ldr	r2, [pc, #152]	; (8004f68 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x180>)
 8004ed0:	6893      	ldr	r3, [r2, #8]
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 8004ed2:	8812      	ldrh	r2, [r2, #0]
 8004ed4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8004ed8:	02d2      	lsls	r2, r2, #11
 8004eda:	b299      	uxth	r1, r3
      uint16_t res = *(__IO uint16_t*)(addr);
 8004edc:	5a8a      	ldrh	r2, [r1, r2]
 8004ede:	b292      	uxth	r2, r2
          if( dana == 0xFFFF ) return;         // koniec przetwarzania
 8004ee0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ee4:	428a      	cmp	r2, r1
 8004ee6:	d006      	beq.n	8004ef6 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x10e>
          mOffset += 2;
 8004ee8:	3302      	adds	r3, #2
 8004eea:	4a1f      	ldr	r2, [pc, #124]	; (8004f68 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x180>)
 8004eec:	6093      	str	r3, [r2, #8]
       }while( mOffset < (2048-1) );
 8004eee:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	ddeb      	ble.n	8004ece <_ZN7MST758022frameRX_ToNode_setAddrEPh+0xe6>
        int ind8B = aIndex - ind8A*8;
 8004ef6:	f005 0207 	and.w	r2, r5, #7
        uint8_t maska = 0x01 << ind8B; 
 8004efa:	2301      	movs	r3, #1
 8004efc:	fa03 f202 	lsl.w	r2, r3, r2
        mChangeTable[ind8A] &= (~maska);
 8004f00:	4b19      	ldr	r3, [pc, #100]	; (8004f68 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x180>)
 8004f02:	eb03 05d5 	add.w	r5, r3, r5, lsr #3
 8004f06:	7d6b      	ldrb	r3, [r5, #21]
 8004f08:	ea23 0302 	bic.w	r3, r3, r2
 8004f0c:	756b      	strb	r3, [r5, #21]
      return 0;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e784      	b.n	8004e1c <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x34>
      if( mOffset >= (2048-1) )     return 2; // blad FLASH: ERASE REQ
 8004f12:	2302      	movs	r3, #2
 8004f14:	e782      	b.n	8004e1c <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x34>
      if( mOffset >= (2048-1) )     return 2;   // blad FLASH: ERASE REQ
 8004f16:	2302      	movs	r3, #2
 8004f18:	e780      	b.n	8004e1c <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x34>
      if( index > 126 ) return 3;               // blad indeksu: za duzy
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e77e      	b.n	8004e1c <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x34>
      HAL_StatusTypeDef res = HAL_FLASH_Unlock();
 8004f1e:	f7fc f981 	bl	8001224 <HAL_FLASH_Unlock>
               MFlash::MFlash::erasePage(mPage);
 8004f22:	4d11      	ldr	r5, [pc, #68]	; (8004f68 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x180>)
 8004f24:	882b      	ldrh	r3, [r5, #0]
       uint32_t addr = 0x08000000 + (aPage * 0x800);
 8004f26:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004f2a:	02db      	lsls	r3, r3, #11
       f.TypeErase = FLASH_TYPEERASE_PAGES;
 8004f2c:	2400      	movs	r4, #0
 8004f2e:	9401      	str	r4, [sp, #4]
       f.PageAddress = addr;
 8004f30:	9302      	str	r3, [sp, #8]
       f.NbPages = 1;
 8004f32:	2301      	movs	r3, #1
 8004f34:	9303      	str	r3, [sp, #12]
       uint32_t PageError = 0;
 8004f36:	9400      	str	r4, [sp, #0]
       HAL_StatusTypeDef res = HAL_FLASHEx_Erase(&f, &PageError);
 8004f38:	4669      	mov	r1, sp
 8004f3a:	a801      	add	r0, sp, #4
 8004f3c:	f7fc fa38 	bl	80013b0 <HAL_FLASHEx_Erase>
      HAL_StatusTypeDef res = HAL_FLASH_Lock();
 8004f40:	f7fc f98a 	bl	8001258 <HAL_FLASH_Lock>
               mOffset = 0;
 8004f44:	60ac      	str	r4, [r5, #8]
        for( int i=0; i<((_SSD_TABSIZE_/8)+1); i++ ) mChangeTable[i] = 0xFF;
 8004f46:	4623      	mov	r3, r4
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	dc05      	bgt.n	8004f58 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x170>
 8004f4c:	4a06      	ldr	r2, [pc, #24]	; (8004f68 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x180>)
 8004f4e:	441a      	add	r2, r3
 8004f50:	21ff      	movs	r1, #255	; 0xff
 8004f52:	7551      	strb	r1, [r2, #21]
 8004f54:	3301      	adds	r3, #1
 8004f56:	e7f7      	b.n	8004f48 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x160>
               i = 0; continue;
 8004f58:	2400      	movs	r4, #0
 8004f5a:	e762      	b.n	8004e22 <_ZN7MST758022frameRX_ToNode_setAddrEPh+0x3a>
    gFlash_SSD.set8( 0, g485E.mMyAddr );
    gFlash_SSD.flush();

    // BRAKUJE POTWIERDZENIA !!!

}// -----------------------------------------------------------
 8004f5c:	b005      	add	sp, #20
 8004f5e:	bd30      	pop	{r4, r5, pc}
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	200008a8 	.word	0x200008a8
 8004f68:	20000970 	.word	0x20000970

08004f6c <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh>:
/// ----------------------------------------------------------
/// FRAME set specific address to unregistered nodes
void MST7580::frameRX_ToNode_setAddrUnreg( uint8_t *frame ){

    // ... params RX ................
    uint8_t newAddr    = frame[1];
 8004f6c:	784b      	ldrb	r3, [r1, #1]

    if( gSystem.mIsReg ) return;
 8004f6e:	4a5d      	ldr	r2, [pc, #372]	; (80050e4 <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x178>)
 8004f70:	7a52      	ldrb	r2, [r2, #9]
 8004f72:	2a00      	cmp	r2, #0
 8004f74:	f040 80b4 	bne.w	80050e0 <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x174>
void MST7580::frameRX_ToNode_setAddrUnreg( uint8_t *frame ){
 8004f78:	b530      	push	{r4, r5, lr}
 8004f7a:	b085      	sub	sp, #20

    g485E.mMyAddr = newAddr;
 8004f7c:	4a5a      	ldr	r2, [pc, #360]	; (80050e8 <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x17c>)
 8004f7e:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
      return mTable[ aIndex ];
 8004f82:	4a5a      	ldr	r2, [pc, #360]	; (80050ec <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x180>)
 8004f84:	7b52      	ldrb	r2, [r2, #13]
      if( prevWrt != aValue ){
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d005      	beq.n	8004f96 <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x2a>
          mTable[ aIndex ] = aValue;
 8004f8a:	4a58      	ldr	r2, [pc, #352]	; (80050ec <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x180>)
 8004f8c:	7353      	strb	r3, [r2, #13]
        mChangeTable[ind8A] |= (maska);      
 8004f8e:	7d53      	ldrb	r3, [r2, #21]
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	7553      	strb	r3, [r2, #21]
     for( int i=0; i<(_SSD_TABSIZE_); i++ ){
 8004f96:	2400      	movs	r4, #0
 8004f98:	e004      	b.n	8004fa4 <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x38>
      if( aIndex >= _SSD_TABSIZE_ ) return 1; // blad indeksu: za duzy
 8004f9a:	2301      	movs	r3, #1
            uint8_t res = flushIndex( i );
 8004f9c:	b2db      	uxtb	r3, r3
            if( res == 2 ){     // flash czyszczony !!!
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d07d      	beq.n	800509e <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x132>
     for( int i=0; i<(_SSD_TABSIZE_); i++ ){
 8004fa2:	3401      	adds	r4, #1
 8004fa4:	2c07      	cmp	r4, #7
 8004fa6:	f300 8099 	bgt.w	80050dc <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x170>
        uint8_t bitChange = changeTable_getBit( i );
 8004faa:	b2a5      	uxth	r5, r4
        if( aIndex >= _SSD_TABSIZE_ ) return 0;         // blad indeksu
 8004fac:	2d07      	cmp	r5, #7
 8004fae:	d8f8      	bhi.n	8004fa2 <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x36>
        int ind8A = aIndex / 8;
 8004fb0:	08e8      	lsrs	r0, r5, #3
        int ind8B = aIndex - ind8A*8;
 8004fb2:	eba5 01c0 	sub.w	r1, r5, r0, lsl #3
        uint8_t maska = 0x01 << ind8B; 
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	408b      	lsls	r3, r1
        return  (mChangeTable[ind8A] & maska);
 8004fba:	4a4c      	ldr	r2, [pc, #304]	; (80050ec <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x180>)
 8004fbc:	4402      	add	r2, r0
 8004fbe:	7d52      	ldrb	r2, [r2, #21]
        if( bitChange != 0 ){
 8004fc0:	4213      	tst	r3, r2
 8004fc2:	d0ee      	beq.n	8004fa2 <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x36>
      if( aIndex >= _SSD_TABSIZE_ ) return 1; // blad indeksu: za duzy
 8004fc4:	2d07      	cmp	r5, #7
 8004fc6:	d8e8      	bhi.n	8004f9a <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x2e>
      if( mOffset >= (2048-1) )     return 2; // blad FLASH: ERASE REQ
 8004fc8:	4b48      	ldr	r3, [pc, #288]	; (80050ec <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x180>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	dc5e      	bgt.n	8005092 <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x126>
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 8004fd4:	4a45      	ldr	r2, [pc, #276]	; (80050ec <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x180>)
 8004fd6:	8812      	ldrh	r2, [r2, #0]
 8004fd8:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8004fdc:	02d2      	lsls	r2, r2, #11
 8004fde:	b29b      	uxth	r3, r3
      uint16_t res = *(__IO uint16_t*)(addr);
 8004fe0:	5a9b      	ldrh	r3, [r3, r2]
 8004fe2:	b29b      	uxth	r3, r3
        if( dana != 0xFFFF ){
 8004fe4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004fe8:	428b      	cmp	r3, r1
 8004fea:	d012      	beq.n	8005012 <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0xa6>
          mOffset = 0;  flash_searchFF();
 8004fec:	4b3f      	ldr	r3, [pc, #252]	; (80050ec <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x180>)
 8004fee:	2100      	movs	r1, #0
 8004ff0:	6099      	str	r1, [r3, #8]
          uint16_t dana = MFlash::read16( mPage, mOffset );
 8004ff2:	4b3e      	ldr	r3, [pc, #248]	; (80050ec <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x180>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 8004ff6:	b299      	uxth	r1, r3
      uint16_t res = *(__IO uint16_t*)(addr);
 8004ff8:	5a89      	ldrh	r1, [r1, r2]
 8004ffa:	b289      	uxth	r1, r1
          if( dana == 0xFFFF ) return;         // koniec przetwarzania
 8004ffc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005000:	4281      	cmp	r1, r0
 8005002:	d006      	beq.n	8005012 <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0xa6>
          mOffset += 2;
 8005004:	3302      	adds	r3, #2
 8005006:	4939      	ldr	r1, [pc, #228]	; (80050ec <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x180>)
 8005008:	608b      	str	r3, [r1, #8]
       }while( mOffset < (2048-1) );
 800500a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800500e:	428b      	cmp	r3, r1
 8005010:	ddef      	ble.n	8004ff2 <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x86>
      if( mOffset >= (2048-1) )     return 2;   // blad FLASH: ERASE REQ
 8005012:	4b36      	ldr	r3, [pc, #216]	; (80050ec <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x180>)
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800501a:	429a      	cmp	r2, r3
 800501c:	dc3b      	bgt.n	8005096 <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x12a>
      HAL_StatusTypeDef res = HAL_FLASH_Unlock();
 800501e:	f7fc f901 	bl	8001224 <HAL_FLASH_Unlock>
      uint8_t index = aIndex;
 8005022:	b2eb      	uxtb	r3, r5
      if( index > 126 ) return 3;               // blad indeksu: za duzy
 8005024:	2b7e      	cmp	r3, #126	; 0x7e
 8005026:	d838      	bhi.n	800509a <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x12e>
      uint8_t wrt = mTable[aIndex];
 8005028:	4830      	ldr	r0, [pc, #192]	; (80050ec <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x180>)
 800502a:	1942      	adds	r2, r0, r5
 800502c:	7b52      	ldrb	r2, [r2, #13]
      uint16_t dana2 = ((index+1)<<8) | (wrt);
 800502e:	3301      	adds	r3, #1
 8005030:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
       uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 8005034:	8801      	ldrh	r1, [r0, #0]
 8005036:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 800503a:	8900      	ldrh	r0, [r0, #8]
       HAL_StatusTypeDef res = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD , addr, aData );
 800503c:	b292      	uxth	r2, r2
 800503e:	2300      	movs	r3, #0
 8005040:	eb00 21c1 	add.w	r1, r0, r1, lsl #11
 8005044:	2001      	movs	r0, #1
 8005046:	f7fc f941 	bl	80012cc <HAL_FLASH_Program>
      HAL_StatusTypeDef res = HAL_FLASH_Lock();
 800504a:	f7fc f905 	bl	8001258 <HAL_FLASH_Lock>
          uint16_t dana = MFlash::read16( mPage, mOffset );
 800504e:	4a27      	ldr	r2, [pc, #156]	; (80050ec <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x180>)
 8005050:	6893      	ldr	r3, [r2, #8]
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 8005052:	8812      	ldrh	r2, [r2, #0]
 8005054:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8005058:	02d2      	lsls	r2, r2, #11
 800505a:	b299      	uxth	r1, r3
      uint16_t res = *(__IO uint16_t*)(addr);
 800505c:	5a8a      	ldrh	r2, [r1, r2]
 800505e:	b292      	uxth	r2, r2
          if( dana == 0xFFFF ) return;         // koniec przetwarzania
 8005060:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005064:	428a      	cmp	r2, r1
 8005066:	d006      	beq.n	8005076 <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x10a>
          mOffset += 2;
 8005068:	3302      	adds	r3, #2
 800506a:	4a20      	ldr	r2, [pc, #128]	; (80050ec <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x180>)
 800506c:	6093      	str	r3, [r2, #8]
       }while( mOffset < (2048-1) );
 800506e:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005072:	4293      	cmp	r3, r2
 8005074:	ddeb      	ble.n	800504e <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0xe2>
        int ind8B = aIndex - ind8A*8;
 8005076:	f005 0207 	and.w	r2, r5, #7
        uint8_t maska = 0x01 << ind8B; 
 800507a:	2301      	movs	r3, #1
 800507c:	fa03 f202 	lsl.w	r2, r3, r2
        mChangeTable[ind8A] &= (~maska);
 8005080:	4b1a      	ldr	r3, [pc, #104]	; (80050ec <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x180>)
 8005082:	eb03 05d5 	add.w	r5, r3, r5, lsr #3
 8005086:	7d6b      	ldrb	r3, [r5, #21]
 8005088:	ea23 0302 	bic.w	r3, r3, r2
 800508c:	756b      	strb	r3, [r5, #21]
      return 0;
 800508e:	2300      	movs	r3, #0
 8005090:	e784      	b.n	8004f9c <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x30>
      if( mOffset >= (2048-1) )     return 2; // blad FLASH: ERASE REQ
 8005092:	2302      	movs	r3, #2
 8005094:	e782      	b.n	8004f9c <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x30>
      if( mOffset >= (2048-1) )     return 2;   // blad FLASH: ERASE REQ
 8005096:	2302      	movs	r3, #2
 8005098:	e780      	b.n	8004f9c <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x30>
      if( index > 126 ) return 3;               // blad indeksu: za duzy
 800509a:	2303      	movs	r3, #3
 800509c:	e77e      	b.n	8004f9c <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x30>
      HAL_StatusTypeDef res = HAL_FLASH_Unlock();
 800509e:	f7fc f8c1 	bl	8001224 <HAL_FLASH_Unlock>
               MFlash::MFlash::erasePage(mPage);
 80050a2:	4d12      	ldr	r5, [pc, #72]	; (80050ec <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x180>)
 80050a4:	882b      	ldrh	r3, [r5, #0]
       uint32_t addr = 0x08000000 + (aPage * 0x800);
 80050a6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80050aa:	02db      	lsls	r3, r3, #11
       f.TypeErase = FLASH_TYPEERASE_PAGES;
 80050ac:	2400      	movs	r4, #0
 80050ae:	9401      	str	r4, [sp, #4]
       f.PageAddress = addr;
 80050b0:	9302      	str	r3, [sp, #8]
       f.NbPages = 1;
 80050b2:	2301      	movs	r3, #1
 80050b4:	9303      	str	r3, [sp, #12]
       uint32_t PageError = 0;
 80050b6:	9400      	str	r4, [sp, #0]
       HAL_StatusTypeDef res = HAL_FLASHEx_Erase(&f, &PageError);
 80050b8:	4669      	mov	r1, sp
 80050ba:	a801      	add	r0, sp, #4
 80050bc:	f7fc f978 	bl	80013b0 <HAL_FLASHEx_Erase>
      HAL_StatusTypeDef res = HAL_FLASH_Lock();
 80050c0:	f7fc f8ca 	bl	8001258 <HAL_FLASH_Lock>
               mOffset = 0;
 80050c4:	60ac      	str	r4, [r5, #8]
        for( int i=0; i<((_SSD_TABSIZE_/8)+1); i++ ) mChangeTable[i] = 0xFF;
 80050c6:	4623      	mov	r3, r4
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	dc05      	bgt.n	80050d8 <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x16c>
 80050cc:	4a07      	ldr	r2, [pc, #28]	; (80050ec <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x180>)
 80050ce:	441a      	add	r2, r3
 80050d0:	21ff      	movs	r1, #255	; 0xff
 80050d2:	7551      	strb	r1, [r2, #21]
 80050d4:	3301      	adds	r3, #1
 80050d6:	e7f7      	b.n	80050c8 <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x15c>
               i = 0; continue;
 80050d8:	2400      	movs	r4, #0
 80050da:	e762      	b.n	8004fa2 <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh+0x36>
    gFlash_SSD.set8( 0, g485E.mMyAddr );
    gFlash_SSD.flush();

    // BRAKUJE POTWIERDZENIA !!!

}// -----------------------------------------------------------
 80050dc:	b005      	add	sp, #20
 80050de:	bd30      	pop	{r4, r5, pc}
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	20000ac4 	.word	0x20000ac4
 80050e8:	200008a8 	.word	0x200008a8
 80050ec:	20000970 	.word	0x20000970

080050f0 <_ZN7MST758022frameRX_ToNode_hiUnregEPh>:
/// ----------------------------------------------------------
/// FRAME AskStatus  ToNode
void MST7580::frameRX_ToNode_hiUnreg( uint8_t *frame ){

    // ... params RX ................
    if( gSystem.mIsReg ) return;
 80050f0:	4b25      	ldr	r3, [pc, #148]	; (8005188 <_ZN7MST758022frameRX_ToNode_hiUnregEPh+0x98>)
 80050f2:	7a5b      	ldrb	r3, [r3, #9]
 80050f4:	b103      	cbz	r3, 80050f8 <_ZN7MST758022frameRX_ToNode_hiUnregEPh+0x8>
 80050f6:	4770      	bx	lr
void MST7580::frameRX_ToNode_hiUnreg( uint8_t *frame ){
 80050f8:	b430      	push	{r4, r5}
 80050fa:	b082      	sub	sp, #8
    g485E.mMyAddr = 0xCC;
 80050fc:	23cc      	movs	r3, #204	; 0xcc
 80050fe:	4a23      	ldr	r2, [pc, #140]	; (800518c <_ZN7MST758022frameRX_ToNode_hiUnregEPh+0x9c>)
 8005100:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
    uint8_t addr =  g485E.mMyAddr;
    uint8_t gateway = frame[1];
 8005104:	784a      	ldrb	r2, [r1, #1]


    // ... send .....................
        uint8_t frameTX[] = {
 8005106:	2124      	movs	r1, #36	; 0x24
 8005108:	f88d 1004 	strb.w	r1, [sp, #4]
            0x24,   // RX_HiReg_Ans
            addr,
			gateway
        };
 800510c:	f88d 3005 	strb.w	r3, [sp, #5]
 8005110:	f88d 2006 	strb.w	r2, [sp, #6]
      int dif = mIndexSTOP - mIndexSTART;
 8005114:	4b1e      	ldr	r3, [pc, #120]	; (8005190 <_ZN7MST758022frameRX_ToNode_hiUnregEPh+0xa0>)
 8005116:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800511a:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
      if( dif < 0 ) dif = cBufLength + dif;
 800511e:	1b13      	subs	r3, r2, r4
 8005120:	d414      	bmi.n	800514c <_ZN7MST758022frameRX_ToNode_hiUnregEPh+0x5c>
      int N2 = N + cnt + 1;
 8005122:	3303      	adds	r3, #3
      if( N2 >= cBufLength ) return false;
 8005124:	2b26      	cmp	r3, #38	; 0x26
 8005126:	dc2b      	bgt.n	8005180 <_ZN7MST758022frameRX_ToNode_hiUnregEPh+0x90>
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8005128:	1c51      	adds	r1, r2, #1
 800512a:	4b1a      	ldr	r3, [pc, #104]	; (8005194 <_ZN7MST758022frameRX_ToNode_hiUnregEPh+0xa4>)
 800512c:	fb83 0301 	smull	r0, r3, r3, r1
 8005130:	111b      	asrs	r3, r3, #4
 8005132:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005136:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 800513a:	429c      	cmp	r4, r3
 800513c:	d004      	beq.n	8005148 <_ZN7MST758022frameRX_ToNode_hiUnregEPh+0x58>
      mBuf[ stopPrev ] = aData;
 800513e:	4914      	ldr	r1, [pc, #80]	; (8005190 <_ZN7MST758022frameRX_ToNode_hiUnregEPh+0xa0>)
 8005140:	2003      	movs	r0, #3
 8005142:	5488      	strb	r0, [r1, r2]
      mIndexSTOP = stopTmp;
 8005144:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
void MST7580::frameRX_ToNode_hiUnreg( uint8_t *frame ){
 8005148:	2200      	movs	r2, #0
 800514a:	e006      	b.n	800515a <_ZN7MST758022frameRX_ToNode_hiUnregEPh+0x6a>
      if( dif < 0 ) dif = cBufLength + dif;
 800514c:	3328      	adds	r3, #40	; 0x28
 800514e:	e7e8      	b.n	8005122 <_ZN7MST758022frameRX_ToNode_hiUnregEPh+0x32>
      mBuf[ stopPrev ] = aData;
 8005150:	490f      	ldr	r1, [pc, #60]	; (8005190 <_ZN7MST758022frameRX_ToNode_hiUnregEPh+0xa0>)
 8005152:	540d      	strb	r5, [r1, r0]
      mIndexSTOP = stopTmp;
 8005154:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
      for( int i=0; i<cnt; i++ ) bufAdd( frame[i] );
 8005158:	3201      	adds	r2, #1
 800515a:	2a02      	cmp	r2, #2
 800515c:	dc10      	bgt.n	8005180 <_ZN7MST758022frameRX_ToNode_hiUnregEPh+0x90>
 800515e:	ab01      	add	r3, sp, #4
 8005160:	5c9d      	ldrb	r5, [r3, r2]
      int stopPrev = mIndexSTOP;
 8005162:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <_ZN7MST758022frameRX_ToNode_hiUnregEPh+0xa0>)
 8005164:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8005168:	1c41      	adds	r1, r0, #1
 800516a:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <_ZN7MST758022frameRX_ToNode_hiUnregEPh+0xa4>)
 800516c:	fb83 c301 	smull	ip, r3, r3, r1
 8005170:	111b      	asrs	r3, r3, #4
 8005172:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005176:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 800517a:	429c      	cmp	r4, r3
 800517c:	d1e8      	bne.n	8005150 <_ZN7MST758022frameRX_ToNode_hiUnregEPh+0x60>
 800517e:	e7eb      	b.n	8005158 <_ZN7MST758022frameRX_ToNode_hiUnregEPh+0x68>

        int cnt = sizeof( frameTX );
        gST7580.mBuf_Frames.bufAddFrame( cnt, frameTX );


}// -----------------------------------------------------------
 8005180:	b002      	add	sp, #8
 8005182:	bc30      	pop	{r4, r5}
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	20000ac4 	.word	0x20000ac4
 800518c:	200008a8 	.word	0x200008a8
 8005190:	20000a64 	.word	0x20000a64
 8005194:	66666667 	.word	0x66666667

08005198 <_ZN7MST758027frameRX_ToGateway_getStatusEPh>:
    
}// -----------------------------------------------------------

/// ----------------------------------------------------------
/// FRAME AskStatus  ToGateway
void MST7580::frameRX_ToGateway_getStatus( uint8_t *frame ){
 8005198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519c:	b08d      	sub	sp, #52	; 0x34
	uint8_t type   = frame[1];
 800519e:	f891 e001 	ldrb.w	lr, [r1, #1]
	uint8_t gateway = frame[2];
 80051a2:	7888      	ldrb	r0, [r1, #2]
	uint8_t addr  = frame[3];
 80051a4:	f891 8003 	ldrb.w	r8, [r1, #3]
	uint8_t status  = frame[4];
 80051a8:	f891 c004 	ldrb.w	ip, [r1, #4]
	uint8_t rels2  = frame[5];
 80051ac:	794f      	ldrb	r7, [r1, #5]
	uint8_t mSO1   = frame[6];
 80051ae:	798e      	ldrb	r6, [r1, #6]
	uint8_t mSO2   = frame[7];
 80051b0:	79cd      	ldrb	r5, [r1, #7]
	uint8_t mUA1   = frame[8];
 80051b2:	7a0b      	ldrb	r3, [r1, #8]
 80051b4:	9301      	str	r3, [sp, #4]
	uint8_t mUA2   = frame[9];
 80051b6:	7a4b      	ldrb	r3, [r1, #9]
 80051b8:	9302      	str	r3, [sp, #8]
	uint8_t mUB1   = frame[10];
 80051ba:	7a8b      	ldrb	r3, [r1, #10]
 80051bc:	9303      	str	r3, [sp, #12]
	uint8_t mUB2   = frame[11];
 80051be:	7acb      	ldrb	r3, [r1, #11]
 80051c0:	9304      	str	r3, [sp, #16]
	uint8_t mIA1   = frame[12];
 80051c2:	7b0b      	ldrb	r3, [r1, #12]
 80051c4:	9305      	str	r3, [sp, #20]
	uint8_t mIA2   = frame[13];
 80051c6:	7b4b      	ldrb	r3, [r1, #13]
 80051c8:	9306      	str	r3, [sp, #24]
	uint8_t mIB1   = frame[14];
 80051ca:	7b8b      	ldrb	r3, [r1, #14]
 80051cc:	9307      	str	r3, [sp, #28]
	uint8_t mIB2   = frame[15];
 80051ce:	f891 900f 	ldrb.w	r9, [r1, #15]

	if(g485E.mMyAddr != gateway) return;
 80051d2:	4bb9      	ldr	r3, [pc, #740]	; (80054b8 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x320>)
 80051d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80051d8:	4283      	cmp	r3, r0
 80051da:	f040 8361 	bne.w	80058a0 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x708>
		c = ((crc >> 8) ^ b) << 8;
 80051de:	f44f 43b4 	mov.w	r3, #23040	; 0x5a00
		i = 0;
 80051e2:	2200      	movs	r2, #0
 80051e4:	e008      	b.n	80051f8 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x60>
				c = (c << 1) ^ 0x1021;
 80051e6:	f241 0121 	movw	r1, #4129	; 0x1021
 80051ea:	ea81 0343 	eor.w	r3, r1, r3, lsl #1
 80051ee:	b29b      	uxth	r3, r3
		} while( ++i < 8 );
 80051f0:	3201      	adds	r2, #1
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	2a07      	cmp	r2, #7
 80051f6:	d805      	bhi.n	8005204 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x6c>
			if( (c & 0x8000) > 0 )
 80051f8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80051fc:	d1f3      	bne.n	80051e6 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x4e>
				c = c << 1;
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	b29b      	uxth	r3, r3
 8005202:	e7f5      	b.n	80051f0 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x58>

    //Wyliczanie CRC
    uint16_t crc = 0x0000;

    crc = g485E.addCrc(crc, 0x5A);
    crc = g485E.addCrc(crc, g485E.loopNr);
 8005204:	4aac      	ldr	r2, [pc, #688]	; (80054b8 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x320>)
 8005206:	f892 2075 	ldrb.w	r2, [r2, #117]	; 0x75
 800520a:	9208      	str	r2, [sp, #32]
		c = ((crc >> 8) ^ b) << 8;
 800520c:	461c      	mov	r4, r3
 800520e:	ea82 2323 	eor.w	r3, r2, r3, asr #8
 8005212:	021b      	lsls	r3, r3, #8
 8005214:	b29b      	uxth	r3, r3
		i = 0;
 8005216:	2100      	movs	r1, #0
 8005218:	e008      	b.n	800522c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x94>
				c = (c << 1) ^ 0x1021;
 800521a:	f241 0221 	movw	r2, #4129	; 0x1021
 800521e:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
 8005222:	b29b      	uxth	r3, r3
		} while( ++i < 8 );
 8005224:	3101      	adds	r1, #1
 8005226:	b2c9      	uxtb	r1, r1
 8005228:	2907      	cmp	r1, #7
 800522a:	d805      	bhi.n	8005238 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0xa0>
			if( (c & 0x8000) > 0 )
 800522c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005230:	d1f3      	bne.n	800521a <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x82>
				c = c << 1;
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	b29b      	uxth	r3, r3
 8005236:	e7f5      	b.n	8005224 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x8c>
		crc = c ^ ((crc) << 8);
 8005238:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
 800523c:	b29c      	uxth	r4, r3
		c = ((crc >> 8) ^ b) << 8;
 800523e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005242:	4043      	eors	r3, r0
 8005244:	021b      	lsls	r3, r3, #8
		i = 0;
 8005246:	2100      	movs	r1, #0
 8005248:	e008      	b.n	800525c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0xc4>
				c = (c << 1) ^ 0x1021;
 800524a:	f241 0221 	movw	r2, #4129	; 0x1021
 800524e:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
 8005252:	b29b      	uxth	r3, r3
		} while( ++i < 8 );
 8005254:	3101      	adds	r1, #1
 8005256:	b2c9      	uxtb	r1, r1
 8005258:	2907      	cmp	r1, #7
 800525a:	d805      	bhi.n	8005268 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0xd0>
			if( (c & 0x8000) > 0 )
 800525c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005260:	d1f3      	bne.n	800524a <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0xb2>
				c = c << 1;
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	b29b      	uxth	r3, r3
 8005266:	e7f5      	b.n	8005254 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0xbc>
		crc = c ^ ((crc) << 8);
 8005268:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
 800526c:	b29c      	uxth	r4, r3
		c = ((crc >> 8) ^ b) << 8;
 800526e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005272:	ea83 0308 	eor.w	r3, r3, r8
 8005276:	021b      	lsls	r3, r3, #8
		i = 0;
 8005278:	2100      	movs	r1, #0
 800527a:	e008      	b.n	800528e <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0xf6>
				c = (c << 1) ^ 0x1021;
 800527c:	f241 0221 	movw	r2, #4129	; 0x1021
 8005280:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
 8005284:	b29b      	uxth	r3, r3
		} while( ++i < 8 );
 8005286:	3101      	adds	r1, #1
 8005288:	b2c9      	uxtb	r1, r1
 800528a:	2907      	cmp	r1, #7
 800528c:	d805      	bhi.n	800529a <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x102>
			if( (c & 0x8000) > 0 )
 800528e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005292:	d1f3      	bne.n	800527c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0xe4>
				c = c << 1;
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	b29b      	uxth	r3, r3
 8005298:	e7f5      	b.n	8005286 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0xee>
		crc = c ^ ((crc) << 8);
 800529a:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
 800529e:	b29c      	uxth	r4, r3
		c = ((crc >> 8) ^ b) << 8;
 80052a0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80052a4:	ea83 030e 	eor.w	r3, r3, lr
 80052a8:	021b      	lsls	r3, r3, #8
		i = 0;
 80052aa:	2100      	movs	r1, #0
 80052ac:	e008      	b.n	80052c0 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x128>
				c = (c << 1) ^ 0x1021;
 80052ae:	f241 0221 	movw	r2, #4129	; 0x1021
 80052b2:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
 80052b6:	b29b      	uxth	r3, r3
		} while( ++i < 8 );
 80052b8:	3101      	adds	r1, #1
 80052ba:	b2c9      	uxtb	r1, r1
 80052bc:	2907      	cmp	r1, #7
 80052be:	d805      	bhi.n	80052cc <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x134>
			if( (c & 0x8000) > 0 )
 80052c0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80052c4:	d1f3      	bne.n	80052ae <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x116>
				c = c << 1;
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	e7f5      	b.n	80052b8 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x120>
		crc = c ^ ((crc) << 8);
 80052cc:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
 80052d0:	b29c      	uxth	r4, r3
		c = ((crc >> 8) ^ b) << 8;
 80052d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80052d6:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
		i = 0;
 80052da:	2100      	movs	r1, #0
 80052dc:	e008      	b.n	80052f0 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x158>
				c = (c << 1) ^ 0x1021;
 80052de:	f241 0221 	movw	r2, #4129	; 0x1021
 80052e2:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
 80052e6:	b29b      	uxth	r3, r3
		} while( ++i < 8 );
 80052e8:	3101      	adds	r1, #1
 80052ea:	b2c9      	uxtb	r1, r1
 80052ec:	2907      	cmp	r1, #7
 80052ee:	d805      	bhi.n	80052fc <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x164>
			if( (c & 0x8000) > 0 )
 80052f0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80052f4:	d1f3      	bne.n	80052de <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x146>
				c = c << 1;
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	e7f5      	b.n	80052e8 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x150>
		crc = c ^ ((crc) << 8);
 80052fc:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
 8005300:	b29c      	uxth	r4, r3
		c = ((crc >> 8) ^ b) << 8;
 8005302:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005306:	ea83 030c 	eor.w	r3, r3, ip
 800530a:	021b      	lsls	r3, r3, #8
		i = 0;
 800530c:	2100      	movs	r1, #0
 800530e:	e008      	b.n	8005322 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x18a>
				c = (c << 1) ^ 0x1021;
 8005310:	f241 0221 	movw	r2, #4129	; 0x1021
 8005314:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
 8005318:	b29b      	uxth	r3, r3
		} while( ++i < 8 );
 800531a:	3101      	adds	r1, #1
 800531c:	b2c9      	uxtb	r1, r1
 800531e:	2907      	cmp	r1, #7
 8005320:	d805      	bhi.n	800532e <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x196>
			if( (c & 0x8000) > 0 )
 8005322:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005326:	d1f3      	bne.n	8005310 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x178>
				c = c << 1;
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	b29b      	uxth	r3, r3
 800532c:	e7f5      	b.n	800531a <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x182>
		crc = c ^ ((crc) << 8);
 800532e:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
 8005332:	b29c      	uxth	r4, r3
		c = ((crc >> 8) ^ b) << 8;
 8005334:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005338:	407b      	eors	r3, r7
 800533a:	021b      	lsls	r3, r3, #8
		i = 0;
 800533c:	2100      	movs	r1, #0
 800533e:	e008      	b.n	8005352 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x1ba>
				c = (c << 1) ^ 0x1021;
 8005340:	f241 0221 	movw	r2, #4129	; 0x1021
 8005344:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
 8005348:	b29b      	uxth	r3, r3
		} while( ++i < 8 );
 800534a:	3101      	adds	r1, #1
 800534c:	b2c9      	uxtb	r1, r1
 800534e:	2907      	cmp	r1, #7
 8005350:	d805      	bhi.n	800535e <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x1c6>
			if( (c & 0x8000) > 0 )
 8005352:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005356:	d1f3      	bne.n	8005340 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x1a8>
				c = c << 1;
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	b29b      	uxth	r3, r3
 800535c:	e7f5      	b.n	800534a <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x1b2>
		crc = c ^ ((crc) << 8);
 800535e:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
 8005362:	b29c      	uxth	r4, r3
		c = ((crc >> 8) ^ b) << 8;
 8005364:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005368:	4073      	eors	r3, r6
 800536a:	021b      	lsls	r3, r3, #8
		i = 0;
 800536c:	2100      	movs	r1, #0
 800536e:	e008      	b.n	8005382 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x1ea>
				c = (c << 1) ^ 0x1021;
 8005370:	f241 0221 	movw	r2, #4129	; 0x1021
 8005374:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
 8005378:	b29b      	uxth	r3, r3
		} while( ++i < 8 );
 800537a:	3101      	adds	r1, #1
 800537c:	b2c9      	uxtb	r1, r1
 800537e:	2907      	cmp	r1, #7
 8005380:	d805      	bhi.n	800538e <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x1f6>
			if( (c & 0x8000) > 0 )
 8005382:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005386:	d1f3      	bne.n	8005370 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x1d8>
				c = c << 1;
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	b29b      	uxth	r3, r3
 800538c:	e7f5      	b.n	800537a <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x1e2>
		crc = c ^ ((crc) << 8);
 800538e:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
 8005392:	b29c      	uxth	r4, r3
		c = ((crc >> 8) ^ b) << 8;
 8005394:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005398:	406b      	eors	r3, r5
 800539a:	021b      	lsls	r3, r3, #8
		i = 0;
 800539c:	2100      	movs	r1, #0
 800539e:	e008      	b.n	80053b2 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x21a>
				c = (c << 1) ^ 0x1021;
 80053a0:	f241 0221 	movw	r2, #4129	; 0x1021
 80053a4:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
 80053a8:	b29b      	uxth	r3, r3
		} while( ++i < 8 );
 80053aa:	3101      	adds	r1, #1
 80053ac:	b2c9      	uxtb	r1, r1
 80053ae:	2907      	cmp	r1, #7
 80053b0:	d805      	bhi.n	80053be <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x226>
			if( (c & 0x8000) > 0 )
 80053b2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80053b6:	d1f3      	bne.n	80053a0 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x208>
				c = c << 1;
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	e7f5      	b.n	80053aa <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x212>
		crc = c ^ ((crc) << 8);
 80053be:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
 80053c2:	b29c      	uxth	r4, r3
		c = ((crc >> 8) ^ b) << 8;
 80053c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80053c8:	9a01      	ldr	r2, [sp, #4]
 80053ca:	4053      	eors	r3, r2
 80053cc:	021b      	lsls	r3, r3, #8
		i = 0;
 80053ce:	2100      	movs	r1, #0
 80053d0:	e008      	b.n	80053e4 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x24c>
				c = (c << 1) ^ 0x1021;
 80053d2:	f241 0221 	movw	r2, #4129	; 0x1021
 80053d6:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
 80053da:	b29b      	uxth	r3, r3
		} while( ++i < 8 );
 80053dc:	3101      	adds	r1, #1
 80053de:	b2c9      	uxtb	r1, r1
 80053e0:	2907      	cmp	r1, #7
 80053e2:	d805      	bhi.n	80053f0 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x258>
			if( (c & 0x8000) > 0 )
 80053e4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80053e8:	d1f3      	bne.n	80053d2 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x23a>
				c = c << 1;
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	e7f5      	b.n	80053dc <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x244>
		crc = c ^ ((crc) << 8);
 80053f0:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
 80053f4:	b29c      	uxth	r4, r3
		c = ((crc >> 8) ^ b) << 8;
 80053f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80053fa:	9a02      	ldr	r2, [sp, #8]
 80053fc:	4053      	eors	r3, r2
 80053fe:	021b      	lsls	r3, r3, #8
		i = 0;
 8005400:	2100      	movs	r1, #0
 8005402:	e008      	b.n	8005416 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x27e>
				c = (c << 1) ^ 0x1021;
 8005404:	f241 0221 	movw	r2, #4129	; 0x1021
 8005408:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
 800540c:	b29b      	uxth	r3, r3
		} while( ++i < 8 );
 800540e:	3101      	adds	r1, #1
 8005410:	b2c9      	uxtb	r1, r1
 8005412:	2907      	cmp	r1, #7
 8005414:	d805      	bhi.n	8005422 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x28a>
			if( (c & 0x8000) > 0 )
 8005416:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800541a:	d1f3      	bne.n	8005404 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x26c>
				c = c << 1;
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	b29b      	uxth	r3, r3
 8005420:	e7f5      	b.n	800540e <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x276>
		crc = c ^ ((crc) << 8);
 8005422:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
 8005426:	b29c      	uxth	r4, r3
		c = ((crc >> 8) ^ b) << 8;
 8005428:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800542c:	9a03      	ldr	r2, [sp, #12]
 800542e:	4053      	eors	r3, r2
 8005430:	021b      	lsls	r3, r3, #8
		i = 0;
 8005432:	2100      	movs	r1, #0
 8005434:	e008      	b.n	8005448 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x2b0>
				c = (c << 1) ^ 0x1021;
 8005436:	f241 0221 	movw	r2, #4129	; 0x1021
 800543a:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
 800543e:	b29b      	uxth	r3, r3
		} while( ++i < 8 );
 8005440:	3101      	adds	r1, #1
 8005442:	b2c9      	uxtb	r1, r1
 8005444:	2907      	cmp	r1, #7
 8005446:	d805      	bhi.n	8005454 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x2bc>
			if( (c & 0x8000) > 0 )
 8005448:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800544c:	d1f3      	bne.n	8005436 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x29e>
				c = c << 1;
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	b29b      	uxth	r3, r3
 8005452:	e7f5      	b.n	8005440 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x2a8>
		crc = c ^ ((crc) << 8);
 8005454:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
 8005458:	b29c      	uxth	r4, r3
		c = ((crc >> 8) ^ b) << 8;
 800545a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800545e:	9a04      	ldr	r2, [sp, #16]
 8005460:	4053      	eors	r3, r2
 8005462:	021b      	lsls	r3, r3, #8
		i = 0;
 8005464:	2100      	movs	r1, #0
 8005466:	e008      	b.n	800547a <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x2e2>
				c = (c << 1) ^ 0x1021;
 8005468:	f241 0221 	movw	r2, #4129	; 0x1021
 800546c:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
 8005470:	b29b      	uxth	r3, r3
		} while( ++i < 8 );
 8005472:	3101      	adds	r1, #1
 8005474:	b2c9      	uxtb	r1, r1
 8005476:	2907      	cmp	r1, #7
 8005478:	d805      	bhi.n	8005486 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x2ee>
			if( (c & 0x8000) > 0 )
 800547a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800547e:	d1f3      	bne.n	8005468 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x2d0>
				c = c << 1;
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	b29b      	uxth	r3, r3
 8005484:	e7f5      	b.n	8005472 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x2da>
		crc = c ^ ((crc) << 8);
 8005486:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
 800548a:	b29c      	uxth	r4, r3
		c = ((crc >> 8) ^ b) << 8;
 800548c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005490:	9a05      	ldr	r2, [sp, #20]
 8005492:	4053      	eors	r3, r2
 8005494:	021b      	lsls	r3, r3, #8
		i = 0;
 8005496:	2100      	movs	r1, #0
 8005498:	e008      	b.n	80054ac <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x314>
				c = (c << 1) ^ 0x1021;
 800549a:	f241 0221 	movw	r2, #4129	; 0x1021
 800549e:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
 80054a2:	b29b      	uxth	r3, r3
		} while( ++i < 8 );
 80054a4:	3101      	adds	r1, #1
 80054a6:	b2c9      	uxtb	r1, r1
 80054a8:	2907      	cmp	r1, #7
 80054aa:	d807      	bhi.n	80054bc <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x324>
			if( (c & 0x8000) > 0 )
 80054ac:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80054b0:	d1f3      	bne.n	800549a <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x302>
				c = c << 1;
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	e7f5      	b.n	80054a4 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x30c>
 80054b8:	200008a8 	.word	0x200008a8
		crc = c ^ ((crc) << 8);
 80054bc:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
 80054c0:	b29c      	uxth	r4, r3
		c = ((crc >> 8) ^ b) << 8;
 80054c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80054c6:	9a06      	ldr	r2, [sp, #24]
 80054c8:	4053      	eors	r3, r2
 80054ca:	021b      	lsls	r3, r3, #8
		i = 0;
 80054cc:	2100      	movs	r1, #0
 80054ce:	e008      	b.n	80054e2 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x34a>
				c = (c << 1) ^ 0x1021;
 80054d0:	f241 0221 	movw	r2, #4129	; 0x1021
 80054d4:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
 80054d8:	b29b      	uxth	r3, r3
		} while( ++i < 8 );
 80054da:	3101      	adds	r1, #1
 80054dc:	b2c9      	uxtb	r1, r1
 80054de:	2907      	cmp	r1, #7
 80054e0:	d805      	bhi.n	80054ee <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x356>
			if( (c & 0x8000) > 0 )
 80054e2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80054e6:	d1f3      	bne.n	80054d0 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x338>
				c = c << 1;
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	e7f5      	b.n	80054da <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x342>
		crc = c ^ ((crc) << 8);
 80054ee:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
 80054f2:	b29c      	uxth	r4, r3
		c = ((crc >> 8) ^ b) << 8;
 80054f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80054f8:	9a07      	ldr	r2, [sp, #28]
 80054fa:	4053      	eors	r3, r2
 80054fc:	021b      	lsls	r3, r3, #8
		i = 0;
 80054fe:	2100      	movs	r1, #0
 8005500:	e008      	b.n	8005514 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x37c>
				c = (c << 1) ^ 0x1021;
 8005502:	f241 0221 	movw	r2, #4129	; 0x1021
 8005506:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
 800550a:	b29b      	uxth	r3, r3
		} while( ++i < 8 );
 800550c:	3101      	adds	r1, #1
 800550e:	b2c9      	uxtb	r1, r1
 8005510:	2907      	cmp	r1, #7
 8005512:	d805      	bhi.n	8005520 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x388>
			if( (c & 0x8000) > 0 )
 8005514:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005518:	d1f3      	bne.n	8005502 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x36a>
				c = c << 1;
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	b29b      	uxth	r3, r3
 800551e:	e7f5      	b.n	800550c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x374>
		crc = c ^ ((crc) << 8);
 8005520:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
 8005524:	b29c      	uxth	r4, r3
		c = ((crc >> 8) ^ b) << 8;
 8005526:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800552a:	ea83 0309 	eor.w	r3, r3, r9
 800552e:	021b      	lsls	r3, r3, #8
		i = 0;
 8005530:	2100      	movs	r1, #0
 8005532:	e008      	b.n	8005546 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x3ae>
				c = (c << 1) ^ 0x1021;
 8005534:	f241 0221 	movw	r2, #4129	; 0x1021
 8005538:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
 800553c:	b29b      	uxth	r3, r3
		} while( ++i < 8 );
 800553e:	3101      	adds	r1, #1
 8005540:	b2c9      	uxtb	r1, r1
 8005542:	2907      	cmp	r1, #7
 8005544:	d805      	bhi.n	8005552 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x3ba>
			if( (c & 0x8000) > 0 )
 8005546:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800554a:	d1f3      	bne.n	8005534 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x39c>
				c = c << 1;
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	b29b      	uxth	r3, r3
 8005550:	e7f5      	b.n	800553e <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x3a6>
		crc = c ^ ((crc) << 8);
 8005552:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
    crc = g485E.addCrc(crc, mIA1);
    crc = g485E.addCrc(crc, mIA2);
    crc = g485E.addCrc(crc, mIB1);
    crc = g485E.addCrc(crc, mIB2);

    uint8_t crc_H = (crc >> 8);
 8005556:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800555a:	9209      	str	r2, [sp, #36]	; 0x24
    uint8_t crc_L = (crc >> 0);
 800555c:	b2db      	uxtb	r3, r3
 800555e:	930a      	str	r3, [sp, #40]	; 0x28
      int stopPrev = mIndexSTOP;
 8005560:	4acd      	ldr	r2, [pc, #820]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 8005562:	f892 4038 	ldrb.w	r4, [r2, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8005566:	f104 0a01 	add.w	sl, r4, #1
 800556a:	49cc      	ldr	r1, [pc, #816]	; (800589c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x704>)
 800556c:	fb81 310a 	smull	r3, r1, r1, sl
 8005570:	1109      	asrs	r1, r1, #4
 8005572:	f04f 0b32 	mov.w	fp, #50	; 0x32
 8005576:	fb0b a111 	mls	r1, fp, r1, sl
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 800557a:	f892 2037 	ldrb.w	r2, [r2, #55]	; 0x37
 800557e:	4291      	cmp	r1, r2
 8005580:	d008      	beq.n	8005594 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x3fc>
      mBuf[ stopPrev ] = aData;
 8005582:	f8df a314 	ldr.w	sl, [pc, #788]	; 8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>
 8005586:	4454      	add	r4, sl
 8005588:	f04f 0b5a 	mov.w	fp, #90	; 0x5a
 800558c:	f884 b005 	strb.w	fp, [r4, #5]
      mIndexSTOP = stopTmp;
 8005590:	f88a 1038 	strb.w	r1, [sl, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8005594:	49c0      	ldr	r1, [pc, #768]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 8005596:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 800559a:	f104 0a01 	add.w	sl, r4, #1
 800559e:	49bf      	ldr	r1, [pc, #764]	; (800589c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x704>)
 80055a0:	fb81 310a 	smull	r3, r1, r1, sl
 80055a4:	1109      	asrs	r1, r1, #4
 80055a6:	f04f 0b32 	mov.w	fp, #50	; 0x32
 80055aa:	fb0b a111 	mls	r1, fp, r1, sl
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80055ae:	4291      	cmp	r1, r2
 80055b0:	d006      	beq.n	80055c0 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x428>
      mBuf[ stopPrev ] = aData;
 80055b2:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>
 80055b6:	4454      	add	r4, sl
 80055b8:	9b08      	ldr	r3, [sp, #32]
 80055ba:	7163      	strb	r3, [r4, #5]
      mIndexSTOP = stopTmp;
 80055bc:	f88a 1038 	strb.w	r1, [sl, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80055c0:	49b5      	ldr	r1, [pc, #724]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 80055c2:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80055c6:	f104 0a01 	add.w	sl, r4, #1
 80055ca:	49b4      	ldr	r1, [pc, #720]	; (800589c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x704>)
 80055cc:	fb81 310a 	smull	r3, r1, r1, sl
 80055d0:	1109      	asrs	r1, r1, #4
 80055d2:	f04f 0b32 	mov.w	fp, #50	; 0x32
 80055d6:	fb0b a111 	mls	r1, fp, r1, sl
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80055da:	4291      	cmp	r1, r2
 80055dc:	d005      	beq.n	80055ea <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x452>
      mBuf[ stopPrev ] = aData;
 80055de:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>
 80055e2:	4454      	add	r4, sl
 80055e4:	7160      	strb	r0, [r4, #5]
      mIndexSTOP = stopTmp;
 80055e6:	f88a 1038 	strb.w	r1, [sl, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80055ea:	49ab      	ldr	r1, [pc, #684]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 80055ec:	f891 0038 	ldrb.w	r0, [r1, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80055f0:	1c44      	adds	r4, r0, #1
 80055f2:	49aa      	ldr	r1, [pc, #680]	; (800589c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x704>)
 80055f4:	fb81 3104 	smull	r3, r1, r1, r4
 80055f8:	1109      	asrs	r1, r1, #4
 80055fa:	f04f 0a32 	mov.w	sl, #50	; 0x32
 80055fe:	fb0a 4111 	mls	r1, sl, r1, r4
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8005602:	4291      	cmp	r1, r2
 8005604:	d005      	beq.n	8005612 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x47a>
      mBuf[ stopPrev ] = aData;
 8005606:	4ca4      	ldr	r4, [pc, #656]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 8005608:	4420      	add	r0, r4
 800560a:	f880 8005 	strb.w	r8, [r0, #5]
      mIndexSTOP = stopTmp;
 800560e:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8005612:	49a1      	ldr	r1, [pc, #644]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 8005614:	f891 0038 	ldrb.w	r0, [r1, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8005618:	1c44      	adds	r4, r0, #1
 800561a:	49a0      	ldr	r1, [pc, #640]	; (800589c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x704>)
 800561c:	fb81 3104 	smull	r3, r1, r1, r4
 8005620:	1109      	asrs	r1, r1, #4
 8005622:	f04f 0832 	mov.w	r8, #50	; 0x32
 8005626:	fb08 4111 	mls	r1, r8, r1, r4
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 800562a:	4291      	cmp	r1, r2
 800562c:	d005      	beq.n	800563a <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x4a2>
      mBuf[ stopPrev ] = aData;
 800562e:	4c9a      	ldr	r4, [pc, #616]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 8005630:	4420      	add	r0, r4
 8005632:	f880 e005 	strb.w	lr, [r0, #5]
      mIndexSTOP = stopTmp;
 8005636:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 800563a:	4997      	ldr	r1, [pc, #604]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 800563c:	f891 0038 	ldrb.w	r0, [r1, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8005640:	1c44      	adds	r4, r0, #1
 8005642:	4996      	ldr	r1, [pc, #600]	; (800589c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x704>)
 8005644:	fb81 3104 	smull	r3, r1, r1, r4
 8005648:	1109      	asrs	r1, r1, #4
 800564a:	f04f 0e32 	mov.w	lr, #50	; 0x32
 800564e:	fb0e 4111 	mls	r1, lr, r1, r4
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8005652:	4291      	cmp	r1, r2
 8005654:	d007      	beq.n	8005666 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x4ce>
      mBuf[ stopPrev ] = aData;
 8005656:	4c90      	ldr	r4, [pc, #576]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 8005658:	4420      	add	r0, r4
 800565a:	f04f 0e0c 	mov.w	lr, #12
 800565e:	f880 e005 	strb.w	lr, [r0, #5]
      mIndexSTOP = stopTmp;
 8005662:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8005666:	498c      	ldr	r1, [pc, #560]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 8005668:	f891 0038 	ldrb.w	r0, [r1, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 800566c:	1c44      	adds	r4, r0, #1
 800566e:	498b      	ldr	r1, [pc, #556]	; (800589c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x704>)
 8005670:	fb81 3104 	smull	r3, r1, r1, r4
 8005674:	1109      	asrs	r1, r1, #4
 8005676:	f04f 0e32 	mov.w	lr, #50	; 0x32
 800567a:	fb0e 4111 	mls	r1, lr, r1, r4
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 800567e:	4291      	cmp	r1, r2
 8005680:	d005      	beq.n	800568e <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x4f6>
      mBuf[ stopPrev ] = aData;
 8005682:	4c85      	ldr	r4, [pc, #532]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 8005684:	4420      	add	r0, r4
 8005686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005688:	7143      	strb	r3, [r0, #5]
      mIndexSTOP = stopTmp;
 800568a:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 800568e:	4982      	ldr	r1, [pc, #520]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 8005690:	f891 0038 	ldrb.w	r0, [r1, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8005694:	1c44      	adds	r4, r0, #1
 8005696:	4981      	ldr	r1, [pc, #516]	; (800589c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x704>)
 8005698:	fb81 3104 	smull	r3, r1, r1, r4
 800569c:	1109      	asrs	r1, r1, #4
 800569e:	f04f 0e32 	mov.w	lr, #50	; 0x32
 80056a2:	fb0e 4111 	mls	r1, lr, r1, r4
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80056a6:	4291      	cmp	r1, r2
 80056a8:	d005      	beq.n	80056b6 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x51e>
      mBuf[ stopPrev ] = aData;
 80056aa:	4c7b      	ldr	r4, [pc, #492]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 80056ac:	4420      	add	r0, r4
 80056ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056b0:	7143      	strb	r3, [r0, #5]
      mIndexSTOP = stopTmp;
 80056b2:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80056b6:	4b78      	ldr	r3, [pc, #480]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 80056b8:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80056bc:	1c48      	adds	r0, r1, #1
 80056be:	4b77      	ldr	r3, [pc, #476]	; (800589c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x704>)
 80056c0:	fb83 4300 	smull	r4, r3, r3, r0
 80056c4:	111b      	asrs	r3, r3, #4
 80056c6:	2432      	movs	r4, #50	; 0x32
 80056c8:	fb04 0313 	mls	r3, r4, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d005      	beq.n	80056dc <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x544>
      mBuf[ stopPrev ] = aData;
 80056d0:	4871      	ldr	r0, [pc, #452]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 80056d2:	4401      	add	r1, r0
 80056d4:	f881 c005 	strb.w	ip, [r1, #5]
      mIndexSTOP = stopTmp;
 80056d8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80056dc:	4b6e      	ldr	r3, [pc, #440]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 80056de:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80056e2:	1c48      	adds	r0, r1, #1
 80056e4:	4b6d      	ldr	r3, [pc, #436]	; (800589c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x704>)
 80056e6:	fb83 4300 	smull	r4, r3, r3, r0
 80056ea:	111b      	asrs	r3, r3, #4
 80056ec:	2432      	movs	r4, #50	; 0x32
 80056ee:	fb04 0313 	mls	r3, r4, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d004      	beq.n	8005700 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x568>
      mBuf[ stopPrev ] = aData;
 80056f6:	4868      	ldr	r0, [pc, #416]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 80056f8:	4401      	add	r1, r0
 80056fa:	714f      	strb	r7, [r1, #5]
      mIndexSTOP = stopTmp;
 80056fc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8005700:	4b65      	ldr	r3, [pc, #404]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 8005702:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8005706:	1c48      	adds	r0, r1, #1
 8005708:	4b64      	ldr	r3, [pc, #400]	; (800589c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x704>)
 800570a:	fb83 4300 	smull	r4, r3, r3, r0
 800570e:	111b      	asrs	r3, r3, #4
 8005710:	2432      	movs	r4, #50	; 0x32
 8005712:	fb04 0313 	mls	r3, r4, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8005716:	4293      	cmp	r3, r2
 8005718:	d004      	beq.n	8005724 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x58c>
      mBuf[ stopPrev ] = aData;
 800571a:	485f      	ldr	r0, [pc, #380]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 800571c:	4401      	add	r1, r0
 800571e:	714e      	strb	r6, [r1, #5]
      mIndexSTOP = stopTmp;
 8005720:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8005724:	4b5c      	ldr	r3, [pc, #368]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 8005726:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 800572a:	1c48      	adds	r0, r1, #1
 800572c:	4b5b      	ldr	r3, [pc, #364]	; (800589c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x704>)
 800572e:	fb83 4300 	smull	r4, r3, r3, r0
 8005732:	111b      	asrs	r3, r3, #4
 8005734:	2432      	movs	r4, #50	; 0x32
 8005736:	fb04 0313 	mls	r3, r4, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 800573a:	4293      	cmp	r3, r2
 800573c:	d004      	beq.n	8005748 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x5b0>
      mBuf[ stopPrev ] = aData;
 800573e:	4856      	ldr	r0, [pc, #344]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 8005740:	4401      	add	r1, r0
 8005742:	714d      	strb	r5, [r1, #5]
      mIndexSTOP = stopTmp;
 8005744:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8005748:	4b53      	ldr	r3, [pc, #332]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 800574a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 800574e:	1c58      	adds	r0, r3, #1
 8005750:	4952      	ldr	r1, [pc, #328]	; (800589c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x704>)
 8005752:	fb81 4100 	smull	r4, r1, r1, r0
 8005756:	1109      	asrs	r1, r1, #4
 8005758:	2432      	movs	r4, #50	; 0x32
 800575a:	fb04 0111 	mls	r1, r4, r1, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 800575e:	4291      	cmp	r1, r2
 8005760:	d005      	beq.n	800576e <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x5d6>
      mBuf[ stopPrev ] = aData;
 8005762:	484d      	ldr	r0, [pc, #308]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 8005764:	4403      	add	r3, r0
 8005766:	9c01      	ldr	r4, [sp, #4]
 8005768:	715c      	strb	r4, [r3, #5]
      mIndexSTOP = stopTmp;
 800576a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 800576e:	4b4a      	ldr	r3, [pc, #296]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 8005770:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8005774:	1c48      	adds	r0, r1, #1
 8005776:	4b49      	ldr	r3, [pc, #292]	; (800589c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x704>)
 8005778:	fb83 4300 	smull	r4, r3, r3, r0
 800577c:	111b      	asrs	r3, r3, #4
 800577e:	2432      	movs	r4, #50	; 0x32
 8005780:	fb04 0313 	mls	r3, r4, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8005784:	4293      	cmp	r3, r2
 8005786:	d005      	beq.n	8005794 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x5fc>
      mBuf[ stopPrev ] = aData;
 8005788:	4843      	ldr	r0, [pc, #268]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 800578a:	4401      	add	r1, r0
 800578c:	9c02      	ldr	r4, [sp, #8]
 800578e:	714c      	strb	r4, [r1, #5]
      mIndexSTOP = stopTmp;
 8005790:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8005794:	4b40      	ldr	r3, [pc, #256]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 8005796:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 800579a:	1c48      	adds	r0, r1, #1
 800579c:	4b3f      	ldr	r3, [pc, #252]	; (800589c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x704>)
 800579e:	fb83 4300 	smull	r4, r3, r3, r0
 80057a2:	111b      	asrs	r3, r3, #4
 80057a4:	2432      	movs	r4, #50	; 0x32
 80057a6:	fb04 0313 	mls	r3, r4, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d005      	beq.n	80057ba <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x622>
      mBuf[ stopPrev ] = aData;
 80057ae:	483a      	ldr	r0, [pc, #232]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 80057b0:	4401      	add	r1, r0
 80057b2:	9c03      	ldr	r4, [sp, #12]
 80057b4:	714c      	strb	r4, [r1, #5]
      mIndexSTOP = stopTmp;
 80057b6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80057ba:	4b37      	ldr	r3, [pc, #220]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 80057bc:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80057c0:	1c48      	adds	r0, r1, #1
 80057c2:	4b36      	ldr	r3, [pc, #216]	; (800589c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x704>)
 80057c4:	fb83 4300 	smull	r4, r3, r3, r0
 80057c8:	111b      	asrs	r3, r3, #4
 80057ca:	2432      	movs	r4, #50	; 0x32
 80057cc:	fb04 0313 	mls	r3, r4, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d005      	beq.n	80057e0 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x648>
      mBuf[ stopPrev ] = aData;
 80057d4:	4830      	ldr	r0, [pc, #192]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 80057d6:	4401      	add	r1, r0
 80057d8:	9c04      	ldr	r4, [sp, #16]
 80057da:	714c      	strb	r4, [r1, #5]
      mIndexSTOP = stopTmp;
 80057dc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80057e0:	4b2d      	ldr	r3, [pc, #180]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 80057e2:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80057e6:	1c48      	adds	r0, r1, #1
 80057e8:	4b2c      	ldr	r3, [pc, #176]	; (800589c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x704>)
 80057ea:	fb83 4300 	smull	r4, r3, r3, r0
 80057ee:	111b      	asrs	r3, r3, #4
 80057f0:	2432      	movs	r4, #50	; 0x32
 80057f2:	fb04 0313 	mls	r3, r4, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d005      	beq.n	8005806 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x66e>
      mBuf[ stopPrev ] = aData;
 80057fa:	4827      	ldr	r0, [pc, #156]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 80057fc:	4401      	add	r1, r0
 80057fe:	9c05      	ldr	r4, [sp, #20]
 8005800:	714c      	strb	r4, [r1, #5]
      mIndexSTOP = stopTmp;
 8005802:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8005806:	4b24      	ldr	r3, [pc, #144]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 8005808:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 800580c:	1c48      	adds	r0, r1, #1
 800580e:	4b23      	ldr	r3, [pc, #140]	; (800589c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x704>)
 8005810:	fb83 4300 	smull	r4, r3, r3, r0
 8005814:	111b      	asrs	r3, r3, #4
 8005816:	2432      	movs	r4, #50	; 0x32
 8005818:	fb04 0313 	mls	r3, r4, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 800581c:	4293      	cmp	r3, r2
 800581e:	d005      	beq.n	800582c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x694>
      mBuf[ stopPrev ] = aData;
 8005820:	481d      	ldr	r0, [pc, #116]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 8005822:	4401      	add	r1, r0
 8005824:	9c06      	ldr	r4, [sp, #24]
 8005826:	714c      	strb	r4, [r1, #5]
      mIndexSTOP = stopTmp;
 8005828:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 800582c:	4b1a      	ldr	r3, [pc, #104]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 800582e:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8005832:	1c48      	adds	r0, r1, #1
 8005834:	4b19      	ldr	r3, [pc, #100]	; (800589c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x704>)
 8005836:	fb83 4300 	smull	r4, r3, r3, r0
 800583a:	111b      	asrs	r3, r3, #4
 800583c:	2432      	movs	r4, #50	; 0x32
 800583e:	fb04 0313 	mls	r3, r4, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8005842:	4293      	cmp	r3, r2
 8005844:	d005      	beq.n	8005852 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x6ba>
      mBuf[ stopPrev ] = aData;
 8005846:	4814      	ldr	r0, [pc, #80]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 8005848:	4401      	add	r1, r0
 800584a:	9c07      	ldr	r4, [sp, #28]
 800584c:	714c      	strb	r4, [r1, #5]
      mIndexSTOP = stopTmp;
 800584e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8005852:	4b11      	ldr	r3, [pc, #68]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 8005854:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8005858:	1c48      	adds	r0, r1, #1
 800585a:	4b10      	ldr	r3, [pc, #64]	; (800589c <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x704>)
 800585c:	fb83 4300 	smull	r4, r3, r3, r0
 8005860:	111b      	asrs	r3, r3, #4
 8005862:	2432      	movs	r4, #50	; 0x32
 8005864:	fb04 0313 	mls	r3, r4, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8005868:	4293      	cmp	r3, r2
 800586a:	d005      	beq.n	8005878 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x6e0>
      mBuf[ stopPrev ] = aData;
 800586c:	4a0a      	ldr	r2, [pc, #40]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 800586e:	4411      	add	r1, r2
 8005870:	f881 9005 	strb.w	r9, [r1, #5]
      mIndexSTOP = stopTmp;
 8005874:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
      if( mIndexSTART == mIndexSTOP ) return false;
 8005878:	4a07      	ldr	r2, [pc, #28]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 800587a:	f892 3037 	ldrb.w	r3, [r2, #55]	; 0x37
 800587e:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8005882:	4293      	cmp	r3, r2
 8005884:	d012      	beq.n	80058ac <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x714>
      if( mIndexSTART < mIndexSTOP )  (*aCnt) = mIndexSTOP - mIndexSTART;
 8005886:	d20e      	bcs.n	80058a6 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x70e>
 8005888:	1ad4      	subs	r4, r2, r3
      (*aBuf) = &(mBuf[mIndexSTART]);
 800588a:	4a03      	ldr	r2, [pc, #12]	; (8005898 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x700>)
 800588c:	4413      	add	r3, r2
 800588e:	3305      	adds	r3, #5
 8005890:	930b      	str	r3, [sp, #44]	; 0x2c
      return true;
 8005892:	2301      	movs	r3, #1
      if( res ){
 8005894:	b96b      	cbnz	r3, 80058b2 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x71a>
 8005896:	e003      	b.n	80058a0 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x708>
 8005898:	200008a8 	.word	0x200008a8
 800589c:	51eb851f 	.word	0x51eb851f
    g485E.bufAdd( mIB2 );     // IB linii

    g485E.Send_IT();


}// -----------------------------------------------------------
 80058a0:	b00d      	add	sp, #52	; 0x34
 80058a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else                            (*aCnt) = cBufLength - mIndexSTART;
 80058a6:	f1c3 0432 	rsb	r4, r3, #50	; 0x32
 80058aa:	e7ee      	b.n	800588a <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x6f2>
      int cnt = 0;
 80058ac:	2400      	movs	r4, #0
      if( mIndexSTART == mIndexSTOP ) return false;
 80058ae:	4623      	mov	r3, r4
 80058b0:	e7f0      	b.n	8005894 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x6fc>
          _o485E_EN = 1;
 80058b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80058b6:	7d53      	ldrb	r3, [r2, #21]
 80058b8:	f043 0310 	orr.w	r3, r3, #16
 80058bc:	7553      	strb	r3, [r2, #21]
          HAL_StatusTypeDef uartRes = HAL_UART_Transmit_IT( mhUart, buf,  cnt );
 80058be:	4d07      	ldr	r5, [pc, #28]	; (80058dc <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x744>)
 80058c0:	b2a2      	uxth	r2, r4
 80058c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058c4:	6828      	ldr	r0, [r5, #0]
 80058c6:	f7fc fd9f 	bl	8002408 <HAL_UART_Transmit_IT>
           mIsEN_to_0 += cnt;
 80058ca:	f895 3077 	ldrb.w	r3, [r5, #119]	; 0x77
 80058ce:	4423      	add	r3, r4
 80058d0:	f885 3077 	strb.w	r3, [r5, #119]	; 0x77
          if( uartRes == HAL_OK ){   
 80058d4:	2800      	cmp	r0, #0
 80058d6:	d1e3      	bne.n	80058a0 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x708>
            mSendingTXCnt = cnt;
 80058d8:	63ec      	str	r4, [r5, #60]	; 0x3c
    }//-------------------------------------------------------------------------
 80058da:	e7e1      	b.n	80058a0 <_ZN7MST758027frameRX_ToGateway_getStatusEPh+0x708>
 80058dc:	200008a8 	.word	0x200008a8

080058e0 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh>:


/// ----------------------------------------------------------
/// FRAME AskStatus  ToGateway
void MST7580::frameRX_ToGateway_hiFromUnreg( uint8_t *frame ){
 80058e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t addr  = frame[1];
 80058e2:	784c      	ldrb	r4, [r1, #1]
	uint8_t gateway  = frame[2];
 80058e4:	788d      	ldrb	r5, [r1, #2]
      int stopPrev = mIndexSTOP;
 80058e6:	4b62      	ldr	r3, [pc, #392]	; (8005a70 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x190>)
 80058e8:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80058ec:	1c4e      	adds	r6, r1, #1
 80058ee:	4a61      	ldr	r2, [pc, #388]	; (8005a74 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x194>)
 80058f0:	fb82 7206 	smull	r7, r2, r2, r6
 80058f4:	1112      	asrs	r2, r2, #4
 80058f6:	2732      	movs	r7, #50	; 0x32
 80058f8:	fb07 6212 	mls	r2, r7, r2, r6
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80058fc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005900:	429a      	cmp	r2, r3
 8005902:	d005      	beq.n	8005910 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x30>
      mBuf[ stopPrev ] = aData;
 8005904:	4e5a      	ldr	r6, [pc, #360]	; (8005a70 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x190>)
 8005906:	4431      	add	r1, r6
 8005908:	275a      	movs	r7, #90	; 0x5a
 800590a:	714f      	strb	r7, [r1, #5]
      mIndexSTOP = stopTmp;
 800590c:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38

    g485E.bufAdd( 0x5A );     // naglowek
    g485E.bufAdd( g485E.loopNr ); //loop
 8005910:	4a57      	ldr	r2, [pc, #348]	; (8005a70 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x190>)
 8005912:	f892 c075 	ldrb.w	ip, [r2, #117]	; 0x75
      int stopPrev = mIndexSTOP;
 8005916:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 800591a:	1c4e      	adds	r6, r1, #1
 800591c:	4a55      	ldr	r2, [pc, #340]	; (8005a74 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x194>)
 800591e:	fb82 7206 	smull	r7, r2, r2, r6
 8005922:	1112      	asrs	r2, r2, #4
 8005924:	2732      	movs	r7, #50	; 0x32
 8005926:	fb07 6212 	mls	r2, r7, r2, r6
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 800592a:	429a      	cmp	r2, r3
 800592c:	d005      	beq.n	800593a <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x5a>
      mBuf[ stopPrev ] = aData;
 800592e:	4e50      	ldr	r6, [pc, #320]	; (8005a70 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x190>)
 8005930:	4431      	add	r1, r6
 8005932:	f881 c005 	strb.w	ip, [r1, #5]
      mIndexSTOP = stopTmp;
 8005936:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 800593a:	4a4d      	ldr	r2, [pc, #308]	; (8005a70 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x190>)
 800593c:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8005940:	1c4e      	adds	r6, r1, #1
 8005942:	4a4c      	ldr	r2, [pc, #304]	; (8005a74 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x194>)
 8005944:	fb82 7206 	smull	r7, r2, r2, r6
 8005948:	1112      	asrs	r2, r2, #4
 800594a:	2732      	movs	r7, #50	; 0x32
 800594c:	fb07 6212 	mls	r2, r7, r2, r6
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8005950:	429a      	cmp	r2, r3
 8005952:	d004      	beq.n	800595e <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x7e>
      mBuf[ stopPrev ] = aData;
 8005954:	4e46      	ldr	r6, [pc, #280]	; (8005a70 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x190>)
 8005956:	4431      	add	r1, r6
 8005958:	714d      	strb	r5, [r1, #5]
      mIndexSTOP = stopTmp;
 800595a:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 800595e:	4a44      	ldr	r2, [pc, #272]	; (8005a70 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x190>)
 8005960:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8005964:	1c4d      	adds	r5, r1, #1
 8005966:	4a43      	ldr	r2, [pc, #268]	; (8005a74 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x194>)
 8005968:	fb82 6205 	smull	r6, r2, r2, r5
 800596c:	1112      	asrs	r2, r2, #4
 800596e:	2632      	movs	r6, #50	; 0x32
 8005970:	fb06 5212 	mls	r2, r6, r2, r5
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8005974:	429a      	cmp	r2, r3
 8005976:	d004      	beq.n	8005982 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0xa2>
      mBuf[ stopPrev ] = aData;
 8005978:	4d3d      	ldr	r5, [pc, #244]	; (8005a70 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x190>)
 800597a:	4429      	add	r1, r5
 800597c:	714c      	strb	r4, [r1, #5]
      mIndexSTOP = stopTmp;
 800597e:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8005982:	4a3b      	ldr	r2, [pc, #236]	; (8005a70 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x190>)
 8005984:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8005988:	1c4c      	adds	r4, r1, #1
 800598a:	4a3a      	ldr	r2, [pc, #232]	; (8005a74 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x194>)
 800598c:	fb82 5204 	smull	r5, r2, r2, r4
 8005990:	1112      	asrs	r2, r2, #4
 8005992:	2532      	movs	r5, #50	; 0x32
 8005994:	fb05 4212 	mls	r2, r5, r2, r4
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8005998:	429a      	cmp	r2, r3
 800599a:	d005      	beq.n	80059a8 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0xc8>
      mBuf[ stopPrev ] = aData;
 800599c:	4c34      	ldr	r4, [pc, #208]	; (8005a70 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x190>)
 800599e:	4421      	add	r1, r4
 80059a0:	25c6      	movs	r5, #198	; 0xc6
 80059a2:	714d      	strb	r5, [r1, #5]
      mIndexSTOP = stopTmp;
 80059a4:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80059a8:	4a31      	ldr	r2, [pc, #196]	; (8005a70 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x190>)
 80059aa:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80059ae:	1c4c      	adds	r4, r1, #1
 80059b0:	4a30      	ldr	r2, [pc, #192]	; (8005a74 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x194>)
 80059b2:	fb82 5204 	smull	r5, r2, r2, r4
 80059b6:	1112      	asrs	r2, r2, #4
 80059b8:	2532      	movs	r5, #50	; 0x32
 80059ba:	fb05 4212 	mls	r2, r5, r2, r4
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80059be:	429a      	cmp	r2, r3
 80059c0:	d005      	beq.n	80059ce <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0xee>
      mBuf[ stopPrev ] = aData;
 80059c2:	4c2b      	ldr	r4, [pc, #172]	; (8005a70 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x190>)
 80059c4:	4421      	add	r1, r4
 80059c6:	2500      	movs	r5, #0
 80059c8:	714d      	strb	r5, [r1, #5]
      mIndexSTOP = stopTmp;
 80059ca:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80059ce:	4a28      	ldr	r2, [pc, #160]	; (8005a70 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x190>)
 80059d0:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80059d4:	1c4c      	adds	r4, r1, #1
 80059d6:	4a27      	ldr	r2, [pc, #156]	; (8005a74 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x194>)
 80059d8:	fb82 5204 	smull	r5, r2, r2, r4
 80059dc:	1112      	asrs	r2, r2, #4
 80059de:	2532      	movs	r5, #50	; 0x32
 80059e0:	fb05 4212 	mls	r2, r5, r2, r4
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d005      	beq.n	80059f4 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x114>
      mBuf[ stopPrev ] = aData;
 80059e8:	4c21      	ldr	r4, [pc, #132]	; (8005a70 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x190>)
 80059ea:	4421      	add	r1, r4
 80059ec:	25e0      	movs	r5, #224	; 0xe0
 80059ee:	714d      	strb	r5, [r1, #5]
      mIndexSTOP = stopTmp;
 80059f0:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80059f4:	4a1e      	ldr	r2, [pc, #120]	; (8005a70 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x190>)
 80059f6:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80059fa:	1c4c      	adds	r4, r1, #1
 80059fc:	4a1d      	ldr	r2, [pc, #116]	; (8005a74 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x194>)
 80059fe:	fb82 5204 	smull	r5, r2, r2, r4
 8005a02:	1112      	asrs	r2, r2, #4
 8005a04:	2532      	movs	r5, #50	; 0x32
 8005a06:	fb05 4212 	mls	r2, r5, r2, r4
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d005      	beq.n	8005a1a <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x13a>
      mBuf[ stopPrev ] = aData;
 8005a0e:	4b18      	ldr	r3, [pc, #96]	; (8005a70 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x190>)
 8005a10:	4419      	add	r1, r3
 8005a12:	24e1      	movs	r4, #225	; 0xe1
 8005a14:	714c      	strb	r4, [r1, #5]
      mIndexSTOP = stopTmp;
 8005a16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      if( mIndexSTART == mIndexSTOP ) return false;
 8005a1a:	4a15      	ldr	r2, [pc, #84]	; (8005a70 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x190>)
 8005a1c:	f892 3037 	ldrb.w	r3, [r2, #55]	; 0x37
 8005a20:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d00a      	beq.n	8005a3e <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x15e>
      if( mIndexSTART < mIndexSTOP )  (*aCnt) = mIndexSTOP - mIndexSTART;
 8005a28:	d206      	bcs.n	8005a38 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x158>
 8005a2a:	1ad4      	subs	r4, r2, r3
      (*aBuf) = &(mBuf[mIndexSTART]);
 8005a2c:	4810      	ldr	r0, [pc, #64]	; (8005a70 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x190>)
 8005a2e:	4418      	add	r0, r3
 8005a30:	3005      	adds	r0, #5
      return true;
 8005a32:	2301      	movs	r3, #1
      if( res ){
 8005a34:	b933      	cbnz	r3, 8005a44 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x164>
    g485E.bufAdd( 0xE1 );     // CRC

    g485E.Send_IT();


}// -----------------------------------------------------------
 8005a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else                            (*aCnt) = cBufLength - mIndexSTART;
 8005a38:	f1c3 0432 	rsb	r4, r3, #50	; 0x32
 8005a3c:	e7f6      	b.n	8005a2c <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x14c>
      int cnt = 0;
 8005a3e:	2400      	movs	r4, #0
      if( mIndexSTART == mIndexSTOP ) return false;
 8005a40:	4623      	mov	r3, r4
 8005a42:	e7f7      	b.n	8005a34 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x154>
          _o485E_EN = 1;
 8005a44:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8005a48:	7d53      	ldrb	r3, [r2, #21]
 8005a4a:	f043 0310 	orr.w	r3, r3, #16
 8005a4e:	7553      	strb	r3, [r2, #21]
          HAL_StatusTypeDef uartRes = HAL_UART_Transmit_IT( mhUart, buf,  cnt );
 8005a50:	4d07      	ldr	r5, [pc, #28]	; (8005a70 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x190>)
 8005a52:	b2a2      	uxth	r2, r4
 8005a54:	4601      	mov	r1, r0
 8005a56:	6828      	ldr	r0, [r5, #0]
 8005a58:	f7fc fcd6 	bl	8002408 <HAL_UART_Transmit_IT>
           mIsEN_to_0 += cnt;
 8005a5c:	f895 3077 	ldrb.w	r3, [r5, #119]	; 0x77
 8005a60:	4423      	add	r3, r4
 8005a62:	f885 3077 	strb.w	r3, [r5, #119]	; 0x77
          if( uartRes == HAL_OK ){   
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d1e5      	bne.n	8005a36 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x156>
            mSendingTXCnt = cnt;
 8005a6a:	63ec      	str	r4, [r5, #60]	; 0x3c
 8005a6c:	e7e3      	b.n	8005a36 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh+0x156>
 8005a6e:	bf00      	nop
 8005a70:	200008a8 	.word	0x200008a8
 8005a74:	51eb851f 	.word	0x51eb851f

08005a78 <_ZN7MST758016onTimer_Main10msEv>:


//-----------------------------------------------------------------------------
void MST7580::onTimer_Main10ms(){
 8005a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7a:	4604      	mov	r4, r0
  
  // ... ODBIERANIE ..........................................
  RxFrame = ST7580NextIndicationFrame();
 8005a7c:	f7fd fd10 	bl	80034a0 <ST7580NextIndicationFrame>
 8005a80:	6420      	str	r0, [r4, #64]	; 0x40
  if (RxFrame != NULL){
 8005a82:	b330      	cbz	r0, 8005ad2 <_ZN7MST758016onTimer_Main10msEv+0x5a>
    if( (RxFrame->stx == ST7580_STX_03) ){ // DUPLICATED
 8005a84:	7803      	ldrb	r3, [r0, #0]
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d021      	beq.n	8005ace <_ZN7MST758016onTimer_Main10msEv+0x56>
      // duplicated indication frame with STX = 03 is received 
		  RxFrame = NULL;
     }else{ // ODEBRANY KOMUNIKAT
       // uint8_t d0 = RxFrame->data[4];
       int cnt = RxFrame->length - 4;
       uint8_t *frame = &(RxFrame->data[4]);
 8005a8a:	1dc1      	adds	r1, r0, #7
       
       // ... interpretacja ...
       uint8_t cmd = frame[0];
 8005a8c:	79c3      	ldrb	r3, [r0, #7]
       switch( cmd ){
 8005a8e:	3b23      	subs	r3, #35	; 0x23
 8005a90:	2b34      	cmp	r3, #52	; 0x34
 8005a92:	d81e      	bhi.n	8005ad2 <_ZN7MST758016onTimer_Main10msEv+0x5a>
 8005a94:	e8df f003 	tbb	[pc, r3]
 8005a98:	1d1d3c38 	.word	0x1d1d3c38
 8005a9c:	1d1d1d1d 	.word	0x1d1d1d1d
 8005aa0:	1d1d1d1d 	.word	0x1d1d1d1d
 8005aa4:	1d1d1d1d 	.word	0x1d1d1d1d
 8005aa8:	1d1d1d1d 	.word	0x1d1d1d1d
 8005aac:	1d1d1d1d 	.word	0x1d1d1d1d
 8005ab0:	1d1d1d1d 	.word	0x1d1d1d1d
 8005ab4:	1d1d1d1d 	.word	0x1d1d1d1d
 8005ab8:	1d1d1d1d 	.word	0x1d1d1d1d
 8005abc:	1d1d1d1d 	.word	0x1d1d1d1d
 8005ac0:	1d1d1d1d 	.word	0x1d1d1d1d
 8005ac4:	1d1d1d1d 	.word	0x1d1d1d1d
 8005ac8:	4c484440 	.word	0x4c484440
 8005acc:	50          	.byte	0x50
 8005acd:	00          	.byte	0x00
		  RxFrame = NULL;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	6423      	str	r3, [r4, #64]	; 0x40
    }//-------------------------------------------------------------------------

    ///--------------------------------------------------------------------------
    /// czy pusty
    public: inline bool isEmpty(){
      return ( mIndexSTART == mIndexSTOP );
 8005ad2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8005ad6:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
  }

  // ... NADAWANIE ..........................................
  // sprawdz czy w buforze ramka do wyslania
  
  if( mBuf_Frames.isEmpty() == false ){
 8005ada:	429d      	cmp	r5, r3
 8005adc:	d058      	beq.n	8005b90 <_ZN7MST758016onTimer_Main10msEv+0x118>
      if( dif < 0 ) dif = cBufLength + dif;
 8005ade:	1ae8      	subs	r0, r5, r3
 8005ae0:	d42e      	bmi.n	8005b40 <_ZN7MST758016onTimer_Main10msEv+0xc8>
      if( mIndexSTART == mIndexSTOP ) return 0;       // bufor pusty
 8005ae2:	429d      	cmp	r5, r3
 8005ae4:	d02e      	beq.n	8005b44 <_ZN7MST758016onTimer_Main10msEv+0xcc>
      uint8_t dana = mBuf[mIndexSTART];      
 8005ae6:	5ce2      	ldrb	r2, [r4, r3]
      mIndexSTART = (mIndexSTART+1) % cBufLength;    
 8005ae8:	3301      	adds	r3, #1
 8005aea:	492a      	ldr	r1, [pc, #168]	; (8005b94 <_ZN7MST758016onTimer_Main10msEv+0x11c>)
 8005aec:	fb81 6103 	smull	r6, r1, r1, r3
 8005af0:	1109      	asrs	r1, r1, #4
 8005af2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005af6:	eba3 01c1 	sub.w	r1, r3, r1, lsl #3
 8005afa:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  
    // pobierz ramke
    int N = mBuf_Frames.getN(); // w pierwszym bajcie liczba danych o wyslania
    uint8_t cnt = mBuf_Frames.popFirst();
    if( cnt > N ){      // blad wielkosci bufora - cos nie tak
 8005afe:	4617      	mov	r7, r2
 8005b00:	4282      	cmp	r2, r0
 8005b02:	dc21      	bgt.n	8005b48 <_ZN7MST758016onTimer_Main10msEv+0xd0>
      mBuf_Frames.clear(); 
      return;
    }
    
    // przygotuj bufor
    for( int i=0; i<cnt; i++ )   txBuf[i] = mBuf_Frames.popFirst();
 8005b04:	2000      	movs	r0, #0
 8005b06:	e035      	b.n	8005b74 <_ZN7MST758016onTimer_Main10msEv+0xfc>
       case 0x23: frameRX_ToGateway_getStatus(frame); break;  // Gateway Status
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f7ff fb45 	bl	8005198 <_ZN7MST758027frameRX_ToGateway_getStatusEPh>
 8005b0e:	e7e0      	b.n	8005ad2 <_ZN7MST758016onTimer_Main10msEv+0x5a>
       case 0x24: frameRX_ToGateway_hiFromUnreg(frame); break;  // Gateway hi from unregistered isolator
 8005b10:	4620      	mov	r0, r4
 8005b12:	f7ff fee5 	bl	80058e0 <_ZN7MST758029frameRX_ToGateway_hiFromUnregEPh>
 8005b16:	e7dc      	b.n	8005ad2 <_ZN7MST758016onTimer_Main10msEv+0x5a>
       case 0x53: frameRX_ToNode_getStatus(frame);    break;  // fromST.Status
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f7ff f893 	bl	8004c44 <_ZN7MST758024frameRX_ToNode_getStatusEPh>
 8005b1e:	e7d8      	b.n	8005ad2 <_ZN7MST758016onTimer_Main10msEv+0x5a>
       case 0x54: frameRX_ToNode_setRelays(frame);    break;  //
 8005b20:	4620      	mov	r0, r4
 8005b22:	f7ff f925 	bl	8004d70 <_ZN7MST758024frameRX_ToNode_setRelaysEPh>
 8005b26:	e7d4      	b.n	8005ad2 <_ZN7MST758016onTimer_Main10msEv+0x5a>
       case 0x55: frameRX_ToNode_setAddr(frame);      break;  //
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f7ff f95d 	bl	8004de8 <_ZN7MST758022frameRX_ToNode_setAddrEPh>
 8005b2e:	e7d0      	b.n	8005ad2 <_ZN7MST758016onTimer_Main10msEv+0x5a>
       case 0x56: frameRX_ToNode_hiUnreg(frame);      break;  //
 8005b30:	4620      	mov	r0, r4
 8005b32:	f7ff fadd 	bl	80050f0 <_ZN7MST758022frameRX_ToNode_hiUnregEPh>
 8005b36:	e7cc      	b.n	8005ad2 <_ZN7MST758016onTimer_Main10msEv+0x5a>
       case 0x57: frameRX_ToNode_setAddrUnreg(frame);      break;  //
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f7ff fa17 	bl	8004f6c <_ZN7MST758027frameRX_ToNode_setAddrUnregEPh>
 8005b3e:	e7c8      	b.n	8005ad2 <_ZN7MST758016onTimer_Main10msEv+0x5a>
      if( dif < 0 ) dif = cBufLength + dif;
 8005b40:	3028      	adds	r0, #40	; 0x28
 8005b42:	e7ce      	b.n	8005ae2 <_ZN7MST758016onTimer_Main10msEv+0x6a>
      if( mIndexSTART == mIndexSTOP ) return 0;       // bufor pusty
 8005b44:	2200      	movs	r2, #0
 8005b46:	e7da      	b.n	8005afe <_ZN7MST758016onTimer_Main10msEv+0x86>
      mIndexSTART = 0;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
      mIndexSTOP = 0;
 8005b4e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
      return;
 8005b52:	e01d      	b.n	8005b90 <_ZN7MST758016onTimer_Main10msEv+0x118>
      uint8_t dana = mBuf[mIndexSTART];      
 8005b54:	5ce6      	ldrb	r6, [r4, r3]
      mIndexSTART = (mIndexSTART+1) % cBufLength;    
 8005b56:	1c59      	adds	r1, r3, #1
 8005b58:	4b0e      	ldr	r3, [pc, #56]	; (8005b94 <_ZN7MST758016onTimer_Main10msEv+0x11c>)
 8005b5a:	fb83 c301 	smull	ip, r3, r3, r1
 8005b5e:	111b      	asrs	r3, r3, #4
 8005b60:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005b64:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 8005b68:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    for( int i=0; i<cnt; i++ )   txBuf[i] = mBuf_Frames.popFirst();
 8005b6c:	1823      	adds	r3, r4, r0
 8005b6e:	f883 6044 	strb.w	r6, [r3, #68]	; 0x44
 8005b72:	3001      	adds	r0, #1
 8005b74:	4287      	cmp	r7, r0
 8005b76:	dd05      	ble.n	8005b84 <_ZN7MST758016onTimer_Main10msEv+0x10c>
      if( mIndexSTART == mIndexSTOP ) return 0;       // bufor pusty
 8005b78:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8005b7c:	429d      	cmp	r5, r3
 8005b7e:	d1e9      	bne.n	8005b54 <_ZN7MST758016onTimer_Main10msEv+0xdc>
 8005b80:	2600      	movs	r6, #0
 8005b82:	e7f3      	b.n	8005b6c <_ZN7MST758016onTimer_Main10msEv+0xf4>
    
    // wyslij po modemie
    uint8_t ret = ST7580DlData(DATA_OPT, txBuf, cnt, NULL);
 8005b84:	2300      	movs	r3, #0
 8005b86:	f104 0144 	add.w	r1, r4, #68	; 0x44
 8005b8a:	2044      	movs	r0, #68	; 0x44
 8005b8c:	f7fd fee8 	bl	8003960 <ST7580DlData>
    }
    
  }// .......................................................

  
}//----------------------------------------------------------------------------
 8005b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b92:	bf00      	nop
 8005b94:	66666667 	.word	0x66666667

08005b98 <_ZN4MADC7initIRQEv>:


  
//-----------------------------------------------------------------------------
  /// wywolywane po   __enable_irq();
void MADC::initIRQ(){
 8005b98:	b508      	push	{r3, lr}

   HAL_ADC_Start_DMA( &hadc2, (uint32_t*)gADC2_Tab, 3 );
 8005b9a:	2203      	movs	r2, #3
 8005b9c:	4904      	ldr	r1, [pc, #16]	; (8005bb0 <_ZN4MADC7initIRQEv+0x18>)
 8005b9e:	4805      	ldr	r0, [pc, #20]	; (8005bb4 <_ZN4MADC7initIRQEv+0x1c>)
 8005ba0:	f7fa fd3a 	bl	8000618 <HAL_ADC_Start_DMA>
   HAL_ADC_Start_DMA( &hadc1, (uint32_t*)gADC1_Tab, 2 );
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	4904      	ldr	r1, [pc, #16]	; (8005bb8 <_ZN4MADC7initIRQEv+0x20>)
 8005ba8:	4804      	ldr	r0, [pc, #16]	; (8005bbc <_ZN4MADC7initIRQEv+0x24>)
 8005baa:	f7fa fd35 	bl	8000618 <HAL_ADC_Start_DMA>
 
}//----------------------------------------------------------------------------
 8005bae:	bd08      	pop	{r3, pc}
 8005bb0:	20000964 	.word	0x20000964
 8005bb4:	20000b60 	.word	0x20000b60
 8005bb8:	20000958 	.word	0x20000958
 8005bbc:	20000bb0 	.word	0x20000bb0

08005bc0 <_ZN4MADC13onSample_ADC1Ev>:

}//----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
void  MADC::onSample_ADC1(){
 8005bc0:	b470      	push	{r4, r5, r6}

  
  
  
      mIA = gADC1_Tab[0]; // IA
 8005bc2:	4b29      	ldr	r3, [pc, #164]	; (8005c68 <_ZN4MADC13onSample_ADC1Ev+0xa8>)
 8005bc4:	881e      	ldrh	r6, [r3, #0]
 8005bc6:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005bca:	81c5      	strh	r5, [r0, #14]
      mIB = gADC1_Tab[1]; // IB
 8005bcc:	885c      	ldrh	r4, [r3, #2]
 8005bce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005bd2:	84c3      	strh	r3, [r0, #38]	; 0x26
    
      // ... IA .......................
      {
          mIA_iir += mIA;
 8005bd4:	6902      	ldr	r2, [r0, #16]
 8005bd6:	4415      	add	r5, r2
          mIA_avr = mIA_iir / 2048;
 8005bd8:	4629      	mov	r1, r5
 8005bda:	2d00      	cmp	r5, #0
 8005bdc:	db32      	blt.n	8005c44 <_ZN4MADC13onSample_ADC1Ev+0x84>
 8005bde:	f341 21cf 	sbfx	r1, r1, #11, #16
 8005be2:	8281      	strh	r1, [r0, #20]
          mIA_iir -= mIA_avr; //adcValueAvr[1] / 2048;
 8005be4:	1a6d      	subs	r5, r5, r1
 8005be6:	6105      	str	r5, [r0, #16]

          
          int16_t abs = ( mIA - mIA_avr );
 8005be8:	b289      	uxth	r1, r1
 8005bea:	1a72      	subs	r2, r6, r1
 8005bec:	b212      	sxth	r2, r2
          if( abs < 0 ) abs =  - abs;
 8005bee:	2a00      	cmp	r2, #0
 8005bf0:	db2b      	blt.n	8005c4a <_ZN4MADC13onSample_ADC1Ev+0x8a>
              
          gADC.mIAabs_iir += abs;
 8005bf2:	491e      	ldr	r1, [pc, #120]	; (8005c6c <_ZN4MADC13onSample_ADC1Ev+0xac>)
 8005bf4:	6989      	ldr	r1, [r1, #24]
 8005bf6:	440a      	add	r2, r1
          mIAabs_avr = gADC.mIAabs_iir / 64;
 8005bf8:	4611      	mov	r1, r2
 8005bfa:	2a00      	cmp	r2, #0
 8005bfc:	db28      	blt.n	8005c50 <_ZN4MADC13onSample_ADC1Ev+0x90>
 8005bfe:	f341 118f 	sbfx	r1, r1, #6, #16
 8005c02:	8381      	strh	r1, [r0, #28]
          gADC.mIAabs_iir -= mIAabs_avr; 
 8005c04:	1a52      	subs	r2, r2, r1
 8005c06:	4919      	ldr	r1, [pc, #100]	; (8005c6c <_ZN4MADC13onSample_ADC1Ev+0xac>)
 8005c08:	618a      	str	r2, [r1, #24]
  
      }
  
      // ... IB .......................
      {
          mIB_iir += mIB;
 8005c0a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005c0c:	441a      	add	r2, r3
          mIB_avr = mIB_iir / 2048;
 8005c0e:	4613      	mov	r3, r2
 8005c10:	2a00      	cmp	r2, #0
 8005c12:	db20      	blt.n	8005c56 <_ZN4MADC13onSample_ADC1Ev+0x96>
 8005c14:	f343 23cf 	sbfx	r3, r3, #11, #16
 8005c18:	8583      	strh	r3, [r0, #44]	; 0x2c
          mIB_iir -= mIB_avr; //adcValueAvr[1] / 2048;
 8005c1a:	1ad2      	subs	r2, r2, r3
 8005c1c:	6282      	str	r2, [r0, #40]	; 0x28
          
          int16_t abs = ( mIB - mIB_avr );
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	1aa3      	subs	r3, r4, r2
 8005c22:	b21b      	sxth	r3, r3
          if( abs < 0 ) abs =  - abs;
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	db19      	blt.n	8005c5c <_ZN4MADC13onSample_ADC1Ev+0x9c>
              
          gADC.mIBabs_iir += abs;
 8005c28:	4a10      	ldr	r2, [pc, #64]	; (8005c6c <_ZN4MADC13onSample_ADC1Ev+0xac>)
 8005c2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c2c:	4413      	add	r3, r2
          mIBabs_avr = gADC.mIBabs_iir / 64;
 8005c2e:	461a      	mov	r2, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	db16      	blt.n	8005c62 <_ZN4MADC13onSample_ADC1Ev+0xa2>
 8005c34:	f342 128f 	sbfx	r2, r2, #6, #16
 8005c38:	8682      	strh	r2, [r0, #52]	; 0x34
          gADC.mIBabs_iir -= mIBabs_avr; 
 8005c3a:	1a9b      	subs	r3, r3, r2
 8005c3c:	4a0b      	ldr	r2, [pc, #44]	; (8005c6c <_ZN4MADC13onSample_ADC1Ev+0xac>)
 8005c3e:	6313      	str	r3, [r2, #48]	; 0x30
      
      
   //   ITM_EVENT16( 1, Joystick2[0] );  // UA
  //  ITM_EVENT16( 2, Joystick2[1] );

}//----------------------------------------------------------------------------
 8005c40:	bc70      	pop	{r4, r5, r6}
 8005c42:	4770      	bx	lr
          mIA_avr = mIA_iir / 2048;
 8005c44:	f205 71ff 	addw	r1, r5, #2047	; 0x7ff
 8005c48:	e7c9      	b.n	8005bde <_ZN4MADC13onSample_ADC1Ev+0x1e>
          if( abs < 0 ) abs =  - abs;
 8005c4a:	1b8a      	subs	r2, r1, r6
 8005c4c:	b212      	sxth	r2, r2
 8005c4e:	e7d0      	b.n	8005bf2 <_ZN4MADC13onSample_ADC1Ev+0x32>
          mIAabs_avr = gADC.mIAabs_iir / 64;
 8005c50:	f102 013f 	add.w	r1, r2, #63	; 0x3f
 8005c54:	e7d3      	b.n	8005bfe <_ZN4MADC13onSample_ADC1Ev+0x3e>
          mIB_avr = mIB_iir / 2048;
 8005c56:	f202 73ff 	addw	r3, r2, #2047	; 0x7ff
 8005c5a:	e7db      	b.n	8005c14 <_ZN4MADC13onSample_ADC1Ev+0x54>
          if( abs < 0 ) abs =  - abs;
 8005c5c:	1b13      	subs	r3, r2, r4
 8005c5e:	b21b      	sxth	r3, r3
 8005c60:	e7e2      	b.n	8005c28 <_ZN4MADC13onSample_ADC1Ev+0x68>
          mIBabs_avr = gADC.mIBabs_iir / 64;
 8005c62:	f103 023f 	add.w	r2, r3, #63	; 0x3f
 8005c66:	e7e5      	b.n	8005c34 <_ZN4MADC13onSample_ADC1Ev+0x74>
 8005c68:	20000958 	.word	0x20000958
 8005c6c:	20000920 	.word	0x20000920

08005c70 <_ZN4MADC13onSample_ADC2Ev>:


//-----------------------------------------------------------------------------
void  MADC::onSample_ADC2(){
    
      mUA = gADC2_Tab[0]; // UA
 8005c70:	4912      	ldr	r1, [pc, #72]	; (8005cbc <_ZN4MADC13onSample_ADC2Ev+0x4c>)
 8005c72:	f9b1 2000 	ldrsh.w	r2, [r1]
 8005c76:	80c2      	strh	r2, [r0, #6]
      mUB = gADC2_Tab[1]; // UB
 8005c78:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8005c7c:	83c3      	strh	r3, [r0, #30]
      mS0 = gADC2_Tab[2]; // USense
 8005c7e:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8005c82:	8081      	strh	r1, [r0, #4]
        
        
      // ... UA .......................
      mUA_iir += mUA;
 8005c84:	6881      	ldr	r1, [r0, #8]
 8005c86:	440a      	add	r2, r1
      int16_t avrA = mUA_iir / 512;
 8005c88:	4611      	mov	r1, r2
 8005c8a:	2a00      	cmp	r2, #0
 8005c8c:	db0f      	blt.n	8005cae <_ZN4MADC13onSample_ADC2Ev+0x3e>
 8005c8e:	f341 214f 	sbfx	r1, r1, #9, #16
      mUA_iir -= avrA; //adcValueAvr[1] / 2048;
 8005c92:	1a52      	subs	r2, r2, r1
 8005c94:	6082      	str	r2, [r0, #8]
      
      mUA_avr = avrA;
 8005c96:	8181      	strh	r1, [r0, #12]
      
     // ... UB .......................
      mUB_iir += mUB;
 8005c98:	6a02      	ldr	r2, [r0, #32]
 8005c9a:	4413      	add	r3, r2
      int16_t avrB = mUB_iir / 512;
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	db08      	blt.n	8005cb4 <_ZN4MADC13onSample_ADC2Ev+0x44>
 8005ca2:	f342 224f 	sbfx	r2, r2, #9, #16
      mUB_iir -= avrB; //adcValueAvr[1] / 2048;
 8005ca6:	1a9b      	subs	r3, r3, r2
 8005ca8:	6203      	str	r3, [r0, #32]
      
      mUB_avr = avrB;
 8005caa:	8482      	strh	r2, [r0, #36]	; 0x24
//      gADC.adcValueAvr[2] -= avr2; //adcValueAvr[1] / 2048;
      
      
      // ITM_EVENT16( 1, gADC.adcValue[1] );

}//----------------------------------------------------------------------------
 8005cac:	4770      	bx	lr
      int16_t avrA = mUA_iir / 512;
 8005cae:	f202 11ff 	addw	r1, r2, #511	; 0x1ff
 8005cb2:	e7ec      	b.n	8005c8e <_ZN4MADC13onSample_ADC2Ev+0x1e>
      int16_t avrB = mUB_iir / 512;
 8005cb4:	f203 12ff 	addw	r2, r3, #511	; 0x1ff
 8005cb8:	e7f3      	b.n	8005ca2 <_ZN4MADC13onSample_ADC2Ev+0x32>
 8005cba:	bf00      	nop
 8005cbc:	20000964 	.word	0x20000964

08005cc0 <HAL_ADC_ConvCpltCallback>:
{
 8005cc0:	b508      	push	{r3, lr}
    if( hadc == &hadc2 )       gADC.onSample_ADC2();
 8005cc2:	4b07      	ldr	r3, [pc, #28]	; (8005ce0 <HAL_ADC_ConvCpltCallback+0x20>)
 8005cc4:	4298      	cmp	r0, r3
 8005cc6:	d003      	beq.n	8005cd0 <HAL_ADC_ConvCpltCallback+0x10>
    else if( hadc == &hadc1 )  gADC.onSample_ADC1();
 8005cc8:	4b06      	ldr	r3, [pc, #24]	; (8005ce4 <HAL_ADC_ConvCpltCallback+0x24>)
 8005cca:	4298      	cmp	r0, r3
 8005ccc:	d004      	beq.n	8005cd8 <HAL_ADC_ConvCpltCallback+0x18>
}//----------------------------------------------------------------------------
 8005cce:	bd08      	pop	{r3, pc}
    if( hadc == &hadc2 )       gADC.onSample_ADC2();
 8005cd0:	4805      	ldr	r0, [pc, #20]	; (8005ce8 <HAL_ADC_ConvCpltCallback+0x28>)
 8005cd2:	f7ff ffcd 	bl	8005c70 <_ZN4MADC13onSample_ADC2Ev>
 8005cd6:	e7fa      	b.n	8005cce <HAL_ADC_ConvCpltCallback+0xe>
    else if( hadc == &hadc1 )  gADC.onSample_ADC1();
 8005cd8:	4803      	ldr	r0, [pc, #12]	; (8005ce8 <HAL_ADC_ConvCpltCallback+0x28>)
 8005cda:	f7ff ff71 	bl	8005bc0 <_ZN4MADC13onSample_ADC1Ev>
}//----------------------------------------------------------------------------
 8005cde:	e7f6      	b.n	8005cce <HAL_ADC_ConvCpltCallback+0xe>
 8005ce0:	20000b60 	.word	0x20000b60
 8005ce4:	20000bb0 	.word	0x20000bb0
 8005ce8:	20000920 	.word	0x20000920

08005cec <_ZN7MRelays4initEv>:


//-----------------------------------------------------------------------------
void MRelays::init(){

    gRelays.gShortDeadCnt = 1000;
 8005cec:	480c      	ldr	r0, [pc, #48]	; (8005d20 <_ZN7MRelays4initEv+0x34>)
 8005cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cf2:	6043      	str	r3, [r0, #4]
  
    _oREL_A_RESET = 1;
 8005cf4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8005cf8:	7d13      	ldrb	r3, [r2, #20]
 8005cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cfe:	7513      	strb	r3, [r2, #20]
    _oREL_B_RESET = 1;
 8005d00:	4b08      	ldr	r3, [pc, #32]	; (8005d24 <_ZN7MRelays4initEv+0x38>)
 8005d02:	7d59      	ldrb	r1, [r3, #21]
 8005d04:	f041 0120 	orr.w	r1, r1, #32
 8005d08:	7559      	strb	r1, [r3, #21]
    _oREL_A_SET = 0;
 8005d0a:	7d11      	ldrb	r1, [r2, #20]
 8005d0c:	f36f 1186 	bfc	r1, #6, #1
 8005d10:	7511      	strb	r1, [r2, #20]
    _oREL_B_SET = 0;
 8005d12:	7d5a      	ldrb	r2, [r3, #21]
 8005d14:	f36f 1204 	bfc	r2, #4, #1
 8005d18:	755a      	strb	r2, [r3, #21]
    gRelays.gRelayCnt = 30;
 8005d1a:	231e      	movs	r3, #30
 8005d1c:	6003      	str	r3, [r0, #0]
    
}//----------------------------------------------------------------------------
 8005d1e:	4770      	bx	lr
 8005d20:	20000a54 	.word	0x20000a54
 8005d24:	48000400 	.word	0x48000400

08005d28 <_ZN7MRelays8initProcEv>:


//-----------------------------------------------------------------------------
void MRelays::initProc(){
 8005d28:	b570      	push	{r4, r5, r6, lr}
  
      gRelays.gShortDeadCnt = 50;
 8005d2a:	2232      	movs	r2, #50	; 0x32
 8005d2c:	4b14      	ldr	r3, [pc, #80]	; (8005d80 <_ZN7MRelays8initProcEv+0x58>)
 8005d2e:	605a      	str	r2, [r3, #4]
     _oREL_B_RESET = 1;

      mRelA_IsON = false;
      mRelB_IsON = false;  */
      
      gSystem.mPwrSup_Source = EPwrSupSource::NOT_KNOWN;
 8005d30:	2600      	movs	r6, #0
 8005d32:	4b14      	ldr	r3, [pc, #80]	; (8005d84 <_ZN7MRelays8initProcEv+0x5c>)
 8005d34:	71de      	strb	r6, [r3, #7]
      mRelA_IsON = aIsON;
 8005d36:	7206      	strb	r6, [r0, #8]
      else        _oREL_A_RESET = 1;
 8005d38:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 8005d3c:	7d2b      	ldrb	r3, [r5, #20]
 8005d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d42:	752b      	strb	r3, [r5, #20]
      mRelB_IsON = aIsON;
 8005d44:	7246      	strb	r6, [r0, #9]
      else        _oREL_B_RESET = 1;
 8005d46:	4c10      	ldr	r4, [pc, #64]	; (8005d88 <_ZN7MRelays8initProcEv+0x60>)
 8005d48:	7d63      	ldrb	r3, [r4, #21]
 8005d4a:	f043 0320 	orr.w	r3, r3, #32
 8005d4e:	7563      	strb	r3, [r4, #21]
      gRelayCnt = 30;
 8005d50:	231e      	movs	r3, #30
 8005d52:	6003      	str	r3, [r0, #0]
      
#ifdef _MODULE_0        
        gShortDeadCnt = 50;
 8005d54:	6042      	str	r2, [r0, #4]
      setREL_A( false );
      setREL_B( false );

#endif

      _oREL_A_RESET = 1;
 8005d56:	7d2b      	ldrb	r3, [r5, #20]
 8005d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5c:	752b      	strb	r3, [r5, #20]
      _oREL_B_RESET = 1;
 8005d5e:	7d63      	ldrb	r3, [r4, #21]
 8005d60:	f043 0320 	orr.w	r3, r3, #32
 8005d64:	7563      	strb	r3, [r4, #21]

      
      HAL_Delay(100);
 8005d66:	2064      	movs	r0, #100	; 0x64
 8005d68:	f7fa fa78 	bl	800025c <HAL_Delay>


     _oREL_A_RESET = 0;
 8005d6c:	7d2b      	ldrb	r3, [r5, #20]
 8005d6e:	f366 13c7 	bfi	r3, r6, #7, #1
 8005d72:	752b      	strb	r3, [r5, #20]
     _oREL_B_RESET = 0;
 8005d74:	7d63      	ldrb	r3, [r4, #21]
 8005d76:	f366 1345 	bfi	r3, r6, #5, #1
 8005d7a:	7563      	strb	r3, [r4, #21]
 //     _oREL_B_SET = 1;

   //   mRelA_IsON = true;
     // g485E.mRelB_IsON = true;
      
}//----------------------------------------------------------------------------
 8005d7c:	bd70      	pop	{r4, r5, r6, pc}
 8005d7e:	bf00      	nop
 8005d80:	20000a54 	.word	0x20000a54
 8005d84:	20000ac4 	.word	0x20000ac4
 8005d88:	48000400 	.word	0x48000400

08005d8c <_ZN7MRelays16onTimer_Main10msEv>:

//-----------------------------------------------------------------------------
void MRelays::onTimer_Main10ms(){
  
  // if( g485E.mMyAddr == 0 ) return;
   if( g485E.mMyAddr == 255 ) return;
 8005d8c:	4b16      	ldr	r3, [pc, #88]	; (8005de8 <_ZN7MRelays16onTimer_Main10msEv+0x5c>)
 8005d8e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005d92:	2bff      	cmp	r3, #255	; 0xff
 8005d94:	d007      	beq.n	8005da6 <_ZN7MRelays16onTimer_Main10msEv+0x1a>
      // ... PwrSupSource - zalaczyc przekaznik .....................
      // czy tutaj powinien byc jakis delay ?
#ifdef _SLAWEK_
   
#else   
  if( ( gSystem.mPwrSup_Source == EPwrSupSource::A ) && ( mRelA_IsON == false ) ) {
 8005d96:	4b15      	ldr	r3, [pc, #84]	; (8005dec <_ZN7MRelays16onTimer_Main10msEv+0x60>)
 8005d98:	79db      	ldrb	r3, [r3, #7]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d004      	beq.n	8005da8 <_ZN7MRelays16onTimer_Main10msEv+0x1c>
          setREL_A( true );
  }
    if( ( gSystem.mPwrSup_Source == EPwrSupSource::B ) && ( mRelB_IsON == false ) ) 
 8005d9e:	4b13      	ldr	r3, [pc, #76]	; (8005dec <_ZN7MRelays16onTimer_Main10msEv+0x60>)
 8005da0:	79db      	ldrb	r3, [r3, #7]
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d010      	beq.n	8005dc8 <_ZN7MRelays16onTimer_Main10msEv+0x3c>
      setREL_B( true );
#endif
            
}//----------------------------------------------------------------------------
 8005da6:	4770      	bx	lr
  if( ( gSystem.mPwrSup_Source == EPwrSupSource::A ) && ( mRelA_IsON == false ) ) {
 8005da8:	7a03      	ldrb	r3, [r0, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1f7      	bne.n	8005d9e <_ZN7MRelays16onTimer_Main10msEv+0x12>
      mRelA_IsON = aIsON;
 8005dae:	2301      	movs	r3, #1
 8005db0:	7203      	strb	r3, [r0, #8]
      if( aIsON ) _oREL_A_SET = 1;
 8005db2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8005db6:	7d13      	ldrb	r3, [r2, #20]
 8005db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dbc:	7513      	strb	r3, [r2, #20]
      gRelayCnt = 30;
 8005dbe:	231e      	movs	r3, #30
 8005dc0:	6003      	str	r3, [r0, #0]
        gShortDeadCnt = 50;
 8005dc2:	2332      	movs	r3, #50	; 0x32
 8005dc4:	6043      	str	r3, [r0, #4]
    };// -----------------------------------
 8005dc6:	e7ea      	b.n	8005d9e <_ZN7MRelays16onTimer_Main10msEv+0x12>
    if( ( gSystem.mPwrSup_Source == EPwrSupSource::B ) && ( mRelB_IsON == false ) ) 
 8005dc8:	7a43      	ldrb	r3, [r0, #9]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1eb      	bne.n	8005da6 <_ZN7MRelays16onTimer_Main10msEv+0x1a>
      mRelB_IsON = aIsON;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	7243      	strb	r3, [r0, #9]
      if( aIsON ) _oREL_B_SET = 1;
 8005dd2:	4a07      	ldr	r2, [pc, #28]	; (8005df0 <_ZN7MRelays16onTimer_Main10msEv+0x64>)
 8005dd4:	7d53      	ldrb	r3, [r2, #21]
 8005dd6:	f043 0310 	orr.w	r3, r3, #16
 8005dda:	7553      	strb	r3, [r2, #21]
      gRelayCnt = 30;
 8005ddc:	231e      	movs	r3, #30
 8005dde:	6003      	str	r3, [r0, #0]
        gShortDeadCnt = 50;
 8005de0:	2332      	movs	r3, #50	; 0x32
 8005de2:	6043      	str	r3, [r0, #4]
#else
        gShortDeadCnt = 200;
#endif
      
      
    };// -----------------------------------
 8005de4:	e7df      	b.n	8005da6 <_ZN7MRelays16onTimer_Main10msEv+0x1a>
 8005de6:	bf00      	nop
 8005de8:	200008a8 	.word	0x200008a8
 8005dec:	20000ac4 	.word	0x20000ac4
 8005df0:	48000400 	.word	0x48000400

08005df4 <_ZN7MRelays11onTimer_1msEv>:
    }      
    */
  
   uint8_t led = 0;
   // ... ZWARCIE ................................................//24.03.2022 - procedura zwarciowa tymczasowo wyłączona
    if( gShortDeadCnt <= 0 ){ //Czas świadomego zezwolenia na wahania prądu
 8005df4:	6843      	ldr	r3, [r0, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	dd0a      	ble.n	8005e10 <_ZN7MRelays11onTimer_1msEv+0x1c>
     // _oLED = !led;



    }else{ //Odliczaj w dół aż czas świadomego zezwolenia minie.
        gShortDeadCnt -= 1;
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	6043      	str	r3, [r0, #4]
        if( gShortDeadCnt > 10000 ) gShortDeadCnt = 1000; // wieksze niz 10 s
 8005dfe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e02:	4293      	cmp	r3, r2
 8005e04:	dd46      	ble.n	8005e94 <_ZN7MRelays11onTimer_1msEv+0xa0>
 8005e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e0a:	6043      	str	r3, [r0, #4]
   uint8_t led = 0;
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	e026      	b.n	8005e5e <_ZN7MRelays11onTimer_1msEv+0x6a>
      if( ( gADC.mIAabs_avr > _Ith_value ) || ( gADC.mIBabs_avr > _Ith_value ) ){ //Jeżeli wartość na którymś z przekaźników przekracza wartość progową zacznij odliczać do zwarcia.
 8005e10:	4b2b      	ldr	r3, [pc, #172]	; (8005ec0 <_ZN7MRelays11onTimer_1msEv+0xcc>)
 8005e12:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005e16:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005e1a:	dc05      	bgt.n	8005e28 <_ZN7MRelays11onTimer_1msEv+0x34>
 8005e1c:	4b28      	ldr	r3, [pc, #160]	; (8005ec0 <_ZN7MRelays11onTimer_1msEv+0xcc>)
 8005e1e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8005e22:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005e26:	dd2b      	ble.n	8005e80 <_ZN7MRelays11onTimer_1msEv+0x8c>
        if( mShortCnt > 600 ){ //zwarcie
 8005e28:	8943      	ldrh	r3, [r0, #10]
 8005e2a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005e2e:	d923      	bls.n	8005e78 <_ZN7MRelays11onTimer_1msEv+0x84>
          gSystem.mPwrSup_Source = EPwrSupSource::NOT_KNOWN;
 8005e30:	2300      	movs	r3, #0
 8005e32:	4a24      	ldr	r2, [pc, #144]	; (8005ec4 <_ZN7MRelays11onTimer_1msEv+0xd0>)
 8005e34:	71d3      	strb	r3, [r2, #7]
      mRelB_IsON = aIsON;
 8005e36:	7243      	strb	r3, [r0, #9]
      else        _oREL_B_RESET = 1;
 8005e38:	4923      	ldr	r1, [pc, #140]	; (8005ec8 <_ZN7MRelays11onTimer_1msEv+0xd4>)
 8005e3a:	7d4a      	ldrb	r2, [r1, #21]
 8005e3c:	f042 0220 	orr.w	r2, r2, #32
 8005e40:	754a      	strb	r2, [r1, #21]
      mRelA_IsON = aIsON;
 8005e42:	7203      	strb	r3, [r0, #8]
      else        _oREL_A_RESET = 1;
 8005e44:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8005e48:	7d13      	ldrb	r3, [r2, #20]
 8005e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e4e:	7513      	strb	r3, [r2, #20]
      gRelayCnt = 30;
 8005e50:	231e      	movs	r3, #30
 8005e52:	6003      	str	r3, [r0, #0]
        gShortDeadCnt = 50;
 8005e54:	2332      	movs	r3, #50	; 0x32
 8005e56:	6043      	str	r3, [r0, #4]
          led = 1;
 8005e58:	2201      	movs	r2, #1
         mShortCnt_OFFCnt = 0; //czas do resetowania czasu aktualnego zwarcia
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	8183      	strh	r3, [r0, #12]

    }



    _oLED = !led;
 8005e5e:	f082 0201 	eor.w	r2, r2, #1
 8005e62:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8005e66:	7d0b      	ldrb	r3, [r1, #20]
 8005e68:	f362 0341 	bfi	r3, r2, #1, #1
 8005e6c:	750b      	strb	r3, [r1, #20]
  //     ... automatyczne wylaczanie Relays ........................
    if( gRelayCnt > 0 ){
 8005e6e:	6803      	ldr	r3, [r0, #0]
 8005e70:	b193      	cbz	r3, 8005e98 <_ZN7MRelays11onTimer_1msEv+0xa4>
      gRelayCnt -= 1;
 8005e72:	3b01      	subs	r3, #1
 8005e74:	6003      	str	r3, [r0, #0]
 8005e76:	4770      	bx	lr
        }else  mShortCnt += 1; //odliczanie do zwarcia
 8005e78:	3301      	adds	r3, #1
 8005e7a:	8143      	strh	r3, [r0, #10]
   uint8_t led = 0;
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	e7ec      	b.n	8005e5a <_ZN7MRelays11onTimer_1msEv+0x66>
        if( mShortCnt_OFFCnt > 200 ){ //resetowanie aktualnego czasu zwarcia po jego nieobecności przez 200ms
 8005e80:	8983      	ldrh	r3, [r0, #12]
 8005e82:	2bc8      	cmp	r3, #200	; 0xc8
 8005e84:	d902      	bls.n	8005e8c <_ZN7MRelays11onTimer_1msEv+0x98>
           mShortCnt = 0;
 8005e86:	2200      	movs	r2, #0
 8005e88:	8142      	strh	r2, [r0, #10]
 8005e8a:	e7e8      	b.n	8005e5e <_ZN7MRelays11onTimer_1msEv+0x6a>
          mShortCnt_OFFCnt+= 1;
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	8183      	strh	r3, [r0, #12]
   uint8_t led = 0;
 8005e90:	2200      	movs	r2, #0
 8005e92:	e7e4      	b.n	8005e5e <_ZN7MRelays11onTimer_1msEv+0x6a>
 8005e94:	2200      	movs	r2, #0
 8005e96:	e7e2      	b.n	8005e5e <_ZN7MRelays11onTimer_1msEv+0x6a>
    }else{
       _oREL_A_RESET = 0;
 8005e98:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8005e9c:	7d13      	ldrb	r3, [r2, #20]
 8005e9e:	f36f 13c7 	bfc	r3, #7, #1
 8005ea2:	7513      	strb	r3, [r2, #20]
       _oREL_B_RESET = 0;
 8005ea4:	4b08      	ldr	r3, [pc, #32]	; (8005ec8 <_ZN7MRelays11onTimer_1msEv+0xd4>)
 8005ea6:	7d59      	ldrb	r1, [r3, #21]
 8005ea8:	f36f 1145 	bfc	r1, #5, #1
 8005eac:	7559      	strb	r1, [r3, #21]
       _oREL_A_SET = 0;
 8005eae:	7d11      	ldrb	r1, [r2, #20]
 8005eb0:	f36f 1186 	bfc	r1, #6, #1
 8005eb4:	7511      	strb	r1, [r2, #20]
       _oREL_B_SET = 0;
 8005eb6:	7d5a      	ldrb	r2, [r3, #21]
 8005eb8:	f36f 1204 	bfc	r2, #4, #1
 8005ebc:	755a      	strb	r2, [r3, #21]

    }
}
 8005ebe:	4770      	bx	lr
 8005ec0:	20000920 	.word	0x20000920
 8005ec4:	20000ac4 	.word	0x20000ac4
 8005ec8:	48000400 	.word	0x48000400

08005ecc <HAL_SYSTICK_Callback>:
void HAL_SYSTICK_Callback(void){
 8005ecc:	b508      	push	{r3, lr}
    
    /// event: TIMER    
    public: void onTimer_1ms(){
      
      // ... 1000 ms ...............
	  mTimer_Cnt1000ms+=1;
 8005ece:	4a14      	ldr	r2, [pc, #80]	; (8005f20 <HAL_SYSTICK_Callback+0x54>)
 8005ed0:	8813      	ldrh	r3, [r2, #0]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	8013      	strh	r3, [r2, #0]
	  if( mTimer_Cnt1000ms > 1000 ){
 8005ed8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005edc:	d904      	bls.n	8005ee8 <HAL_SYSTICK_Callback+0x1c>
		mTimer_Is1000ms = true;
 8005ede:	4613      	mov	r3, r2
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	711a      	strb	r2, [r3, #4]
		mTimer_Cnt1000ms = 0;
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	801a      	strh	r2, [r3, #0]
	  }

      // ... 100 ms ................
      mTimer_Cnt100ms+=1;
 8005ee8:	4a0d      	ldr	r2, [pc, #52]	; (8005f20 <HAL_SYSTICK_Callback+0x54>)
 8005eea:	7893      	ldrb	r3, [r2, #2]
 8005eec:	3301      	adds	r3, #1
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	7093      	strb	r3, [r2, #2]
      if( mTimer_Cnt100ms > 100 ){
 8005ef2:	2b64      	cmp	r3, #100	; 0x64
 8005ef4:	d904      	bls.n	8005f00 <HAL_SYSTICK_Callback+0x34>
        mTimer_Is100ms = true;
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	2201      	movs	r2, #1
 8005efa:	715a      	strb	r2, [r3, #5]
        mTimer_Cnt100ms = 0;
 8005efc:	2200      	movs	r2, #0
 8005efe:	709a      	strb	r2, [r3, #2]
      }

      // ... 10 ms ................
      mTimer_Cnt10ms+=1;
 8005f00:	4a07      	ldr	r2, [pc, #28]	; (8005f20 <HAL_SYSTICK_Callback+0x54>)
 8005f02:	78d3      	ldrb	r3, [r2, #3]
 8005f04:	3301      	adds	r3, #1
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	70d3      	strb	r3, [r2, #3]
      if( mTimer_Cnt10ms > 10 ){
 8005f0a:	2b0a      	cmp	r3, #10
 8005f0c:	d904      	bls.n	8005f18 <HAL_SYSTICK_Callback+0x4c>
        mTimer_Is10ms = true;
 8005f0e:	4613      	mov	r3, r2
 8005f10:	2201      	movs	r2, #1
 8005f12:	719a      	strb	r2, [r3, #6]
        mTimer_Cnt10ms = 0;
 8005f14:	2200      	movs	r2, #0
 8005f16:	70da      	strb	r2, [r3, #3]
   gRelays.onTimer_1ms(); // zwarcie + wylaczanie przekaznikow
 8005f18:	4802      	ldr	r0, [pc, #8]	; (8005f24 <HAL_SYSTICK_Callback+0x58>)
 8005f1a:	f7ff ff6b 	bl	8005df4 <_ZN7MRelays11onTimer_1msEv>
 }//----------------------------------------------------------------------------
 8005f1e:	bd08      	pop	{r3, pc}
 8005f20:	20000ac4 	.word	0x20000ac4
 8005f24:	20000a54 	.word	0x20000a54

08005f28 <_ZN7MSystem17onTimer_Main100msEv>:
  //gADC.mUA_avr 

  // if all Rels OFF - tylko zrodlo zasilania zostanie
  // + problem gdy zmiana zrodla zasilania !!!
  
  if( ( gRelays.mRelA_IsON == false ) && ( gRelays.mRelB_IsON == false ) ){
 8005f28:	4b10      	ldr	r3, [pc, #64]	; (8005f6c <_ZN7MSystem17onTimer_Main100msEv+0x44>)
 8005f2a:	891b      	ldrh	r3, [r3, #8]
 8005f2c:	b9db      	cbnz	r3, 8005f66 <_ZN7MSystem17onTimer_Main100msEv+0x3e>

    // Pwr_Cnt - czas martwy na ustabilizowanie zasilania ADC
    if( mPwr_Cnt <= 0 ){
 8005f2e:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	dd02      	ble.n	8005f3c <_ZN7MSystem17onTimer_Main100msEv+0x14>
      else if( gADC.mUB_avr > 800 )
        mPwrSup_Source = EPwrSupSource::B;
      
      gST7580.mModemWDT = 0;
      
    }else mPwr_Cnt -= 1;
 8005f36:	3b01      	subs	r3, #1
 8005f38:	7203      	strb	r3, [r0, #8]
 8005f3a:	4770      	bx	lr
      if( gADC.mUA_avr > 500 )	// 19.03.2022, zmieniliśmy z 500 na 2000, zaczęło działać - włączyły się wszystkie izolatory
 8005f3c:	4b0c      	ldr	r3, [pc, #48]	; (8005f70 <_ZN7MSystem17onTimer_Main100msEv+0x48>)
 8005f3e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005f42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005f46:	dd05      	ble.n	8005f54 <_ZN7MSystem17onTimer_Main100msEv+0x2c>
        mPwrSup_Source = EPwrSupSource::A;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	71c3      	strb	r3, [r0, #7]
      gST7580.mModemWDT = 0;
 8005f4c:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <_ZN7MSystem17onTimer_Main100msEv+0x4c>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005f52:	4770      	bx	lr
      else if( gADC.mUB_avr > 800 )
 8005f54:	4b06      	ldr	r3, [pc, #24]	; (8005f70 <_ZN7MSystem17onTimer_Main100msEv+0x48>)
 8005f56:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8005f5a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8005f5e:	ddf5      	ble.n	8005f4c <_ZN7MSystem17onTimer_Main100msEv+0x24>
        mPwrSup_Source = EPwrSupSource::B;
 8005f60:	2302      	movs	r3, #2
 8005f62:	71c3      	strb	r3, [r0, #7]
 8005f64:	e7f2      	b.n	8005f4c <_ZN7MSystem17onTimer_Main100msEv+0x24>
    
  }else{
    mPwr_Cnt = 15;
 8005f66:	230f      	movs	r3, #15
 8005f68:	7203      	strb	r3, [r0, #8]
    
  }
  // .........................................................
  
}//----------------------------------------------------------------------------  
 8005f6a:	4770      	bx	lr
 8005f6c:	20000a54 	.word	0x20000a54
 8005f70:	20000920 	.word	0x20000920
 8005f74:	20000a64 	.word	0x20000a64

08005f78 <_ZN10MFlash_SSD10initParamsEv>:
#define __MFlash_SSD_CPP_BH704_H

    // [0]      1B       g485E.mMyAddr
    
/// ---------------------------------------------------------
uint32_t  MFlash_SSD::initParams(){
 8005f78:	b570      	push	{r4, r5, r6, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	4604      	mov	r4, r0
  
    set8(   0, g485E.mMyAddr );
 8005f7e:	4b7f      	ldr	r3, [pc, #508]	; (800617c <_ZN10MFlash_SSD10initParamsEv+0x204>)
 8005f80:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
      return mTable[ aIndex ];
 8005f84:	7b42      	ldrb	r2, [r0, #13]
      if( prevWrt != aValue ){
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d004      	beq.n	8005f94 <_ZN10MFlash_SSD10initParamsEv+0x1c>
          mTable[ aIndex ] = aValue;
 8005f8a:	7343      	strb	r3, [r0, #13]
        mChangeTable[ind8A] |= (maska);      
 8005f8c:	7d43      	ldrb	r3, [r0, #21]
 8005f8e:	f043 0301 	orr.w	r3, r3, #1
 8005f92:	7543      	strb	r3, [r0, #21]
        for( int i=0; i<((_SSD_TABSIZE_/8)+1); i++ ) mChangeTable[i] = 0xFF;
 8005f94:	2300      	movs	r3, #0
 8005f96:	e003      	b.n	8005fa0 <_ZN10MFlash_SSD10initParamsEv+0x28>
 8005f98:	18e2      	adds	r2, r4, r3
 8005f9a:	21ff      	movs	r1, #255	; 0xff
 8005f9c:	7551      	strb	r1, [r2, #21]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	ddf9      	ble.n	8005f98 <_ZN10MFlash_SSD10initParamsEv+0x20>
       mOffset = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60a3      	str	r3, [r4, #8]
 8005fa8:	e01a      	b.n	8005fe0 <_ZN10MFlash_SSD10initParamsEv+0x68>
          mTable[ aIndex ] = aValue;
 8005faa:	18e5      	adds	r5, r4, r3
 8005fac:	736a      	strb	r2, [r5, #13]
        int ind8B = aIndex - ind8A*8;
 8005fae:	f003 0507 	and.w	r5, r3, #7
        uint8_t maska = 0x01 << ind8B; 
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	40aa      	lsls	r2, r5
 8005fb6:	b2d2      	uxtb	r2, r2
        mChangeTable[ind8A] |= (maska);      
 8005fb8:	eb04 05d3 	add.w	r5, r4, r3, lsr #3
 8005fbc:	7d6e      	ldrb	r6, [r5, #21]
 8005fbe:	4332      	orrs	r2, r6
 8005fc0:	756a      	strb	r2, [r5, #21]
        int ind8B = aIndex - ind8A*8;
 8005fc2:	f003 0507 	and.w	r5, r3, #7
        uint8_t maska = 0x01 << ind8B; 
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	fa02 f505 	lsl.w	r5, r2, r5
        mChangeTable[ind8A] &= (~maska);
 8005fcc:	eb04 03d3 	add.w	r3, r4, r3, lsr #3
 8005fd0:	7d5a      	ldrb	r2, [r3, #21]
 8005fd2:	ea22 0205 	bic.w	r2, r2, r5
 8005fd6:	755a      	strb	r2, [r3, #21]
       }while( mOffset < (2048-1) );
 8005fd8:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8005fdc:	4298      	cmp	r0, r3
 8005fde:	dc21      	bgt.n	8006024 <_ZN10MFlash_SSD10initParamsEv+0xac>
            uint16_t dana = MFlash::read16( mPage, mOffset );
 8005fe0:	68a0      	ldr	r0, [r4, #8]
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 8005fe2:	8821      	ldrh	r1, [r4, #0]
 8005fe4:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8005fe8:	02c9      	lsls	r1, r1, #11
 8005fea:	b283      	uxth	r3, r0
      uint16_t res = *(__IO uint16_t*)(addr);
 8005fec:	5a5a      	ldrh	r2, [r3, r1]
 8005fee:	b292      	uxth	r2, r2
            if( dana == 0xFFFF ) break;         // koniec przetwarzania
 8005ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d015      	beq.n	8006024 <_ZN10MFlash_SSD10initParamsEv+0xac>
            mOffset += 2;                       // zmien offset przed continue
 8005ff8:	3002      	adds	r0, #2
 8005ffa:	60a0      	str	r0, [r4, #8]
            if( dana == 0x0000 ) continue;      // wykasowane
 8005ffc:	2a00      	cmp	r2, #0
 8005ffe:	d0eb      	beq.n	8005fd8 <_ZN10MFlash_SSD10initParamsEv+0x60>
            if( (dana & 0x8000) == 0 ){ 
 8006000:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8006004:	d1e8      	bne.n	8005fd8 <_ZN10MFlash_SSD10initParamsEv+0x60>
              uint16_t index = (dana >> 8) & 0x7F; 
 8006006:	f3c2 2306 	ubfx	r3, r2, #8, #7
              if( index == 0x00 )  continue;      // index+1 - zabezpieczenie przed skasowaniem
 800600a:	f412 4ffe 	tst.w	r2, #32512	; 0x7f00
 800600e:	d0e3      	beq.n	8005fd8 <_ZN10MFlash_SSD10initParamsEv+0x60>
              index -= 1;
 8006010:	3b01      	subs	r3, #1
 8006012:	b29b      	uxth	r3, r3
              if( index >= _SSD_TABSIZE_ ) continue; // blad za duzy index !!!
 8006014:	2b07      	cmp	r3, #7
 8006016:	d8df      	bhi.n	8005fd8 <_ZN10MFlash_SSD10initParamsEv+0x60>
              set8( index, wrt ); // + ustawi changeTable na 1
 8006018:	b2d2      	uxtb	r2, r2
      return mTable[ aIndex ];
 800601a:	18e5      	adds	r5, r4, r3
 800601c:	7b6d      	ldrb	r5, [r5, #13]
      if( prevWrt != aValue ){
 800601e:	42aa      	cmp	r2, r5
 8006020:	d1c3      	bne.n	8005faa <_ZN10MFlash_SSD10initParamsEv+0x32>
 8006022:	e7ce      	b.n	8005fc2 <_ZN10MFlash_SSD10initParamsEv+0x4a>
          uint16_t dana = MFlash::read16( mPage, mOffset );
 8006024:	68a3      	ldr	r3, [r4, #8]
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 8006026:	b29a      	uxth	r2, r3
      uint16_t res = *(__IO uint16_t*)(addr);
 8006028:	5a52      	ldrh	r2, [r2, r1]
 800602a:	b292      	uxth	r2, r2
          if( dana == 0xFFFF ) return;         // koniec przetwarzania
 800602c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006030:	4282      	cmp	r2, r0
 8006032:	d005      	beq.n	8006040 <_ZN10MFlash_SSD10initParamsEv+0xc8>
          mOffset += 2;
 8006034:	3302      	adds	r3, #2
 8006036:	60a3      	str	r3, [r4, #8]
       }while( mOffset < (2048-1) );
 8006038:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800603c:	4293      	cmp	r3, r2
 800603e:	ddf1      	ble.n	8006024 <_ZN10MFlash_SSD10initParamsEv+0xac>
      return mTable[ aIndex ];
 8006040:	7b62      	ldrb	r2, [r4, #13]
    
    parseFlash();
    
    g485E.mMyAddr   = get8( 0 );
 8006042:	4b4e      	ldr	r3, [pc, #312]	; (800617c <_ZN10MFlash_SSD10initParamsEv+0x204>)
 8006044:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
     for( int i=0; i<(_SSD_TABSIZE_); i++ ){
 8006048:	2600      	movs	r6, #0
 800604a:	e004      	b.n	8006056 <_ZN10MFlash_SSD10initParamsEv+0xde>
      if( aIndex >= _SSD_TABSIZE_ ) return 1; // blad indeksu: za duzy
 800604c:	2301      	movs	r3, #1
            uint8_t res = flushIndex( i );
 800604e:	b2db      	uxtb	r3, r3
            if( res == 2 ){     // flash czyszczony !!!
 8006050:	2b02      	cmp	r3, #2
 8006052:	d072      	beq.n	800613a <_ZN10MFlash_SSD10initParamsEv+0x1c2>
     for( int i=0; i<(_SSD_TABSIZE_); i++ ){
 8006054:	3601      	adds	r6, #1
 8006056:	2e07      	cmp	r6, #7
 8006058:	f300 808c 	bgt.w	8006174 <_ZN10MFlash_SSD10initParamsEv+0x1fc>
        uint8_t bitChange = changeTable_getBit( i );
 800605c:	b2b5      	uxth	r5, r6
        if( aIndex >= _SSD_TABSIZE_ ) return 0;         // blad indeksu
 800605e:	2d07      	cmp	r5, #7
 8006060:	d8f8      	bhi.n	8006054 <_ZN10MFlash_SSD10initParamsEv+0xdc>
        int ind8A = aIndex / 8;
 8006062:	08eb      	lsrs	r3, r5, #3
        int ind8B = aIndex - ind8A*8;
 8006064:	eba5 01c3 	sub.w	r1, r5, r3, lsl #3
        uint8_t maska = 0x01 << ind8B; 
 8006068:	2201      	movs	r2, #1
 800606a:	408a      	lsls	r2, r1
        return  (mChangeTable[ind8A] & maska);
 800606c:	4423      	add	r3, r4
 800606e:	7d5b      	ldrb	r3, [r3, #21]
        if( bitChange != 0 ){
 8006070:	421a      	tst	r2, r3
 8006072:	d0ef      	beq.n	8006054 <_ZN10MFlash_SSD10initParamsEv+0xdc>
      if( aIndex >= _SSD_TABSIZE_ ) return 1; // blad indeksu: za duzy
 8006074:	2d07      	cmp	r5, #7
 8006076:	d8e9      	bhi.n	800604c <_ZN10MFlash_SSD10initParamsEv+0xd4>
      if( mOffset >= (2048-1) )     return 2; // blad FLASH: ERASE REQ
 8006078:	68a3      	ldr	r3, [r4, #8]
 800607a:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800607e:	4293      	cmp	r3, r2
 8006080:	dc55      	bgt.n	800612e <_ZN10MFlash_SSD10initParamsEv+0x1b6>
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 8006082:	8821      	ldrh	r1, [r4, #0]
 8006084:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8006088:	02c9      	lsls	r1, r1, #11
 800608a:	b29b      	uxth	r3, r3
      uint16_t res = *(__IO uint16_t*)(addr);
 800608c:	5a5b      	ldrh	r3, [r3, r1]
 800608e:	b29b      	uxth	r3, r3
        if( dana != 0xFFFF ){
 8006090:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006094:	4293      	cmp	r3, r2
 8006096:	d00f      	beq.n	80060b8 <_ZN10MFlash_SSD10initParamsEv+0x140>
          mOffset = 0;  flash_searchFF();
 8006098:	2300      	movs	r3, #0
 800609a:	60a3      	str	r3, [r4, #8]
          uint16_t dana = MFlash::read16( mPage, mOffset );
 800609c:	68a3      	ldr	r3, [r4, #8]
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 800609e:	b29a      	uxth	r2, r3
      uint16_t res = *(__IO uint16_t*)(addr);
 80060a0:	5a52      	ldrh	r2, [r2, r1]
 80060a2:	b292      	uxth	r2, r2
          if( dana == 0xFFFF ) return;         // koniec przetwarzania
 80060a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80060a8:	4282      	cmp	r2, r0
 80060aa:	d005      	beq.n	80060b8 <_ZN10MFlash_SSD10initParamsEv+0x140>
          mOffset += 2;
 80060ac:	3302      	adds	r3, #2
 80060ae:	60a3      	str	r3, [r4, #8]
       }while( mOffset < (2048-1) );
 80060b0:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80060b4:	4293      	cmp	r3, r2
 80060b6:	ddf1      	ble.n	800609c <_ZN10MFlash_SSD10initParamsEv+0x124>
      if( mOffset >= (2048-1) )     return 2;   // blad FLASH: ERASE REQ
 80060b8:	68a2      	ldr	r2, [r4, #8]
 80060ba:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80060be:	429a      	cmp	r2, r3
 80060c0:	dc37      	bgt.n	8006132 <_ZN10MFlash_SSD10initParamsEv+0x1ba>
      HAL_StatusTypeDef res = HAL_FLASH_Unlock();
 80060c2:	f7fb f8af 	bl	8001224 <HAL_FLASH_Unlock>
      uint8_t index = aIndex;
 80060c6:	b2eb      	uxtb	r3, r5
      if( index > 126 ) return 3;               // blad indeksu: za duzy
 80060c8:	2b7e      	cmp	r3, #126	; 0x7e
 80060ca:	d834      	bhi.n	8006136 <_ZN10MFlash_SSD10initParamsEv+0x1be>
      uint8_t wrt = mTable[aIndex];
 80060cc:	1962      	adds	r2, r4, r5
 80060ce:	7b52      	ldrb	r2, [r2, #13]
      uint16_t dana2 = ((index+1)<<8) | (wrt);
 80060d0:	3301      	adds	r3, #1
 80060d2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
       uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 80060d6:	8821      	ldrh	r1, [r4, #0]
 80060d8:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 80060dc:	8920      	ldrh	r0, [r4, #8]
       HAL_StatusTypeDef res = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD , addr, aData );
 80060de:	b292      	uxth	r2, r2
 80060e0:	2300      	movs	r3, #0
 80060e2:	eb00 21c1 	add.w	r1, r0, r1, lsl #11
 80060e6:	2001      	movs	r0, #1
 80060e8:	f7fb f8f0 	bl	80012cc <HAL_FLASH_Program>
      HAL_StatusTypeDef res = HAL_FLASH_Lock();
 80060ec:	f7fb f8b4 	bl	8001258 <HAL_FLASH_Lock>
          uint16_t dana = MFlash::read16( mPage, mOffset );
 80060f0:	68a3      	ldr	r3, [r4, #8]
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 80060f2:	8822      	ldrh	r2, [r4, #0]
 80060f4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80060f8:	02d2      	lsls	r2, r2, #11
 80060fa:	b299      	uxth	r1, r3
      uint16_t res = *(__IO uint16_t*)(addr);
 80060fc:	5a8a      	ldrh	r2, [r1, r2]
 80060fe:	b292      	uxth	r2, r2
          if( dana == 0xFFFF ) return;         // koniec przetwarzania
 8006100:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006104:	428a      	cmp	r2, r1
 8006106:	d005      	beq.n	8006114 <_ZN10MFlash_SSD10initParamsEv+0x19c>
          mOffset += 2;
 8006108:	3302      	adds	r3, #2
 800610a:	60a3      	str	r3, [r4, #8]
       }while( mOffset < (2048-1) );
 800610c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006110:	4293      	cmp	r3, r2
 8006112:	dded      	ble.n	80060f0 <_ZN10MFlash_SSD10initParamsEv+0x178>
        int ind8B = aIndex - ind8A*8;
 8006114:	f005 0207 	and.w	r2, r5, #7
        uint8_t maska = 0x01 << ind8B; 
 8006118:	2301      	movs	r3, #1
 800611a:	fa03 f202 	lsl.w	r2, r3, r2
        mChangeTable[ind8A] &= (~maska);
 800611e:	eb04 05d5 	add.w	r5, r4, r5, lsr #3
 8006122:	7d6b      	ldrb	r3, [r5, #21]
 8006124:	ea23 0302 	bic.w	r3, r3, r2
 8006128:	756b      	strb	r3, [r5, #21]
      return 0;
 800612a:	2300      	movs	r3, #0
 800612c:	e78f      	b.n	800604e <_ZN10MFlash_SSD10initParamsEv+0xd6>
      if( mOffset >= (2048-1) )     return 2; // blad FLASH: ERASE REQ
 800612e:	2302      	movs	r3, #2
 8006130:	e78d      	b.n	800604e <_ZN10MFlash_SSD10initParamsEv+0xd6>
      if( mOffset >= (2048-1) )     return 2;   // blad FLASH: ERASE REQ
 8006132:	2302      	movs	r3, #2
 8006134:	e78b      	b.n	800604e <_ZN10MFlash_SSD10initParamsEv+0xd6>
      if( index > 126 ) return 3;               // blad indeksu: za duzy
 8006136:	2303      	movs	r3, #3
 8006138:	e789      	b.n	800604e <_ZN10MFlash_SSD10initParamsEv+0xd6>
      HAL_StatusTypeDef res = HAL_FLASH_Unlock();
 800613a:	f7fb f873 	bl	8001224 <HAL_FLASH_Unlock>
               MFlash::MFlash::erasePage(mPage);
 800613e:	8823      	ldrh	r3, [r4, #0]
       uint32_t addr = 0x08000000 + (aPage * 0x800);
 8006140:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8006144:	02db      	lsls	r3, r3, #11
       f.TypeErase = FLASH_TYPEERASE_PAGES;
 8006146:	2500      	movs	r5, #0
 8006148:	9501      	str	r5, [sp, #4]
       f.PageAddress = addr;
 800614a:	9302      	str	r3, [sp, #8]
       f.NbPages = 1;
 800614c:	2301      	movs	r3, #1
 800614e:	9303      	str	r3, [sp, #12]
       uint32_t PageError = 0;
 8006150:	9500      	str	r5, [sp, #0]
       HAL_StatusTypeDef res = HAL_FLASHEx_Erase(&f, &PageError);
 8006152:	4669      	mov	r1, sp
 8006154:	a801      	add	r0, sp, #4
 8006156:	f7fb f92b 	bl	80013b0 <HAL_FLASHEx_Erase>
      HAL_StatusTypeDef res = HAL_FLASH_Lock();
 800615a:	f7fb f87d 	bl	8001258 <HAL_FLASH_Lock>
               mOffset = 0;
 800615e:	60a5      	str	r5, [r4, #8]
        for( int i=0; i<((_SSD_TABSIZE_/8)+1); i++ ) mChangeTable[i] = 0xFF;
 8006160:	462b      	mov	r3, r5
 8006162:	e003      	b.n	800616c <_ZN10MFlash_SSD10initParamsEv+0x1f4>
 8006164:	18e2      	adds	r2, r4, r3
 8006166:	21ff      	movs	r1, #255	; 0xff
 8006168:	7551      	strb	r1, [r2, #21]
 800616a:	3301      	adds	r3, #1
 800616c:	2b01      	cmp	r3, #1
 800616e:	ddf9      	ble.n	8006164 <_ZN10MFlash_SSD10initParamsEv+0x1ec>
               i = 0; continue;
 8006170:	2600      	movs	r6, #0
 8006172:	e76f      	b.n	8006054 <_ZN10MFlash_SSD10initParamsEv+0xdc>
    flush();
    
    return 0;
    
}//----------------------------------------------------------
 8006174:	2000      	movs	r0, #0
 8006176:	b004      	add	sp, #16
 8006178:	bd70      	pop	{r4, r5, r6, pc}
 800617a:	bf00      	nop
 800617c:	200008a8 	.word	0x200008a8

08006180 <main>:
{
 8006180:	b508      	push	{r3, lr}
  HAL_Init();
 8006182:	f7fa f847 	bl	8000214 <HAL_Init>
  SystemClock_Config();
 8006186:	f7fd f915 	bl	80033b4 <_Z18SystemClock_Configv>
  __ASM volatile ("cpsid i" : : : "memory");
 800618a:	b672      	cpsid	i
  MX_GPIO_Init();
 800618c:	f7fc ffb6 	bl	80030fc <MX_GPIO_Init>
  MX_DMA_Init();
 8006190:	f7fc ff92 	bl	80030b8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8006194:	f000 f990 	bl	80064b8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8006198:	f000 f9b2 	bl	8006500 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800619c:	f7fc fe1e 	bl	8002ddc <MX_ADC1_Init>
  MX_ADC2_Init();
 80061a0:	f7fc fe72 	bl	8002e88 <MX_ADC2_Init>
  MX_TIM1_Init();
 80061a4:	f000 f938 	bl	8006418 <MX_TIM1_Init>
        HAL_GPIO_WritePin(PLM_GPIO_T_REQ_PORT2,PLM_GPIO_T_REQ_PIN2, (GPIO_PinState)aPinState );
 80061a8:	2201      	movs	r2, #1
 80061aa:	4611      	mov	r1, r2
 80061ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061b0:	f7fb fa1a 	bl	80015e8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PLM_GPIO_RESETN_PORT,PLM_GPIO_RESETN_PIN, (GPIO_PinState)aPinState );
 80061b4:	4c58      	ldr	r4, [pc, #352]	; (8006318 <main+0x198>)
 80061b6:	2201      	movs	r2, #1
 80061b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061bc:	4620      	mov	r0, r4
 80061be:	f7fb fa13 	bl	80015e8 <HAL_GPIO_WritePin>
  _o485E_PwrEN = 0;  
 80061c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061c6:	7d5a      	ldrb	r2, [r3, #21]
 80061c8:	f36f 0200 	bfc	r2, #0, #1
 80061cc:	755a      	strb	r2, [r3, #21]
  _oTPS_SEL = 1;        // kanal 1 do analizy pradu
 80061ce:	7d5a      	ldrb	r2, [r3, #21]
 80061d0:	f042 0208 	orr.w	r2, r2, #8
 80061d4:	755a      	strb	r2, [r3, #21]
  _oTPS_DIAGEN = 1;     // enable diagnostics
 80061d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061da:	7d1a      	ldrb	r2, [r3, #20]
 80061dc:	f042 0210 	orr.w	r2, r2, #16
 80061e0:	751a      	strb	r2, [r3, #20]
  _oTPS_THER = 0;       // auto retry mode
 80061e2:	7d62      	ldrb	r2, [r4, #21]
 80061e4:	f36f 1245 	bfc	r2, #5, #1
 80061e8:	7562      	strb	r2, [r4, #21]
  _oTPS_ON_2 = 1;
 80061ea:	7d1a      	ldrb	r2, [r3, #20]
 80061ec:	f042 0220 	orr.w	r2, r2, #32
 80061f0:	751a      	strb	r2, [r3, #20]
  _oTPS_ON_1 = 0;
 80061f2:	7d1a      	ldrb	r2, [r3, #20]
 80061f4:	f36f 1286 	bfc	r2, #6, #1
 80061f8:	751a      	strb	r2, [r3, #20]
  gRelays.init();
 80061fa:	4848      	ldr	r0, [pc, #288]	; (800631c <main+0x19c>)
 80061fc:	f7ff fd76 	bl	8005cec <_ZN7MRelays4initEv>
      mhUart = aUart;
 8006200:	4847      	ldr	r0, [pc, #284]	; (8006320 <main+0x1a0>)
 8006202:	4948      	ldr	r1, [pc, #288]	; (8006324 <main+0x1a4>)
 8006204:	f841 0b4a 	str.w	r0, [r1], #74
      HAL_UART_Receive_IT( mhUart, mRXBuf, 1 );
 8006208:	2201      	movs	r2, #1
 800620a:	f7fc fdbd 	bl	8002d88 <HAL_UART_Receive_IT>
      mhUart = aUart;
 800620e:	4946      	ldr	r1, [pc, #280]	; (8006328 <main+0x1a8>)
 8006210:	4846      	ldr	r0, [pc, #280]	; (800632c <main+0x1ac>)
 8006212:	62c8      	str	r0, [r1, #44]	; 0x2c
      HAL_UART_Receive_IT( mhUart, mRXBuf, 1 );
 8006214:	2201      	movs	r2, #1
 8006216:	3130      	adds	r1, #48	; 0x30
 8006218:	f7fc fdb6 	bl	8002d88 <HAL_UART_Receive_IT>
        for( int i=0; i<14; i++ )   modemConf_Phy[i] = phy_config[i];
 800621c:	2300      	movs	r3, #0
 800621e:	2b0d      	cmp	r3, #13
 8006220:	dc07      	bgt.n	8006232 <main+0xb2>
 8006222:	4a43      	ldr	r2, [pc, #268]	; (8006330 <main+0x1b0>)
 8006224:	5cd1      	ldrb	r1, [r2, r3]
 8006226:	4a40      	ldr	r2, [pc, #256]	; (8006328 <main+0x1a8>)
 8006228:	441a      	add	r2, r3
 800622a:	f882 104f 	strb.w	r1, [r2, #79]	; 0x4f
 800622e:	3301      	adds	r3, #1
 8006230:	e7f5      	b.n	800621e <main+0x9e>
        mPage = aPage;
 8006232:	4b40      	ldr	r3, [pc, #256]	; (8006334 <main+0x1b4>)
 8006234:	221f      	movs	r2, #31
 8006236:	601a      	str	r2, [r3, #0]
	mAddr = 0x08000000 + (mPage * 0x800);
 8006238:	4a3f      	ldr	r2, [pc, #252]	; (8006338 <main+0x1b8>)
 800623a:	605a      	str	r2, [r3, #4]
        for( int i=0; i<(_SSD_TABSIZE_); i++ ) mTable[i] = 0xFF;
 800623c:	2300      	movs	r3, #0
 800623e:	2b07      	cmp	r3, #7
 8006240:	dc05      	bgt.n	800624e <main+0xce>
 8006242:	4a3c      	ldr	r2, [pc, #240]	; (8006334 <main+0x1b4>)
 8006244:	441a      	add	r2, r3
 8006246:	21ff      	movs	r1, #255	; 0xff
 8006248:	7351      	strb	r1, [r2, #13]
 800624a:	3301      	adds	r3, #1
 800624c:	e7f7      	b.n	800623e <main+0xbe>
        for( int i=0; i<((_SSD_TABSIZE_/8)+1); i++ ) mChangeTable[i] = 0xFF;
 800624e:	2300      	movs	r3, #0
 8006250:	2b01      	cmp	r3, #1
 8006252:	dc05      	bgt.n	8006260 <main+0xe0>
 8006254:	4a37      	ldr	r2, [pc, #220]	; (8006334 <main+0x1b4>)
 8006256:	441a      	add	r2, r3
 8006258:	21ff      	movs	r1, #255	; 0xff
 800625a:	7551      	strb	r1, [r2, #21]
 800625c:	3301      	adds	r3, #1
 800625e:	e7f7      	b.n	8006250 <main+0xd0>
	  gFlash_SSD.initParams();
 8006260:	4834      	ldr	r0, [pc, #208]	; (8006334 <main+0x1b4>)
 8006262:	f7ff fe89 	bl	8005f78 <_ZN10MFlash_SSD10initParamsEv>
  __ASM volatile ("cpsie i" : : : "memory");
 8006266:	b662      	cpsie	i
  gRelays.initProc();  
 8006268:	482c      	ldr	r0, [pc, #176]	; (800631c <main+0x19c>)
 800626a:	f7ff fd5d 	bl	8005d28 <_ZN7MRelays8initProcEv>
  gST7580.initModem();
 800626e:	482e      	ldr	r0, [pc, #184]	; (8006328 <main+0x1a8>)
 8006270:	f7fd fcea 	bl	8003c48 <_ZN7MST75809initModemEv>
  gADC.initIRQ();
 8006274:	4831      	ldr	r0, [pc, #196]	; (800633c <main+0x1bc>)
 8006276:	f7ff fc8f 	bl	8005b98 <_ZN4MADC7initIRQEv>
 800627a:	e008      	b.n	800628e <main+0x10e>
	  gSystem.mTimer_Is1000ms = false;
 800627c:	4b30      	ldr	r3, [pc, #192]	; (8006340 <main+0x1c0>)
 800627e:	2200      	movs	r2, #0
 8006280:	711a      	strb	r2, [r3, #4]
    if( gSystem.mTimer_Is100ms ){
 8006282:	4b2f      	ldr	r3, [pc, #188]	; (8006340 <main+0x1c0>)
 8006284:	795b      	ldrb	r3, [r3, #5]
 8006286:	b93b      	cbnz	r3, 8006298 <main+0x118>
    if( gSystem.mTimer_Is10ms ){
 8006288:	4b2d      	ldr	r3, [pc, #180]	; (8006340 <main+0x1c0>)
 800628a:	799b      	ldrb	r3, [r3, #6]
 800628c:	b993      	cbnz	r3, 80062b4 <main+0x134>
  if( gSystem.mTimer_Is1000ms ){
 800628e:	4b2c      	ldr	r3, [pc, #176]	; (8006340 <main+0x1c0>)
 8006290:	791b      	ldrb	r3, [r3, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0f5      	beq.n	8006282 <main+0x102>
 8006296:	e7f1      	b.n	800627c <main+0xfc>
      gSystem.mTimer_Is100ms = false;
 8006298:	4829      	ldr	r0, [pc, #164]	; (8006340 <main+0x1c0>)
 800629a:	2300      	movs	r3, #0
 800629c:	7143      	strb	r3, [r0, #5]
      gSystem.onTimer_Main100ms();      // PwrSupSource: if all Rels OFF -> 
 800629e:	f7ff fe43 	bl	8005f28 <_ZN7MSystem17onTimer_Main100msEv>
    
    
    // 
    /// event: TIMER_Main100ms
    public: void onTimer_Main100ms(){
       if( mComWDT < 2000 )       // 200 s
 80062a2:	4b28      	ldr	r3, [pc, #160]	; (8006344 <main+0x1c4>)
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80062aa:	d2ed      	bcs.n	8006288 <main+0x108>
          mComWDT += 1;
 80062ac:	3301      	adds	r3, #1
 80062ae:	4a25      	ldr	r2, [pc, #148]	; (8006344 <main+0x1c4>)
 80062b0:	6113      	str	r3, [r2, #16]
 80062b2:	e7e9      	b.n	8006288 <main+0x108>
      gSystem.mTimer_Is10ms = false;
 80062b4:	4b22      	ldr	r3, [pc, #136]	; (8006340 <main+0x1c0>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	719a      	strb	r2, [r3, #6]
      gRelays.onTimer_Main10ms();     // PwrSupSource
 80062ba:	4818      	ldr	r0, [pc, #96]	; (800631c <main+0x19c>)
 80062bc:	f7ff fd66 	bl	8005d8c <_ZN7MRelays16onTimer_Main10msEv>
      gST7580.onTimer_Main10ms();     // Modem: czy ramka -> odbierz (1=wyslij)
 80062c0:	4819      	ldr	r0, [pc, #100]	; (8006328 <main+0x1a8>)
 80062c2:	f7ff fbd9 	bl	8005a78 <_ZN7MST758016onTimer_Main10msEv>
      if( _o485E_EN == 1 ){
 80062c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062ca:	7d5b      	ldrb	r3, [r3, #21]
 80062cc:	f013 0f10 	tst.w	r3, #16
 80062d0:	d00e      	beq.n	80062f0 <main+0x170>
        if( mTX_WDT > 20 ){
 80062d2:	4b14      	ldr	r3, [pc, #80]	; (8006324 <main+0x1a4>)
 80062d4:	791b      	ldrb	r3, [r3, #4]
 80062d6:	2b14      	cmp	r3, #20
 80062d8:	d906      	bls.n	80062e8 <main+0x168>
          _o485E_EN = 0;
 80062da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80062de:	7d53      	ldrb	r3, [r2, #21]
 80062e0:	f36f 1304 	bfc	r3, #4, #1
 80062e4:	7553      	strb	r3, [r2, #21]
 80062e6:	e006      	b.n	80062f6 <main+0x176>
        }else mTX_WDT += 1;
 80062e8:	3301      	adds	r3, #1
 80062ea:	4a0e      	ldr	r2, [pc, #56]	; (8006324 <main+0x1a4>)
 80062ec:	7113      	strb	r3, [r2, #4]
 80062ee:	e002      	b.n	80062f6 <main+0x176>
      }else mTX_WDT = 0;
 80062f0:	4b0c      	ldr	r3, [pc, #48]	; (8006324 <main+0x1a4>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	711a      	strb	r2, [r3, #4]
     if( mRecState != 0 ){
 80062f6:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <main+0x1a4>)
 80062f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0c7      	beq.n	800628e <main+0x10e>
       if( mFrameTimeOutCnt > 0 ){
 80062fe:	4b09      	ldr	r3, [pc, #36]	; (8006324 <main+0x1a4>)
 8006300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006302:	2b00      	cmp	r3, #0
 8006304:	ddc3      	ble.n	800628e <main+0x10e>
         mFrameTimeOutCnt -=1;
 8006306:	3b01      	subs	r3, #1
 8006308:	4a06      	ldr	r2, [pc, #24]	; (8006324 <main+0x1a4>)
 800630a:	6453      	str	r3, [r2, #68]	; 0x44
         if( mFrameTimeOutCnt == 0 ){
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1be      	bne.n	800628e <main+0x10e>
            mRecState = 0;
 8006310:	4613      	mov	r3, r2
 8006312:	2200      	movs	r2, #0
 8006314:	641a      	str	r2, [r3, #64]	; 0x40
    }//-------------------------------------------------------------------------
 8006316:	e7ba      	b.n	800628e <main+0x10e>
 8006318:	48000800 	.word	0x48000800
 800631c:	20000a54 	.word	0x20000a54
 8006320:	20000cd4 	.word	0x20000cd4
 8006324:	200008a8 	.word	0x200008a8
 8006328:	20000a64 	.word	0x20000a64
 800632c:	20000d58 	.word	0x20000d58
 8006330:	08006718 	.word	0x08006718
 8006334:	20000970 	.word	0x20000970
 8006338:	0800f800 	.word	0x0800f800
 800633c:	20000920 	.word	0x20000920
 8006340:	20000ac4 	.word	0x20000ac4
 8006344:	2000000c 	.word	0x2000000c

08006348 <Error_Handler>:
}
 8006348:	4770      	bx	lr

0800634a <_GLOBAL__sub_I_gDbgTab>:
 800634a:	b508      	push	{r3, lr}
 800634c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006350:	2001      	movs	r0, #1
 8006352:	f7fc ff8b 	bl	800326c <_Z41__static_initialization_and_destruction_0ii>
 8006356:	bd08      	pop	{r3, pc}

08006358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006358:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800635a:	4b0a      	ldr	r3, [pc, #40]	; (8006384 <HAL_MspInit+0x2c>)
 800635c:	699a      	ldr	r2, [r3, #24]
 800635e:	f042 0201 	orr.w	r2, r2, #1
 8006362:	619a      	str	r2, [r3, #24]
 8006364:	699a      	ldr	r2, [r3, #24]
 8006366:	f002 0201 	and.w	r2, r2, #1
 800636a:	9200      	str	r2, [sp, #0]
 800636c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800636e:	69da      	ldr	r2, [r3, #28]
 8006370:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006374:	61da      	str	r2, [r3, #28]
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800637c:	9301      	str	r3, [sp, #4]
 800637e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006380:	b002      	add	sp, #8
 8006382:	4770      	bx	lr
 8006384:	40021000 	.word	0x40021000

08006388 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006388:	4770      	bx	lr

0800638a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800638a:	e7fe      	b.n	800638a <HardFault_Handler>

0800638c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800638c:	e7fe      	b.n	800638c <MemManage_Handler>

0800638e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800638e:	e7fe      	b.n	800638e <BusFault_Handler>

08006390 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006390:	e7fe      	b.n	8006390 <UsageFault_Handler>

08006392 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006392:	4770      	bx	lr

08006394 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006394:	4770      	bx	lr

08006396 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006396:	4770      	bx	lr

08006398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006398:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  HAL_SYSTICK_IRQHandler();
 800639a:	f7fa fde7 	bl	8000f6c <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800639e:	f7f9 ff4b 	bl	8000238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80063a2:	bd08      	pop	{r3, pc}

080063a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80063a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80063a6:	4802      	ldr	r0, [pc, #8]	; (80063b0 <DMA1_Channel1_IRQHandler+0xc>)
 80063a8:	f7fa feb5 	bl	8001116 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80063ac:	bd08      	pop	{r3, pc}
 80063ae:	bf00      	nop
 80063b0:	20000c00 	.word	0x20000c00

080063b4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80063b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80063b6:	4802      	ldr	r0, [pc, #8]	; (80063c0 <DMA1_Channel2_IRQHandler+0xc>)
 80063b8:	f7fa fead 	bl	8001116 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80063bc:	bd08      	pop	{r3, pc}
 80063be:	bf00      	nop
 80063c0:	20000c44 	.word	0x20000c44

080063c4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80063c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80063c6:	4803      	ldr	r0, [pc, #12]	; (80063d4 <ADC1_2_IRQHandler+0x10>)
 80063c8:	f7fa f9c2 	bl	8000750 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80063cc:	4802      	ldr	r0, [pc, #8]	; (80063d8 <ADC1_2_IRQHandler+0x14>)
 80063ce:	f7fa f9bf 	bl	8000750 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80063d2:	bd08      	pop	{r3, pc}
 80063d4:	20000bb0 	.word	0x20000bb0
 80063d8:	20000b60 	.word	0x20000b60

080063dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 80063dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80063de:	4802      	ldr	r0, [pc, #8]	; (80063e8 <USART1_IRQHandler+0xc>)
 80063e0:	f7fc f86c 	bl	80024bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80063e4:	bd08      	pop	{r3, pc}
 80063e6:	bf00      	nop
 80063e8:	20000cd4 	.word	0x20000cd4

080063ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80063ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80063ee:	4802      	ldr	r0, [pc, #8]	; (80063f8 <USART2_IRQHandler+0xc>)
 80063f0:	f7fc f864 	bl	80024bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80063f4:	bd08      	pop	{r3, pc}
 80063f6:	bf00      	nop
 80063f8:	20000d58 	.word	0x20000d58

080063fc <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80063fc:	4b05      	ldr	r3, [pc, #20]	; (8006414 <SystemInit+0x18>)
 80063fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006402:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8006406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800640a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800640e:	609a      	str	r2, [r3, #8]
#endif
}
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	e000ed00 	.word	0xe000ed00

08006418 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006418:	b500      	push	{lr}
 800641a:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800641c:	2300      	movs	r3, #0
 800641e:	9304      	str	r3, [sp, #16]
 8006420:	9305      	str	r3, [sp, #20]
 8006422:	9306      	str	r3, [sp, #24]
 8006424:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006426:	9301      	str	r3, [sp, #4]
 8006428:	9302      	str	r3, [sp, #8]
 800642a:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800642c:	4815      	ldr	r0, [pc, #84]	; (8006484 <MX_TIM1_Init+0x6c>)
 800642e:	4a16      	ldr	r2, [pc, #88]	; (8006488 <MX_TIM1_Init+0x70>)
 8006430:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 8006432:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006434:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8006436:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800643a:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800643c:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800643e:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006440:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006442:	f7fb fe6b 	bl	800211c <HAL_TIM_Base_Init>
 8006446:	b998      	cbnz	r0, 8006470 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800644c:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800644e:	a904      	add	r1, sp, #16
 8006450:	480c      	ldr	r0, [pc, #48]	; (8006484 <MX_TIM1_Init+0x6c>)
 8006452:	f7fb fe9f 	bl	8002194 <HAL_TIM_ConfigClockSource>
 8006456:	b970      	cbnz	r0, 8006476 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006458:	2300      	movs	r3, #0
 800645a:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800645c:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800645e:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006460:	a901      	add	r1, sp, #4
 8006462:	4808      	ldr	r0, [pc, #32]	; (8006484 <MX_TIM1_Init+0x6c>)
 8006464:	f7fb ff16 	bl	8002294 <HAL_TIMEx_MasterConfigSynchronization>
 8006468:	b940      	cbnz	r0, 800647c <MX_TIM1_Init+0x64>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800646a:	b009      	add	sp, #36	; 0x24
 800646c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006470:	f7ff ff6a 	bl	8006348 <Error_Handler>
 8006474:	e7e8      	b.n	8006448 <MX_TIM1_Init+0x30>
    Error_Handler();
 8006476:	f7ff ff67 	bl	8006348 <Error_Handler>
 800647a:	e7ed      	b.n	8006458 <MX_TIM1_Init+0x40>
    Error_Handler();
 800647c:	f7ff ff64 	bl	8006348 <Error_Handler>
}
 8006480:	e7f3      	b.n	800646a <MX_TIM1_Init+0x52>
 8006482:	bf00      	nop
 8006484:	20000c88 	.word	0x20000c88
 8006488:	40012c00 	.word	0x40012c00

0800648c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 800648c:	6802      	ldr	r2, [r0, #0]
 800648e:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <HAL_TIM_Base_MspInit+0x28>)
 8006490:	429a      	cmp	r2, r3
 8006492:	d000      	beq.n	8006496 <HAL_TIM_Base_MspInit+0xa>
 8006494:	4770      	bx	lr
{
 8006496:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006498:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800649c:	699a      	ldr	r2, [r3, #24]
 800649e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064a2:	619a      	str	r2, [r3, #24]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80064ae:	b002      	add	sp, #8
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40012c00 	.word	0x40012c00

080064b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80064b8:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80064ba:	480f      	ldr	r0, [pc, #60]	; (80064f8 <MX_USART1_UART_Init+0x40>)
 80064bc:	4b0f      	ldr	r3, [pc, #60]	; (80064fc <MX_USART1_UART_Init+0x44>)
 80064be:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 38400;
 80064c0:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80064c4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80064c6:	2300      	movs	r3, #0
 80064c8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80064ca:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80064cc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80064ce:	220c      	movs	r2, #12
 80064d0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80064d2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80064d4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80064d6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80064d8:	2330      	movs	r3, #48	; 0x30
 80064da:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80064dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064e0:	6383      	str	r3, [r0, #56]	; 0x38
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80064e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064e6:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80064e8:	f7fc fbbd 	bl	8002c66 <HAL_UART_Init>
 80064ec:	b900      	cbnz	r0, 80064f0 <MX_USART1_UART_Init+0x38>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80064ee:	bd08      	pop	{r3, pc}
    Error_Handler();
 80064f0:	f7ff ff2a 	bl	8006348 <Error_Handler>
}
 80064f4:	e7fb      	b.n	80064ee <MX_USART1_UART_Init+0x36>
 80064f6:	bf00      	nop
 80064f8:	20000cd4 	.word	0x20000cd4
 80064fc:	40013800 	.word	0x40013800

08006500 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006500:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006502:	480f      	ldr	r0, [pc, #60]	; (8006540 <MX_USART2_UART_Init+0x40>)
 8006504:	4b0f      	ldr	r3, [pc, #60]	; (8006544 <MX_USART2_UART_Init+0x44>)
 8006506:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 57600;
 8006508:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800650c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800650e:	2300      	movs	r3, #0
 8006510:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006512:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006514:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006516:	220c      	movs	r2, #12
 8006518:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800651a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800651c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800651e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8006520:	2330      	movs	r3, #48	; 0x30
 8006522:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8006524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006528:	6383      	str	r3, [r0, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800652a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800652e:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006530:	f7fc fb99 	bl	8002c66 <HAL_UART_Init>
 8006534:	b900      	cbnz	r0, 8006538 <MX_USART2_UART_Init+0x38>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006536:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006538:	f7ff ff06 	bl	8006348 <Error_Handler>
}
 800653c:	e7fb      	b.n	8006536 <MX_USART2_UART_Init+0x36>
 800653e:	bf00      	nop
 8006540:	20000d58 	.word	0x20000d58
 8006544:	40004400 	.word	0x40004400

08006548 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006548:	b510      	push	{r4, lr}
 800654a:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800654c:	2300      	movs	r3, #0
 800654e:	9305      	str	r3, [sp, #20]
 8006550:	9306      	str	r3, [sp, #24]
 8006552:	9307      	str	r3, [sp, #28]
 8006554:	9308      	str	r3, [sp, #32]
 8006556:	9309      	str	r3, [sp, #36]	; 0x24
  if(uartHandle->Instance==USART1)
 8006558:	6803      	ldr	r3, [r0, #0]
 800655a:	4a2f      	ldr	r2, [pc, #188]	; (8006618 <HAL_UART_MspInit+0xd0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d004      	beq.n	800656a <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8006560:	4a2e      	ldr	r2, [pc, #184]	; (800661c <HAL_UART_MspInit+0xd4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d02d      	beq.n	80065c2 <HAL_UART_MspInit+0x7a>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006566:	b00a      	add	sp, #40	; 0x28
 8006568:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800656a:	4b2d      	ldr	r3, [pc, #180]	; (8006620 <HAL_UART_MspInit+0xd8>)
 800656c:	699a      	ldr	r2, [r3, #24]
 800656e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006572:	619a      	str	r2, [r3, #24]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800657a:	9201      	str	r2, [sp, #4]
 800657c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800657e:	695a      	ldr	r2, [r3, #20]
 8006580:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006584:	615a      	str	r2, [r3, #20]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800658c:	9302      	str	r3, [sp, #8]
 800658e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006590:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006594:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006596:	2302      	movs	r3, #2
 8006598:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800659a:	2400      	movs	r4, #0
 800659c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800659e:	2303      	movs	r3, #3
 80065a0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80065a2:	2307      	movs	r3, #7
 80065a4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065a6:	a905      	add	r1, sp, #20
 80065a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065ac:	f7fa ff52 	bl	8001454 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80065b0:	4622      	mov	r2, r4
 80065b2:	2101      	movs	r1, #1
 80065b4:	2025      	movs	r0, #37	; 0x25
 80065b6:	f7fa fc81 	bl	8000ebc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80065ba:	2025      	movs	r0, #37	; 0x25
 80065bc:	f7fa fcb2 	bl	8000f24 <HAL_NVIC_EnableIRQ>
 80065c0:	e7d1      	b.n	8006566 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80065c2:	4b17      	ldr	r3, [pc, #92]	; (8006620 <HAL_UART_MspInit+0xd8>)
 80065c4:	69da      	ldr	r2, [r3, #28]
 80065c6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80065ca:	61da      	str	r2, [r3, #28]
 80065cc:	69da      	ldr	r2, [r3, #28]
 80065ce:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80065d2:	9203      	str	r2, [sp, #12]
 80065d4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065d6:	695a      	ldr	r2, [r3, #20]
 80065d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80065dc:	615a      	str	r2, [r3, #20]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e4:	9304      	str	r3, [sp, #16]
 80065e6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80065e8:	230c      	movs	r3, #12
 80065ea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065ec:	2302      	movs	r3, #2
 80065ee:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065f0:	2400      	movs	r4, #0
 80065f2:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80065f4:	2303      	movs	r3, #3
 80065f6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80065f8:	2307      	movs	r3, #7
 80065fa:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065fc:	a905      	add	r1, sp, #20
 80065fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006602:	f7fa ff27 	bl	8001454 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8006606:	4622      	mov	r2, r4
 8006608:	2101      	movs	r1, #1
 800660a:	2026      	movs	r0, #38	; 0x26
 800660c:	f7fa fc56 	bl	8000ebc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006610:	2026      	movs	r0, #38	; 0x26
 8006612:	f7fa fc87 	bl	8000f24 <HAL_NVIC_EnableIRQ>
}
 8006616:	e7a6      	b.n	8006566 <HAL_UART_MspInit+0x1e>
 8006618:	40013800 	.word	0x40013800
 800661c:	40004400 	.word	0x40004400
 8006620:	40021000 	.word	0x40021000

08006624 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800665c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006628:	480d      	ldr	r0, [pc, #52]	; (8006660 <LoopForever+0x6>)
  ldr r1, =_edata
 800662a:	490e      	ldr	r1, [pc, #56]	; (8006664 <LoopForever+0xa>)
  ldr r2, =_sidata
 800662c:	4a0e      	ldr	r2, [pc, #56]	; (8006668 <LoopForever+0xe>)
  movs r3, #0
 800662e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006630:	e002      	b.n	8006638 <LoopCopyDataInit>

08006632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006636:	3304      	adds	r3, #4

08006638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800663a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800663c:	d3f9      	bcc.n	8006632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800663e:	4a0b      	ldr	r2, [pc, #44]	; (800666c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006640:	4c0b      	ldr	r4, [pc, #44]	; (8006670 <LoopForever+0x16>)
  movs r3, #0
 8006642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006644:	e001      	b.n	800664a <LoopFillZerobss>

08006646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006648:	3204      	adds	r2, #4

0800664a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800664a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800664c:	d3fb      	bcc.n	8006646 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800664e:	f7ff fed5 	bl	80063fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006652:	f000 f811 	bl	8006678 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006656:	f7ff fd93 	bl	8006180 <main>

0800665a <LoopForever>:

LoopForever:
    b LoopForever
 800665a:	e7fe      	b.n	800665a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800665c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8006660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006664:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8006668:	0800674c 	.word	0x0800674c
  ldr r2, =_sbss
 800666c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8006670:	20000ddc 	.word	0x20000ddc

08006674 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006674:	e7fe      	b.n	8006674 <CAN_RX0_IRQHandler>
	...

08006678 <__libc_init_array>:
 8006678:	b570      	push	{r4, r5, r6, lr}
 800667a:	4d0d      	ldr	r5, [pc, #52]	; (80066b0 <__libc_init_array+0x38>)
 800667c:	4c0d      	ldr	r4, [pc, #52]	; (80066b4 <__libc_init_array+0x3c>)
 800667e:	1b64      	subs	r4, r4, r5
 8006680:	10a4      	asrs	r4, r4, #2
 8006682:	2600      	movs	r6, #0
 8006684:	42a6      	cmp	r6, r4
 8006686:	d109      	bne.n	800669c <__libc_init_array+0x24>
 8006688:	4d0b      	ldr	r5, [pc, #44]	; (80066b8 <__libc_init_array+0x40>)
 800668a:	4c0c      	ldr	r4, [pc, #48]	; (80066bc <__libc_init_array+0x44>)
 800668c:	f000 f826 	bl	80066dc <_init>
 8006690:	1b64      	subs	r4, r4, r5
 8006692:	10a4      	asrs	r4, r4, #2
 8006694:	2600      	movs	r6, #0
 8006696:	42a6      	cmp	r6, r4
 8006698:	d105      	bne.n	80066a6 <__libc_init_array+0x2e>
 800669a:	bd70      	pop	{r4, r5, r6, pc}
 800669c:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a0:	4798      	blx	r3
 80066a2:	3601      	adds	r6, #1
 80066a4:	e7ee      	b.n	8006684 <__libc_init_array+0xc>
 80066a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80066aa:	4798      	blx	r3
 80066ac:	3601      	adds	r6, #1
 80066ae:	e7f2      	b.n	8006696 <__libc_init_array+0x1e>
 80066b0:	08006740 	.word	0x08006740
 80066b4:	08006740 	.word	0x08006740
 80066b8:	08006740 	.word	0x08006740
 80066bc:	08006748 	.word	0x08006748

080066c0 <memcpy>:
 80066c0:	440a      	add	r2, r1
 80066c2:	4291      	cmp	r1, r2
 80066c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80066c8:	d100      	bne.n	80066cc <memcpy+0xc>
 80066ca:	4770      	bx	lr
 80066cc:	b510      	push	{r4, lr}
 80066ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066d6:	4291      	cmp	r1, r2
 80066d8:	d1f9      	bne.n	80066ce <memcpy+0xe>
 80066da:	bd10      	pop	{r4, pc}

080066dc <_init>:
 80066dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066de:	bf00      	nop
 80066e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066e2:	bc08      	pop	{r3}
 80066e4:	469e      	mov	lr, r3
 80066e6:	4770      	bx	lr

080066e8 <_fini>:
 80066e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ea:	bf00      	nop
 80066ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ee:	bc08      	pop	{r3}
 80066f0:	469e      	mov	lr, r3
 80066f2:	4770      	bx	lr
