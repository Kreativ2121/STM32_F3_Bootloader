
CB316_Izolator2_05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002e8c  08002e8c  00012e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ec4  08002ec4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ec4  08002ec4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ec4  08002ec4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002ec4  08002ec4  00012ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ecc  08002ecc  00012ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000258  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011e43  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028c8  00000000  00000000  00031e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0000ae29  00000000  00000000  00034747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000898  00000000  00000000  0003f570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000a80  00000000  00000000  0003fe08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001de58  00000000  00000000  00040888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012ae1  00000000  00000000  0005e6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a6a0b  00000000  00000000  000711c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00117bcc  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000014c4  00000000  00000000  00117c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002e74 	.word	0x08002e74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002e74 	.word	0x08002e74

080001c8 <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80001c8:	4770      	bx	lr
	...

080001cc <HAL_DeInit>:
{
 80001cc:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 80001ce:	4b07      	ldr	r3, [pc, #28]	; (80001ec <HAL_DeInit+0x20>)
 80001d0:	f04f 32ff 	mov.w	r2, #4294967295
 80001d4:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 80001d6:	2400      	movs	r4, #0
 80001d8:	611c      	str	r4, [r3, #16]
  __HAL_RCC_APB2_FORCE_RESET();
 80001da:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 80001dc:	60dc      	str	r4, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
 80001de:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 80001e0:	629c      	str	r4, [r3, #40]	; 0x28
  HAL_MspDeInit();
 80001e2:	f7ff fff1 	bl	80001c8 <HAL_MspDeInit>
}
 80001e6:	4620      	mov	r0, r4
 80001e8:	bd10      	pop	{r4, pc}
 80001ea:	bf00      	nop
 80001ec:	40021000 	.word	0x40021000

080001f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001f4:	4b0e      	ldr	r3, [pc, #56]	; (8000230 <HAL_InitTick+0x40>)
 80001f6:	7818      	ldrb	r0, [r3, #0]
 80001f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001fc:	fbb3 f3f0 	udiv	r3, r3, r0
 8000200:	4a0c      	ldr	r2, [pc, #48]	; (8000234 <HAL_InitTick+0x44>)
 8000202:	6810      	ldr	r0, [r2, #0]
 8000204:	fbb0 f0f3 	udiv	r0, r0, r3
 8000208:	f000 f894 	bl	8000334 <HAL_SYSTICK_Config>
 800020c:	b968      	cbnz	r0, 800022a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800020e:	2c0f      	cmp	r4, #15
 8000210:	d901      	bls.n	8000216 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000212:	2001      	movs	r0, #1
 8000214:	e00a      	b.n	800022c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000216:	2200      	movs	r2, #0
 8000218:	4621      	mov	r1, r4
 800021a:	f04f 30ff 	mov.w	r0, #4294967295
 800021e:	f000 f843 	bl	80002a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000222:	4b05      	ldr	r3, [pc, #20]	; (8000238 <HAL_InitTick+0x48>)
 8000224:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 8000226:	2000      	movs	r0, #0
 8000228:	e000      	b.n	800022c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800022a:	2001      	movs	r0, #1
}
 800022c:	bd10      	pop	{r4, pc}
 800022e:	bf00      	nop
 8000230:	20000000 	.word	0x20000000
 8000234:	20000008 	.word	0x20000008
 8000238:	20000004 	.word	0x20000004

0800023c <HAL_Init>:
{
 800023c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800023e:	4a07      	ldr	r2, [pc, #28]	; (800025c <HAL_Init+0x20>)
 8000240:	6813      	ldr	r3, [r2, #0]
 8000242:	f043 0310 	orr.w	r3, r3, #16
 8000246:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000248:	2003      	movs	r0, #3
 800024a:	f000 f81b 	bl	8000284 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800024e:	2002      	movs	r0, #2
 8000250:	f7ff ffce 	bl	80001f0 <HAL_InitTick>
  HAL_MspInit();
 8000254:	f002 fcc0 	bl	8002bd8 <HAL_MspInit>
}
 8000258:	2000      	movs	r0, #0
 800025a:	bd08      	pop	{r3, pc}
 800025c:	40022000 	.word	0x40022000

08000260 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000260:	4a03      	ldr	r2, [pc, #12]	; (8000270 <HAL_IncTick+0x10>)
 8000262:	6811      	ldr	r1, [r2, #0]
 8000264:	4b03      	ldr	r3, [pc, #12]	; (8000274 <HAL_IncTick+0x14>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	440b      	add	r3, r1
 800026a:	6013      	str	r3, [r2, #0]
}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	2000002c 	.word	0x2000002c
 8000274:	20000000 	.word	0x20000000

08000278 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000278:	4b01      	ldr	r3, [pc, #4]	; (8000280 <HAL_GetTick+0x8>)
 800027a:	6818      	ldr	r0, [r3, #0]
}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	2000002c 	.word	0x2000002c

08000284 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000284:	4a07      	ldr	r2, [pc, #28]	; (80002a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000286:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000288:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800028c:	041b      	lsls	r3, r3, #16
 800028e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000290:	0200      	lsls	r0, r0, #8
 8000292:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000296:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800029c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80002a0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80002a2:	4770      	bx	lr
 80002a4:	e000ed00 	.word	0xe000ed00

080002a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002a8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002aa:	4b19      	ldr	r3, [pc, #100]	; (8000310 <HAL_NVIC_SetPriority+0x68>)
 80002ac:	68db      	ldr	r3, [r3, #12]
 80002ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002b2:	f1c3 0c07 	rsb	ip, r3, #7
 80002b6:	f1bc 0f04 	cmp.w	ip, #4
 80002ba:	bf28      	it	cs
 80002bc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c0:	f103 0e04 	add.w	lr, r3, #4
 80002c4:	f1be 0f06 	cmp.w	lr, #6
 80002c8:	d918      	bls.n	80002fc <HAL_NVIC_SetPriority+0x54>
 80002ca:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	f04f 3eff 	mov.w	lr, #4294967295
 80002d0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80002d4:	ea21 010c 	bic.w	r1, r1, ip
 80002d8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002da:	fa0e f303 	lsl.w	r3, lr, r3
 80002de:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002e2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80002e4:	2800      	cmp	r0, #0
 80002e6:	db0b      	blt.n	8000300 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e8:	0109      	lsls	r1, r1, #4
 80002ea:	b2c9      	uxtb	r1, r1
 80002ec:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80002f0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80002f4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80002f8:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002fc:	2300      	movs	r3, #0
 80002fe:	e7e5      	b.n	80002cc <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000300:	f000 000f 	and.w	r0, r0, #15
 8000304:	0109      	lsls	r1, r1, #4
 8000306:	b2c9      	uxtb	r1, r1
 8000308:	4b02      	ldr	r3, [pc, #8]	; (8000314 <HAL_NVIC_SetPriority+0x6c>)
 800030a:	5419      	strb	r1, [r3, r0]
 800030c:	e7f4      	b.n	80002f8 <HAL_NVIC_SetPriority+0x50>
 800030e:	bf00      	nop
 8000310:	e000ed00 	.word	0xe000ed00
 8000314:	e000ed14 	.word	0xe000ed14

08000318 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000318:	2800      	cmp	r0, #0
 800031a:	db07      	blt.n	800032c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800031c:	f000 021f 	and.w	r2, r0, #31
 8000320:	0940      	lsrs	r0, r0, #5
 8000322:	2301      	movs	r3, #1
 8000324:	4093      	lsls	r3, r2
 8000326:	4a02      	ldr	r2, [pc, #8]	; (8000330 <HAL_NVIC_EnableIRQ+0x18>)
 8000328:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	e000e100 	.word	0xe000e100

08000334 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000334:	3801      	subs	r0, #1
 8000336:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800033a:	d20b      	bcs.n	8000354 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800033c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000340:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000342:	4a05      	ldr	r2, [pc, #20]	; (8000358 <HAL_SYSTICK_Config+0x24>)
 8000344:	21f0      	movs	r1, #240	; 0xf0
 8000346:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800034a:	2000      	movs	r0, #0
 800034c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800034e:	2207      	movs	r2, #7
 8000350:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000352:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000354:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000356:	4770      	bx	lr
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800035c:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800035e:	f001 fe65 	bl	800202c <HAL_SYSTICK_Callback>
}
 8000362:	bd08      	pop	{r3, pc}

08000364 <HAL_DMA_Abort>:
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000364:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000368:	2b02      	cmp	r3, #2
 800036a:	d006      	beq.n	800037a <HAL_DMA_Abort+0x16>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800036c:	2304      	movs	r3, #4
 800036e:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000370:	2300      	movs	r3, #0
 8000372:	f880 3020 	strb.w	r3, [r0, #32]
    
    return HAL_ERROR;
 8000376:	2001      	movs	r0, #1
 8000378:	4770      	bx	lr
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800037a:	6802      	ldr	r2, [r0, #0]
 800037c:	6813      	ldr	r3, [r2, #0]
 800037e:	f023 030e 	bic.w	r3, r3, #14
 8000382:	6013      	str	r3, [r2, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000384:	6802      	ldr	r2, [r0, #0]
 8000386:	6813      	ldr	r3, [r2, #0]
 8000388:	f023 0301 	bic.w	r3, r3, #1
 800038c:	6013      	str	r3, [r2, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800038e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000390:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000392:	2201      	movs	r2, #1
 8000394:	fa02 f303 	lsl.w	r3, r2, r3
 8000398:	604b      	str	r3, [r1, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800039a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800039e:	2300      	movs	r3, #0
 80003a0:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 80003a4:	4618      	mov	r0, r3
}
 80003a6:	4770      	bx	lr

080003a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80003a8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80003aa:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80003ae:	2b02      	cmp	r3, #2
 80003b0:	d003      	beq.n	80003ba <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80003b2:	2304      	movs	r3, #4
 80003b4:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80003b6:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80003b8:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80003ba:	6802      	ldr	r2, [r0, #0]
 80003bc:	6813      	ldr	r3, [r2, #0]
 80003be:	f023 030e 	bic.w	r3, r3, #14
 80003c2:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80003c4:	6802      	ldr	r2, [r0, #0]
 80003c6:	6813      	ldr	r3, [r2, #0]
 80003c8:	f023 0301 	bic.w	r3, r3, #1
 80003cc:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80003ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80003d0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80003d2:	2201      	movs	r2, #1
 80003d4:	fa02 f303 	lsl.w	r3, r2, r3
 80003d8:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80003da:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80003de:	2300      	movs	r3, #0
 80003e0:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80003e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80003e6:	b113      	cbz	r3, 80003ee <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 80003e8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80003ea:	2000      	movs	r0, #0
 80003ec:	e7e4      	b.n	80003b8 <HAL_DMA_Abort_IT+0x10>
 80003ee:	2000      	movs	r0, #0
 80003f0:	e7e2      	b.n	80003b8 <HAL_DMA_Abort_IT+0x10>
	...

080003f4 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80003f4:	4b04      	ldr	r3, [pc, #16]	; (8000408 <FLASH_Program_HalfWord+0x14>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80003fa:	4a04      	ldr	r2, [pc, #16]	; (800040c <FLASH_Program_HalfWord+0x18>)
 80003fc:	6913      	ldr	r3, [r2, #16]
 80003fe:	f043 0301 	orr.w	r3, r3, #1
 8000402:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000404:	8001      	strh	r1, [r0, #0]
}
 8000406:	4770      	bx	lr
 8000408:	20000030 	.word	0x20000030
 800040c:	40022000 	.word	0x40022000

08000410 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000410:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <FLASH_SetErrorCode+0x34>)
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	f013 0310 	ands.w	r3, r3, #16
 8000418:	d005      	beq.n	8000426 <FLASH_SetErrorCode+0x16>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800041a:	4a0b      	ldr	r2, [pc, #44]	; (8000448 <FLASH_SetErrorCode+0x38>)
 800041c:	69d3      	ldr	r3, [r2, #28]
 800041e:	f043 0302 	orr.w	r3, r3, #2
 8000422:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000424:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000426:	4a07      	ldr	r2, [pc, #28]	; (8000444 <FLASH_SetErrorCode+0x34>)
 8000428:	68d2      	ldr	r2, [r2, #12]
 800042a:	f012 0f04 	tst.w	r2, #4
 800042e:	d006      	beq.n	800043e <FLASH_SetErrorCode+0x2e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000430:	4905      	ldr	r1, [pc, #20]	; (8000448 <FLASH_SetErrorCode+0x38>)
 8000432:	69ca      	ldr	r2, [r1, #28]
 8000434:	f042 0201 	orr.w	r2, r2, #1
 8000438:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 800043a:	f043 0304 	orr.w	r3, r3, #4
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800043e:	4a01      	ldr	r2, [pc, #4]	; (8000444 <FLASH_SetErrorCode+0x34>)
 8000440:	60d3      	str	r3, [r2, #12]
}  
 8000442:	4770      	bx	lr
 8000444:	40022000 	.word	0x40022000
 8000448:	20000030 	.word	0x20000030

0800044c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800044c:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <HAL_FLASH_Unlock+0x2c>)
 800044e:	691b      	ldr	r3, [r3, #16]
 8000450:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000454:	d00b      	beq.n	800046e <HAL_FLASH_Unlock+0x22>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <HAL_FLASH_Unlock+0x2c>)
 8000458:	4a08      	ldr	r2, [pc, #32]	; (800047c <HAL_FLASH_Unlock+0x30>)
 800045a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800045c:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000460:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000462:	691b      	ldr	r3, [r3, #16]
 8000464:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000468:	d103      	bne.n	8000472 <HAL_FLASH_Unlock+0x26>
  HAL_StatusTypeDef status = HAL_OK;
 800046a:	2000      	movs	r0, #0
 800046c:	4770      	bx	lr
 800046e:	2000      	movs	r0, #0
 8000470:	4770      	bx	lr
      status = HAL_ERROR;
 8000472:	2001      	movs	r0, #1
}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40022000 	.word	0x40022000
 800047c:	45670123 	.word	0x45670123

08000480 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000480:	4a03      	ldr	r2, [pc, #12]	; (8000490 <HAL_FLASH_Lock+0x10>)
 8000482:	6913      	ldr	r3, [r2, #16]
 8000484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000488:	6113      	str	r3, [r2, #16]
}
 800048a:	2000      	movs	r0, #0
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	40022000 	.word	0x40022000

08000494 <FLASH_WaitForLastOperation>:
{
 8000494:	b538      	push	{r3, r4, r5, lr}
 8000496:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000498:	f7ff feee 	bl	8000278 <HAL_GetTick>
 800049c:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800049e:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <FLASH_WaitForLastOperation+0x5c>)
 80004a0:	68db      	ldr	r3, [r3, #12]
 80004a2:	f013 0f01 	tst.w	r3, #1
 80004a6:	d00a      	beq.n	80004be <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 80004a8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80004ac:	d0f7      	beq.n	800049e <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80004ae:	b124      	cbz	r4, 80004ba <FLASH_WaitForLastOperation+0x26>
 80004b0:	f7ff fee2 	bl	8000278 <HAL_GetTick>
 80004b4:	1b40      	subs	r0, r0, r5
 80004b6:	42a0      	cmp	r0, r4
 80004b8:	d9f1      	bls.n	800049e <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 80004ba:	2003      	movs	r0, #3
 80004bc:	e012      	b.n	80004e4 <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <FLASH_WaitForLastOperation+0x5c>)
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	f013 0f20 	tst.w	r3, #32
 80004c6:	d002      	beq.n	80004ce <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80004c8:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <FLASH_WaitForLastOperation+0x5c>)
 80004ca:	2220      	movs	r2, #32
 80004cc:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <FLASH_WaitForLastOperation+0x5c>)
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	f013 0f10 	tst.w	r3, #16
 80004d6:	d106      	bne.n	80004e6 <FLASH_WaitForLastOperation+0x52>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <FLASH_WaitForLastOperation+0x5c>)
 80004da:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80004dc:	f013 0f04 	tst.w	r3, #4
 80004e0:	d101      	bne.n	80004e6 <FLASH_WaitForLastOperation+0x52>
  return HAL_OK;
 80004e2:	2000      	movs	r0, #0
}
 80004e4:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 80004e6:	f7ff ff93 	bl	8000410 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80004ea:	2001      	movs	r0, #1
 80004ec:	e7fa      	b.n	80004e4 <FLASH_WaitForLastOperation+0x50>
 80004ee:	bf00      	nop
 80004f0:	40022000 	.word	0x40022000

080004f4 <HAL_FLASH_Program>:
{
 80004f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80004f8:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 80004fa:	4b24      	ldr	r3, [pc, #144]	; (800058c <HAL_FLASH_Program+0x98>)
 80004fc:	7e1b      	ldrb	r3, [r3, #24]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d041      	beq.n	8000586 <HAL_FLASH_Program+0x92>
 8000502:	4604      	mov	r4, r0
 8000504:	460f      	mov	r7, r1
 8000506:	4690      	mov	r8, r2
 8000508:	4b20      	ldr	r3, [pc, #128]	; (800058c <HAL_FLASH_Program+0x98>)
 800050a:	2201      	movs	r2, #1
 800050c:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800050e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000512:	f7ff ffbf 	bl	8000494 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000516:	4603      	mov	r3, r0
 8000518:	bb78      	cbnz	r0, 800057a <HAL_FLASH_Program+0x86>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800051a:	2c01      	cmp	r4, #1
 800051c:	d008      	beq.n	8000530 <HAL_FLASH_Program+0x3c>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800051e:	2c02      	cmp	r4, #2
 8000520:	d003      	beq.n	800052a <HAL_FLASH_Program+0x36>
      nbiterations = 4U;
 8000522:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8000526:	461c      	mov	r4, r3
 8000528:	e007      	b.n	800053a <HAL_FLASH_Program+0x46>
      nbiterations = 2U;
 800052a:	f04f 0902 	mov.w	r9, #2
 800052e:	e7fa      	b.n	8000526 <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 8000530:	f04f 0901 	mov.w	r9, #1
 8000534:	e7f7      	b.n	8000526 <HAL_FLASH_Program+0x32>
    for (index = 0U; index < nbiterations; index++)
 8000536:	3401      	adds	r4, #1
 8000538:	b2e4      	uxtb	r4, r4
 800053a:	454c      	cmp	r4, r9
 800053c:	d21d      	bcs.n	800057a <HAL_FLASH_Program+0x86>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800053e:	0121      	lsls	r1, r4, #4
 8000540:	f1c1 0220 	rsb	r2, r1, #32
 8000544:	f1a1 0320 	sub.w	r3, r1, #32
 8000548:	fa28 f101 	lsr.w	r1, r8, r1
 800054c:	fa06 f202 	lsl.w	r2, r6, r2
 8000550:	4311      	orrs	r1, r2
 8000552:	fa26 f303 	lsr.w	r3, r6, r3
 8000556:	4319      	orrs	r1, r3
 8000558:	b289      	uxth	r1, r1
 800055a:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 800055e:	f7ff ff49 	bl	80003f4 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000562:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000566:	f7ff ff95 	bl	8000494 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <HAL_FLASH_Program+0x9c>)
 800056c:	691d      	ldr	r5, [r3, #16]
 800056e:	f025 0501 	bic.w	r5, r5, #1
 8000572:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 8000574:	4603      	mov	r3, r0
 8000576:	2800      	cmp	r0, #0
 8000578:	d0dd      	beq.n	8000536 <HAL_FLASH_Program+0x42>
  __HAL_UNLOCK(&pFlash);
 800057a:	4a04      	ldr	r2, [pc, #16]	; (800058c <HAL_FLASH_Program+0x98>)
 800057c:	2100      	movs	r1, #0
 800057e:	7611      	strb	r1, [r2, #24]
}
 8000580:	4618      	mov	r0, r3
 8000582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8000586:	2302      	movs	r3, #2
 8000588:	e7fa      	b.n	8000580 <HAL_FLASH_Program+0x8c>
 800058a:	bf00      	nop
 800058c:	20000030 	.word	0x20000030
 8000590:	40022000 	.word	0x40022000

08000594 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <FLASH_MassErase+0x1c>)
 8000596:	2200      	movs	r2, #0
 8000598:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <FLASH_MassErase+0x20>)
 800059c:	691a      	ldr	r2, [r3, #16]
 800059e:	f042 0204 	orr.w	r2, r2, #4
 80005a2:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80005a4:	691a      	ldr	r2, [r3, #16]
 80005a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005aa:	611a      	str	r2, [r3, #16]
}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000030 	.word	0x20000030
 80005b4:	40022000 	.word	0x40022000

080005b8 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <FLASH_PageErase+0x1c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <FLASH_PageErase+0x20>)
 80005c0:	691a      	ldr	r2, [r3, #16]
 80005c2:	f042 0202 	orr.w	r2, r2, #2
 80005c6:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80005c8:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80005ca:	691a      	ldr	r2, [r3, #16]
 80005cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005d0:	611a      	str	r2, [r3, #16]
}
 80005d2:	4770      	bx	lr
 80005d4:	20000030 	.word	0x20000030
 80005d8:	40022000 	.word	0x40022000

080005dc <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 80005dc:	4b26      	ldr	r3, [pc, #152]	; (8000678 <HAL_FLASHEx_Erase+0x9c>)
 80005de:	7e1b      	ldrb	r3, [r3, #24]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d045      	beq.n	8000670 <HAL_FLASHEx_Erase+0x94>
{
 80005e4:	b570      	push	{r4, r5, r6, lr}
 80005e6:	4605      	mov	r5, r0
 80005e8:	460e      	mov	r6, r1
  __HAL_LOCK(&pFlash);
 80005ea:	4b23      	ldr	r3, [pc, #140]	; (8000678 <HAL_FLASHEx_Erase+0x9c>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80005f0:	6803      	ldr	r3, [r0, #0]
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d020      	beq.n	8000638 <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80005f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80005fa:	f7ff ff4b 	bl	8000494 <FLASH_WaitForLastOperation>
 80005fe:	bb88      	cbnz	r0, 8000664 <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFFU;
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8000606:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000608:	2101      	movs	r1, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800060a:	68aa      	ldr	r2, [r5, #8]
 800060c:	686b      	ldr	r3, [r5, #4]
 800060e:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
        for(address = pEraseInit->PageAddress;
 8000612:	42a3      	cmp	r3, r4
 8000614:	d927      	bls.n	8000666 <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 8000616:	4620      	mov	r0, r4
 8000618:	f7ff ffce 	bl	80005b8 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800061c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000620:	f7ff ff38 	bl	8000494 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000624:	4a15      	ldr	r2, [pc, #84]	; (800067c <HAL_FLASHEx_Erase+0xa0>)
 8000626:	6913      	ldr	r3, [r2, #16]
 8000628:	f023 0302 	bic.w	r3, r3, #2
 800062c:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 800062e:	4601      	mov	r1, r0
 8000630:	b9b0      	cbnz	r0, 8000660 <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 8000632:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8000636:	e7e8      	b.n	800060a <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000638:	f24c 3050 	movw	r0, #50000	; 0xc350
 800063c:	f7ff ff2a 	bl	8000494 <FLASH_WaitForLastOperation>
 8000640:	b108      	cbz	r0, 8000646 <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000642:	2101      	movs	r1, #1
 8000644:	e00f      	b.n	8000666 <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 8000646:	f7ff ffa5 	bl	8000594 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800064a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800064e:	f7ff ff21 	bl	8000494 <FLASH_WaitForLastOperation>
 8000652:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000654:	4a09      	ldr	r2, [pc, #36]	; (800067c <HAL_FLASHEx_Erase+0xa0>)
 8000656:	6913      	ldr	r3, [r2, #16]
 8000658:	f023 0304 	bic.w	r3, r3, #4
 800065c:	6113      	str	r3, [r2, #16]
 800065e:	e002      	b.n	8000666 <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 8000660:	6034      	str	r4, [r6, #0]
            break;
 8000662:	e000      	b.n	8000666 <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000664:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 8000666:	4b04      	ldr	r3, [pc, #16]	; (8000678 <HAL_FLASHEx_Erase+0x9c>)
 8000668:	2200      	movs	r2, #0
 800066a:	761a      	strb	r2, [r3, #24]
}
 800066c:	4608      	mov	r0, r1
 800066e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8000670:	2102      	movs	r1, #2
}
 8000672:	4608      	mov	r0, r1
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20000030 	.word	0x20000030
 800067c:	40022000 	.word	0x40022000

08000680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8000684:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000686:	e062      	b.n	800074e <HAL_GPIO_Init+0xce>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000688:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800068a:	005e      	lsls	r6, r3, #1
 800068c:	2403      	movs	r4, #3
 800068e:	40b4      	lsls	r4, r6
 8000690:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000694:	68cc      	ldr	r4, [r1, #12]
 8000696:	40b4      	lsls	r4, r6
 8000698:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800069a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800069c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800069e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80006a2:	684c      	ldr	r4, [r1, #4]
 80006a4:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80006a8:	409c      	lsls	r4, r3
 80006aa:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 80006ae:	6044      	str	r4, [r0, #4]
 80006b0:	e05e      	b.n	8000770 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80006b2:	08dd      	lsrs	r5, r3, #3
 80006b4:	3508      	adds	r5, #8
 80006b6:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006ba:	f003 0407 	and.w	r4, r3, #7
 80006be:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80006c2:	240f      	movs	r4, #15
 80006c4:	fa04 f40c 	lsl.w	r4, r4, ip
 80006c8:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80006cc:	690c      	ldr	r4, [r1, #16]
 80006ce:	fa04 f40c 	lsl.w	r4, r4, ip
 80006d2:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 80006d6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80006da:	e060      	b.n	800079e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80006dc:	2403      	movs	r4, #3
 80006de:	e000      	b.n	80006e2 <HAL_GPIO_Init+0x62>
 80006e0:	2400      	movs	r4, #0
 80006e2:	fa04 f40e 	lsl.w	r4, r4, lr
 80006e6:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 80006e8:	f10c 0c02 	add.w	ip, ip, #2
 80006ec:	4d4f      	ldr	r5, [pc, #316]	; (800082c <HAL_GPIO_Init+0x1ac>)
 80006ee:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006f2:	4c4f      	ldr	r4, [pc, #316]	; (8000830 <HAL_GPIO_Init+0x1b0>)
 80006f4:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80006f6:	43d4      	mvns	r4, r2
 80006f8:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80006fc:	684f      	ldr	r7, [r1, #4]
 80006fe:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000702:	d001      	beq.n	8000708 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8000704:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8000708:	4d49      	ldr	r5, [pc, #292]	; (8000830 <HAL_GPIO_Init+0x1b0>)
 800070a:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 800070c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800070e:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000712:	684f      	ldr	r7, [r1, #4]
 8000714:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000718:	d001      	beq.n	800071e <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 800071a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 800071e:	4d44      	ldr	r5, [pc, #272]	; (8000830 <HAL_GPIO_Init+0x1b0>)
 8000720:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000722:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8000724:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000728:	684f      	ldr	r7, [r1, #4]
 800072a:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800072e:	d001      	beq.n	8000734 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8000730:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8000734:	4d3e      	ldr	r5, [pc, #248]	; (8000830 <HAL_GPIO_Init+0x1b0>)
 8000736:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8000738:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 800073a:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800073c:	684e      	ldr	r6, [r1, #4]
 800073e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000742:	d001      	beq.n	8000748 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8000744:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8000748:	4a39      	ldr	r2, [pc, #228]	; (8000830 <HAL_GPIO_Init+0x1b0>)
 800074a:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 800074c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800074e:	680a      	ldr	r2, [r1, #0]
 8000750:	fa32 f403 	lsrs.w	r4, r2, r3
 8000754:	d068      	beq.n	8000828 <HAL_GPIO_Init+0x1a8>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000756:	f04f 0c01 	mov.w	ip, #1
 800075a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800075e:	ea1c 0202 	ands.w	r2, ip, r2
 8000762:	d0f3      	beq.n	800074c <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000764:	684c      	ldr	r4, [r1, #4]
 8000766:	f004 0403 	and.w	r4, r4, #3
 800076a:	3c01      	subs	r4, #1
 800076c:	2c01      	cmp	r4, #1
 800076e:	d98b      	bls.n	8000688 <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000770:	684c      	ldr	r4, [r1, #4]
 8000772:	f004 0403 	and.w	r4, r4, #3
 8000776:	2c03      	cmp	r4, #3
 8000778:	d00c      	beq.n	8000794 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800077a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800077c:	005d      	lsls	r5, r3, #1
 800077e:	f04f 0c03 	mov.w	ip, #3
 8000782:	fa0c fc05 	lsl.w	ip, ip, r5
 8000786:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800078a:	688c      	ldr	r4, [r1, #8]
 800078c:	40ac      	lsls	r4, r5
 800078e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8000792:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000794:	684c      	ldr	r4, [r1, #4]
 8000796:	f004 0403 	and.w	r4, r4, #3
 800079a:	2c02      	cmp	r4, #2
 800079c:	d089      	beq.n	80006b2 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 800079e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80007a0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80007a4:	f04f 0c03 	mov.w	ip, #3
 80007a8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80007ac:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007b0:	684c      	ldr	r4, [r1, #4]
 80007b2:	f004 0403 	and.w	r4, r4, #3
 80007b6:	fa04 f40e 	lsl.w	r4, r4, lr
 80007ba:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80007be:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80007c0:	684c      	ldr	r4, [r1, #4]
 80007c2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 80007c6:	d0c1      	beq.n	800074c <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c8:	4c1a      	ldr	r4, [pc, #104]	; (8000834 <HAL_GPIO_Init+0x1b4>)
 80007ca:	69a5      	ldr	r5, [r4, #24]
 80007cc:	f045 0501 	orr.w	r5, r5, #1
 80007d0:	61a5      	str	r5, [r4, #24]
 80007d2:	69a4      	ldr	r4, [r4, #24]
 80007d4:	f004 0401 	and.w	r4, r4, #1
 80007d8:	9401      	str	r4, [sp, #4]
 80007da:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80007dc:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80007e0:	f10c 0502 	add.w	r5, ip, #2
 80007e4:	4c11      	ldr	r4, [pc, #68]	; (800082c <HAL_GPIO_Init+0x1ac>)
 80007e6:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80007ea:	f003 0403 	and.w	r4, r3, #3
 80007ee:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80007f2:	240f      	movs	r4, #15
 80007f4:	fa04 f40e 	lsl.w	r4, r4, lr
 80007f8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80007fc:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8000800:	f43f af6e 	beq.w	80006e0 <HAL_GPIO_Init+0x60>
 8000804:	4c0c      	ldr	r4, [pc, #48]	; (8000838 <HAL_GPIO_Init+0x1b8>)
 8000806:	42a0      	cmp	r0, r4
 8000808:	d00a      	beq.n	8000820 <HAL_GPIO_Init+0x1a0>
 800080a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800080e:	42a0      	cmp	r0, r4
 8000810:	d008      	beq.n	8000824 <HAL_GPIO_Init+0x1a4>
 8000812:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000816:	42a0      	cmp	r0, r4
 8000818:	f43f af60 	beq.w	80006dc <HAL_GPIO_Init+0x5c>
 800081c:	2405      	movs	r4, #5
 800081e:	e760      	b.n	80006e2 <HAL_GPIO_Init+0x62>
 8000820:	2401      	movs	r4, #1
 8000822:	e75e      	b.n	80006e2 <HAL_GPIO_Init+0x62>
 8000824:	2402      	movs	r4, #2
 8000826:	e75c      	b.n	80006e2 <HAL_GPIO_Init+0x62>
  }
}
 8000828:	b003      	add	sp, #12
 800082a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082c:	40010000 	.word	0x40010000
 8000830:	40010400 	.word	0x40010400
 8000834:	40021000 	.word	0x40021000
 8000838:	48000400 	.word	0x48000400

0800083c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800083c:	b10a      	cbz	r2, 8000842 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800083e:	6181      	str	r1, [r0, #24]
 8000840:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000842:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000844:	4770      	bx	lr
	...

08000848 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8000848:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800084a:	4a36      	ldr	r2, [pc, #216]	; (8000924 <HAL_RCC_DeInit+0xdc>)
 800084c:	6813      	ldr	r3, [r2, #0]
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	6013      	str	r3, [r2, #0]

  /* Insure HSIRDY bit is set before writing default HSITRIM value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8000854:	f7ff fd10 	bl	8000278 <HAL_GetTick>
 8000858:	4604      	mov	r4, r0

  /* Wait till HSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800085a:	4b32      	ldr	r3, [pc, #200]	; (8000924 <HAL_RCC_DeInit+0xdc>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f013 0f02 	tst.w	r3, #2
 8000862:	d107      	bne.n	8000874 <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000864:	f7ff fd08 	bl	8000278 <HAL_GetTick>
 8000868:	1b00      	subs	r0, r0, r4
 800086a:	2802      	cmp	r0, #2
 800086c:	d9f5      	bls.n	800085a <HAL_RCC_DeInit+0x12>
    {
      return HAL_TIMEOUT;
 800086e:	2403      	movs	r4, #3

  /* Reset all CSR flags */
  __HAL_RCC_CLEAR_RESET_FLAGS();

  return HAL_OK;
}
 8000870:	4620      	mov	r0, r4
 8000872:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, RCC_CR_HSITRIM_4);
 8000874:	4a2b      	ldr	r2, [pc, #172]	; (8000924 <HAL_RCC_DeInit+0xdc>)
 8000876:	6813      	ldr	r3, [r2, #0]
 8000878:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800087c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000880:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2 | RCC_CFGR_MCO);
 8000882:	6851      	ldr	r1, [r2, #4]
 8000884:	4b28      	ldr	r3, [pc, #160]	; (8000928 <HAL_RCC_DeInit+0xe0>)
 8000886:	400b      	ands	r3, r1
 8000888:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 800088a:	f7ff fcf5 	bl	8000278 <HAL_GetTick>
 800088e:	4604      	mov	r4, r0
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8000890:	4b24      	ldr	r3, [pc, #144]	; (8000924 <HAL_RCC_DeInit+0xdc>)
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f013 0f0c 	tst.w	r3, #12
 8000898:	d008      	beq.n	80008ac <HAL_RCC_DeInit+0x64>
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800089a:	f7ff fced 	bl	8000278 <HAL_GetTick>
 800089e:	1b00      	subs	r0, r0, r4
 80008a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80008a4:	4298      	cmp	r0, r3
 80008a6:	d9f3      	bls.n	8000890 <HAL_RCC_DeInit+0x48>
      return HAL_TIMEOUT;
 80008a8:	2403      	movs	r4, #3
 80008aa:	e7e1      	b.n	8000870 <HAL_RCC_DeInit+0x28>
  SystemCoreClock = HSI_VALUE;
 80008ac:	4b1f      	ldr	r3, [pc, #124]	; (800092c <HAL_RCC_DeInit+0xe4>)
 80008ae:	4a20      	ldr	r2, [pc, #128]	; (8000930 <HAL_RCC_DeInit+0xe8>)
 80008b0:	601a      	str	r2, [r3, #0]
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <HAL_RCC_DeInit+0xec>)
 80008b4:	6818      	ldr	r0, [r3, #0]
 80008b6:	f7ff fc9b 	bl	80001f0 <HAL_InitTick>
 80008ba:	4604      	mov	r4, r0
 80008bc:	b108      	cbz	r0, 80008c2 <HAL_RCC_DeInit+0x7a>
    return HAL_ERROR;
 80008be:	2401      	movs	r4, #1
 80008c0:	e7d6      	b.n	8000870 <HAL_RCC_DeInit+0x28>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
 80008c2:	4a18      	ldr	r2, [pc, #96]	; (8000924 <HAL_RCC_DeInit+0xdc>)
 80008c4:	6813      	ldr	r3, [r2, #0]
 80008c6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80008ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008ce:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80008d0:	6813      	ldr	r3, [r2, #0]
 80008d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008d6:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80008d8:	f7ff fcce 	bl	8000278 <HAL_GetTick>
 80008dc:	4605      	mov	r5, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <HAL_RCC_DeInit+0xdc>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80008e6:	d006      	beq.n	80008f6 <HAL_RCC_DeInit+0xae>
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80008e8:	f7ff fcc6 	bl	8000278 <HAL_GetTick>
 80008ec:	1b40      	subs	r0, r0, r5
 80008ee:	2802      	cmp	r0, #2
 80008f0:	d9f5      	bls.n	80008de <HAL_RCC_DeInit+0x96>
      return HAL_TIMEOUT;
 80008f2:	2403      	movs	r4, #3
 80008f4:	e7bc      	b.n	8000870 <HAL_RCC_DeInit+0x28>
  CLEAR_REG(RCC->CFGR);
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <HAL_RCC_DeInit+0xdc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
  CLEAR_REG(RCC->CFGR2);
 80008fc:	62da      	str	r2, [r3, #44]	; 0x2c
  CLEAR_REG(RCC->CFGR3);
 80008fe:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8000900:	6899      	ldr	r1, [r3, #8]
 8000902:	f441 011f 	orr.w	r1, r1, #10420224	; 0x9f0000
 8000906:	6099      	str	r1, [r3, #8]
  CLEAR_REG(RCC->CIR);
 8000908:	609a      	str	r2, [r3, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800090a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800090e:	fa92 f2a2 	rbit	r2, r2
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8000912:	fab2 f282 	clz	r2, r2
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_RCC_DeInit+0xf0>)
 8000918:	4413      	add	r3, r2
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	2201      	movs	r2, #1
 800091e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8000920:	e7a6      	b.n	8000870 <HAL_RCC_DeInit+0x28>
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000
 8000928:	f8ffc00c 	.word	0xf8ffc00c
 800092c:	20000008 	.word	0x20000008
 8000930:	007a1200 	.word	0x007a1200
 8000934:	20000004 	.word	0x20000004
 8000938:	10908120 	.word	0x10908120

0800093c <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800093c:	2800      	cmp	r0, #0
 800093e:	f000 8301 	beq.w	8000f44 <HAL_RCC_OscConfig+0x608>
{
 8000942:	b570      	push	{r4, r5, r6, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000948:	6803      	ldr	r3, [r0, #0]
 800094a:	f013 0f01 	tst.w	r3, #1
 800094e:	d03b      	beq.n	80009c8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000950:	4bb5      	ldr	r3, [pc, #724]	; (8000c28 <HAL_RCC_OscConfig+0x2ec>)
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f003 030c 	and.w	r3, r3, #12
 8000958:	2b04      	cmp	r3, #4
 800095a:	d01e      	beq.n	800099a <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800095c:	4bb2      	ldr	r3, [pc, #712]	; (8000c28 <HAL_RCC_OscConfig+0x2ec>)
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f003 030c 	and.w	r3, r3, #12
 8000964:	2b08      	cmp	r3, #8
 8000966:	d013      	beq.n	8000990 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000968:	6863      	ldr	r3, [r4, #4]
 800096a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800096e:	d068      	beq.n	8000a42 <HAL_RCC_OscConfig+0x106>
 8000970:	2b00      	cmp	r3, #0
 8000972:	f040 8092 	bne.w	8000a9a <HAL_RCC_OscConfig+0x15e>
 8000976:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800097a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	e05d      	b.n	8000a4c <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000990:	4ba5      	ldr	r3, [pc, #660]	; (8000c28 <HAL_RCC_OscConfig+0x2ec>)
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000998:	d0e6      	beq.n	8000968 <HAL_RCC_OscConfig+0x2c>
 800099a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800099e:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009a2:	4ba1      	ldr	r3, [pc, #644]	; (8000c28 <HAL_RCC_OscConfig+0x2ec>)
 80009a4:	6819      	ldr	r1, [r3, #0]
 80009a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009aa:	fa93 f3a3 	rbit	r3, r3
 80009ae:	fab3 f383 	clz	r3, r3
 80009b2:	f003 031f 	and.w	r3, r3, #31
 80009b6:	2201      	movs	r2, #1
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	420b      	tst	r3, r1
 80009be:	d003      	beq.n	80009c8 <HAL_RCC_OscConfig+0x8c>
 80009c0:	6863      	ldr	r3, [r4, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	f000 82c0 	beq.w	8000f48 <HAL_RCC_OscConfig+0x60c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009c8:	6823      	ldr	r3, [r4, #0]
 80009ca:	f013 0f02 	tst.w	r3, #2
 80009ce:	f000 80c5 	beq.w	8000b5c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80009d2:	4b95      	ldr	r3, [pc, #596]	; (8000c28 <HAL_RCC_OscConfig+0x2ec>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f013 0f0c 	tst.w	r3, #12
 80009da:	f000 809c 	beq.w	8000b16 <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80009de:	4b92      	ldr	r3, [pc, #584]	; (8000c28 <HAL_RCC_OscConfig+0x2ec>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f003 030c 	and.w	r3, r3, #12
 80009e6:	2b08      	cmp	r3, #8
 80009e8:	f000 808f 	beq.w	8000b0a <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009ec:	6923      	ldr	r3, [r4, #16]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 80f2 	beq.w	8000bd8 <HAL_RCC_OscConfig+0x29c>
 80009f4:	2201      	movs	r2, #1
 80009f6:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009fa:	fab3 f383 	clz	r3, r3
 80009fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a0a:	f7ff fc35 	bl	8000278 <HAL_GetTick>
 8000a0e:	4605      	mov	r5, r0
 8000a10:	2302      	movs	r3, #2
 8000a12:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a16:	4b84      	ldr	r3, [pc, #528]	; (8000c28 <HAL_RCC_OscConfig+0x2ec>)
 8000a18:	6819      	ldr	r1, [r3, #0]
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	fa93 f3a3 	rbit	r3, r3
 8000a20:	fab3 f383 	clz	r3, r3
 8000a24:	f003 031f 	and.w	r3, r3, #31
 8000a28:	2201      	movs	r2, #1
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	420b      	tst	r3, r1
 8000a30:	f040 80c3 	bne.w	8000bba <HAL_RCC_OscConfig+0x27e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a34:	f7ff fc20 	bl	8000278 <HAL_GetTick>
 8000a38:	1b40      	subs	r0, r0, r5
 8000a3a:	2802      	cmp	r0, #2
 8000a3c:	d9e8      	bls.n	8000a10 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8000a3e:	2003      	movs	r0, #3
 8000a40:	e28b      	b.n	8000f5a <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a42:	4a79      	ldr	r2, [pc, #484]	; (8000c28 <HAL_RCC_OscConfig+0x2ec>)
 8000a44:	6813      	ldr	r3, [r2, #0]
 8000a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a4a:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000a4c:	4a76      	ldr	r2, [pc, #472]	; (8000c28 <HAL_RCC_OscConfig+0x2ec>)
 8000a4e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000a50:	f023 030f 	bic.w	r3, r3, #15
 8000a54:	68a1      	ldr	r1, [r4, #8]
 8000a56:	430b      	orrs	r3, r1
 8000a58:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a5a:	6863      	ldr	r3, [r4, #4]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d036      	beq.n	8000ace <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8000a60:	f7ff fc0a 	bl	8000278 <HAL_GetTick>
 8000a64:	4605      	mov	r5, r0
 8000a66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a6a:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a6e:	4b6e      	ldr	r3, [pc, #440]	; (8000c28 <HAL_RCC_OscConfig+0x2ec>)
 8000a70:	6819      	ldr	r1, [r3, #0]
 8000a72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a76:	fa93 f3a3 	rbit	r3, r3
 8000a7a:	fab3 f383 	clz	r3, r3
 8000a7e:	f003 031f 	and.w	r3, r3, #31
 8000a82:	2201      	movs	r2, #1
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	420b      	tst	r3, r1
 8000a8a:	d19d      	bne.n	80009c8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a8c:	f7ff fbf4 	bl	8000278 <HAL_GetTick>
 8000a90:	1b40      	subs	r0, r0, r5
 8000a92:	2864      	cmp	r0, #100	; 0x64
 8000a94:	d9e7      	bls.n	8000a66 <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8000a96:	2003      	movs	r0, #3
 8000a98:	e25f      	b.n	8000f5a <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a9e:	d009      	beq.n	8000ab4 <HAL_RCC_OscConfig+0x178>
 8000aa0:	4b61      	ldr	r3, [pc, #388]	; (8000c28 <HAL_RCC_OscConfig+0x2ec>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e7cb      	b.n	8000a4c <HAL_RCC_OscConfig+0x110>
 8000ab4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ab8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	e7be      	b.n	8000a4c <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000ace:	f7ff fbd3 	bl	8000278 <HAL_GetTick>
 8000ad2:	4605      	mov	r5, r0
 8000ad4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ad8:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000adc:	4b52      	ldr	r3, [pc, #328]	; (8000c28 <HAL_RCC_OscConfig+0x2ec>)
 8000ade:	6819      	ldr	r1, [r3, #0]
 8000ae0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ae4:	fa93 f3a3 	rbit	r3, r3
 8000ae8:	fab3 f383 	clz	r3, r3
 8000aec:	f003 031f 	and.w	r3, r3, #31
 8000af0:	2201      	movs	r2, #1
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	420b      	tst	r3, r1
 8000af8:	f43f af66 	beq.w	80009c8 <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000afc:	f7ff fbbc 	bl	8000278 <HAL_GetTick>
 8000b00:	1b40      	subs	r0, r0, r5
 8000b02:	2864      	cmp	r0, #100	; 0x64
 8000b04:	d9e6      	bls.n	8000ad4 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8000b06:	2003      	movs	r0, #3
 8000b08:	e227      	b.n	8000f5a <HAL_RCC_OscConfig+0x61e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b0a:	4b47      	ldr	r3, [pc, #284]	; (8000c28 <HAL_RCC_OscConfig+0x2ec>)
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000b12:	f47f af6b 	bne.w	80009ec <HAL_RCC_OscConfig+0xb0>
 8000b16:	2302      	movs	r3, #2
 8000b18:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b1c:	4b42      	ldr	r3, [pc, #264]	; (8000c28 <HAL_RCC_OscConfig+0x2ec>)
 8000b1e:	6819      	ldr	r1, [r3, #0]
 8000b20:	2302      	movs	r3, #2
 8000b22:	fa93 f3a3 	rbit	r3, r3
 8000b26:	fab3 f383 	clz	r3, r3
 8000b2a:	f003 031f 	and.w	r3, r3, #31
 8000b2e:	2201      	movs	r2, #1
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	420b      	tst	r3, r1
 8000b36:	d003      	beq.n	8000b40 <HAL_RCC_OscConfig+0x204>
 8000b38:	6923      	ldr	r3, [r4, #16]
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	f040 8206 	bne.w	8000f4c <HAL_RCC_OscConfig+0x610>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b40:	4839      	ldr	r0, [pc, #228]	; (8000c28 <HAL_RCC_OscConfig+0x2ec>)
 8000b42:	6803      	ldr	r3, [r0, #0]
 8000b44:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b48:	6961      	ldr	r1, [r4, #20]
 8000b4a:	22f8      	movs	r2, #248	; 0xf8
 8000b4c:	fa92 f2a2 	rbit	r2, r2
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	fa01 f202 	lsl.w	r2, r1, r2
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b5c:	6823      	ldr	r3, [r4, #0]
 8000b5e:	f013 0f08 	tst.w	r3, #8
 8000b62:	f000 808d 	beq.w	8000c80 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b66:	69a3      	ldr	r3, [r4, #24]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d061      	beq.n	8000c30 <HAL_RCC_OscConfig+0x2f4>
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b72:	fab2 f282 	clz	r2, r2
 8000b76:	4b2d      	ldr	r3, [pc, #180]	; (8000c2c <HAL_RCC_OscConfig+0x2f0>)
 8000b78:	4413      	add	r3, r2
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b7e:	f7ff fb7b 	bl	8000278 <HAL_GetTick>
 8000b82:	4605      	mov	r5, r0
 8000b84:	2302      	movs	r3, #2
 8000b86:	fa93 f2a3 	rbit	r2, r3
 8000b8a:	fa93 f2a3 	rbit	r2, r3
 8000b8e:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b92:	4a25      	ldr	r2, [pc, #148]	; (8000c28 <HAL_RCC_OscConfig+0x2ec>)
 8000b94:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000b96:	fa93 f3a3 	rbit	r3, r3
 8000b9a:	fab3 f383 	clz	r3, r3
 8000b9e:	f003 031f 	and.w	r3, r3, #31
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	420b      	tst	r3, r1
 8000baa:	d169      	bne.n	8000c80 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bac:	f7ff fb64 	bl	8000278 <HAL_GetTick>
 8000bb0:	1b40      	subs	r0, r0, r5
 8000bb2:	2802      	cmp	r0, #2
 8000bb4:	d9e6      	bls.n	8000b84 <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 8000bb6:	2003      	movs	r0, #3
 8000bb8:	e1cf      	b.n	8000f5a <HAL_RCC_OscConfig+0x61e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bba:	481b      	ldr	r0, [pc, #108]	; (8000c28 <HAL_RCC_OscConfig+0x2ec>)
 8000bbc:	6803      	ldr	r3, [r0, #0]
 8000bbe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000bc2:	6961      	ldr	r1, [r4, #20]
 8000bc4:	22f8      	movs	r2, #248	; 0xf8
 8000bc6:	fa92 f2a2 	rbit	r2, r2
 8000bca:	fab2 f282 	clz	r2, r2
 8000bce:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	6003      	str	r3, [r0, #0]
 8000bd6:	e7c1      	b.n	8000b5c <HAL_RCC_OscConfig+0x220>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8000bde:	fab3 f383 	clz	r3, r3
 8000be2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000be6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bf0:	f7ff fb42 	bl	8000278 <HAL_GetTick>
 8000bf4:	4605      	mov	r5, r0
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_RCC_OscConfig+0x2ec>)
 8000bfe:	6819      	ldr	r1, [r3, #0]
 8000c00:	2302      	movs	r3, #2
 8000c02:	fa93 f3a3 	rbit	r3, r3
 8000c06:	fab3 f383 	clz	r3, r3
 8000c0a:	f003 031f 	and.w	r3, r3, #31
 8000c0e:	2201      	movs	r2, #1
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	420b      	tst	r3, r1
 8000c16:	d0a1      	beq.n	8000b5c <HAL_RCC_OscConfig+0x220>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c18:	f7ff fb2e 	bl	8000278 <HAL_GetTick>
 8000c1c:	1b40      	subs	r0, r0, r5
 8000c1e:	2802      	cmp	r0, #2
 8000c20:	d9e9      	bls.n	8000bf6 <HAL_RCC_OscConfig+0x2ba>
            return HAL_TIMEOUT;
 8000c22:	2003      	movs	r0, #3
 8000c24:	e199      	b.n	8000f5a <HAL_RCC_OscConfig+0x61e>
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	10908120 	.word	0x10908120
 8000c30:	2201      	movs	r2, #1
 8000c32:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	4bb7      	ldr	r3, [pc, #732]	; (8000f18 <HAL_RCC_OscConfig+0x5dc>)
 8000c3c:	4413      	add	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c44:	f7ff fb18 	bl	8000278 <HAL_GetTick>
 8000c48:	4605      	mov	r5, r0
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	fa93 f2a3 	rbit	r2, r3
 8000c50:	fa93 f2a3 	rbit	r2, r3
 8000c54:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c58:	4ab0      	ldr	r2, [pc, #704]	; (8000f1c <HAL_RCC_OscConfig+0x5e0>)
 8000c5a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000c5c:	fa93 f3a3 	rbit	r3, r3
 8000c60:	fab3 f383 	clz	r3, r3
 8000c64:	f003 031f 	and.w	r3, r3, #31
 8000c68:	2201      	movs	r2, #1
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	420b      	tst	r3, r1
 8000c70:	d006      	beq.n	8000c80 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c72:	f7ff fb01 	bl	8000278 <HAL_GetTick>
 8000c76:	1b40      	subs	r0, r0, r5
 8000c78:	2802      	cmp	r0, #2
 8000c7a:	d9e6      	bls.n	8000c4a <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	e16c      	b.n	8000f5a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c80:	6823      	ldr	r3, [r4, #0]
 8000c82:	f013 0f04 	tst.w	r3, #4
 8000c86:	f000 80a9 	beq.w	8000ddc <HAL_RCC_OscConfig+0x4a0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c8a:	4ba4      	ldr	r3, [pc, #656]	; (8000f1c <HAL_RCC_OscConfig+0x5e0>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000c92:	d120      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c94:	4ba1      	ldr	r3, [pc, #644]	; (8000f1c <HAL_RCC_OscConfig+0x5e0>)
 8000c96:	69da      	ldr	r2, [r3, #28]
 8000c98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c9c:	61da      	str	r2, [r3, #28]
 8000c9e:	69db      	ldr	r3, [r3, #28]
 8000ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	9301      	str	r3, [sp, #4]
 8000ca6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ca8:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000caa:	4b9d      	ldr	r3, [pc, #628]	; (8000f20 <HAL_RCC_OscConfig+0x5e4>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000cb2:	d012      	beq.n	8000cda <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cb4:	68e3      	ldr	r3, [r4, #12]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d023      	beq.n	8000d02 <HAL_RCC_OscConfig+0x3c6>
 8000cba:	bb73      	cbnz	r3, 8000d1a <HAL_RCC_OscConfig+0x3de>
 8000cbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000cc0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000cc4:	6a1a      	ldr	r2, [r3, #32]
 8000cc6:	f022 0201 	bic.w	r2, r2, #1
 8000cca:	621a      	str	r2, [r3, #32]
 8000ccc:	6a1a      	ldr	r2, [r3, #32]
 8000cce:	f022 0204 	bic.w	r2, r2, #4
 8000cd2:	621a      	str	r2, [r3, #32]
 8000cd4:	e01a      	b.n	8000d0c <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 8000cd6:	2500      	movs	r5, #0
 8000cd8:	e7e7      	b.n	8000caa <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cda:	4a91      	ldr	r2, [pc, #580]	; (8000f20 <HAL_RCC_OscConfig+0x5e4>)
 8000cdc:	6813      	ldr	r3, [r2, #0]
 8000cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000ce4:	f7ff fac8 	bl	8000278 <HAL_GetTick>
 8000ce8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cea:	4b8d      	ldr	r3, [pc, #564]	; (8000f20 <HAL_RCC_OscConfig+0x5e4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000cf2:	d1df      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cf4:	f7ff fac0 	bl	8000278 <HAL_GetTick>
 8000cf8:	1b80      	subs	r0, r0, r6
 8000cfa:	2864      	cmp	r0, #100	; 0x64
 8000cfc:	d9f5      	bls.n	8000cea <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 8000cfe:	2003      	movs	r0, #3
 8000d00:	e12b      	b.n	8000f5a <HAL_RCC_OscConfig+0x61e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d02:	4a86      	ldr	r2, [pc, #536]	; (8000f1c <HAL_RCC_OscConfig+0x5e0>)
 8000d04:	6a13      	ldr	r3, [r2, #32]
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d0c:	68e3      	ldr	r3, [r4, #12]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d03c      	beq.n	8000d8c <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d12:	f7ff fab1 	bl	8000278 <HAL_GetTick>
 8000d16:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d18:	e02b      	b.n	8000d72 <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d1a:	2b05      	cmp	r3, #5
 8000d1c:	d009      	beq.n	8000d32 <HAL_RCC_OscConfig+0x3f6>
 8000d1e:	4b7f      	ldr	r3, [pc, #508]	; (8000f1c <HAL_RCC_OscConfig+0x5e0>)
 8000d20:	6a1a      	ldr	r2, [r3, #32]
 8000d22:	f022 0201 	bic.w	r2, r2, #1
 8000d26:	621a      	str	r2, [r3, #32]
 8000d28:	6a1a      	ldr	r2, [r3, #32]
 8000d2a:	f022 0204 	bic.w	r2, r2, #4
 8000d2e:	621a      	str	r2, [r3, #32]
 8000d30:	e7ec      	b.n	8000d0c <HAL_RCC_OscConfig+0x3d0>
 8000d32:	4b7a      	ldr	r3, [pc, #488]	; (8000f1c <HAL_RCC_OscConfig+0x5e0>)
 8000d34:	6a1a      	ldr	r2, [r3, #32]
 8000d36:	f042 0204 	orr.w	r2, r2, #4
 8000d3a:	621a      	str	r2, [r3, #32]
 8000d3c:	6a1a      	ldr	r2, [r3, #32]
 8000d3e:	f042 0201 	orr.w	r2, r2, #1
 8000d42:	621a      	str	r2, [r3, #32]
 8000d44:	e7e2      	b.n	8000d0c <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d46:	4b75      	ldr	r3, [pc, #468]	; (8000f1c <HAL_RCC_OscConfig+0x5e0>)
 8000d48:	6a19      	ldr	r1, [r3, #32]
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	fa93 f3a3 	rbit	r3, r3
 8000d50:	fab3 f383 	clz	r3, r3
 8000d54:	f003 031f 	and.w	r3, r3, #31
 8000d58:	2201      	movs	r2, #1
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	4219      	tst	r1, r3
 8000d60:	d13b      	bne.n	8000dda <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d62:	f7ff fa89 	bl	8000278 <HAL_GetTick>
 8000d66:	1b80      	subs	r0, r0, r6
 8000d68:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d6c:	4298      	cmp	r0, r3
 8000d6e:	f200 80ef 	bhi.w	8000f50 <HAL_RCC_OscConfig+0x614>
 8000d72:	2302      	movs	r3, #2
 8000d74:	fa93 f2a3 	rbit	r2, r3
 8000d78:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d1e2      	bne.n	8000d46 <HAL_RCC_OscConfig+0x40a>
 8000d80:	2302      	movs	r3, #2
 8000d82:	fa93 f3a3 	rbit	r3, r3
 8000d86:	4b65      	ldr	r3, [pc, #404]	; (8000f1c <HAL_RCC_OscConfig+0x5e0>)
 8000d88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000d8a:	e7de      	b.n	8000d4a <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d8c:	f7ff fa74 	bl	8000278 <HAL_GetTick>
 8000d90:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d92:	e015      	b.n	8000dc0 <HAL_RCC_OscConfig+0x484>
 8000d94:	4b61      	ldr	r3, [pc, #388]	; (8000f1c <HAL_RCC_OscConfig+0x5e0>)
 8000d96:	6a19      	ldr	r1, [r3, #32]
 8000d98:	2302      	movs	r3, #2
 8000d9a:	fa93 f3a3 	rbit	r3, r3
 8000d9e:	fab3 f383 	clz	r3, r3
 8000da2:	f003 031f 	and.w	r3, r3, #31
 8000da6:	2201      	movs	r2, #1
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	4219      	tst	r1, r3
 8000dae:	d014      	beq.n	8000dda <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000db0:	f7ff fa62 	bl	8000278 <HAL_GetTick>
 8000db4:	1b80      	subs	r0, r0, r6
 8000db6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000dba:	4298      	cmp	r0, r3
 8000dbc:	f200 80ca 	bhi.w	8000f54 <HAL_RCC_OscConfig+0x618>
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	fa93 f2a3 	rbit	r2, r3
 8000dc6:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1e2      	bne.n	8000d94 <HAL_RCC_OscConfig+0x458>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	fa93 f3a3 	rbit	r3, r3
 8000dd4:	4b51      	ldr	r3, [pc, #324]	; (8000f1c <HAL_RCC_OscConfig+0x5e0>)
 8000dd6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000dd8:	e7de      	b.n	8000d98 <HAL_RCC_OscConfig+0x45c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000dda:	bbb5      	cbnz	r5, 8000e4a <HAL_RCC_OscConfig+0x50e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ddc:	69e3      	ldr	r3, [r4, #28]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f000 80ba 	beq.w	8000f58 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000de4:	4a4d      	ldr	r2, [pc, #308]	; (8000f1c <HAL_RCC_OscConfig+0x5e0>)
 8000de6:	6852      	ldr	r2, [r2, #4]
 8000de8:	f002 020c 	and.w	r2, r2, #12
 8000dec:	2a08      	cmp	r2, #8
 8000dee:	f000 8099 	beq.w	8000f24 <HAL_RCC_OscConfig+0x5e8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d02f      	beq.n	8000e56 <HAL_RCC_OscConfig+0x51a>
 8000df6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dfa:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dfe:	fab3 f383 	clz	r3, r3
 8000e02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e10:	f7ff fa32 	bl	8000278 <HAL_GetTick>
 8000e14:	4604      	mov	r4, r0
 8000e16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e1a:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e1e:	4b3f      	ldr	r3, [pc, #252]	; (8000f1c <HAL_RCC_OscConfig+0x5e0>)
 8000e20:	6819      	ldr	r1, [r3, #0]
 8000e22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e26:	fa93 f3a3 	rbit	r3, r3
 8000e2a:	fab3 f383 	clz	r3, r3
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	2201      	movs	r2, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	4219      	tst	r1, r3
 8000e3a:	d06b      	beq.n	8000f14 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e3c:	f7ff fa1c 	bl	8000278 <HAL_GetTick>
 8000e40:	1b00      	subs	r0, r0, r4
 8000e42:	2802      	cmp	r0, #2
 8000e44:	d9e7      	bls.n	8000e16 <HAL_RCC_OscConfig+0x4da>
          {
            return HAL_TIMEOUT;
 8000e46:	2003      	movs	r0, #3
 8000e48:	e087      	b.n	8000f5a <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e4a:	4a34      	ldr	r2, [pc, #208]	; (8000f1c <HAL_RCC_OscConfig+0x5e0>)
 8000e4c:	69d3      	ldr	r3, [r2, #28]
 8000e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e52:	61d3      	str	r3, [r2, #28]
 8000e54:	e7c2      	b.n	8000ddc <HAL_RCC_OscConfig+0x4a0>
 8000e56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e5a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000e5e:	fab3 f383 	clz	r3, r3
 8000e62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e66:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e70:	f7ff fa02 	bl	8000278 <HAL_GetTick>
 8000e74:	4605      	mov	r5, r0
 8000e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e7a:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e7e:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <HAL_RCC_OscConfig+0x5e0>)
 8000e80:	6819      	ldr	r1, [r3, #0]
 8000e82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e86:	fa93 f3a3 	rbit	r3, r3
 8000e8a:	fab3 f383 	clz	r3, r3
 8000e8e:	f003 031f 	and.w	r3, r3, #31
 8000e92:	2201      	movs	r2, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	4219      	tst	r1, r3
 8000e9a:	d006      	beq.n	8000eaa <HAL_RCC_OscConfig+0x56e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e9c:	f7ff f9ec 	bl	8000278 <HAL_GetTick>
 8000ea0:	1b40      	subs	r0, r0, r5
 8000ea2:	2802      	cmp	r0, #2
 8000ea4:	d9e7      	bls.n	8000e76 <HAL_RCC_OscConfig+0x53a>
            return HAL_TIMEOUT;
 8000ea6:	2003      	movs	r0, #3
 8000ea8:	e057      	b.n	8000f5a <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000eaa:	491c      	ldr	r1, [pc, #112]	; (8000f1c <HAL_RCC_OscConfig+0x5e0>)
 8000eac:	684b      	ldr	r3, [r1, #4]
 8000eae:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000eb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000eb4:	6a20      	ldr	r0, [r4, #32]
 8000eb6:	4302      	orrs	r2, r0
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	604b      	str	r3, [r1, #4]
 8000ebc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ec0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000ec4:	fab3 f383 	clz	r3, r3
 8000ec8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ecc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ed6:	f7ff f9cf 	bl	8000278 <HAL_GetTick>
 8000eda:	4604      	mov	r4, r0
 8000edc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ee0:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <HAL_RCC_OscConfig+0x5e0>)
 8000ee6:	6819      	ldr	r1, [r3, #0]
 8000ee8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eec:	fa93 f3a3 	rbit	r3, r3
 8000ef0:	fab3 f383 	clz	r3, r3
 8000ef4:	f003 031f 	and.w	r3, r3, #31
 8000ef8:	2201      	movs	r2, #1
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	4219      	tst	r1, r3
 8000f00:	d106      	bne.n	8000f10 <HAL_RCC_OscConfig+0x5d4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f02:	f7ff f9b9 	bl	8000278 <HAL_GetTick>
 8000f06:	1b00      	subs	r0, r0, r4
 8000f08:	2802      	cmp	r0, #2
 8000f0a:	d9e7      	bls.n	8000edc <HAL_RCC_OscConfig+0x5a0>
            return HAL_TIMEOUT;
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	e024      	b.n	8000f5a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8000f10:	2000      	movs	r0, #0
 8000f12:	e022      	b.n	8000f5a <HAL_RCC_OscConfig+0x61e>
 8000f14:	2000      	movs	r0, #0
 8000f16:	e020      	b.n	8000f5a <HAL_RCC_OscConfig+0x61e>
 8000f18:	10908120 	.word	0x10908120
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d01a      	beq.n	8000f5e <HAL_RCC_OscConfig+0x622>
        pll_config = RCC->CFGR;
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_RCC_OscConfig+0x630>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000f2c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000f30:	6a22      	ldr	r2, [r4, #32]
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d115      	bne.n	8000f62 <HAL_RCC_OscConfig+0x626>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8000f36:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000f3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d112      	bne.n	8000f66 <HAL_RCC_OscConfig+0x62a>
  return HAL_OK;
 8000f40:	2000      	movs	r0, #0
 8000f42:	e00a      	b.n	8000f5a <HAL_RCC_OscConfig+0x61e>
    return HAL_ERROR;
 8000f44:	2001      	movs	r0, #1
}
 8000f46:	4770      	bx	lr
        return HAL_ERROR;
 8000f48:	2001      	movs	r0, #1
 8000f4a:	e006      	b.n	8000f5a <HAL_RCC_OscConfig+0x61e>
        return HAL_ERROR;
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	e004      	b.n	8000f5a <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 8000f50:	2003      	movs	r0, #3
 8000f52:	e002      	b.n	8000f5a <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 8000f54:	2003      	movs	r0, #3
 8000f56:	e000      	b.n	8000f5a <HAL_RCC_OscConfig+0x61e>
  return HAL_OK;
 8000f58:	2000      	movs	r0, #0
}
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000f5e:	2001      	movs	r0, #1
 8000f60:	e7fb      	b.n	8000f5a <HAL_RCC_OscConfig+0x61e>
          return HAL_ERROR;
 8000f62:	2001      	movs	r0, #1
 8000f64:	e7f9      	b.n	8000f5a <HAL_RCC_OscConfig+0x61e>
 8000f66:	2001      	movs	r0, #1
 8000f68:	e7f7      	b.n	8000f5a <HAL_RCC_OscConfig+0x61e>
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000

08000f70 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <HAL_RCC_GetSysClockFreq+0x5c>)
 8000f72:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f74:	f003 020c 	and.w	r2, r3, #12
 8000f78:	2a08      	cmp	r2, #8
 8000f7a:	d001      	beq.n	8000f80 <HAL_RCC_GetSysClockFreq+0x10>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f7c:	4814      	ldr	r0, [pc, #80]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000f7e:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000f80:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8000f84:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000f88:	fa92 f2a2 	rbit	r2, r2
 8000f8c:	fab2 f282 	clz	r2, r2
 8000f90:	fa21 f202 	lsr.w	r2, r1, r2
 8000f94:	490f      	ldr	r1, [pc, #60]	; (8000fd4 <HAL_RCC_GetSysClockFreq+0x64>)
 8000f96:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000f98:	4a0c      	ldr	r2, [pc, #48]	; (8000fcc <HAL_RCC_GetSysClockFreq+0x5c>)
 8000f9a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000f9c:	f002 020f 	and.w	r2, r2, #15
 8000fa0:	210f      	movs	r1, #15
 8000fa2:	fa91 f1a1 	rbit	r1, r1
 8000fa6:	fab1 f181 	clz	r1, r1
 8000faa:	40ca      	lsrs	r2, r1
 8000fac:	490a      	ldr	r1, [pc, #40]	; (8000fd8 <HAL_RCC_GetSysClockFreq+0x68>)
 8000fae:	5c8a      	ldrb	r2, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000fb0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000fb4:	d005      	beq.n	8000fc2 <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0x60>)
 8000fb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fbc:	fb03 f000 	mul.w	r0, r3, r0
 8000fc0:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_RCC_GetSysClockFreq+0x6c>)
 8000fc4:	fb03 f000 	mul.w	r0, r3, r0
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	007a1200 	.word	0x007a1200
 8000fd4:	08002e8c 	.word	0x08002e8c
 8000fd8:	08002e9c 	.word	0x08002e9c
 8000fdc:	003d0900 	.word	0x003d0900

08000fe0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	f000 80be 	beq.w	8001162 <HAL_RCC_ClockConfig+0x182>
{
 8000fe6:	b570      	push	{r4, r5, r6, lr}
 8000fe8:	460d      	mov	r5, r1
 8000fea:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fec:	4b61      	ldr	r3, [pc, #388]	; (8001174 <HAL_RCC_ClockConfig+0x194>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	d20b      	bcs.n	8001010 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ff8:	4a5e      	ldr	r2, [pc, #376]	; (8001174 <HAL_RCC_ClockConfig+0x194>)
 8000ffa:	6813      	ldr	r3, [r2, #0]
 8000ffc:	f023 0307 	bic.w	r3, r3, #7
 8001000:	430b      	orrs	r3, r1
 8001002:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001004:	6813      	ldr	r3, [r2, #0]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	428b      	cmp	r3, r1
 800100c:	f040 80ab 	bne.w	8001166 <HAL_RCC_ClockConfig+0x186>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	f013 0f02 	tst.w	r3, #2
 8001016:	d006      	beq.n	8001026 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001018:	4a57      	ldr	r2, [pc, #348]	; (8001178 <HAL_RCC_ClockConfig+0x198>)
 800101a:	6853      	ldr	r3, [r2, #4]
 800101c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001020:	68a1      	ldr	r1, [r4, #8]
 8001022:	430b      	orrs	r3, r1
 8001024:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001026:	6823      	ldr	r3, [r4, #0]
 8001028:	f013 0f01 	tst.w	r3, #1
 800102c:	d05a      	beq.n	80010e4 <HAL_RCC_ClockConfig+0x104>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800102e:	6863      	ldr	r3, [r4, #4]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d02d      	beq.n	8001090 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001034:	2b02      	cmp	r3, #2
 8001036:	d040      	beq.n	80010ba <HAL_RCC_ClockConfig+0xda>
 8001038:	2202      	movs	r2, #2
 800103a:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800103e:	4a4e      	ldr	r2, [pc, #312]	; (8001178 <HAL_RCC_ClockConfig+0x198>)
 8001040:	6810      	ldr	r0, [r2, #0]
 8001042:	2202      	movs	r2, #2
 8001044:	fa92 f2a2 	rbit	r2, r2
 8001048:	fab2 f282 	clz	r2, r2
 800104c:	f002 021f 	and.w	r2, r2, #31
 8001050:	2101      	movs	r1, #1
 8001052:	fa01 f202 	lsl.w	r2, r1, r2
 8001056:	4210      	tst	r0, r2
 8001058:	f000 8087 	beq.w	800116a <HAL_RCC_ClockConfig+0x18a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800105c:	4946      	ldr	r1, [pc, #280]	; (8001178 <HAL_RCC_ClockConfig+0x198>)
 800105e:	684a      	ldr	r2, [r1, #4]
 8001060:	f022 0203 	bic.w	r2, r2, #3
 8001064:	4313      	orrs	r3, r2
 8001066:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001068:	f7ff f906 	bl	8000278 <HAL_GetTick>
 800106c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800106e:	4b42      	ldr	r3, [pc, #264]	; (8001178 <HAL_RCC_ClockConfig+0x198>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 030c 	and.w	r3, r3, #12
 8001076:	6862      	ldr	r2, [r4, #4]
 8001078:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800107c:	d032      	beq.n	80010e4 <HAL_RCC_ClockConfig+0x104>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800107e:	f7ff f8fb 	bl	8000278 <HAL_GetTick>
 8001082:	1b80      	subs	r0, r0, r6
 8001084:	f241 3388 	movw	r3, #5000	; 0x1388
 8001088:	4298      	cmp	r0, r3
 800108a:	d9f0      	bls.n	800106e <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 800108c:	2003      	movs	r0, #3
 800108e:	e067      	b.n	8001160 <HAL_RCC_ClockConfig+0x180>
 8001090:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001094:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001098:	4a37      	ldr	r2, [pc, #220]	; (8001178 <HAL_RCC_ClockConfig+0x198>)
 800109a:	6810      	ldr	r0, [r2, #0]
 800109c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010a0:	fa92 f2a2 	rbit	r2, r2
 80010a4:	fab2 f282 	clz	r2, r2
 80010a8:	f002 021f 	and.w	r2, r2, #31
 80010ac:	2101      	movs	r1, #1
 80010ae:	fa01 f202 	lsl.w	r2, r1, r2
 80010b2:	4202      	tst	r2, r0
 80010b4:	d1d2      	bne.n	800105c <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 80010b6:	2001      	movs	r0, #1
 80010b8:	e052      	b.n	8001160 <HAL_RCC_ClockConfig+0x180>
 80010ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010be:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010c2:	4a2d      	ldr	r2, [pc, #180]	; (8001178 <HAL_RCC_ClockConfig+0x198>)
 80010c4:	6810      	ldr	r0, [r2, #0]
 80010c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010ca:	fa92 f2a2 	rbit	r2, r2
 80010ce:	fab2 f282 	clz	r2, r2
 80010d2:	f002 021f 	and.w	r2, r2, #31
 80010d6:	2101      	movs	r1, #1
 80010d8:	fa01 f202 	lsl.w	r2, r1, r2
 80010dc:	4210      	tst	r0, r2
 80010de:	d1bd      	bne.n	800105c <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 80010e0:	2001      	movs	r0, #1
 80010e2:	e03d      	b.n	8001160 <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010e4:	4b23      	ldr	r3, [pc, #140]	; (8001174 <HAL_RCC_ClockConfig+0x194>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	42ab      	cmp	r3, r5
 80010ee:	d90a      	bls.n	8001106 <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f0:	4a20      	ldr	r2, [pc, #128]	; (8001174 <HAL_RCC_ClockConfig+0x194>)
 80010f2:	6813      	ldr	r3, [r2, #0]
 80010f4:	f023 0307 	bic.w	r3, r3, #7
 80010f8:	432b      	orrs	r3, r5
 80010fa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010fc:	6813      	ldr	r3, [r2, #0]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	42ab      	cmp	r3, r5
 8001104:	d133      	bne.n	800116e <HAL_RCC_ClockConfig+0x18e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001106:	6823      	ldr	r3, [r4, #0]
 8001108:	f013 0f04 	tst.w	r3, #4
 800110c:	d006      	beq.n	800111c <HAL_RCC_ClockConfig+0x13c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800110e:	4a1a      	ldr	r2, [pc, #104]	; (8001178 <HAL_RCC_ClockConfig+0x198>)
 8001110:	6853      	ldr	r3, [r2, #4]
 8001112:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001116:	68e1      	ldr	r1, [r4, #12]
 8001118:	430b      	orrs	r3, r1
 800111a:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	f013 0f08 	tst.w	r3, #8
 8001122:	d007      	beq.n	8001134 <HAL_RCC_ClockConfig+0x154>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001124:	4a14      	ldr	r2, [pc, #80]	; (8001178 <HAL_RCC_ClockConfig+0x198>)
 8001126:	6853      	ldr	r3, [r2, #4]
 8001128:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800112c:	6921      	ldr	r1, [r4, #16]
 800112e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001132:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001134:	f7ff ff1c 	bl	8000f70 <HAL_RCC_GetSysClockFreq>
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <HAL_RCC_ClockConfig+0x198>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001140:	22f0      	movs	r2, #240	; 0xf0
 8001142:	fa92 f2a2 	rbit	r2, r2
 8001146:	fab2 f282 	clz	r2, r2
 800114a:	40d3      	lsrs	r3, r2
 800114c:	4a0b      	ldr	r2, [pc, #44]	; (800117c <HAL_RCC_ClockConfig+0x19c>)
 800114e:	5cd3      	ldrb	r3, [r2, r3]
 8001150:	40d8      	lsrs	r0, r3
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_RCC_ClockConfig+0x1a0>)
 8001154:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_RCC_ClockConfig+0x1a4>)
 8001158:	6818      	ldr	r0, [r3, #0]
 800115a:	f7ff f849 	bl	80001f0 <HAL_InitTick>
  return HAL_OK;
 800115e:	2000      	movs	r0, #0
}
 8001160:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001162:	2001      	movs	r0, #1
}
 8001164:	4770      	bx	lr
      return HAL_ERROR;
 8001166:	2001      	movs	r0, #1
 8001168:	e7fa      	b.n	8001160 <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 800116a:	2001      	movs	r0, #1
 800116c:	e7f8      	b.n	8001160 <HAL_RCC_ClockConfig+0x180>
      return HAL_ERROR;
 800116e:	2001      	movs	r0, #1
 8001170:	e7f6      	b.n	8001160 <HAL_RCC_ClockConfig+0x180>
 8001172:	bf00      	nop
 8001174:	40022000 	.word	0x40022000
 8001178:	40021000 	.word	0x40021000
 800117c:	08002eac 	.word	0x08002eac
 8001180:	20000008 	.word	0x20000008
 8001184:	20000004 	.word	0x20000004

08001188 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001188:	4b01      	ldr	r3, [pc, #4]	; (8001190 <HAL_RCC_GetHCLKFreq+0x8>)
 800118a:	6818      	ldr	r0, [r3, #0]
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008

08001194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001194:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001196:	f7ff fff7 	bl	8001188 <HAL_RCC_GetHCLKFreq>
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80011a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011a6:	fa92 f2a2 	rbit	r2, r2
 80011aa:	fab2 f282 	clz	r2, r2
 80011ae:	40d3      	lsrs	r3, r2
 80011b0:	4a02      	ldr	r2, [pc, #8]	; (80011bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80011b2:	5cd3      	ldrb	r3, [r2, r3]
}    
 80011b4:	40d8      	lsrs	r0, r3
 80011b6:	bd08      	pop	{r3, pc}
 80011b8:	40021000 	.word	0x40021000
 80011bc:	08002ebc 	.word	0x08002ebc

080011c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011c0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80011c2:	f7ff ffe1 	bl	8001188 <HAL_RCC_GetHCLKFreq>
 80011c6:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80011ce:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80011d2:	fa92 f2a2 	rbit	r2, r2
 80011d6:	fab2 f282 	clz	r2, r2
 80011da:	40d3      	lsrs	r3, r2
 80011dc:	4a02      	ldr	r2, [pc, #8]	; (80011e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80011de:	5cd3      	ldrb	r3, [r2, r3]
} 
 80011e0:	40d8      	lsrs	r0, r3
 80011e2:	bd08      	pop	{r3, pc}
 80011e4:	40021000 	.word	0x40021000
 80011e8:	08002ebc 	.word	0x08002ebc

080011ec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80011ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ee:	b083      	sub	sp, #12
 80011f0:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80011f2:	6803      	ldr	r3, [r0, #0]
 80011f4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80011f8:	d044      	beq.n	8001284 <HAL_RCCEx_PeriphCLKConfig+0x98>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011fa:	4b5c      	ldr	r3, [pc, #368]	; (800136c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001202:	d16d      	bne.n	80012e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001204:	4b59      	ldr	r3, [pc, #356]	; (800136c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8001206:	69da      	ldr	r2, [r3, #28]
 8001208:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800120c:	61da      	str	r2, [r3, #28]
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001218:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121a:	4b55      	ldr	r3, [pc, #340]	; (8001370 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001222:	d05f      	beq.n	80012e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001224:	4b51      	ldr	r3, [pc, #324]	; (800136c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8001226:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001228:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800122c:	d021      	beq.n	8001272 <HAL_RCCEx_PeriphCLKConfig+0x86>
 800122e:	6862      	ldr	r2, [r4, #4]
 8001230:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001234:	429a      	cmp	r2, r3
 8001236:	d01c      	beq.n	8001272 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001238:	484c      	ldr	r0, [pc, #304]	; (800136c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800123a:	6a01      	ldr	r1, [r0, #32]
 800123c:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8001240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001244:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001248:	fab2 f282 	clz	r2, r2
 800124c:	4f49      	ldr	r7, [pc, #292]	; (8001374 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800124e:	443a      	add	r2, r7
 8001250:	0092      	lsls	r2, r2, #2
 8001252:	f04f 0c01 	mov.w	ip, #1
 8001256:	f8c2 c000 	str.w	ip, [r2]
 800125a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800125e:	fab3 f383 	clz	r3, r3
 8001262:	443b      	add	r3, r7
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800126a:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800126c:	f011 0f01 	tst.w	r1, #1
 8001270:	d14c      	bne.n	800130c <HAL_RCCEx_PeriphCLKConfig+0x120>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001272:	4a3e      	ldr	r2, [pc, #248]	; (800136c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8001274:	6a13      	ldr	r3, [r2, #32]
 8001276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800127a:	6861      	ldr	r1, [r4, #4]
 800127c:	430b      	orrs	r3, r1
 800127e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001280:	2d00      	cmp	r5, #0
 8001282:	d169      	bne.n	8001358 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	f013 0f01 	tst.w	r3, #1
 800128a:	d006      	beq.n	800129a <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800128c:	4a37      	ldr	r2, [pc, #220]	; (800136c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800128e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001290:	f023 0303 	bic.w	r3, r3, #3
 8001294:	68a1      	ldr	r1, [r4, #8]
 8001296:	430b      	orrs	r3, r1
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	f013 0f20 	tst.w	r3, #32
 80012a0:	d006      	beq.n	80012b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80012a2:	4a32      	ldr	r2, [pc, #200]	; (800136c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80012a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012a6:	f023 0310 	bic.w	r3, r3, #16
 80012aa:	68e1      	ldr	r1, [r4, #12]
 80012ac:	430b      	orrs	r3, r1
 80012ae:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80012b6:	d006      	beq.n	80012c6 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80012b8:	4a2c      	ldr	r2, [pc, #176]	; (800136c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80012ba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80012bc:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80012c0:	6921      	ldr	r1, [r4, #16]
 80012c2:	430b      	orrs	r3, r1
 80012c4:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80012cc:	d04b      	beq.n	8001366 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80012ce:	4a27      	ldr	r2, [pc, #156]	; (800136c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80012d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012d6:	6961      	ldr	r1, [r4, #20]
 80012d8:	430b      	orrs	r3, r1
 80012da:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80012dc:	2000      	movs	r0, #0
 80012de:	e043      	b.n	8001368 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  FlagStatus       pwrclkchanged = RESET;
 80012e0:	2500      	movs	r5, #0
 80012e2:	e79a      	b.n	800121a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012e4:	4a22      	ldr	r2, [pc, #136]	; (8001370 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80012e6:	6813      	ldr	r3, [r2, #0]
 80012e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ec:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80012ee:	f7fe ffc3 	bl	8000278 <HAL_GetTick>
 80012f2:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f4:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80012fc:	d192      	bne.n	8001224 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012fe:	f7fe ffbb 	bl	8000278 <HAL_GetTick>
 8001302:	1b80      	subs	r0, r0, r6
 8001304:	2864      	cmp	r0, #100	; 0x64
 8001306:	d9f5      	bls.n	80012f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          return HAL_TIMEOUT;
 8001308:	2003      	movs	r0, #3
 800130a:	e02d      	b.n	8001368 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        tickstart = HAL_GetTick();
 800130c:	f7fe ffb4 	bl	8000278 <HAL_GetTick>
 8001310:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001312:	e014      	b.n	800133e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8001316:	6a19      	ldr	r1, [r3, #32]
 8001318:	2302      	movs	r3, #2
 800131a:	fa93 f3a3 	rbit	r3, r3
 800131e:	fab3 f383 	clz	r3, r3
 8001322:	f003 031f 	and.w	r3, r3, #31
 8001326:	2201      	movs	r2, #1
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	420b      	tst	r3, r1
 800132e:	d1a0      	bne.n	8001272 <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001330:	f7fe ffa2 	bl	8000278 <HAL_GetTick>
 8001334:	1b80      	subs	r0, r0, r6
 8001336:	f241 3388 	movw	r3, #5000	; 0x1388
 800133a:	4298      	cmp	r0, r3
 800133c:	d811      	bhi.n	8001362 <HAL_RCCEx_PeriphCLKConfig+0x176>
 800133e:	2302      	movs	r3, #2
 8001340:	fa93 f2a3 	rbit	r2, r3
 8001344:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1e3      	bne.n	8001314 <HAL_RCCEx_PeriphCLKConfig+0x128>
 800134c:	2302      	movs	r3, #2
 800134e:	fa93 f3a3 	rbit	r3, r3
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8001354:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001356:	e7df      	b.n	8001318 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001358:	69d3      	ldr	r3, [r2, #28]
 800135a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800135e:	61d3      	str	r3, [r2, #28]
 8001360:	e790      	b.n	8001284 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 8001362:	2003      	movs	r0, #3
 8001364:	e000      	b.n	8001368 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  return HAL_OK;
 8001366:	2000      	movs	r0, #0
}
 8001368:	b003      	add	sp, #12
 800136a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800136c:	40021000 	.word	0x40021000
 8001370:	40007000 	.word	0x40007000
 8001374:	10908100 	.word	0x10908100

08001378 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001378:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800137a:	e852 3f00 	ldrex	r3, [r2]
 800137e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001382:	e842 3100 	strex	r1, r3, [r2]
 8001386:	2900      	cmp	r1, #0
 8001388:	d1f6      	bne.n	8001378 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800138a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800138c:	f102 0308 	add.w	r3, r2, #8
 8001390:	e853 3f00 	ldrex	r3, [r3]
 8001394:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001398:	3208      	adds	r2, #8
 800139a:	e842 3100 	strex	r1, r3, [r2]
 800139e:	2900      	cmp	r1, #0
 80013a0:	d1f3      	bne.n	800138a <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80013a2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d005      	beq.n	80013b4 <UART_EndRxTransfer+0x3c>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80013a8:	2320      	movs	r3, #32
 80013aa:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80013ac:	2300      	movs	r3, #0
 80013ae:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80013b0:	6643      	str	r3, [r0, #100]	; 0x64
}
 80013b2:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80013b4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013b6:	e852 3f00 	ldrex	r3, [r2]
 80013ba:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013be:	e842 3100 	strex	r1, r3, [r2]
 80013c2:	2900      	cmp	r1, #0
 80013c4:	d1f6      	bne.n	80013b4 <UART_EndRxTransfer+0x3c>
 80013c6:	e7ef      	b.n	80013a8 <UART_EndRxTransfer+0x30>

080013c8 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80013c8:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80013ca:	2b21      	cmp	r3, #33	; 0x21
 80013cc:	d000      	beq.n	80013d0 <UART_TxISR_8BIT+0x8>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80013ce:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 80013d0:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	b993      	cbnz	r3, 80013fe <UART_TxISR_8BIT+0x36>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80013d8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013da:	e852 3f00 	ldrex	r3, [r2]
 80013de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013e2:	e842 3100 	strex	r1, r3, [r2]
 80013e6:	2900      	cmp	r1, #0
 80013e8:	d1f6      	bne.n	80013d8 <UART_TxISR_8BIT+0x10>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80013ea:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013ec:	e852 3f00 	ldrex	r3, [r2]
 80013f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013f4:	e842 3100 	strex	r1, r3, [r2]
 80013f8:	2900      	cmp	r1, #0
 80013fa:	d1f6      	bne.n	80013ea <UART_TxISR_8BIT+0x22>
 80013fc:	4770      	bx	lr
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80013fe:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001400:	6803      	ldr	r3, [r0, #0]
 8001402:	7812      	ldrb	r2, [r2, #0]
 8001404:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8001406:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001408:	3301      	adds	r3, #1
 800140a:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 800140c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001410:	b29b      	uxth	r3, r3
 8001412:	3b01      	subs	r3, #1
 8001414:	b29b      	uxth	r3, r3
 8001416:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 800141a:	e7d8      	b.n	80013ce <UART_TxISR_8BIT+0x6>

0800141c <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800141c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800141e:	2b21      	cmp	r3, #33	; 0x21
 8001420:	d000      	beq.n	8001424 <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8001422:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8001424:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001428:	b29b      	uxth	r3, r3
 800142a:	b993      	cbnz	r3, 8001452 <UART_TxISR_16BIT+0x36>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800142c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800142e:	e852 3f00 	ldrex	r3, [r2]
 8001432:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001436:	e842 3100 	strex	r1, r3, [r2]
 800143a:	2900      	cmp	r1, #0
 800143c:	d1f6      	bne.n	800142c <UART_TxISR_16BIT+0x10>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800143e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001440:	e852 3f00 	ldrex	r3, [r2]
 8001444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001448:	e842 3100 	strex	r1, r3, [r2]
 800144c:	2900      	cmp	r1, #0
 800144e:	d1f6      	bne.n	800143e <UART_TxISR_16BIT+0x22>
 8001450:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001452:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	6802      	ldr	r2, [r0, #0]
 8001458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800145c:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800145e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001460:	3302      	adds	r3, #2
 8001462:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001464:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001468:	b29b      	uxth	r3, r3
 800146a:	3b01      	subs	r3, #1
 800146c:	b29b      	uxth	r3, r3
 800146e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 8001472:	e7d6      	b.n	8001422 <UART_TxISR_16BIT+0x6>

08001474 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8001474:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001476:	2b20      	cmp	r3, #32
 8001478:	d12f      	bne.n	80014da <HAL_UART_Transmit_IT+0x66>
    if ((pData == NULL) || (Size == 0U))
 800147a:	2900      	cmp	r1, #0
 800147c:	d02f      	beq.n	80014de <HAL_UART_Transmit_IT+0x6a>
 800147e:	2a00      	cmp	r2, #0
 8001480:	d02f      	beq.n	80014e2 <HAL_UART_Transmit_IT+0x6e>
    __HAL_LOCK(huart);
 8001482:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8001486:	2b01      	cmp	r3, #1
 8001488:	d02d      	beq.n	80014e6 <HAL_UART_Transmit_IT+0x72>
 800148a:	2301      	movs	r3, #1
 800148c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->pTxBuffPtr  = pData;
 8001490:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001492:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 8001496:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->TxISR       = NULL;
 800149a:	2300      	movs	r3, #0
 800149c:	6683      	str	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800149e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014a2:	2321      	movs	r3, #33	; 0x21
 80014a4:	6783      	str	r3, [r0, #120]	; 0x78
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014a6:	6883      	ldr	r3, [r0, #8]
 80014a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ac:	d00f      	beq.n	80014ce <HAL_UART_Transmit_IT+0x5a>
      huart->TxISR = UART_TxISR_8BIT;
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_UART_Transmit_IT+0x78>)
 80014b0:	6683      	str	r3, [r0, #104]	; 0x68
    __HAL_UNLOCK(huart);
 80014b2:	2300      	movs	r3, #0
 80014b4:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80014b8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014ba:	e852 3f00 	ldrex	r3, [r2]
 80014be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014c2:	e842 3100 	strex	r1, r3, [r2]
 80014c6:	2900      	cmp	r1, #0
 80014c8:	d1f6      	bne.n	80014b8 <HAL_UART_Transmit_IT+0x44>
    return HAL_OK;
 80014ca:	2000      	movs	r0, #0
 80014cc:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014ce:	6903      	ldr	r3, [r0, #16]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1ec      	bne.n	80014ae <HAL_UART_Transmit_IT+0x3a>
      huart->TxISR = UART_TxISR_16BIT;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_UART_Transmit_IT+0x7c>)
 80014d6:	6683      	str	r3, [r0, #104]	; 0x68
 80014d8:	e7eb      	b.n	80014b2 <HAL_UART_Transmit_IT+0x3e>
    return HAL_BUSY;
 80014da:	2002      	movs	r0, #2
 80014dc:	4770      	bx	lr
      return HAL_ERROR;
 80014de:	2001      	movs	r0, #1
 80014e0:	4770      	bx	lr
 80014e2:	2001      	movs	r0, #1
 80014e4:	4770      	bx	lr
    __HAL_LOCK(huart);
 80014e6:	2002      	movs	r0, #2
}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	080013c9 	.word	0x080013c9
 80014f0:	0800141d 	.word	0x0800141d

080014f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80014f4:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80014f6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014f8:	e852 3f00 	ldrex	r3, [r2]
 80014fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001500:	e842 3100 	strex	r1, r3, [r2]
 8001504:	2900      	cmp	r1, #0
 8001506:	d1f6      	bne.n	80014f6 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001508:	2320      	movs	r3, #32
 800150a:	6783      	str	r3, [r0, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800150c:	2300      	movs	r3, #0
 800150e:	6683      	str	r3, [r0, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001510:	f000 fd22 	bl	8001f58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001514:	bd08      	pop	{r3, pc}

08001516 <HAL_UART_ErrorCallback>:
}
 8001516:	4770      	bx	lr

08001518 <UART_DMAAbortOnError>:
{
 8001518:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800151a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8001522:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8001526:	f7ff fff6 	bl	8001516 <HAL_UART_ErrorCallback>
}
 800152a:	bd08      	pop	{r3, pc}

0800152c <HAL_UARTEx_RxEventCallback>:
}
 800152c:	4770      	bx	lr
	...

08001530 <HAL_UART_IRQHandler>:
{
 8001530:	b570      	push	{r4, r5, r6, lr}
 8001532:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001534:	6801      	ldr	r1, [r0, #0]
 8001536:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001538:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800153a:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800153c:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8001540:	401a      	ands	r2, r3
 8001542:	d105      	bne.n	8001550 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001544:	f013 0f20 	tst.w	r3, #32
 8001548:	d002      	beq.n	8001550 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800154a:	f010 0f20 	tst.w	r0, #32
 800154e:	d120      	bne.n	8001592 <HAL_UART_IRQHandler+0x62>
  if ((errorflags != 0U)
 8001550:	b12a      	cbz	r2, 800155e <HAL_UART_IRQHandler+0x2e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001552:	f015 0201 	ands.w	r2, r5, #1
 8001556:	d122      	bne.n	800159e <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001558:	4eab      	ldr	r6, [pc, #684]	; (8001808 <HAL_UART_IRQHandler+0x2d8>)
 800155a:	4230      	tst	r0, r6
 800155c:	d11f      	bne.n	800159e <HAL_UART_IRQHandler+0x6e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800155e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001560:	2a01      	cmp	r2, #1
 8001562:	f000 80ab 	beq.w	80016bc <HAL_UART_IRQHandler+0x18c>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001566:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800156a:	d003      	beq.n	8001574 <HAL_UART_IRQHandler+0x44>
 800156c:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8001570:	f040 8137 	bne.w	80017e2 <HAL_UART_IRQHandler+0x2b2>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001574:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001578:	d003      	beq.n	8001582 <HAL_UART_IRQHandler+0x52>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800157a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800157e:	f040 8137 	bne.w	80017f0 <HAL_UART_IRQHandler+0x2c0>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001582:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001586:	d003      	beq.n	8001590 <HAL_UART_IRQHandler+0x60>
 8001588:	f010 0f40 	tst.w	r0, #64	; 0x40
 800158c:	f040 8137 	bne.w	80017fe <HAL_UART_IRQHandler+0x2ce>
}
 8001590:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8001592:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0fb      	beq.n	8001590 <HAL_UART_IRQHandler+0x60>
        huart->RxISR(huart);
 8001598:	4620      	mov	r0, r4
 800159a:	4798      	blx	r3
      return;
 800159c:	e7f8      	b.n	8001590 <HAL_UART_IRQHandler+0x60>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800159e:	f013 0f01 	tst.w	r3, #1
 80015a2:	d009      	beq.n	80015b8 <HAL_UART_IRQHandler+0x88>
 80015a4:	f410 7f80 	tst.w	r0, #256	; 0x100
 80015a8:	d006      	beq.n	80015b8 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80015aa:	2501      	movs	r5, #1
 80015ac:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80015ae:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80015b2:	4329      	orrs	r1, r5
 80015b4:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80015b8:	f013 0f02 	tst.w	r3, #2
 80015bc:	d009      	beq.n	80015d2 <HAL_UART_IRQHandler+0xa2>
 80015be:	b142      	cbz	r2, 80015d2 <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80015c0:	6821      	ldr	r1, [r4, #0]
 80015c2:	2502      	movs	r5, #2
 80015c4:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80015c6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80015ca:	f041 0104 	orr.w	r1, r1, #4
 80015ce:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80015d2:	f013 0f04 	tst.w	r3, #4
 80015d6:	d009      	beq.n	80015ec <HAL_UART_IRQHandler+0xbc>
 80015d8:	b142      	cbz	r2, 80015ec <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80015da:	6821      	ldr	r1, [r4, #0]
 80015dc:	2504      	movs	r5, #4
 80015de:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80015e0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80015e4:	f041 0102 	orr.w	r1, r1, #2
 80015e8:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 80015ec:	f013 0f08 	tst.w	r3, #8
 80015f0:	d00b      	beq.n	800160a <HAL_UART_IRQHandler+0xda>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80015f2:	f010 0f20 	tst.w	r0, #32
 80015f6:	d100      	bne.n	80015fa <HAL_UART_IRQHandler+0xca>
 80015f8:	b13a      	cbz	r2, 800160a <HAL_UART_IRQHandler+0xda>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80015fa:	6822      	ldr	r2, [r4, #0]
 80015fc:	2108      	movs	r1, #8
 80015fe:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001600:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8001604:	430a      	orrs	r2, r1
 8001606:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800160a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800160e:	d00c      	beq.n	800162a <HAL_UART_IRQHandler+0xfa>
 8001610:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8001614:	d009      	beq.n	800162a <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001616:	6822      	ldr	r2, [r4, #0]
 8001618:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800161c:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800161e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8001622:	f042 0220 	orr.w	r2, r2, #32
 8001626:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800162a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800162e:	2a00      	cmp	r2, #0
 8001630:	d0ae      	beq.n	8001590 <HAL_UART_IRQHandler+0x60>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001632:	f013 0f20 	tst.w	r3, #32
 8001636:	d006      	beq.n	8001646 <HAL_UART_IRQHandler+0x116>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001638:	f010 0f20 	tst.w	r0, #32
 800163c:	d003      	beq.n	8001646 <HAL_UART_IRQHandler+0x116>
        if (huart->RxISR != NULL)
 800163e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001640:	b10b      	cbz	r3, 8001646 <HAL_UART_IRQHandler+0x116>
          huart->RxISR(huart);
 8001642:	4620      	mov	r0, r4
 8001644:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8001646:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800164a:	6823      	ldr	r3, [r4, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001652:	d102      	bne.n	800165a <HAL_UART_IRQHandler+0x12a>
 8001654:	f012 0f28 	tst.w	r2, #40	; 0x28
 8001658:	d029      	beq.n	80016ae <HAL_UART_IRQHandler+0x17e>
        UART_EndRxTransfer(huart);
 800165a:	4620      	mov	r0, r4
 800165c:	f7ff fe8c 	bl	8001378 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001660:	6823      	ldr	r3, [r4, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001668:	d01d      	beq.n	80016a6 <HAL_UART_IRQHandler+0x176>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800166a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800166c:	f102 0308 	add.w	r3, r2, #8
 8001670:	e853 3f00 	ldrex	r3, [r3]
 8001674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001678:	3208      	adds	r2, #8
 800167a:	e842 3100 	strex	r1, r3, [r2]
 800167e:	2900      	cmp	r1, #0
 8001680:	d1f3      	bne.n	800166a <HAL_UART_IRQHandler+0x13a>
          if (huart->hdmarx != NULL)
 8001682:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001684:	b15b      	cbz	r3, 800169e <HAL_UART_IRQHandler+0x16e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001686:	4a61      	ldr	r2, [pc, #388]	; (800180c <HAL_UART_IRQHandler+0x2dc>)
 8001688:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800168a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800168c:	f7fe fe8c 	bl	80003a8 <HAL_DMA_Abort_IT>
 8001690:	2800      	cmp	r0, #0
 8001692:	f43f af7d 	beq.w	8001590 <HAL_UART_IRQHandler+0x60>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001696:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001698:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800169a:	4798      	blx	r3
 800169c:	e778      	b.n	8001590 <HAL_UART_IRQHandler+0x60>
            HAL_UART_ErrorCallback(huart);
 800169e:	4620      	mov	r0, r4
 80016a0:	f7ff ff39 	bl	8001516 <HAL_UART_ErrorCallback>
 80016a4:	e774      	b.n	8001590 <HAL_UART_IRQHandler+0x60>
          HAL_UART_ErrorCallback(huart);
 80016a6:	4620      	mov	r0, r4
 80016a8:	f7ff ff35 	bl	8001516 <HAL_UART_ErrorCallback>
 80016ac:	e770      	b.n	8001590 <HAL_UART_IRQHandler+0x60>
        HAL_UART_ErrorCallback(huart);
 80016ae:	4620      	mov	r0, r4
 80016b0:	f7ff ff31 	bl	8001516 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return;
 80016ba:	e769      	b.n	8001590 <HAL_UART_IRQHandler+0x60>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80016bc:	f013 0f10 	tst.w	r3, #16
 80016c0:	f43f af51 	beq.w	8001566 <HAL_UART_IRQHandler+0x36>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80016c4:	f010 0f10 	tst.w	r0, #16
 80016c8:	f43f af4d 	beq.w	8001566 <HAL_UART_IRQHandler+0x36>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80016cc:	2310      	movs	r3, #16
 80016ce:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80016d0:	6823      	ldr	r3, [r4, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80016d8:	d04c      	beq.n	8001774 <HAL_UART_IRQHandler+0x244>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80016da:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80016dc:	6813      	ldr	r3, [r2, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f43f af54 	beq.w	8001590 <HAL_UART_IRQHandler+0x60>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80016e8:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80016ec:	4299      	cmp	r1, r3
 80016ee:	f67f af4f 	bls.w	8001590 <HAL_UART_IRQHandler+0x60>
        huart->RxXferCount = nb_remaining_rx_data;
 80016f2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80016f6:	6993      	ldr	r3, [r2, #24]
 80016f8:	2b20      	cmp	r3, #32
 80016fa:	d030      	beq.n	800175e <HAL_UART_IRQHandler+0x22e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80016fc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016fe:	e852 3f00 	ldrex	r3, [r2]
 8001702:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001706:	e842 3100 	strex	r1, r3, [r2]
 800170a:	2900      	cmp	r1, #0
 800170c:	d1f6      	bne.n	80016fc <HAL_UART_IRQHandler+0x1cc>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800170e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001710:	f102 0308 	add.w	r3, r2, #8
 8001714:	e853 3f00 	ldrex	r3, [r3]
 8001718:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800171c:	3208      	adds	r2, #8
 800171e:	e842 3100 	strex	r1, r3, [r2]
 8001722:	2900      	cmp	r1, #0
 8001724:	d1f3      	bne.n	800170e <HAL_UART_IRQHandler+0x1de>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001726:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001728:	f102 0308 	add.w	r3, r2, #8
 800172c:	e853 3f00 	ldrex	r3, [r3]
 8001730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001734:	3208      	adds	r2, #8
 8001736:	e842 3100 	strex	r1, r3, [r2]
 800173a:	2900      	cmp	r1, #0
 800173c:	d1f3      	bne.n	8001726 <HAL_UART_IRQHandler+0x1f6>
          huart->RxState = HAL_UART_STATE_READY;
 800173e:	2320      	movs	r3, #32
 8001740:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001742:	2300      	movs	r3, #0
 8001744:	6623      	str	r3, [r4, #96]	; 0x60
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001746:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001748:	e852 3f00 	ldrex	r3, [r2]
 800174c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001750:	e842 3100 	strex	r1, r3, [r2]
 8001754:	2900      	cmp	r1, #0
 8001756:	d1f6      	bne.n	8001746 <HAL_UART_IRQHandler+0x216>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001758:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800175a:	f7fe fe03 	bl	8000364 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800175e:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8001762:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001766:	b29b      	uxth	r3, r3
 8001768:	1ac9      	subs	r1, r1, r3
 800176a:	b289      	uxth	r1, r1
 800176c:	4620      	mov	r0, r4
 800176e:	f7ff fedd 	bl	800152c <HAL_UARTEx_RxEventCallback>
      return;
 8001772:	e70d      	b.n	8001590 <HAL_UART_IRQHandler+0x60>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001774:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8001778:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800177c:	b29b      	uxth	r3, r3
 800177e:	1ac9      	subs	r1, r1, r3
 8001780:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8001782:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001786:	b29b      	uxth	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	f43f af01 	beq.w	8001590 <HAL_UART_IRQHandler+0x60>
          && (nb_rx_data > 0U))
 800178e:	2900      	cmp	r1, #0
 8001790:	f43f aefe 	beq.w	8001590 <HAL_UART_IRQHandler+0x60>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001794:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001796:	e852 3f00 	ldrex	r3, [r2]
 800179a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800179e:	e842 3000 	strex	r0, r3, [r2]
 80017a2:	2800      	cmp	r0, #0
 80017a4:	d1f6      	bne.n	8001794 <HAL_UART_IRQHandler+0x264>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017a6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017a8:	f102 0308 	add.w	r3, r2, #8
 80017ac:	e853 3f00 	ldrex	r3, [r3]
 80017b0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017b4:	3208      	adds	r2, #8
 80017b6:	e842 3000 	strex	r0, r3, [r2]
 80017ba:	2800      	cmp	r0, #0
 80017bc:	d1f3      	bne.n	80017a6 <HAL_UART_IRQHandler+0x276>
        huart->RxState = HAL_UART_STATE_READY;
 80017be:	2320      	movs	r3, #32
 80017c0:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80017c2:	2300      	movs	r3, #0
 80017c4:	6623      	str	r3, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 80017c6:	6663      	str	r3, [r4, #100]	; 0x64
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80017c8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017ca:	e852 3f00 	ldrex	r3, [r2]
 80017ce:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017d2:	e842 3000 	strex	r0, r3, [r2]
 80017d6:	2800      	cmp	r0, #0
 80017d8:	d1f6      	bne.n	80017c8 <HAL_UART_IRQHandler+0x298>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80017da:	4620      	mov	r0, r4
 80017dc:	f7ff fea6 	bl	800152c <HAL_UARTEx_RxEventCallback>
      return;
 80017e0:	e6d6      	b.n	8001590 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80017e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017e6:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80017e8:	4620      	mov	r0, r4
 80017ea:	f000 fb31 	bl	8001e50 <HAL_UARTEx_WakeupCallback>
    return;
 80017ee:	e6cf      	b.n	8001590 <HAL_UART_IRQHandler+0x60>
    if (huart->TxISR != NULL)
 80017f0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f43f aecc 	beq.w	8001590 <HAL_UART_IRQHandler+0x60>
      huart->TxISR(huart);
 80017f8:	4620      	mov	r0, r4
 80017fa:	4798      	blx	r3
    return;
 80017fc:	e6c8      	b.n	8001590 <HAL_UART_IRQHandler+0x60>
    UART_EndTransmit_IT(huart);
 80017fe:	4620      	mov	r0, r4
 8001800:	f7ff fe78 	bl	80014f4 <UART_EndTransmit_IT>
    return;
 8001804:	e6c4      	b.n	8001590 <HAL_UART_IRQHandler+0x60>
 8001806:	bf00      	nop
 8001808:	04000120 	.word	0x04000120
 800180c:	08001519 	.word	0x08001519

08001810 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8001810:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8001812:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001816:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8001818:	2a22      	cmp	r2, #34	; 0x22
 800181a:	d005      	beq.n	8001828 <UART_RxISR_8BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800181c:	6802      	ldr	r2, [r0, #0]
 800181e:	6993      	ldr	r3, [r2, #24]
 8001820:	f043 0308 	orr.w	r3, r3, #8
 8001824:	6193      	str	r3, [r2, #24]
  }
}
 8001826:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001828:	6802      	ldr	r2, [r0, #0]
 800182a:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800182c:	b2db      	uxtb	r3, r3
 800182e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001830:	400b      	ands	r3, r1
 8001832:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8001834:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001836:	3301      	adds	r3, #1
 8001838:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800183a:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800183e:	b29b      	uxth	r3, r3
 8001840:	3b01      	subs	r3, #1
 8001842:	b29b      	uxth	r3, r3
 8001844:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8001848:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800184c:	b29b      	uxth	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1e9      	bne.n	8001826 <UART_RxISR_8BIT+0x16>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001852:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001854:	e852 3f00 	ldrex	r3, [r2]
 8001858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800185c:	e842 3100 	strex	r1, r3, [r2]
 8001860:	2900      	cmp	r1, #0
 8001862:	d1f6      	bne.n	8001852 <UART_RxISR_8BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001864:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001866:	f102 0308 	add.w	r3, r2, #8
 800186a:	e853 3f00 	ldrex	r3, [r3]
 800186e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001872:	3208      	adds	r2, #8
 8001874:	e842 3100 	strex	r1, r3, [r2]
 8001878:	2900      	cmp	r1, #0
 800187a:	d1f3      	bne.n	8001864 <UART_RxISR_8BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 800187c:	2320      	movs	r3, #32
 800187e:	67c3      	str	r3, [r0, #124]	; 0x7c
      huart->RxISR = NULL;
 8001880:	2300      	movs	r3, #0
 8001882:	6643      	str	r3, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001884:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001886:	2b01      	cmp	r3, #1
 8001888:	d116      	bne.n	80018b8 <UART_RxISR_8BIT+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800188a:	2300      	movs	r3, #0
 800188c:	6603      	str	r3, [r0, #96]	; 0x60
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800188e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001890:	e852 3f00 	ldrex	r3, [r2]
 8001894:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001898:	e842 3100 	strex	r1, r3, [r2]
 800189c:	2900      	cmp	r1, #0
 800189e:	d1f6      	bne.n	800188e <UART_RxISR_8BIT+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80018a0:	6803      	ldr	r3, [r0, #0]
 80018a2:	69da      	ldr	r2, [r3, #28]
 80018a4:	f012 0f10 	tst.w	r2, #16
 80018a8:	d001      	beq.n	80018ae <UART_RxISR_8BIT+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80018aa:	2210      	movs	r2, #16
 80018ac:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80018ae:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 80018b2:	f7ff fe3b 	bl	800152c <HAL_UARTEx_RxEventCallback>
 80018b6:	e7b6      	b.n	8001826 <UART_RxISR_8BIT+0x16>
        HAL_UART_RxCpltCallback(huart);
 80018b8:	f000 ffb6 	bl	8002828 <HAL_UART_RxCpltCallback>
 80018bc:	e7b3      	b.n	8001826 <UART_RxISR_8BIT+0x16>

080018be <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80018be:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80018c0:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80018c4:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80018c6:	2a22      	cmp	r2, #34	; 0x22
 80018c8:	d005      	beq.n	80018d6 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80018ca:	6802      	ldr	r2, [r0, #0]
 80018cc:	6993      	ldr	r3, [r2, #24]
 80018ce:	f043 0308 	orr.w	r3, r3, #8
 80018d2:	6193      	str	r3, [r2, #24]
  }
}
 80018d4:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80018d6:	6802      	ldr	r2, [r0, #0]
 80018d8:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80018da:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 80018dc:	400b      	ands	r3, r1
 80018de:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 80018e0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80018e2:	3302      	adds	r3, #2
 80018e4:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80018e6:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 80018f4:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1ea      	bne.n	80018d4 <UART_RxISR_16BIT+0x16>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80018fe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001900:	e852 3f00 	ldrex	r3, [r2]
 8001904:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001908:	e842 3100 	strex	r1, r3, [r2]
 800190c:	2900      	cmp	r1, #0
 800190e:	d1f6      	bne.n	80018fe <UART_RxISR_16BIT+0x40>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001910:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001912:	f102 0308 	add.w	r3, r2, #8
 8001916:	e853 3f00 	ldrex	r3, [r3]
 800191a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800191e:	3208      	adds	r2, #8
 8001920:	e842 3100 	strex	r1, r3, [r2]
 8001924:	2900      	cmp	r1, #0
 8001926:	d1f3      	bne.n	8001910 <UART_RxISR_16BIT+0x52>
      huart->RxState = HAL_UART_STATE_READY;
 8001928:	2320      	movs	r3, #32
 800192a:	67c3      	str	r3, [r0, #124]	; 0x7c
      huart->RxISR = NULL;
 800192c:	2300      	movs	r3, #0
 800192e:	6643      	str	r3, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001930:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001932:	2b01      	cmp	r3, #1
 8001934:	d116      	bne.n	8001964 <UART_RxISR_16BIT+0xa6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001936:	2300      	movs	r3, #0
 8001938:	6603      	str	r3, [r0, #96]	; 0x60
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800193a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800193c:	e852 3f00 	ldrex	r3, [r2]
 8001940:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001944:	e842 3100 	strex	r1, r3, [r2]
 8001948:	2900      	cmp	r1, #0
 800194a:	d1f6      	bne.n	800193a <UART_RxISR_16BIT+0x7c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800194c:	6803      	ldr	r3, [r0, #0]
 800194e:	69da      	ldr	r2, [r3, #28]
 8001950:	f012 0f10 	tst.w	r2, #16
 8001954:	d001      	beq.n	800195a <UART_RxISR_16BIT+0x9c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001956:	2210      	movs	r2, #16
 8001958:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800195a:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 800195e:	f7ff fde5 	bl	800152c <HAL_UARTEx_RxEventCallback>
 8001962:	e7b7      	b.n	80018d4 <UART_RxISR_16BIT+0x16>
        HAL_UART_RxCpltCallback(huart);
 8001964:	f000 ff60 	bl	8002828 <HAL_UART_RxCpltCallback>
 8001968:	e7b4      	b.n	80018d4 <UART_RxISR_16BIT+0x16>
	...

0800196c <UART_SetConfig>:
{
 800196c:	b510      	push	{r4, lr}
 800196e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001970:	6883      	ldr	r3, [r0, #8]
 8001972:	6902      	ldr	r2, [r0, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	6942      	ldr	r2, [r0, #20]
 8001978:	4313      	orrs	r3, r2
 800197a:	69c2      	ldr	r2, [r0, #28]
 800197c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800197e:	6801      	ldr	r1, [r0, #0]
 8001980:	6808      	ldr	r0, [r1, #0]
 8001982:	4a4e      	ldr	r2, [pc, #312]	; (8001abc <UART_SetConfig+0x150>)
 8001984:	4002      	ands	r2, r0
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800198a:	6822      	ldr	r2, [r4, #0]
 800198c:	6853      	ldr	r3, [r2, #4]
 800198e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001992:	68e1      	ldr	r1, [r4, #12]
 8001994:	430b      	orrs	r3, r1
 8001996:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001998:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 800199a:	6a23      	ldr	r3, [r4, #32]
 800199c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800199e:	6821      	ldr	r1, [r4, #0]
 80019a0:	688b      	ldr	r3, [r1, #8]
 80019a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019aa:	6823      	ldr	r3, [r4, #0]
 80019ac:	4a44      	ldr	r2, [pc, #272]	; (8001ac0 <UART_SetConfig+0x154>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d014      	beq.n	80019dc <UART_SetConfig+0x70>
 80019b2:	4a44      	ldr	r2, [pc, #272]	; (8001ac4 <UART_SetConfig+0x158>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d027      	beq.n	8001a08 <UART_SetConfig+0x9c>
 80019b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019bc:	4293      	cmp	r3, r2
 80019be:	d01f      	beq.n	8001a00 <UART_SetConfig+0x94>
 80019c0:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019c2:	69e0      	ldr	r0, [r4, #28]
 80019c4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80019c8:	d020      	beq.n	8001a0c <UART_SetConfig+0xa0>
    switch (clocksource)
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d870      	bhi.n	8001ab0 <UART_SetConfig+0x144>
 80019ce:	e8df f003 	tbb	[pc, r3]
 80019d2:	604a      	.short	0x604a
 80019d4:	6f636f48 	.word	0x6f636f48
 80019d8:	6f6f      	.short	0x6f6f
 80019da:	66          	.byte	0x66
 80019db:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019dc:	4b3a      	ldr	r3, [pc, #232]	; (8001ac8 <UART_SetConfig+0x15c>)
 80019de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d809      	bhi.n	80019fc <UART_SetConfig+0x90>
 80019e8:	e8df f003 	tbb	[pc, r3]
 80019ec:	0c060402 	.word	0x0c060402
 80019f0:	2300      	movs	r3, #0
 80019f2:	e7e6      	b.n	80019c2 <UART_SetConfig+0x56>
 80019f4:	2304      	movs	r3, #4
 80019f6:	e7e4      	b.n	80019c2 <UART_SetConfig+0x56>
 80019f8:	2308      	movs	r3, #8
 80019fa:	e7e2      	b.n	80019c2 <UART_SetConfig+0x56>
 80019fc:	2310      	movs	r3, #16
 80019fe:	e7e0      	b.n	80019c2 <UART_SetConfig+0x56>
 8001a00:	2300      	movs	r3, #0
 8001a02:	e7de      	b.n	80019c2 <UART_SetConfig+0x56>
 8001a04:	2302      	movs	r3, #2
 8001a06:	e7dc      	b.n	80019c2 <UART_SetConfig+0x56>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e7da      	b.n	80019c2 <UART_SetConfig+0x56>
    switch (clocksource)
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d849      	bhi.n	8001aa4 <UART_SetConfig+0x138>
 8001a10:	e8df f003 	tbb	[pc, r3]
 8001a14:	48251f05 	.word	0x48251f05
 8001a18:	48484822 	.word	0x48484822
 8001a1c:	09          	.byte	0x09
 8001a1d:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a1e:	f7ff fbb9 	bl	8001194 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001a22:	2800      	cmp	r0, #0
 8001a24:	d040      	beq.n	8001aa8 <UART_SetConfig+0x13c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001a26:	6862      	ldr	r2, [r4, #4]
 8001a28:	0853      	lsrs	r3, r2, #1
 8001a2a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001a2e:	fbb0 f0f2 	udiv	r0, r0, r2
 8001a32:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a34:	f1a0 0210 	sub.w	r2, r0, #16
 8001a38:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d835      	bhi.n	8001aac <UART_SetConfig+0x140>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001a40:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001a44:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8001a48:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	60d8      	str	r0, [r3, #12]
 8001a4e:	2000      	movs	r0, #0
 8001a50:	e01b      	b.n	8001a8a <UART_SetConfig+0x11e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001a52:	f7ff fbb5 	bl	80011c0 <HAL_RCC_GetPCLK2Freq>
        break;
 8001a56:	e7e4      	b.n	8001a22 <UART_SetConfig+0xb6>
        pclk = HAL_RCC_GetSysClockFreq();
 8001a58:	f7ff fa8a 	bl	8000f70 <HAL_RCC_GetSysClockFreq>
        break;
 8001a5c:	e7e1      	b.n	8001a22 <UART_SetConfig+0xb6>
        pclk = (uint32_t) HSI_VALUE;
 8001a5e:	481b      	ldr	r0, [pc, #108]	; (8001acc <UART_SetConfig+0x160>)
 8001a60:	e7e1      	b.n	8001a26 <UART_SetConfig+0xba>
    switch (clocksource)
 8001a62:	481a      	ldr	r0, [pc, #104]	; (8001acc <UART_SetConfig+0x160>)
 8001a64:	e002      	b.n	8001a6c <UART_SetConfig+0x100>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a66:	f7ff fb95 	bl	8001194 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001a6a:	b318      	cbz	r0, 8001ab4 <UART_SetConfig+0x148>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001a6c:	6863      	ldr	r3, [r4, #4]
 8001a6e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001a72:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a76:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a78:	f1a0 0210 	sub.w	r2, r0, #16
 8001a7c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d819      	bhi.n	8001ab8 <UART_SetConfig+0x14c>
        huart->Instance->BRR = usartdiv;
 8001a84:	6823      	ldr	r3, [r4, #0]
 8001a86:	60d8      	str	r0, [r3, #12]
 8001a88:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8001a8e:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8001a90:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8001a92:	f7ff fb95 	bl	80011c0 <HAL_RCC_GetPCLK2Freq>
        break;
 8001a96:	e7e8      	b.n	8001a6a <UART_SetConfig+0xfe>
        pclk = HAL_RCC_GetSysClockFreq();
 8001a98:	f7ff fa6a 	bl	8000f70 <HAL_RCC_GetSysClockFreq>
        break;
 8001a9c:	e7e5      	b.n	8001a6a <UART_SetConfig+0xfe>
        pclk = (uint32_t) LSE_VALUE;
 8001a9e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001aa2:	e7e3      	b.n	8001a6c <UART_SetConfig+0x100>
    switch (clocksource)
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	e7f0      	b.n	8001a8a <UART_SetConfig+0x11e>
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	e7ee      	b.n	8001a8a <UART_SetConfig+0x11e>
        ret = HAL_ERROR;
 8001aac:	2001      	movs	r0, #1
 8001aae:	e7ec      	b.n	8001a8a <UART_SetConfig+0x11e>
    switch (clocksource)
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	e7ea      	b.n	8001a8a <UART_SetConfig+0x11e>
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	e7e8      	b.n	8001a8a <UART_SetConfig+0x11e>
        ret = HAL_ERROR;
 8001ab8:	2001      	movs	r0, #1
 8001aba:	e7e6      	b.n	8001a8a <UART_SetConfig+0x11e>
 8001abc:	efff69f3 	.word	0xefff69f3
 8001ac0:	40013800 	.word	0x40013800
 8001ac4:	40004400 	.word	0x40004400
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	007a1200 	.word	0x007a1200

08001ad0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ad0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ad2:	f013 0f01 	tst.w	r3, #1
 8001ad6:	d006      	beq.n	8001ae6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ad8:	6802      	ldr	r2, [r0, #0]
 8001ada:	6853      	ldr	r3, [r2, #4]
 8001adc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ae0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001ae2:	430b      	orrs	r3, r1
 8001ae4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ae6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ae8:	f013 0f02 	tst.w	r3, #2
 8001aec:	d006      	beq.n	8001afc <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001aee:	6802      	ldr	r2, [r0, #0]
 8001af0:	6853      	ldr	r3, [r2, #4]
 8001af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001af8:	430b      	orrs	r3, r1
 8001afa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001afc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001afe:	f013 0f04 	tst.w	r3, #4
 8001b02:	d006      	beq.n	8001b12 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001b04:	6802      	ldr	r2, [r0, #0]
 8001b06:	6853      	ldr	r3, [r2, #4]
 8001b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001b0e:	430b      	orrs	r3, r1
 8001b10:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001b12:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b14:	f013 0f08 	tst.w	r3, #8
 8001b18:	d006      	beq.n	8001b28 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001b1a:	6802      	ldr	r2, [r0, #0]
 8001b1c:	6853      	ldr	r3, [r2, #4]
 8001b1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001b22:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001b24:	430b      	orrs	r3, r1
 8001b26:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001b28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b2a:	f013 0f10 	tst.w	r3, #16
 8001b2e:	d006      	beq.n	8001b3e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001b30:	6802      	ldr	r2, [r0, #0]
 8001b32:	6893      	ldr	r3, [r2, #8]
 8001b34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b38:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001b3a:	430b      	orrs	r3, r1
 8001b3c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001b3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b40:	f013 0f20 	tst.w	r3, #32
 8001b44:	d006      	beq.n	8001b54 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001b46:	6802      	ldr	r2, [r0, #0]
 8001b48:	6893      	ldr	r3, [r2, #8]
 8001b4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b4e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001b50:	430b      	orrs	r3, r1
 8001b52:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001b54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b56:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001b5a:	d00a      	beq.n	8001b72 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001b5c:	6802      	ldr	r2, [r0, #0]
 8001b5e:	6853      	ldr	r3, [r2, #4]
 8001b60:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b64:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001b66:	430b      	orrs	r3, r1
 8001b68:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001b6a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b70:	d00b      	beq.n	8001b8a <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001b72:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b74:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b78:	d006      	beq.n	8001b88 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001b7a:	6802      	ldr	r2, [r0, #0]
 8001b7c:	6853      	ldr	r3, [r2, #4]
 8001b7e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001b82:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001b84:	430b      	orrs	r3, r1
 8001b86:	6053      	str	r3, [r2, #4]
}
 8001b88:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001b8a:	6802      	ldr	r2, [r0, #0]
 8001b8c:	6853      	ldr	r3, [r2, #4]
 8001b8e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001b92:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001b94:	430b      	orrs	r3, r1
 8001b96:	6053      	str	r3, [r2, #4]
 8001b98:	e7eb      	b.n	8001b72 <UART_AdvFeatureConfig+0xa2>

08001b9a <UART_WaitOnFlagUntilTimeout>:
{
 8001b9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b9e:	4605      	mov	r5, r0
 8001ba0:	460f      	mov	r7, r1
 8001ba2:	4616      	mov	r6, r2
 8001ba4:	4699      	mov	r9, r3
 8001ba6:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001baa:	682c      	ldr	r4, [r5, #0]
 8001bac:	69e4      	ldr	r4, [r4, #28]
 8001bae:	ea37 0304 	bics.w	r3, r7, r4
 8001bb2:	bf0c      	ite	eq
 8001bb4:	f04f 0c01 	moveq.w	ip, #1
 8001bb8:	f04f 0c00 	movne.w	ip, #0
 8001bbc:	45b4      	cmp	ip, r6
 8001bbe:	d153      	bne.n	8001c68 <UART_WaitOnFlagUntilTimeout+0xce>
    if (Timeout != HAL_MAX_DELAY)
 8001bc0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001bc4:	d0f1      	beq.n	8001baa <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bc6:	f7fe fb57 	bl	8000278 <HAL_GetTick>
 8001bca:	eba0 0009 	sub.w	r0, r0, r9
 8001bce:	4540      	cmp	r0, r8
 8001bd0:	d82d      	bhi.n	8001c2e <UART_WaitOnFlagUntilTimeout+0x94>
 8001bd2:	f1b8 0f00 	cmp.w	r8, #0
 8001bd6:	d02a      	beq.n	8001c2e <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001bd8:	682b      	ldr	r3, [r5, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	f012 0f04 	tst.w	r2, #4
 8001be0:	d0e3      	beq.n	8001baa <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001be2:	69da      	ldr	r2, [r3, #28]
 8001be4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001be8:	d0df      	beq.n	8001baa <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001bea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bee:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bf0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bf2:	e852 3f00 	ldrex	r3, [r2]
 8001bf6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bfa:	e842 3100 	strex	r1, r3, [r2]
 8001bfe:	2900      	cmp	r1, #0
 8001c00:	d1f6      	bne.n	8001bf0 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c02:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c04:	f102 0308 	add.w	r3, r2, #8
 8001c08:	e853 3f00 	ldrex	r3, [r3]
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c10:	3208      	adds	r2, #8
 8001c12:	e842 3100 	strex	r1, r3, [r2]
 8001c16:	2900      	cmp	r1, #0
 8001c18:	d1f3      	bne.n	8001c02 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 8001c1a:	2320      	movs	r3, #32
 8001c1c:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001c1e:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001c20:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
          __HAL_UNLOCK(huart);
 8001c24:	2300      	movs	r3, #0
 8001c26:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
          return HAL_TIMEOUT;
 8001c2a:	2003      	movs	r0, #3
 8001c2c:	e01d      	b.n	8001c6a <UART_WaitOnFlagUntilTimeout+0xd0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c2e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c30:	e852 3f00 	ldrex	r3, [r2]
 8001c34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c38:	e842 3100 	strex	r1, r3, [r2]
 8001c3c:	2900      	cmp	r1, #0
 8001c3e:	d1f6      	bne.n	8001c2e <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c40:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c42:	f102 0308 	add.w	r3, r2, #8
 8001c46:	e853 3f00 	ldrex	r3, [r3]
 8001c4a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c4e:	3208      	adds	r2, #8
 8001c50:	e842 3100 	strex	r1, r3, [r2]
 8001c54:	2900      	cmp	r1, #0
 8001c56:	d1f3      	bne.n	8001c40 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8001c58:	2320      	movs	r3, #32
 8001c5a:	67ab      	str	r3, [r5, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8001c5c:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
        return HAL_TIMEOUT;
 8001c64:	2003      	movs	r0, #3
 8001c66:	e000      	b.n	8001c6a <UART_WaitOnFlagUntilTimeout+0xd0>
  return HAL_OK;
 8001c68:	2000      	movs	r0, #0
}
 8001c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001c6e <UART_CheckIdleState>:
{
 8001c6e:	b530      	push	{r4, r5, lr}
 8001c70:	b083      	sub	sp, #12
 8001c72:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8001c7a:	f7fe fafd 	bl	8000278 <HAL_GetTick>
 8001c7e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001c80:	6822      	ldr	r2, [r4, #0]
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	f012 0f08 	tst.w	r2, #8
 8001c88:	d10d      	bne.n	8001ca6 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f013 0f04 	tst.w	r3, #4
 8001c92:	d116      	bne.n	8001cc2 <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8001c94:	2320      	movs	r3, #32
 8001c96:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8001c98:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8001c9e:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 8001ca2:	b003      	add	sp, #12
 8001ca4:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ca6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	4603      	mov	r3, r0
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f7ff ff70 	bl	8001b9a <UART_WaitOnFlagUntilTimeout>
 8001cba:	2800      	cmp	r0, #0
 8001cbc:	d0e5      	beq.n	8001c8a <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8001cbe:	2003      	movs	r0, #3
 8001cc0:	e7ef      	b.n	8001ca2 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001cc2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	462b      	mov	r3, r5
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	f7ff ff62 	bl	8001b9a <UART_WaitOnFlagUntilTimeout>
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	d0dc      	beq.n	8001c94 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8001cda:	2003      	movs	r0, #3
 8001cdc:	e7e1      	b.n	8001ca2 <UART_CheckIdleState+0x34>

08001cde <HAL_UART_Init>:
  if (huart == NULL)
 8001cde:	b368      	cbz	r0, 8001d3c <HAL_UART_Init+0x5e>
{
 8001ce0:	b510      	push	{r4, lr}
 8001ce2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001ce4:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001ce6:	b303      	cbz	r3, 8001d2a <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001ce8:	2324      	movs	r3, #36	; 0x24
 8001cea:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8001cec:	6822      	ldr	r2, [r4, #0]
 8001cee:	6813      	ldr	r3, [r2, #0]
 8001cf0:	f023 0301 	bic.w	r3, r3, #1
 8001cf4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f7ff fe38 	bl	800196c <UART_SetConfig>
 8001cfc:	2801      	cmp	r0, #1
 8001cfe:	d013      	beq.n	8001d28 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d02:	b9bb      	cbnz	r3, 8001d34 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d04:	6822      	ldr	r2, [r4, #0]
 8001d06:	6853      	ldr	r3, [r2, #4]
 8001d08:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001d0c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d0e:	6822      	ldr	r2, [r4, #0]
 8001d10:	6893      	ldr	r3, [r2, #8]
 8001d12:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001d16:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001d18:	6822      	ldr	r2, [r4, #0]
 8001d1a:	6813      	ldr	r3, [r2, #0]
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001d22:	4620      	mov	r0, r4
 8001d24:	f7ff ffa3 	bl	8001c6e <UART_CheckIdleState>
}
 8001d28:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001d2a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8001d2e:	f000 ffdf 	bl	8002cf0 <HAL_UART_MspInit>
 8001d32:	e7d9      	b.n	8001ce8 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8001d34:	4620      	mov	r0, r4
 8001d36:	f7ff fecb 	bl	8001ad0 <UART_AdvFeatureConfig>
 8001d3a:	e7e3      	b.n	8001d04 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8001d3c:	2001      	movs	r0, #1
}
 8001d3e:	4770      	bx	lr

08001d40 <UART_Start_Receive_IT>:
  huart->pRxBuffPtr  = pData;
 8001d40:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 8001d42:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 8001d46:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	6643      	str	r3, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8001d4e:	6883      	ldr	r3, [r0, #8]
 8001d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d54:	d006      	beq.n	8001d64 <UART_Start_Receive_IT+0x24>
 8001d56:	b9a3      	cbnz	r3, 8001d82 <UART_Start_Receive_IT+0x42>
 8001d58:	6903      	ldr	r3, [r0, #16]
 8001d5a:	b973      	cbnz	r3, 8001d7a <UART_Start_Receive_IT+0x3a>
 8001d5c:	23ff      	movs	r3, #255	; 0xff
 8001d5e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001d62:	e014      	b.n	8001d8e <UART_Start_Receive_IT+0x4e>
 8001d64:	6903      	ldr	r3, [r0, #16]
 8001d66:	b923      	cbnz	r3, 8001d72 <UART_Start_Receive_IT+0x32>
 8001d68:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001d6c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001d70:	e00d      	b.n	8001d8e <UART_Start_Receive_IT+0x4e>
 8001d72:	23ff      	movs	r3, #255	; 0xff
 8001d74:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001d78:	e009      	b.n	8001d8e <UART_Start_Receive_IT+0x4e>
 8001d7a:	237f      	movs	r3, #127	; 0x7f
 8001d7c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001d80:	e005      	b.n	8001d8e <UART_Start_Receive_IT+0x4e>
 8001d82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d86:	d027      	beq.n	8001dd8 <UART_Start_Receive_IT+0x98>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d94:	2322      	movs	r3, #34	; 0x22
 8001d96:	67c3      	str	r3, [r0, #124]	; 0x7c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d98:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d9a:	f102 0308 	add.w	r3, r2, #8
 8001d9e:	e853 3f00 	ldrex	r3, [r3]
 8001da2:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001da6:	3208      	adds	r2, #8
 8001da8:	e842 3100 	strex	r1, r3, [r2]
 8001dac:	2900      	cmp	r1, #0
 8001dae:	d1f3      	bne.n	8001d98 <UART_Start_Receive_IT+0x58>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001db0:	6883      	ldr	r3, [r0, #8]
 8001db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db6:	d019      	beq.n	8001dec <UART_Start_Receive_IT+0xac>
    huart->RxISR = UART_RxISR_8BIT;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <UART_Start_Receive_IT+0xb8>)
 8001dba:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001dc2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dc4:	e852 3f00 	ldrex	r3, [r2]
 8001dc8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dcc:	e842 3100 	strex	r1, r3, [r2]
 8001dd0:	2900      	cmp	r1, #0
 8001dd2:	d1f6      	bne.n	8001dc2 <UART_Start_Receive_IT+0x82>
}
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8001dd8:	6903      	ldr	r3, [r0, #16]
 8001dda:	b91b      	cbnz	r3, 8001de4 <UART_Start_Receive_IT+0xa4>
 8001ddc:	237f      	movs	r3, #127	; 0x7f
 8001dde:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001de2:	e7d4      	b.n	8001d8e <UART_Start_Receive_IT+0x4e>
 8001de4:	233f      	movs	r3, #63	; 0x3f
 8001de6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001dea:	e7d0      	b.n	8001d8e <UART_Start_Receive_IT+0x4e>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dec:	6903      	ldr	r3, [r0, #16]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1e2      	bne.n	8001db8 <UART_Start_Receive_IT+0x78>
    huart->RxISR = UART_RxISR_16BIT;
 8001df2:	4b02      	ldr	r3, [pc, #8]	; (8001dfc <UART_Start_Receive_IT+0xbc>)
 8001df4:	6643      	str	r3, [r0, #100]	; 0x64
 8001df6:	e7e1      	b.n	8001dbc <UART_Start_Receive_IT+0x7c>
 8001df8:	08001811 	.word	0x08001811
 8001dfc:	080018bf 	.word	0x080018bf

08001e00 <HAL_UART_Receive_IT>:
{
 8001e00:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e02:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8001e04:	2b20      	cmp	r3, #32
 8001e06:	d11b      	bne.n	8001e40 <HAL_UART_Receive_IT+0x40>
    if ((pData == NULL) || (Size == 0U))
 8001e08:	b1e1      	cbz	r1, 8001e44 <HAL_UART_Receive_IT+0x44>
 8001e0a:	b1ea      	cbz	r2, 8001e48 <HAL_UART_Receive_IT+0x48>
    __HAL_LOCK(huart);
 8001e0c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d01b      	beq.n	8001e4c <HAL_UART_Receive_IT+0x4c>
 8001e14:	2301      	movs	r3, #1
 8001e16:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	6603      	str	r3, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001e1e:	6803      	ldr	r3, [r0, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8001e26:	d008      	beq.n	8001e3a <HAL_UART_Receive_IT+0x3a>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001e28:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e2a:	e854 3f00 	ldrex	r3, [r4]
 8001e2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e32:	e844 3500 	strex	r5, r3, [r4]
 8001e36:	2d00      	cmp	r5, #0
 8001e38:	d1f6      	bne.n	8001e28 <HAL_UART_Receive_IT+0x28>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8001e3a:	f7ff ff81 	bl	8001d40 <UART_Start_Receive_IT>
 8001e3e:	e000      	b.n	8001e42 <HAL_UART_Receive_IT+0x42>
    return HAL_BUSY;
 8001e40:	2002      	movs	r0, #2
}
 8001e42:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8001e44:	2001      	movs	r0, #1
 8001e46:	e7fc      	b.n	8001e42 <HAL_UART_Receive_IT+0x42>
 8001e48:	2001      	movs	r0, #1
 8001e4a:	e7fa      	b.n	8001e42 <HAL_UART_Receive_IT+0x42>
    __HAL_LOCK(huart);
 8001e4c:	2002      	movs	r0, #2
 8001e4e:	e7f8      	b.n	8001e42 <HAL_UART_Receive_IT+0x42>

08001e50 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8001e50:	4770      	bx	lr
	...

08001e54 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001e54:	b510      	push	{r4, lr}
 8001e56:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	2400      	movs	r4, #0
 8001e5a:	9401      	str	r4, [sp, #4]
 8001e5c:	9402      	str	r4, [sp, #8]
 8001e5e:	9403      	str	r4, [sp, #12]
 8001e60:	9404      	str	r4, [sp, #16]
 8001e62:	9405      	str	r4, [sp, #20]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <MX_GPIO_Init+0x50>)
 8001e66:	695a      	ldr	r2, [r3, #20]
 8001e68:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e6c:	615a      	str	r2, [r3, #20]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	9b00      	ldr	r3, [sp, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, o485_PWR_EN_Pin|USART1_DE_Pin, GPIO_PIN_RESET);
 8001e78:	4622      	mov	r2, r4
 8001e7a:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8001e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e82:	f7fe fcdb 	bl	800083c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = o485_PWR_EN_Pin|USART1_DE_Pin;
 8001e86:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001e8a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e94:	a901      	add	r1, sp, #4
 8001e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9a:	f7fe fbf1 	bl	8000680 <HAL_GPIO_Init>

}
 8001e9e:	b006      	add	sp, #24
 8001ea0:	bd10      	pop	{r4, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000

08001ea8 <_Z41__static_initialization_and_destruction_0ii>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ea8:	2801      	cmp	r0, #1
 8001eaa:	d000      	beq.n	8001eae <_Z41__static_initialization_and_destruction_0ii+0x6>
 8001eac:	4770      	bx	lr
 8001eae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eb2:	4299      	cmp	r1, r3
 8001eb4:	d1fa      	bne.n	8001eac <_Z41__static_initialization_and_destruction_0ii+0x4>
/*########################################################################################*/
/******************** KLASY ***************************************************************/      

  

  class M485E{
 8001eb6:	4a17      	ldr	r2, [pc, #92]	; (8001f14 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001eb8:	2300      	movs	r3, #0
 8001eba:	7113      	strb	r3, [r2, #4]
 8001ebc:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
 8001ec0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8001ec4:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eca:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
 8001ece:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
 8001ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed4:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
 8001ed8:	2101      	movs	r1, #1
 8001eda:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
 8001ede:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
 8001ee2:	f882 3077 	strb.w	r3, [r2, #119]	; 0x77

enum EPwrSupSource: uint8_t{ NOT_KNOWN=0, A=1, B=2 };



  class MSystem{
 8001ee6:	4a0c      	ldr	r2, [pc, #48]	; (8001f18 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001ee8:	2103      	movs	r1, #3
 8001eea:	8011      	strh	r1, [r2, #0]
 8001eec:	7093      	strb	r3, [r2, #2]
 8001eee:	2105      	movs	r1, #5
 8001ef0:	70d1      	strb	r1, [r2, #3]
 8001ef2:	7113      	strb	r3, [r2, #4]
 8001ef4:	7153      	strb	r3, [r2, #5]
 8001ef6:	7193      	strb	r3, [r2, #6]
 8001ef8:	71d3      	strb	r3, [r2, #7]
 8001efa:	210f      	movs	r1, #15
 8001efc:	7211      	strb	r1, [r2, #8]
 8001efe:	7253      	strb	r3, [r2, #9]
 8001f00:	4906      	ldr	r1, [pc, #24]	; (8001f1c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001f02:	60d1      	str	r1, [r2, #12]

#include "MFlash.h"

#define _SSD_TABSIZE_  8

  class MFlash_SSD{
 8001f04:	4a06      	ldr	r2, [pc, #24]	; (8001f20 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001f06:	213f      	movs	r1, #63	; 0x3f
 8001f08:	6011      	str	r1, [r2, #0]
 8001f0a:	4906      	ldr	r1, [pc, #24]	; (8001f24 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001f0c:	6051      	str	r1, [r2, #4]
 8001f0e:	6093      	str	r3, [r2, #8]
 8001f10:	7313      	strb	r3, [r2, #12]
 8001f12:	e7cb      	b.n	8001eac <_Z41__static_initialization_and_destruction_0ii+0x4>
 8001f14:	20000050 	.word	0x20000050
 8001f18:	200000e8 	.word	0x200000e8
 8001f1c:	21070a01 	.word	0x21070a01
 8001f20:	200000c8 	.word	0x200000c8
 8001f24:	0801f800 	.word	0x0801f800

08001f28 <_Z13JumpToAddressm>:
void JumpToAddress(uint32_t addr) {
 8001f28:	b538      	push	{r3, r4, r5, lr}
	uint32_t JumpAddress = *(__IO uint32_t *) (MAIN_PROG_BASE_ADDR + 4);
 8001f2a:	4c0a      	ldr	r4, [pc, #40]	; (8001f54 <_Z13JumpToAddressm+0x2c>)
 8001f2c:	6865      	ldr	r5, [r4, #4]
    HAL_RCC_DeInit(); //Peripherials deinitialization
 8001f2e:	f7fe fc8b 	bl	8000848 <HAL_RCC_DeInit>
    HAL_DeInit();
 8001f32:	f7fe f94b 	bl	80001cc <HAL_DeInit>
    SysTick->CTRL = 0;	//SysTick Reset
 8001f36:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	611a      	str	r2, [r3, #16]
    SysTick->LOAD = 0;	//SysTick Reset
 8001f3e:	615a      	str	r2, [r3, #20]
    SysTick->VAL = 0; 	//SysTick Reset
 8001f40:	619a      	str	r2, [r3, #24]
    SCB->VTOR = MAIN_PROG_BASE_ADDR;
 8001f42:	f503 6350 	add.w	r3, r3, #3328	; 0xd00
 8001f46:	609c      	str	r4, [r3, #8]
    __set_MSP(*((__IO uint32_t*)(MAIN_PROG_BASE_ADDR)));
 8001f48:	6823      	ldr	r3, [r4, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001f4a:	f383 8808 	msr	MSP, r3
    Jump(); //Jump to begin of the program -> start_of_program + 0x0004
 8001f4e:	47a8      	blx	r5
}
 8001f50:	bd38      	pop	{r3, r4, r5, pc}
 8001f52:	bf00      	nop
 8001f54:	08003000 	.word	0x08003000

08001f58 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback( UART_HandleTypeDef *huart ){ 
 8001f58:	b538      	push	{r3, r4, r5, lr}
  if( huart == g485E.mhUart   )  g485E.onIT_TX(); 
 8001f5a:	4b32      	ldr	r3, [pc, #200]	; (8002024 <HAL_UART_TxCpltCallback+0xcc>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4283      	cmp	r3, r0
 8001f60:	d000      	beq.n	8001f64 <HAL_UART_TxCpltCallback+0xc>
 }//----------------------------------------------------------------------------
 8001f62:	bd38      	pop	{r3, r4, r5, pc}
    public: void onIT_TX(){
      // wyczysc bufor
      
      
      //ITM_EVENT8( 2, mIsEN_to_0 );
      if( mIsEN_to_0 != 0 ){
 8001f64:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <HAL_UART_TxCpltCallback+0xcc>)
 8001f66:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001f6a:	b11b      	cbz	r3, 8001f74 <HAL_UART_TxCpltCallback+0x1c>
        // ITM_EVENT8( 2, mIsEN_to_0 );
        mIsEN_to_0 = 0;
 8001f6c:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_UART_TxCpltCallback+0xcc>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
      }
      
      
      bufRemoveN(  mhUart->TxXferSize );
 8001f74:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_UART_TxCpltCallback+0xcc>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
    //--------------------------------------------------------------------------
    // kasuje N elementow (po nadaniu po UART)
    // zwraca liczbe skasowanych elementow
    int bufRemoveN( int aN ){

      for( int i=0; i<aN; i++ ){
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	4586      	cmp	lr, r0
 8001f80:	dd14      	ble.n	8001fac <HAL_UART_TxCpltCallback+0x54>
        // sprawdz czy mozna usunac
        if( mIndexSTART == mIndexSTOP ) return i;       // bufor pusty
 8001f82:	4a28      	ldr	r2, [pc, #160]	; (8002024 <HAL_UART_TxCpltCallback+0xcc>)
 8001f84:	f892 3037 	ldrb.w	r3, [r2, #55]	; 0x37
 8001f88:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d00d      	beq.n	8001fac <HAL_UART_TxCpltCallback+0x54>
        int startTmp = (mIndexSTART+1) % cBufLength;    // probne kasowanie
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	4b25      	ldr	r3, [pc, #148]	; (8002028 <HAL_UART_TxCpltCallback+0xd0>)
 8001f94:	fb83 4302 	smull	r4, r3, r3, r2
 8001f98:	111b      	asrs	r3, r3, #4
 8001f9a:	f04f 0c32 	mov.w	ip, #50	; 0x32
 8001f9e:	fb0c 2313 	mls	r3, ip, r3, r2
        
        // kasuj element
        mIndexSTART = startTmp;                         // kasuj element
 8001fa2:	4a20      	ldr	r2, [pc, #128]	; (8002024 <HAL_UART_TxCpltCallback+0xcc>)
 8001fa4:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
      for( int i=0; i<aN; i++ ){
 8001fa8:	3001      	adds	r0, #1
 8001faa:	e7e8      	b.n	8001f7e <HAL_UART_TxCpltCallback+0x26>
      if( mIndexSTART == mIndexSTOP ) return false;
 8001fac:	4a1d      	ldr	r2, [pc, #116]	; (8002024 <HAL_UART_TxCpltCallback+0xcc>)
 8001fae:	f892 3037 	ldrb.w	r3, [r2, #55]	; 0x37
 8001fb2:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01c      	beq.n	8001ff4 <HAL_UART_TxCpltCallback+0x9c>
      if( mIndexSTART < mIndexSTOP )  (*aCnt) = mIndexSTOP - mIndexSTART;
 8001fba:	d218      	bcs.n	8001fee <HAL_UART_TxCpltCallback+0x96>
 8001fbc:	1ad4      	subs	r4, r2, r3
      (*aBuf) = &(mBuf[mIndexSTART]);
 8001fbe:	4919      	ldr	r1, [pc, #100]	; (8002024 <HAL_UART_TxCpltCallback+0xcc>)
 8001fc0:	4419      	add	r1, r3
 8001fc2:	3105      	adds	r1, #5
      return true;
 8001fc4:	2301      	movs	r3, #1
         if( res ){
 8001fc6:	b9c3      	cbnz	r3, 8001ffa <HAL_UART_TxCpltCallback+0xa2>
       if( mIsEN_to_0 <= 0 ){
 8001fc8:	4b16      	ldr	r3, [pc, #88]	; (8002024 <HAL_UART_TxCpltCallback+0xcc>)
 8001fca:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1c7      	bne.n	8001f62 <HAL_UART_TxCpltCallback+0xa>
      return ( mIndexSTART == mIndexSTOP );
 8001fd2:	4b14      	ldr	r3, [pc, #80]	; (8002024 <HAL_UART_TxCpltCallback+0xcc>)
 8001fd4:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8001fd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
          if( isEmpty() ){
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d1c0      	bne.n	8001f62 <HAL_UART_TxCpltCallback+0xa>
            _o485E_EN = 0;
 8001fe0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001fe4:	7d53      	ldrb	r3, [r2, #21]
 8001fe6:	f36f 1304 	bfc	r3, #4, #1
 8001fea:	7553      	strb	r3, [r2, #21]
 8001fec:	e7b9      	b.n	8001f62 <HAL_UART_TxCpltCallback+0xa>
      else                            (*aCnt) = cBufLength - mIndexSTART;
 8001fee:	f1c3 0432 	rsb	r4, r3, #50	; 0x32
 8001ff2:	e7e4      	b.n	8001fbe <HAL_UART_TxCpltCallback+0x66>
         int cnt = 0;
 8001ff4:	2400      	movs	r4, #0
      if( mIndexSTART == mIndexSTOP ) return false;
 8001ff6:	4623      	mov	r3, r4
 8001ff8:	e7e5      	b.n	8001fc6 <HAL_UART_TxCpltCallback+0x6e>
             _o485E_EN = 1;
 8001ffa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ffe:	7d53      	ldrb	r3, [r2, #21]
 8002000:	f043 0310 	orr.w	r3, r3, #16
 8002004:	7553      	strb	r3, [r2, #21]
             HAL_StatusTypeDef uartRes = HAL_UART_Transmit_IT( mhUart, buf,  cnt );
 8002006:	4d07      	ldr	r5, [pc, #28]	; (8002024 <HAL_UART_TxCpltCallback+0xcc>)
 8002008:	b2a2      	uxth	r2, r4
 800200a:	6828      	ldr	r0, [r5, #0]
 800200c:	f7ff fa32 	bl	8001474 <HAL_UART_Transmit_IT>
             mIsEN_to_0 += cnt;
 8002010:	f895 3077 	ldrb.w	r3, [r5, #119]	; 0x77
 8002014:	4423      	add	r3, r4
 8002016:	f885 3077 	strb.w	r3, [r5, #119]	; 0x77
             if( uartRes == HAL_OK ){   
 800201a:	2800      	cmp	r0, #0
 800201c:	d1d4      	bne.n	8001fc8 <HAL_UART_TxCpltCallback+0x70>
               mSendingTXCnt = cnt;
 800201e:	63ec      	str	r4, [r5, #60]	; 0x3c
 8002020:	e7d2      	b.n	8001fc8 <HAL_UART_TxCpltCallback+0x70>
 8002022:	bf00      	nop
 8002024:	20000050 	.word	0x20000050
 8002028:	51eb851f 	.word	0x51eb851f

0800202c <HAL_SYSTICK_Callback>:
    
    /// event: TIMER    
    public: void onTimer_1ms(){
      
      // ... 1000 ms ...............
	  mTimer_Cnt1000ms+=1;
 800202c:	4a12      	ldr	r2, [pc, #72]	; (8002078 <HAL_SYSTICK_Callback+0x4c>)
 800202e:	8813      	ldrh	r3, [r2, #0]
 8002030:	3301      	adds	r3, #1
 8002032:	b29b      	uxth	r3, r3
 8002034:	8013      	strh	r3, [r2, #0]
	  if( mTimer_Cnt1000ms > 1000 ){
 8002036:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800203a:	d904      	bls.n	8002046 <HAL_SYSTICK_Callback+0x1a>
		mTimer_Is1000ms = true;
 800203c:	4613      	mov	r3, r2
 800203e:	2201      	movs	r2, #1
 8002040:	711a      	strb	r2, [r3, #4]
		mTimer_Cnt1000ms = 0;
 8002042:	2200      	movs	r2, #0
 8002044:	801a      	strh	r2, [r3, #0]
	  }

      // ... 100 ms ................
      mTimer_Cnt100ms+=1;
 8002046:	4a0c      	ldr	r2, [pc, #48]	; (8002078 <HAL_SYSTICK_Callback+0x4c>)
 8002048:	7893      	ldrb	r3, [r2, #2]
 800204a:	3301      	adds	r3, #1
 800204c:	b2db      	uxtb	r3, r3
 800204e:	7093      	strb	r3, [r2, #2]
      if( mTimer_Cnt100ms > 100 ){
 8002050:	2b64      	cmp	r3, #100	; 0x64
 8002052:	d904      	bls.n	800205e <HAL_SYSTICK_Callback+0x32>
        mTimer_Is100ms = true;
 8002054:	4613      	mov	r3, r2
 8002056:	2201      	movs	r2, #1
 8002058:	715a      	strb	r2, [r3, #5]
        mTimer_Cnt100ms = 0;
 800205a:	2200      	movs	r2, #0
 800205c:	709a      	strb	r2, [r3, #2]
      }

      // ... 10 ms ................
      mTimer_Cnt10ms+=1;
 800205e:	4a06      	ldr	r2, [pc, #24]	; (8002078 <HAL_SYSTICK_Callback+0x4c>)
 8002060:	78d3      	ldrb	r3, [r2, #3]
 8002062:	3301      	adds	r3, #1
 8002064:	b2db      	uxtb	r3, r3
 8002066:	70d3      	strb	r3, [r2, #3]
      if( mTimer_Cnt10ms > 10 ){
 8002068:	2b0a      	cmp	r3, #10
 800206a:	d904      	bls.n	8002076 <HAL_SYSTICK_Callback+0x4a>
        mTimer_Is10ms = true;
 800206c:	4613      	mov	r3, r2
 800206e:	2201      	movs	r2, #1
 8002070:	719a      	strb	r2, [r3, #6]
        mTimer_Cnt10ms = 0;
 8002072:	2200      	movs	r2, #0
 8002074:	70da      	strb	r2, [r3, #3]
 }//----------------------------------------------------------------------------
 8002076:	4770      	bx	lr
 8002078:	200000e8 	.word	0x200000e8

0800207c <_Z18SystemClock_Configv>:
{
 800207c:	b530      	push	{r4, r5, lr}
 800207e:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002080:	2228      	movs	r2, #40	; 0x28
 8002082:	2100      	movs	r1, #0
 8002084:	a80c      	add	r0, sp, #48	; 0x30
 8002086:	f000 feed 	bl	8002e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800208a:	2400      	movs	r4, #0
 800208c:	9407      	str	r4, [sp, #28]
 800208e:	9408      	str	r4, [sp, #32]
 8002090:	9409      	str	r4, [sp, #36]	; 0x24
 8002092:	940a      	str	r4, [sp, #40]	; 0x28
 8002094:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002096:	9401      	str	r4, [sp, #4]
 8002098:	9402      	str	r4, [sp, #8]
 800209a:	9403      	str	r4, [sp, #12]
 800209c:	9404      	str	r4, [sp, #16]
 800209e:	9405      	str	r4, [sp, #20]
 80020a0:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020a2:	2502      	movs	r5, #2
 80020a4:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020a6:	2301      	movs	r3, #1
 80020a8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020aa:	2310      	movs	r3, #16
 80020ac:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020ae:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80020b0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80020b4:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020b6:	a80c      	add	r0, sp, #48	; 0x30
 80020b8:	f7fe fc40 	bl	800093c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020bc:	230f      	movs	r3, #15
 80020be:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020c0:	9508      	str	r5, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020c2:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020c8:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020ca:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020cc:	4629      	mov	r1, r5
 80020ce:	a807      	add	r0, sp, #28
 80020d0:	f7fe ff86 	bl	8000fe0 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 80020d4:	f241 0381 	movw	r3, #4225	; 0x1081
 80020d8:	9301      	str	r3, [sp, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80020da:	9403      	str	r4, [sp, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV32;
 80020dc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80020e0:	9305      	str	r3, [sp, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80020e2:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e4:	a801      	add	r0, sp, #4
 80020e6:	f7ff f881 	bl	80011ec <HAL_RCCEx_PeriphCLKConfig>
}
 80020ea:	b017      	add	sp, #92	; 0x5c
 80020ec:	bd30      	pop	{r4, r5, pc}
	...

080020f0 <_ZN5M485E17frameRX_WritePageEhhhhhhh>:

/*########################################################################################*/

// ----------------------------------------------------------
/// WritePage
void M485E::frameRX_WritePage( uint8_t pg, uint8_t OH, uint8_t OL, uint8_t HH, uint8_t HL, uint8_t LH, uint8_t LL ){
 80020f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020f4:	4605      	mov	r5, r0
 80020f6:	460e      	mov	r6, r1
	uint16_t offset = OH << 8 | OL;
 80020f8:	ea43 2702 	orr.w	r7, r3, r2, lsl #8
	uint32_t val = HH << 24 | HL << 16 | LH << 8 | LL;
 80020fc:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8002100:	0424      	lsls	r4, r4, #16
 8002102:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002106:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
 800210a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800210e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8002112:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8002116:	431c      	orrs	r4, r3
      HAL_StatusTypeDef res = HAL_FLASH_Lock();
      return res;
    };//------------------------------------------------------------------
    //--------------------------------------------------------------------
    public: static HAL_StatusTypeDef unlock(){
      HAL_StatusTypeDef res = HAL_FLASH_Unlock();
 8002118:	f7fe f998 	bl	800044c <HAL_FLASH_Unlock>
       HAL_StatusTypeDef res = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD , addr, aData );
       return res;
    };//------------------------------------------------------------------
    //--------------------------------------------------------------------  
    public: static HAL_StatusTypeDef write32( uint16_t aPage, uint16_t aOffset, uint32_t aData ){
       uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 800211c:	f506 3180 	add.w	r1, r6, #65536	; 0x10000
       HAL_StatusTypeDef res = HAL_FLASH_Program( FLASH_TYPEPROGRAM_WORD , addr, aData );
 8002120:	4622      	mov	r2, r4
 8002122:	2300      	movs	r3, #0
 8002124:	eb07 21c1 	add.w	r1, r7, r1, lsl #11
 8002128:	2002      	movs	r0, #2
 800212a:	f7fe f9e3 	bl	80004f4 <HAL_FLASH_Program>
      HAL_StatusTypeDef res = HAL_FLASH_Lock();
 800212e:	f7fe f9a7 	bl	8000480 <HAL_FLASH_Lock>
      int stopPrev = mIndexSTOP;
 8002132:	4a45      	ldr	r2, [pc, #276]	; (8002248 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x158>)
 8002134:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8002138:	1c48      	adds	r0, r1, #1
 800213a:	4b44      	ldr	r3, [pc, #272]	; (800224c <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x15c>)
 800213c:	fb83 4300 	smull	r4, r3, r3, r0
 8002140:	111b      	asrs	r3, r3, #4
 8002142:	2432      	movs	r4, #50	; 0x32
 8002144:	fb04 0313 	mls	r3, r4, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8002148:	f892 2037 	ldrb.w	r2, [r2, #55]	; 0x37
 800214c:	4293      	cmp	r3, r2
 800214e:	d005      	beq.n	800215c <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x6c>
      mBuf[ stopPrev ] = aData;
 8002150:	483d      	ldr	r0, [pc, #244]	; (8002248 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x158>)
 8002152:	4401      	add	r1, r0
 8002154:	245a      	movs	r4, #90	; 0x5a
 8002156:	714c      	strb	r4, [r1, #5]
      mIndexSTOP = stopTmp;
 8002158:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 800215c:	4b3a      	ldr	r3, [pc, #232]	; (8002248 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x158>)
 800215e:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8002162:	1c48      	adds	r0, r1, #1
 8002164:	4b39      	ldr	r3, [pc, #228]	; (800224c <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x15c>)
 8002166:	fb83 4300 	smull	r4, r3, r3, r0
 800216a:	111b      	asrs	r3, r3, #4
 800216c:	2432      	movs	r4, #50	; 0x32
 800216e:	fb04 0313 	mls	r3, r4, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8002172:	4293      	cmp	r3, r2
 8002174:	d005      	beq.n	8002182 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x92>
      mBuf[ stopPrev ] = aData;
 8002176:	4834      	ldr	r0, [pc, #208]	; (8002248 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x158>)
 8002178:	4401      	add	r1, r0
 800217a:	2401      	movs	r4, #1
 800217c:	714c      	strb	r4, [r1, #5]
      mIndexSTOP = stopTmp;
 800217e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8002182:	4b31      	ldr	r3, [pc, #196]	; (8002248 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x158>)
 8002184:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8002188:	1c48      	adds	r0, r1, #1
 800218a:	4b30      	ldr	r3, [pc, #192]	; (800224c <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x15c>)
 800218c:	fb83 4300 	smull	r4, r3, r3, r0
 8002190:	111b      	asrs	r3, r3, #4
 8002192:	2432      	movs	r4, #50	; 0x32
 8002194:	fb04 0313 	mls	r3, r4, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8002198:	4293      	cmp	r3, r2
 800219a:	d005      	beq.n	80021a8 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0xb8>
      mBuf[ stopPrev ] = aData;
 800219c:	482a      	ldr	r0, [pc, #168]	; (8002248 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x158>)
 800219e:	4401      	add	r1, r0
 80021a0:	24e0      	movs	r4, #224	; 0xe0
 80021a2:	714c      	strb	r4, [r1, #5]
      mIndexSTOP = stopTmp;
 80021a4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80021a8:	4b27      	ldr	r3, [pc, #156]	; (8002248 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x158>)
 80021aa:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80021ae:	1c48      	adds	r0, r1, #1
 80021b0:	4b26      	ldr	r3, [pc, #152]	; (800224c <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x15c>)
 80021b2:	fb83 4300 	smull	r4, r3, r3, r0
 80021b6:	111b      	asrs	r3, r3, #4
 80021b8:	2432      	movs	r4, #50	; 0x32
 80021ba:	fb04 0313 	mls	r3, r4, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80021be:	4293      	cmp	r3, r2
 80021c0:	d005      	beq.n	80021ce <_ZN5M485E17frameRX_WritePageEhhhhhhh+0xde>
      mBuf[ stopPrev ] = aData;
 80021c2:	4821      	ldr	r0, [pc, #132]	; (8002248 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x158>)
 80021c4:	4401      	add	r1, r0
 80021c6:	24e1      	movs	r4, #225	; 0xe1
 80021c8:	714c      	strb	r4, [r1, #5]
      mIndexSTOP = stopTmp;
 80021ca:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80021ce:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x158>)
 80021d0:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80021d4:	1c48      	adds	r0, r1, #1
 80021d6:	4b1d      	ldr	r3, [pc, #116]	; (800224c <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x15c>)
 80021d8:	fb83 4300 	smull	r4, r3, r3, r0
 80021dc:	111b      	asrs	r3, r3, #4
 80021de:	2432      	movs	r4, #50	; 0x32
 80021e0:	fb04 0313 	mls	r3, r4, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d005      	beq.n	80021f4 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x104>
      mBuf[ stopPrev ] = aData;
 80021e8:	4a17      	ldr	r2, [pc, #92]	; (8002248 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x158>)
 80021ea:	4411      	add	r1, r2
 80021ec:	20ff      	movs	r0, #255	; 0xff
 80021ee:	7148      	strb	r0, [r1, #5]
      mIndexSTOP = stopTmp;
 80021f0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
      if( mIndexSTART == mIndexSTOP ) return false;
 80021f4:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 80021f8:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d00b      	beq.n	8002218 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x128>
      if( mIndexSTART < mIndexSTOP )  (*aCnt) = mIndexSTOP - mIndexSTART;
 8002200:	d207      	bcs.n	8002212 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x122>
 8002202:	1ad4      	subs	r4, r2, r3
      (*aBuf) = &(mBuf[mIndexSTART]);
 8002204:	442b      	add	r3, r5
 8002206:	f103 0805 	add.w	r8, r3, #5
      return true;
 800220a:	2301      	movs	r3, #1
      if( res ){
 800220c:	b93b      	cbnz	r3, 800221e <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x12e>
	g485E.bufAdd( 0xE1 );          // CRC.L
	g485E.bufAdd( 0xFF );

	this->Send_IT();

}// -----------------------------------------------------------
 800220e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else                            (*aCnt) = cBufLength - mIndexSTART;
 8002212:	f1c3 0432 	rsb	r4, r3, #50	; 0x32
 8002216:	e7f5      	b.n	8002204 <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x114>
      int cnt = 0;
 8002218:	2400      	movs	r4, #0
      if( mIndexSTART == mIndexSTOP ) return false;
 800221a:	4623      	mov	r3, r4
 800221c:	e7f6      	b.n	800220c <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x11c>
          _o485E_EN = 1;
 800221e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002222:	7d53      	ldrb	r3, [r2, #21]
 8002224:	f043 0310 	orr.w	r3, r3, #16
 8002228:	7553      	strb	r3, [r2, #21]
          HAL_StatusTypeDef uartRes = HAL_UART_Transmit_IT( mhUart, buf,  cnt );
 800222a:	b2a2      	uxth	r2, r4
 800222c:	4641      	mov	r1, r8
 800222e:	6828      	ldr	r0, [r5, #0]
 8002230:	f7ff f920 	bl	8001474 <HAL_UART_Transmit_IT>
           mIsEN_to_0 += cnt;
 8002234:	f895 3077 	ldrb.w	r3, [r5, #119]	; 0x77
 8002238:	4423      	add	r3, r4
 800223a:	f885 3077 	strb.w	r3, [r5, #119]	; 0x77
          if( uartRes == HAL_OK ){   
 800223e:	2800      	cmp	r0, #0
 8002240:	d1e5      	bne.n	800220e <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x11e>
            mSendingTXCnt = cnt;
 8002242:	63ec      	str	r4, [r5, #60]	; 0x3c
 8002244:	e7e3      	b.n	800220e <_ZN5M485E17frameRX_WritePageEhhhhhhh+0x11e>
 8002246:	bf00      	nop
 8002248:	20000050 	.word	0x20000050
 800224c:	51eb851f 	.word	0x51eb851f

08002250 <_ZN5M485E17frameRX_ErasePageEh>:

// ----------------------------------------------------------
/// ReadPage
void M485E::frameRX_ErasePage( uint8_t pg ){
 8002250:	b570      	push	{r4, r5, r6, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	4604      	mov	r4, r0
 8002256:	460e      	mov	r6, r1
      HAL_StatusTypeDef res = HAL_FLASH_Unlock();
 8002258:	f7fe f8f8 	bl	800044c <HAL_FLASH_Unlock>
    
    /// ERASE ............................................................
    //--------------------------------------------------------------------  
    public: static HAL_StatusTypeDef erasePage( uint16_t aPage ){
      
       uint32_t addr = 0x08000000 + (aPage * 0x800);
 800225c:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8002260:	02f6      	lsls	r6, r6, #11
      
       FLASH_EraseInitTypeDef f;
       f.TypeErase = FLASH_TYPEERASE_PAGES;
 8002262:	2300      	movs	r3, #0
 8002264:	9301      	str	r3, [sp, #4]
       f.PageAddress = addr;
 8002266:	9602      	str	r6, [sp, #8]
       f.NbPages = 1;
 8002268:	2201      	movs	r2, #1
 800226a:	9203      	str	r2, [sp, #12]
      
       uint32_t PageError = 0;
 800226c:	9300      	str	r3, [sp, #0]
       HAL_StatusTypeDef res = HAL_FLASHEx_Erase(&f, &PageError);
 800226e:	4669      	mov	r1, sp
 8002270:	a801      	add	r0, sp, #4
 8002272:	f7fe f9b3 	bl	80005dc <HAL_FLASHEx_Erase>
      HAL_StatusTypeDef res = HAL_FLASH_Lock();
 8002276:	f7fe f903 	bl	8000480 <HAL_FLASH_Lock>
      int stopPrev = mIndexSTOP;
 800227a:	4a44      	ldr	r2, [pc, #272]	; (800238c <_ZN5M485E17frameRX_ErasePageEh+0x13c>)
 800227c:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8002280:	1c48      	adds	r0, r1, #1
 8002282:	4b43      	ldr	r3, [pc, #268]	; (8002390 <_ZN5M485E17frameRX_ErasePageEh+0x140>)
 8002284:	fb83 6300 	smull	r6, r3, r3, r0
 8002288:	111b      	asrs	r3, r3, #4
 800228a:	2632      	movs	r6, #50	; 0x32
 800228c:	fb06 0313 	mls	r3, r6, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8002290:	f892 2037 	ldrb.w	r2, [r2, #55]	; 0x37
 8002294:	4293      	cmp	r3, r2
 8002296:	d005      	beq.n	80022a4 <_ZN5M485E17frameRX_ErasePageEh+0x54>
      mBuf[ stopPrev ] = aData;
 8002298:	483c      	ldr	r0, [pc, #240]	; (800238c <_ZN5M485E17frameRX_ErasePageEh+0x13c>)
 800229a:	4401      	add	r1, r0
 800229c:	265a      	movs	r6, #90	; 0x5a
 800229e:	714e      	strb	r6, [r1, #5]
      mIndexSTOP = stopTmp;
 80022a0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80022a4:	4b39      	ldr	r3, [pc, #228]	; (800238c <_ZN5M485E17frameRX_ErasePageEh+0x13c>)
 80022a6:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80022aa:	1c48      	adds	r0, r1, #1
 80022ac:	4b38      	ldr	r3, [pc, #224]	; (8002390 <_ZN5M485E17frameRX_ErasePageEh+0x140>)
 80022ae:	fb83 6300 	smull	r6, r3, r3, r0
 80022b2:	111b      	asrs	r3, r3, #4
 80022b4:	2632      	movs	r6, #50	; 0x32
 80022b6:	fb06 0313 	mls	r3, r6, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d005      	beq.n	80022ca <_ZN5M485E17frameRX_ErasePageEh+0x7a>
      mBuf[ stopPrev ] = aData;
 80022be:	4833      	ldr	r0, [pc, #204]	; (800238c <_ZN5M485E17frameRX_ErasePageEh+0x13c>)
 80022c0:	4401      	add	r1, r0
 80022c2:	2602      	movs	r6, #2
 80022c4:	714e      	strb	r6, [r1, #5]
      mIndexSTOP = stopTmp;
 80022c6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80022ca:	4b30      	ldr	r3, [pc, #192]	; (800238c <_ZN5M485E17frameRX_ErasePageEh+0x13c>)
 80022cc:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80022d0:	1c48      	adds	r0, r1, #1
 80022d2:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <_ZN5M485E17frameRX_ErasePageEh+0x140>)
 80022d4:	fb83 6300 	smull	r6, r3, r3, r0
 80022d8:	111b      	asrs	r3, r3, #4
 80022da:	2632      	movs	r6, #50	; 0x32
 80022dc:	fb06 0313 	mls	r3, r6, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d005      	beq.n	80022f0 <_ZN5M485E17frameRX_ErasePageEh+0xa0>
      mBuf[ stopPrev ] = aData;
 80022e4:	4829      	ldr	r0, [pc, #164]	; (800238c <_ZN5M485E17frameRX_ErasePageEh+0x13c>)
 80022e6:	4401      	add	r1, r0
 80022e8:	26e0      	movs	r6, #224	; 0xe0
 80022ea:	714e      	strb	r6, [r1, #5]
      mIndexSTOP = stopTmp;
 80022ec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80022f0:	4b26      	ldr	r3, [pc, #152]	; (800238c <_ZN5M485E17frameRX_ErasePageEh+0x13c>)
 80022f2:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80022f6:	1c48      	adds	r0, r1, #1
 80022f8:	4b25      	ldr	r3, [pc, #148]	; (8002390 <_ZN5M485E17frameRX_ErasePageEh+0x140>)
 80022fa:	fb83 6300 	smull	r6, r3, r3, r0
 80022fe:	111b      	asrs	r3, r3, #4
 8002300:	2632      	movs	r6, #50	; 0x32
 8002302:	fb06 0313 	mls	r3, r6, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8002306:	4293      	cmp	r3, r2
 8002308:	d005      	beq.n	8002316 <_ZN5M485E17frameRX_ErasePageEh+0xc6>
      mBuf[ stopPrev ] = aData;
 800230a:	4820      	ldr	r0, [pc, #128]	; (800238c <_ZN5M485E17frameRX_ErasePageEh+0x13c>)
 800230c:	4401      	add	r1, r0
 800230e:	26e1      	movs	r6, #225	; 0xe1
 8002310:	714e      	strb	r6, [r1, #5]
      mIndexSTOP = stopTmp;
 8002312:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8002316:	4b1d      	ldr	r3, [pc, #116]	; (800238c <_ZN5M485E17frameRX_ErasePageEh+0x13c>)
 8002318:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 800231c:	1c48      	adds	r0, r1, #1
 800231e:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <_ZN5M485E17frameRX_ErasePageEh+0x140>)
 8002320:	fb83 6300 	smull	r6, r3, r3, r0
 8002324:	111b      	asrs	r3, r3, #4
 8002326:	2632      	movs	r6, #50	; 0x32
 8002328:	fb06 0313 	mls	r3, r6, r3, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 800232c:	4293      	cmp	r3, r2
 800232e:	d005      	beq.n	800233c <_ZN5M485E17frameRX_ErasePageEh+0xec>
      mBuf[ stopPrev ] = aData;
 8002330:	4a16      	ldr	r2, [pc, #88]	; (800238c <_ZN5M485E17frameRX_ErasePageEh+0x13c>)
 8002332:	4411      	add	r1, r2
 8002334:	20ff      	movs	r0, #255	; 0xff
 8002336:	7148      	strb	r0, [r1, #5]
      mIndexSTOP = stopTmp;
 8002338:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
      if( mIndexSTART == mIndexSTOP ) return false;
 800233c:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8002340:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8002344:	4293      	cmp	r3, r2
 8002346:	d00a      	beq.n	800235e <_ZN5M485E17frameRX_ErasePageEh+0x10e>
      if( mIndexSTART < mIndexSTOP )  (*aCnt) = mIndexSTOP - mIndexSTART;
 8002348:	d206      	bcs.n	8002358 <_ZN5M485E17frameRX_ErasePageEh+0x108>
 800234a:	1ad6      	subs	r6, r2, r3
      (*aBuf) = &(mBuf[mIndexSTART]);
 800234c:	4423      	add	r3, r4
 800234e:	1d5d      	adds	r5, r3, #5
      return true;
 8002350:	2301      	movs	r3, #1
      if( res ){
 8002352:	b93b      	cbnz	r3, 8002364 <_ZN5M485E17frameRX_ErasePageEh+0x114>
	g485E.bufAdd( 0xE0 );          // CRC.H
	g485E.bufAdd( 0xE1 );          // CRC.L
	g485E.bufAdd( 0xFF );

	this->Send_IT();
}// -----------------------------------------------------------
 8002354:	b004      	add	sp, #16
 8002356:	bd70      	pop	{r4, r5, r6, pc}
      else                            (*aCnt) = cBufLength - mIndexSTART;
 8002358:	f1c3 0632 	rsb	r6, r3, #50	; 0x32
 800235c:	e7f6      	b.n	800234c <_ZN5M485E17frameRX_ErasePageEh+0xfc>
      int cnt = 0;
 800235e:	2600      	movs	r6, #0
      if( mIndexSTART == mIndexSTOP ) return false;
 8002360:	4633      	mov	r3, r6
 8002362:	e7f6      	b.n	8002352 <_ZN5M485E17frameRX_ErasePageEh+0x102>
          _o485E_EN = 1;
 8002364:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002368:	7d53      	ldrb	r3, [r2, #21]
 800236a:	f043 0310 	orr.w	r3, r3, #16
 800236e:	7553      	strb	r3, [r2, #21]
          HAL_StatusTypeDef uartRes = HAL_UART_Transmit_IT( mhUart, buf,  cnt );
 8002370:	b2b2      	uxth	r2, r6
 8002372:	4629      	mov	r1, r5
 8002374:	6820      	ldr	r0, [r4, #0]
 8002376:	f7ff f87d 	bl	8001474 <HAL_UART_Transmit_IT>
           mIsEN_to_0 += cnt;
 800237a:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 800237e:	4433      	add	r3, r6
 8002380:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
          if( uartRes == HAL_OK ){   
 8002384:	2800      	cmp	r0, #0
 8002386:	d1e5      	bne.n	8002354 <_ZN5M485E17frameRX_ErasePageEh+0x104>
            mSendingTXCnt = cnt;
 8002388:	63e6      	str	r6, [r4, #60]	; 0x3c
 800238a:	e7e3      	b.n	8002354 <_ZN5M485E17frameRX_ErasePageEh+0x104>
 800238c:	20000050 	.word	0x20000050
 8002390:	51eb851f 	.word	0x51eb851f

08002394 <_ZN5M485E21frameRX_JumpToAddressEhhhh>:
//}// -----------------------------------------------------------

// ----------------------------------------------------------
/// JumpToApplication
void M485E::frameRX_JumpToAddress( uint8_t HH, uint8_t HL, uint8_t LH, uint8_t LL ){
	gJumpAddress = HH << 24 | HL << 16 | LH << 8 | LL;
 8002394:	0412      	lsls	r2, r2, #16
 8002396:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800239a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800239e:	f89d 3000 	ldrb.w	r3, [sp]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	4b02      	ldr	r3, [pc, #8]	; (80023b0 <_ZN5M485E21frameRX_JumpToAddressEhhhh+0x1c>)
 80023a6:	601a      	str	r2, [r3, #0]

	gIsToJump = 1;
 80023a8:	4b02      	ldr	r3, [pc, #8]	; (80023b4 <_ZN5M485E21frameRX_JumpToAddressEhhhh+0x20>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	601a      	str	r2, [r3, #0]
}// -----------------------------------------------------------
 80023ae:	4770      	bx	lr
 80023b0:	200000e4 	.word	0x200000e4
 80023b4:	200000e0 	.word	0x200000e0

080023b8 <_ZN5M485E15sendTX_ReadPageEhhh>:

/*########################################################################################*/

/// ----------------------------------------------------------
// FRAME ReadPage
void M485E::sendTX_ReadPage( uint8_t pg, uint8_t OH, uint8_t OL){
 80023b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023bc:	4604      	mov	r4, r0
	uint16_t offset = OH << 8 | OL;
 80023be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 80023c2:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 80023c6:	02c9      	lsls	r1, r1, #11
      uint32_t res = *(__IO uint32_t*)(addr);
 80023c8:	58cd      	ldr	r5, [r1, r3]
	uint32_t pageData = MFlash::read32(pg,offset);
	uint8_t ll=pageData&(0xff);
 80023ca:	b2e9      	uxtb	r1, r5
	uint8_t lh=(pageData>>8) & 0xff;
 80023cc:	f3c5 2007 	ubfx	r0, r5, #8, #8
	uint8_t hl=(pageData>>16) & 0xff;
 80023d0:	f3c5 4e07 	ubfx	lr, r5, #16, #8
	uint8_t hh=(pageData>>24) & 0xff;
 80023d4:	0e2d      	lsrs	r5, r5, #24
      int stopPrev = mIndexSTOP;
 80023d6:	4b6d      	ldr	r3, [pc, #436]	; (800258c <_ZN5M485E15sendTX_ReadPageEhhh+0x1d4>)
 80023d8:	f893 6038 	ldrb.w	r6, [r3, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80023dc:	1c77      	adds	r7, r6, #1
 80023de:	4a6c      	ldr	r2, [pc, #432]	; (8002590 <_ZN5M485E15sendTX_ReadPageEhhh+0x1d8>)
 80023e0:	fb82 8207 	smull	r8, r2, r2, r7
 80023e4:	1112      	asrs	r2, r2, #4
 80023e6:	f04f 0832 	mov.w	r8, #50	; 0x32
 80023ea:	fb08 7212 	mls	r2, r8, r2, r7
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80023ee:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d007      	beq.n	8002406 <_ZN5M485E15sendTX_ReadPageEhhh+0x4e>
      mBuf[ stopPrev ] = aData;
 80023f6:	4f65      	ldr	r7, [pc, #404]	; (800258c <_ZN5M485E15sendTX_ReadPageEhhh+0x1d4>)
 80023f8:	443e      	add	r6, r7
 80023fa:	f04f 085a 	mov.w	r8, #90	; 0x5a
 80023fe:	f886 8005 	strb.w	r8, [r6, #5]
      mIndexSTOP = stopTmp;
 8002402:	f887 2038 	strb.w	r2, [r7, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8002406:	4a61      	ldr	r2, [pc, #388]	; (800258c <_ZN5M485E15sendTX_ReadPageEhhh+0x1d4>)
 8002408:	f892 6038 	ldrb.w	r6, [r2, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 800240c:	1c77      	adds	r7, r6, #1
 800240e:	4a60      	ldr	r2, [pc, #384]	; (8002590 <_ZN5M485E15sendTX_ReadPageEhhh+0x1d8>)
 8002410:	fb82 8207 	smull	r8, r2, r2, r7
 8002414:	1112      	asrs	r2, r2, #4
 8002416:	f04f 0832 	mov.w	r8, #50	; 0x32
 800241a:	fb08 7212 	mls	r2, r8, r2, r7
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 800241e:	429a      	cmp	r2, r3
 8002420:	d007      	beq.n	8002432 <_ZN5M485E15sendTX_ReadPageEhhh+0x7a>
      mBuf[ stopPrev ] = aData;
 8002422:	4f5a      	ldr	r7, [pc, #360]	; (800258c <_ZN5M485E15sendTX_ReadPageEhhh+0x1d4>)
 8002424:	443e      	add	r6, r7
 8002426:	f04f 0800 	mov.w	r8, #0
 800242a:	f886 8005 	strb.w	r8, [r6, #5]
      mIndexSTOP = stopTmp;
 800242e:	f887 2038 	strb.w	r2, [r7, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8002432:	4a56      	ldr	r2, [pc, #344]	; (800258c <_ZN5M485E15sendTX_ReadPageEhhh+0x1d4>)
 8002434:	f892 6038 	ldrb.w	r6, [r2, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8002438:	1c77      	adds	r7, r6, #1
 800243a:	4a55      	ldr	r2, [pc, #340]	; (8002590 <_ZN5M485E15sendTX_ReadPageEhhh+0x1d8>)
 800243c:	fb82 8207 	smull	r8, r2, r2, r7
 8002440:	1112      	asrs	r2, r2, #4
 8002442:	f04f 0832 	mov.w	r8, #50	; 0x32
 8002446:	fb08 7212 	mls	r2, r8, r2, r7
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 800244a:	429a      	cmp	r2, r3
 800244c:	d004      	beq.n	8002458 <_ZN5M485E15sendTX_ReadPageEhhh+0xa0>
      mBuf[ stopPrev ] = aData;
 800244e:	4f4f      	ldr	r7, [pc, #316]	; (800258c <_ZN5M485E15sendTX_ReadPageEhhh+0x1d4>)
 8002450:	443e      	add	r6, r7
 8002452:	7175      	strb	r5, [r6, #5]
      mIndexSTOP = stopTmp;
 8002454:	f887 2038 	strb.w	r2, [r7, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8002458:	4a4c      	ldr	r2, [pc, #304]	; (800258c <_ZN5M485E15sendTX_ReadPageEhhh+0x1d4>)
 800245a:	f892 5038 	ldrb.w	r5, [r2, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 800245e:	1c6e      	adds	r6, r5, #1
 8002460:	4a4b      	ldr	r2, [pc, #300]	; (8002590 <_ZN5M485E15sendTX_ReadPageEhhh+0x1d8>)
 8002462:	fb82 7206 	smull	r7, r2, r2, r6
 8002466:	1112      	asrs	r2, r2, #4
 8002468:	2732      	movs	r7, #50	; 0x32
 800246a:	fb07 6212 	mls	r2, r7, r2, r6
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 800246e:	429a      	cmp	r2, r3
 8002470:	d005      	beq.n	800247e <_ZN5M485E15sendTX_ReadPageEhhh+0xc6>
      mBuf[ stopPrev ] = aData;
 8002472:	4e46      	ldr	r6, [pc, #280]	; (800258c <_ZN5M485E15sendTX_ReadPageEhhh+0x1d4>)
 8002474:	4435      	add	r5, r6
 8002476:	f885 e005 	strb.w	lr, [r5, #5]
      mIndexSTOP = stopTmp;
 800247a:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 800247e:	4a43      	ldr	r2, [pc, #268]	; (800258c <_ZN5M485E15sendTX_ReadPageEhhh+0x1d4>)
 8002480:	f892 5038 	ldrb.w	r5, [r2, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8002484:	1c6e      	adds	r6, r5, #1
 8002486:	4a42      	ldr	r2, [pc, #264]	; (8002590 <_ZN5M485E15sendTX_ReadPageEhhh+0x1d8>)
 8002488:	fb82 7206 	smull	r7, r2, r2, r6
 800248c:	1112      	asrs	r2, r2, #4
 800248e:	2732      	movs	r7, #50	; 0x32
 8002490:	fb07 6212 	mls	r2, r7, r2, r6
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8002494:	429a      	cmp	r2, r3
 8002496:	d004      	beq.n	80024a2 <_ZN5M485E15sendTX_ReadPageEhhh+0xea>
      mBuf[ stopPrev ] = aData;
 8002498:	4e3c      	ldr	r6, [pc, #240]	; (800258c <_ZN5M485E15sendTX_ReadPageEhhh+0x1d4>)
 800249a:	4435      	add	r5, r6
 800249c:	7168      	strb	r0, [r5, #5]
      mIndexSTOP = stopTmp;
 800249e:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80024a2:	4a3a      	ldr	r2, [pc, #232]	; (800258c <_ZN5M485E15sendTX_ReadPageEhhh+0x1d4>)
 80024a4:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80024a8:	1c45      	adds	r5, r0, #1
 80024aa:	4a39      	ldr	r2, [pc, #228]	; (8002590 <_ZN5M485E15sendTX_ReadPageEhhh+0x1d8>)
 80024ac:	fb82 6205 	smull	r6, r2, r2, r5
 80024b0:	1112      	asrs	r2, r2, #4
 80024b2:	2632      	movs	r6, #50	; 0x32
 80024b4:	fb06 5212 	mls	r2, r6, r2, r5
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d004      	beq.n	80024c6 <_ZN5M485E15sendTX_ReadPageEhhh+0x10e>
      mBuf[ stopPrev ] = aData;
 80024bc:	4d33      	ldr	r5, [pc, #204]	; (800258c <_ZN5M485E15sendTX_ReadPageEhhh+0x1d4>)
 80024be:	4428      	add	r0, r5
 80024c0:	7141      	strb	r1, [r0, #5]
      mIndexSTOP = stopTmp;
 80024c2:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80024c6:	4a31      	ldr	r2, [pc, #196]	; (800258c <_ZN5M485E15sendTX_ReadPageEhhh+0x1d4>)
 80024c8:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80024cc:	1c48      	adds	r0, r1, #1
 80024ce:	4a30      	ldr	r2, [pc, #192]	; (8002590 <_ZN5M485E15sendTX_ReadPageEhhh+0x1d8>)
 80024d0:	fb82 5200 	smull	r5, r2, r2, r0
 80024d4:	1112      	asrs	r2, r2, #4
 80024d6:	2532      	movs	r5, #50	; 0x32
 80024d8:	fb05 0212 	mls	r2, r5, r2, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 80024dc:	429a      	cmp	r2, r3
 80024de:	d005      	beq.n	80024ec <_ZN5M485E15sendTX_ReadPageEhhh+0x134>
      mBuf[ stopPrev ] = aData;
 80024e0:	482a      	ldr	r0, [pc, #168]	; (800258c <_ZN5M485E15sendTX_ReadPageEhhh+0x1d4>)
 80024e2:	4401      	add	r1, r0
 80024e4:	25e0      	movs	r5, #224	; 0xe0
 80024e6:	714d      	strb	r5, [r1, #5]
      mIndexSTOP = stopTmp;
 80024e8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 80024ec:	4a27      	ldr	r2, [pc, #156]	; (800258c <_ZN5M485E15sendTX_ReadPageEhhh+0x1d4>)
 80024ee:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 80024f2:	1c48      	adds	r0, r1, #1
 80024f4:	4a26      	ldr	r2, [pc, #152]	; (8002590 <_ZN5M485E15sendTX_ReadPageEhhh+0x1d8>)
 80024f6:	fb82 5200 	smull	r5, r2, r2, r0
 80024fa:	1112      	asrs	r2, r2, #4
 80024fc:	2532      	movs	r5, #50	; 0x32
 80024fe:	fb05 0212 	mls	r2, r5, r2, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8002502:	429a      	cmp	r2, r3
 8002504:	d005      	beq.n	8002512 <_ZN5M485E15sendTX_ReadPageEhhh+0x15a>
      mBuf[ stopPrev ] = aData;
 8002506:	4821      	ldr	r0, [pc, #132]	; (800258c <_ZN5M485E15sendTX_ReadPageEhhh+0x1d4>)
 8002508:	4401      	add	r1, r0
 800250a:	25e1      	movs	r5, #225	; 0xe1
 800250c:	714d      	strb	r5, [r1, #5]
      mIndexSTOP = stopTmp;
 800250e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
      int stopPrev = mIndexSTOP;
 8002512:	4a1e      	ldr	r2, [pc, #120]	; (800258c <_ZN5M485E15sendTX_ReadPageEhhh+0x1d4>)
 8002514:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
      int stopTmp = (mIndexSTOP+1) % cBufLength;
 8002518:	1c48      	adds	r0, r1, #1
 800251a:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <_ZN5M485E15sendTX_ReadPageEhhh+0x1d8>)
 800251c:	fb82 5200 	smull	r5, r2, r2, r0
 8002520:	1112      	asrs	r2, r2, #4
 8002522:	2532      	movs	r5, #50	; 0x32
 8002524:	fb05 0212 	mls	r2, r5, r2, r0
      if( stopTmp == mIndexSTART ) return false;           // bufor zajety - FAIL
 8002528:	429a      	cmp	r2, r3
 800252a:	d005      	beq.n	8002538 <_ZN5M485E15sendTX_ReadPageEhhh+0x180>
      mBuf[ stopPrev ] = aData;
 800252c:	4b17      	ldr	r3, [pc, #92]	; (800258c <_ZN5M485E15sendTX_ReadPageEhhh+0x1d4>)
 800252e:	4419      	add	r1, r3
 8002530:	20ff      	movs	r0, #255	; 0xff
 8002532:	7148      	strb	r0, [r1, #5]
      mIndexSTOP = stopTmp;
 8002534:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      if( mIndexSTART == mIndexSTOP ) return false;
 8002538:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 800253c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8002540:	4293      	cmp	r3, r2
 8002542:	d00b      	beq.n	800255c <_ZN5M485E15sendTX_ReadPageEhhh+0x1a4>
      if( mIndexSTART < mIndexSTOP )  (*aCnt) = mIndexSTOP - mIndexSTART;
 8002544:	d207      	bcs.n	8002556 <_ZN5M485E15sendTX_ReadPageEhhh+0x19e>
 8002546:	1ad5      	subs	r5, r2, r3
      (*aBuf) = &(mBuf[mIndexSTART]);
 8002548:	4423      	add	r3, r4
 800254a:	f103 0c05 	add.w	ip, r3, #5
      return true;
 800254e:	2301      	movs	r3, #1
      if( res ){
 8002550:	b93b      	cbnz	r3, 8002562 <_ZN5M485E15sendTX_ReadPageEhhh+0x1aa>
	g485E.bufAdd( 0xE0 );          // CRC.H
	g485E.bufAdd( 0xE1 );          // CRC.L
	g485E.bufAdd( 0xFF );
	this->Send_IT();

}// -----------------------------------------------------------
 8002552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else                            (*aCnt) = cBufLength - mIndexSTART;
 8002556:	f1c3 0532 	rsb	r5, r3, #50	; 0x32
 800255a:	e7f5      	b.n	8002548 <_ZN5M485E15sendTX_ReadPageEhhh+0x190>
      int cnt = 0;
 800255c:	2500      	movs	r5, #0
      if( mIndexSTART == mIndexSTOP ) return false;
 800255e:	462b      	mov	r3, r5
 8002560:	e7f6      	b.n	8002550 <_ZN5M485E15sendTX_ReadPageEhhh+0x198>
          _o485E_EN = 1;
 8002562:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002566:	7d53      	ldrb	r3, [r2, #21]
 8002568:	f043 0310 	orr.w	r3, r3, #16
 800256c:	7553      	strb	r3, [r2, #21]
          HAL_StatusTypeDef uartRes = HAL_UART_Transmit_IT( mhUart, buf,  cnt );
 800256e:	b2aa      	uxth	r2, r5
 8002570:	4661      	mov	r1, ip
 8002572:	6820      	ldr	r0, [r4, #0]
 8002574:	f7fe ff7e 	bl	8001474 <HAL_UART_Transmit_IT>
           mIsEN_to_0 += cnt;
 8002578:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 800257c:	442b      	add	r3, r5
 800257e:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
          if( uartRes == HAL_OK ){   
 8002582:	2800      	cmp	r0, #0
 8002584:	d1e5      	bne.n	8002552 <_ZN5M485E15sendTX_ReadPageEhhh+0x19a>
            mSendingTXCnt = cnt;
 8002586:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002588:	e7e3      	b.n	8002552 <_ZN5M485E15sendTX_ReadPageEhhh+0x19a>
 800258a:	bf00      	nop
 800258c:	20000050 	.word	0x20000050
 8002590:	51eb851f 	.word	0x51eb851f

08002594 <_ZN5M485E9onReceiveEh>:

int tabIndex = 0;
uint8_t tab[100];


void M485E::onReceive( uint8_t aCh ){
 8002594:	b510      	push	{r4, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	4604      	mov	r4, r0
  
//  ITM_EVENT8( 1, mRXBuf[0] );

	//DEBUG
	tab[tabIndex] = aCh;
 800259a:	4aa1      	ldr	r2, [pc, #644]	; (8002820 <_ZN5M485E9onReceiveEh+0x28c>)
 800259c:	6813      	ldr	r3, [r2, #0]
 800259e:	48a1      	ldr	r0, [pc, #644]	; (8002824 <_ZN5M485E9onReceiveEh+0x290>)
 80025a0:	54c1      	strb	r1, [r0, r3]
	tabIndex += 1;
 80025a2:	3301      	adds	r3, #1
 80025a4:	6013      	str	r3, [r2, #0]
	if( tabIndex >= 100 ) tabIndex = 0;
 80025a6:	2b63      	cmp	r3, #99	; 0x63
 80025a8:	dd02      	ble.n	80025b0 <_ZN5M485E9onReceiveEh+0x1c>
 80025aa:	4613      	mov	r3, r2
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
      
INTTOPC_PROC_LABEL:
    switch( mRecState ){
 80025b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025b2:	2b39      	cmp	r3, #57	; 0x39
 80025b4:	f200 8131 	bhi.w	800281a <_ZN5M485E9onReceiveEh+0x286>
 80025b8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80025bc:	003c003a 	.word	0x003c003a
 80025c0:	012f003e 	.word	0x012f003e
 80025c4:	012f012f 	.word	0x012f012f
 80025c8:	012f012f 	.word	0x012f012f
 80025cc:	012f012f 	.word	0x012f012f
 80025d0:	00650052 	.word	0x00650052
 80025d4:	006f006a 	.word	0x006f006a
 80025d8:	00790074 	.word	0x00790074
 80025dc:	0083007e 	.word	0x0083007e
 80025e0:	012f012f 	.word	0x012f012f
 80025e4:	00960091 	.word	0x00960091
 80025e8:	00a0009b 	.word	0x00a0009b
 80025ec:	00aa00a5 	.word	0x00aa00a5
 80025f0:	00b400af 	.word	0x00b400af
 80025f4:	012f012f 	.word	0x012f012f
 80025f8:	00d300ce 	.word	0x00d300ce
 80025fc:	00dd00d8 	.word	0x00dd00d8
 8002600:	00e700e2 	.word	0x00e700e2
 8002604:	00f100ec 	.word	0x00f100ec
 8002608:	012f012f 	.word	0x012f012f
 800260c:	012f012f 	.word	0x012f012f
 8002610:	012f012f 	.word	0x012f012f
 8002614:	012f012f 	.word	0x012f012f
 8002618:	012f012f 	.word	0x012f012f
 800261c:	012f012f 	.word	0x012f012f
 8002620:	010000fb 	.word	0x010000fb
 8002624:	010a0105 	.word	0x010a0105
 8002628:	0114010f 	.word	0x0114010f
 800262c:	011e0119 	.word	0x011e0119
      // ------------------------------------------------

    case 0:
    	if( aCh == 0x55 ){
 8002630:	2955      	cmp	r1, #85	; 0x55
 8002632:	d005      	beq.n	8002640 <_ZN5M485E9onReceiveEh+0xac>
    		mRXFrameBuf[0] = aCh;
			mRecState += 1;
			break;}

    case 1:
    	if( aCh == 0x04 ){
 8002634:	2904      	cmp	r1, #4
 8002636:	d008      	beq.n	800264a <_ZN5M485E9onReceiveEh+0xb6>
    		mRXFrameBuf[1] = aCh;
			mRecState += 1;
			break;}
    case 2:
    	if( aCh == 0x00 ){
 8002638:	b961      	cbnz	r1, 8002654 <_ZN5M485E9onReceiveEh+0xc0>
			mRecState = 10;
 800263a:	230a      	movs	r3, #10
 800263c:	6423      	str	r3, [r4, #64]	; 0x40
			break;}
 800263e:	e013      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
    		mRXFrameBuf[0] = aCh;
 8002640:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
			mRecState += 1;
 8002644:	3301      	adds	r3, #1
 8002646:	6423      	str	r3, [r4, #64]	; 0x40
			break;}
 8002648:	e00e      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
    		mRXFrameBuf[1] = aCh;
 800264a:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
			mRecState += 1;
 800264e:	3301      	adds	r3, #1
 8002650:	6423      	str	r3, [r4, #64]	; 0x40
			break;}
 8002652:	e009      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
    	if( aCh == 0x01 ){
 8002654:	2901      	cmp	r1, #1
 8002656:	d00d      	beq.n	8002674 <_ZN5M485E9onReceiveEh+0xe0>
			mRecState = 20;
			break;}
    	if( aCh == 0x02 ){
 8002658:	2902      	cmp	r1, #2
 800265a:	d00e      	beq.n	800267a <_ZN5M485E9onReceiveEh+0xe6>
			mRecState = 30;
			break;}
    	if( aCh == 0x0E ){
 800265c:	290e      	cmp	r1, #14
 800265e:	d00f      	beq.n	8002680 <_ZN5M485E9onReceiveEh+0xec>
//    		mRecState = 40;
//    		break;
//    	}

    //ReadPage
    case 10: mRXFrameBuf[2] = aCh; mRecState += 1; break; //page
 8002660:	f884 104f 	strb.w	r1, [r4, #79]	; 0x4f
 8002664:	3301      	adds	r3, #1
 8002666:	6423      	str	r3, [r4, #64]	; 0x40
            goto INTTOPC_PROC_LABEL; };
            break;
        };

        // --- RESET WDT ---------------------
        if( mRecState == 0 )
 8002668:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800266a:	b90b      	cbnz	r3, 8002670 <_ZN5M485E9onReceiveEh+0xdc>
           mFrameTimeOutCnt = 20; // 100 = 1s
 800266c:	2314      	movs	r3, #20
 800266e:	6463      	str	r3, [r4, #68]	; 0x44
    
}//-------------------------------------------------------------------------
 8002670:	b004      	add	sp, #16
 8002672:	bd10      	pop	{r4, pc}
			mRecState = 20;
 8002674:	2314      	movs	r3, #20
 8002676:	6423      	str	r3, [r4, #64]	; 0x40
			break;}
 8002678:	e7f6      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
			mRecState = 30;
 800267a:	231e      	movs	r3, #30
 800267c:	6423      	str	r3, [r4, #64]	; 0x40
			break;}
 800267e:	e7f3      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
    		mRecState = 50;
 8002680:	2332      	movs	r3, #50	; 0x32
 8002682:	6423      	str	r3, [r4, #64]	; 0x40
    		break;
 8002684:	e7f0      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
    case 11: mRXFrameBuf[3] = aCh; mRecState += 1; break; //OH
 8002686:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 800268a:	3301      	adds	r3, #1
 800268c:	6423      	str	r3, [r4, #64]	; 0x40
 800268e:	e7eb      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
    case 12: mRXFrameBuf[4] = aCh; mRecState += 1; break; //OL
 8002690:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
 8002694:	3301      	adds	r3, #1
 8002696:	6423      	str	r3, [r4, #64]	; 0x40
 8002698:	e7e6      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
    case 13: mRXFrameBuf[5] = aCh; mRecState += 1; break; //HH
 800269a:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
 800269e:	3301      	adds	r3, #1
 80026a0:	6423      	str	r3, [r4, #64]	; 0x40
 80026a2:	e7e1      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
    case 14: mRXFrameBuf[6] = aCh; mRecState += 1; break; //HL
 80026a4:	f884 1053 	strb.w	r1, [r4, #83]	; 0x53
 80026a8:	3301      	adds	r3, #1
 80026aa:	6423      	str	r3, [r4, #64]	; 0x40
 80026ac:	e7dc      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
    case 15: mRXFrameBuf[7] = aCh; mRecState += 1; break; //LH
 80026ae:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
 80026b2:	3301      	adds	r3, #1
 80026b4:	6423      	str	r3, [r4, #64]	; 0x40
 80026b6:	e7d7      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
    case 16: mRXFrameBuf[8] = aCh; mRecState += 1; break; //LL
 80026b8:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
 80026bc:	3301      	adds	r3, #1
 80026be:	6423      	str	r3, [r4, #64]	; 0x40
 80026c0:	e7d2      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
    case 17: mRXFrameBuf[9] = aCh; sendTX_ReadPage( mRXFrameBuf[2], mRXFrameBuf[3], mRXFrameBuf[4] ); mRecState = 0; break;
 80026c2:	f884 1056 	strb.w	r1, [r4, #86]	; 0x56
 80026c6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80026ca:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 80026ce:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 80026d2:	4620      	mov	r0, r4
 80026d4:	f7ff fe70 	bl	80023b8 <_ZN5M485E15sendTX_ReadPageEhhh>
 80026d8:	2300      	movs	r3, #0
 80026da:	6423      	str	r3, [r4, #64]	; 0x40
 80026dc:	e7c4      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 20: mRXFrameBuf[2] = aCh; mRecState += 1; break; //page
 80026de:	f884 104f 	strb.w	r1, [r4, #79]	; 0x4f
 80026e2:	3301      	adds	r3, #1
 80026e4:	6423      	str	r3, [r4, #64]	; 0x40
 80026e6:	e7bf      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 21: mRXFrameBuf[3] = aCh; mRecState += 1; break; //OH
 80026e8:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 80026ec:	3301      	adds	r3, #1
 80026ee:	6423      	str	r3, [r4, #64]	; 0x40
 80026f0:	e7ba      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 22: mRXFrameBuf[4] = aCh; mRecState += 1; break; //OL
 80026f2:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
 80026f6:	3301      	adds	r3, #1
 80026f8:	6423      	str	r3, [r4, #64]	; 0x40
 80026fa:	e7b5      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 23: mRXFrameBuf[5] = aCh; mRecState += 1; break; //HH
 80026fc:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
 8002700:	3301      	adds	r3, #1
 8002702:	6423      	str	r3, [r4, #64]	; 0x40
 8002704:	e7b0      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 24: mRXFrameBuf[6] = aCh; mRecState += 1; break; //HL
 8002706:	f884 1053 	strb.w	r1, [r4, #83]	; 0x53
 800270a:	3301      	adds	r3, #1
 800270c:	6423      	str	r3, [r4, #64]	; 0x40
 800270e:	e7ab      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 25: mRXFrameBuf[7] = aCh; mRecState += 1; break; //LH
 8002710:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
 8002714:	3301      	adds	r3, #1
 8002716:	6423      	str	r3, [r4, #64]	; 0x40
 8002718:	e7a6      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 26: mRXFrameBuf[8] = aCh; mRecState += 1; break; //LL
 800271a:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
 800271e:	3301      	adds	r3, #1
 8002720:	6423      	str	r3, [r4, #64]	; 0x40
 8002722:	e7a1      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 27: mRXFrameBuf[9] = aCh; frameRX_WritePage( mRXFrameBuf[2], mRXFrameBuf[3], mRXFrameBuf[4], mRXFrameBuf[5], mRXFrameBuf[6], mRXFrameBuf[7], mRXFrameBuf[8]); mRecState = 0; break;
 8002724:	f884 1056 	strb.w	r1, [r4, #86]	; 0x56
 8002728:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 800272c:	9303      	str	r3, [sp, #12]
 800272e:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8002732:	9302      	str	r3, [sp, #8]
 8002734:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8002738:	9301      	str	r3, [sp, #4]
 800273a:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002744:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8002748:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 800274c:	4620      	mov	r0, r4
 800274e:	f7ff fccf 	bl	80020f0 <_ZN5M485E17frameRX_WritePageEhhhhhhh>
 8002752:	2300      	movs	r3, #0
 8002754:	6423      	str	r3, [r4, #64]	; 0x40
 8002756:	e787      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 30: mRXFrameBuf[2] = aCh; mRecState += 1; break;
 8002758:	f884 104f 	strb.w	r1, [r4, #79]	; 0x4f
 800275c:	3301      	adds	r3, #1
 800275e:	6423      	str	r3, [r4, #64]	; 0x40
 8002760:	e782      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 31: mRXFrameBuf[3] = aCh; mRecState += 1; break;
 8002762:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 8002766:	3301      	adds	r3, #1
 8002768:	6423      	str	r3, [r4, #64]	; 0x40
 800276a:	e77d      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 32: mRXFrameBuf[4] = aCh; mRecState += 1; break;
 800276c:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
 8002770:	3301      	adds	r3, #1
 8002772:	6423      	str	r3, [r4, #64]	; 0x40
 8002774:	e778      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 33: mRXFrameBuf[5] = aCh; mRecState += 1; break;
 8002776:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
 800277a:	3301      	adds	r3, #1
 800277c:	6423      	str	r3, [r4, #64]	; 0x40
 800277e:	e773      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 34: mRXFrameBuf[6] = aCh; mRecState += 1; break;
 8002780:	f884 1053 	strb.w	r1, [r4, #83]	; 0x53
 8002784:	3301      	adds	r3, #1
 8002786:	6423      	str	r3, [r4, #64]	; 0x40
 8002788:	e76e      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 35: mRXFrameBuf[7] = aCh; mRecState += 1; break;
 800278a:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
 800278e:	3301      	adds	r3, #1
 8002790:	6423      	str	r3, [r4, #64]	; 0x40
 8002792:	e769      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 36: mRXFrameBuf[8] = aCh; mRecState += 1; break;
 8002794:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
 8002798:	3301      	adds	r3, #1
 800279a:	6423      	str	r3, [r4, #64]	; 0x40
 800279c:	e764      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 37: mRXFrameBuf[9] = aCh; frameRX_ErasePage( mRXFrameBuf[2] ); mRecState = 0; break;
 800279e:	f884 1056 	strb.w	r1, [r4, #86]	; 0x56
 80027a2:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 80027a6:	4620      	mov	r0, r4
 80027a8:	f7ff fd52 	bl	8002250 <_ZN5M485E17frameRX_ErasePageEh>
 80027ac:	2300      	movs	r3, #0
 80027ae:	6423      	str	r3, [r4, #64]	; 0x40
 80027b0:	e75a      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 50: mRXFrameBuf[2] = aCh; mRecState += 1; break;
 80027b2:	f884 104f 	strb.w	r1, [r4, #79]	; 0x4f
 80027b6:	3301      	adds	r3, #1
 80027b8:	6423      	str	r3, [r4, #64]	; 0x40
 80027ba:	e755      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 51: mRXFrameBuf[3] = aCh; mRecState += 1; break;
 80027bc:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 80027c0:	3301      	adds	r3, #1
 80027c2:	6423      	str	r3, [r4, #64]	; 0x40
 80027c4:	e750      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 52: mRXFrameBuf[4] = aCh; mRecState += 1; break;
 80027c6:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
 80027ca:	3301      	adds	r3, #1
 80027cc:	6423      	str	r3, [r4, #64]	; 0x40
 80027ce:	e74b      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 53: mRXFrameBuf[5] = aCh; mRecState += 1; break;
 80027d0:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
 80027d4:	3301      	adds	r3, #1
 80027d6:	6423      	str	r3, [r4, #64]	; 0x40
 80027d8:	e746      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 54: mRXFrameBuf[6] = aCh; mRecState += 1; break;
 80027da:	f884 1053 	strb.w	r1, [r4, #83]	; 0x53
 80027de:	3301      	adds	r3, #1
 80027e0:	6423      	str	r3, [r4, #64]	; 0x40
 80027e2:	e741      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 55: mRXFrameBuf[7] = aCh; mRecState += 1; break;
 80027e4:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
 80027e8:	3301      	adds	r3, #1
 80027ea:	6423      	str	r3, [r4, #64]	; 0x40
 80027ec:	e73c      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 56: mRXFrameBuf[8] = aCh; mRecState += 1; break;
 80027ee:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
 80027f2:	3301      	adds	r3, #1
 80027f4:	6423      	str	r3, [r4, #64]	; 0x40
 80027f6:	e737      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
	case 57: mRXFrameBuf[9] = aCh; frameRX_JumpToAddress( mRXFrameBuf[5], mRXFrameBuf[6], mRXFrameBuf[7], mRXFrameBuf[8] ); mRecState = 0; break;
 80027f8:	f884 1056 	strb.w	r1, [r4, #86]	; 0x56
 80027fc:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8002806:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
 800280a:	f894 1052 	ldrb.w	r1, [r4, #82]	; 0x52
 800280e:	4620      	mov	r0, r4
 8002810:	f7ff fdc0 	bl	8002394 <_ZN5M485E21frameRX_JumpToAddressEhhhh>
 8002814:	2300      	movs	r3, #0
 8002816:	6423      	str	r3, [r4, #64]	; 0x40
 8002818:	e726      	b.n	8002668 <_ZN5M485E9onReceiveEh+0xd4>
            mRecState = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	6423      	str	r3, [r4, #64]	; 0x40
            goto INTTOPC_PROC_LABEL; };
 800281e:	e6c7      	b.n	80025b0 <_ZN5M485E9onReceiveEh+0x1c>
 8002820:	2000015c 	.word	0x2000015c
 8002824:	200000f8 	.word	0x200000f8

08002828 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart ) { 
 8002828:	b508      	push	{r3, lr}
  if( huart == g485E.mhUart   )  g485E.onIT_RX(); 
 800282a:	4b17      	ldr	r3, [pc, #92]	; (8002888 <HAL_UART_RxCpltCallback+0x60>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4283      	cmp	r3, r0
 8002830:	d000      	beq.n	8002834 <HAL_UART_RxCpltCallback+0xc>
 }//----------------------------------------------------------------------------
 8002832:	bd08      	pop	{r3, pc}
          if( _o485E_EN == 0 ){
 8002834:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002838:	7d5b      	ldrb	r3, [r3, #21]
 800283a:	f013 0f10 	tst.w	r3, #16
 800283e:	d011      	beq.n	8002864 <HAL_UART_RxCpltCallback+0x3c>
        if( mIsEN_to_0 <= 0 ){
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <HAL_UART_RxCpltCallback+0x60>)
 8002842:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8002846:	b99b      	cbnz	r3, 8002870 <HAL_UART_RxCpltCallback+0x48>
      return ( mIndexSTART == mIndexSTOP );
 8002848:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <HAL_UART_RxCpltCallback+0x60>)
 800284a:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800284e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
          if( isEmpty() ){
 8002852:	429a      	cmp	r2, r3
 8002854:	d110      	bne.n	8002878 <HAL_UART_RxCpltCallback+0x50>
            _o485E_EN = 0;
 8002856:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800285a:	7d53      	ldrb	r3, [r2, #21]
 800285c:	f36f 1304 	bfc	r3, #4, #1
 8002860:	7553      	strb	r3, [r2, #21]
 8002862:	e009      	b.n	8002878 <HAL_UART_RxCpltCallback+0x50>
            onReceive( mRXBuf[0] );
 8002864:	4808      	ldr	r0, [pc, #32]	; (8002888 <HAL_UART_RxCpltCallback+0x60>)
 8002866:	f890 104a 	ldrb.w	r1, [r0, #74]	; 0x4a
 800286a:	f7ff fe93 	bl	8002594 <_ZN5M485E9onReceiveEh>
 800286e:	e7e7      	b.n	8002840 <HAL_UART_RxCpltCallback+0x18>
          mIsEN_to_0 -= 1;
 8002870:	3b01      	subs	r3, #1
 8002872:	4a05      	ldr	r2, [pc, #20]	; (8002888 <HAL_UART_RxCpltCallback+0x60>)
 8002874:	f882 3077 	strb.w	r3, [r2, #119]	; 0x77
      HAL_UART_Receive_IT(  mhUart, mRXBuf, 1 );
 8002878:	4903      	ldr	r1, [pc, #12]	; (8002888 <HAL_UART_RxCpltCallback+0x60>)
 800287a:	f851 0b4a 	ldr.w	r0, [r1], #74
 800287e:	2201      	movs	r2, #1
 8002880:	f7ff fabe 	bl	8001e00 <HAL_UART_Receive_IT>
 8002884:	e7d5      	b.n	8002832 <HAL_UART_RxCpltCallback+0xa>
 8002886:	bf00      	nop
 8002888:	20000050 	.word	0x20000050

0800288c <_ZN10MFlash_SSD10initParamsEv>:
#define __MFlash_SSD_CPP_BH704_H

    // [0]      1B       g485E.mMyAddr
    
/// ---------------------------------------------------------
uint32_t  MFlash_SSD::initParams(){
 800288c:	b570      	push	{r4, r5, r6, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	4604      	mov	r4, r0
  
    set8(   0, g485E.mMyAddr );
 8002892:	4b87      	ldr	r3, [pc, #540]	; (8002ab0 <_ZN10MFlash_SSD10initParamsEv+0x224>)
 8002894:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74

    
    // *** Table ***************************************************
    public: uint8_t get8( uint16_t aIndex ){
      if( aIndex >= _SSD_TABSIZE_ ) return 0xFF;         // blad indeksu
      return mTable[ aIndex ];
 8002898:	7b42      	ldrb	r2, [r0, #13]

    
    public: void set8( uint16_t aIndex, uint8_t aValue ){
      if( aIndex >= _SSD_TABSIZE_ ) return;             // blad indeksu
      uint8_t prevWrt = get8(aIndex);
      if( prevWrt != aValue ){
 800289a:	4293      	cmp	r3, r2
 800289c:	d107      	bne.n	80028ae <_ZN10MFlash_SSD10initParamsEv+0x22>
        for( int i=0; i<((_SSD_TABSIZE_/8)+1); i++ ) mChangeTable[i] = 0xFF;
 800289e:	2300      	movs	r3, #0
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	dc0a      	bgt.n	80028ba <_ZN10MFlash_SSD10initParamsEv+0x2e>
 80028a4:	18e2      	adds	r2, r4, r3
 80028a6:	21ff      	movs	r1, #255	; 0xff
 80028a8:	7551      	strb	r1, [r2, #21]
 80028aa:	3301      	adds	r3, #1
 80028ac:	e7f8      	b.n	80028a0 <_ZN10MFlash_SSD10initParamsEv+0x14>
          mTable[ aIndex ] = aValue;
 80028ae:	7343      	strb	r3, [r0, #13]
        mChangeTable[ind8A] |= (maska);      
 80028b0:	7d43      	ldrb	r3, [r0, #21]
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	7543      	strb	r3, [r0, #21]
 80028b8:	e7f1      	b.n	800289e <_ZN10MFlash_SSD10initParamsEv+0x12>
    // nie trzeba zerowac flash wcale, nadpisze stare wartosci w tablicy
     public: void parseFlash(){
       
       changeTable_allSet();
       // idz po adresach flash 
       mOffset = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60a3      	str	r3, [r4, #8]
 80028be:	e01b      	b.n	80028f8 <_ZN10MFlash_SSD10initParamsEv+0x6c>
        int ind8B = aIndex - ind8A*8;
 80028c0:	f002 0107 	and.w	r1, r2, #7
        uint8_t maska = 0x01 << ind8B; 
 80028c4:	2301      	movs	r3, #1
 80028c6:	408b      	lsls	r3, r1
 80028c8:	b2db      	uxtb	r3, r3
        mChangeTable[ind8A] |= (maska);      
 80028ca:	eb04 01d2 	add.w	r1, r4, r2, lsr #3
 80028ce:	7d48      	ldrb	r0, [r1, #21]
 80028d0:	4303      	orrs	r3, r0
 80028d2:	754b      	strb	r3, [r1, #21]
        if( aIndex >= _SSD_TABSIZE_ ) return;           // blad indeksu
 80028d4:	2a07      	cmp	r2, #7
 80028d6:	d80a      	bhi.n	80028ee <_ZN10MFlash_SSD10initParamsEv+0x62>
        int ind8B = aIndex - ind8A*8;
 80028d8:	f002 0107 	and.w	r1, r2, #7
        uint8_t maska = 0x01 << ind8B; 
 80028dc:	2301      	movs	r3, #1
 80028de:	fa03 f101 	lsl.w	r1, r3, r1
        mChangeTable[ind8A] &= (~maska);
 80028e2:	eb04 02d2 	add.w	r2, r4, r2, lsr #3
 80028e6:	7d53      	ldrb	r3, [r2, #21]
 80028e8:	ea23 0301 	bic.w	r3, r3, r1
 80028ec:	7553      	strb	r3, [r2, #21]
              // nie obslugiwana ramka !!!
              continue;
            }
            
            
       }while( mOffset < (2048-1) );
 80028ee:	68a2      	ldr	r2, [r4, #8]
 80028f0:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80028f4:	429a      	cmp	r2, r3
 80028f6:	dc26      	bgt.n	8002946 <_ZN10MFlash_SSD10initParamsEv+0xba>
            uint16_t dana = MFlash::read16( mPage, mOffset );
 80028f8:	68a2      	ldr	r2, [r4, #8]
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 80028fa:	8823      	ldrh	r3, [r4, #0]
 80028fc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002900:	02db      	lsls	r3, r3, #11
 8002902:	b291      	uxth	r1, r2
      uint16_t res = *(__IO uint16_t*)(addr);
 8002904:	5acb      	ldrh	r3, [r1, r3]
 8002906:	b29b      	uxth	r3, r3
            if( dana == 0xFFFF ) break;         // koniec przetwarzania
 8002908:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800290c:	428b      	cmp	r3, r1
 800290e:	d01a      	beq.n	8002946 <_ZN10MFlash_SSD10initParamsEv+0xba>
            mOffset += 2;                       // zmien offset przed continue
 8002910:	3202      	adds	r2, #2
 8002912:	60a2      	str	r2, [r4, #8]
            if( dana == 0x0000 ) continue;      // wykasowane
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0ea      	beq.n	80028ee <_ZN10MFlash_SSD10initParamsEv+0x62>
            if( (dana & 0x8000) == 0 ){ 
 8002918:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800291c:	d1e7      	bne.n	80028ee <_ZN10MFlash_SSD10initParamsEv+0x62>
              uint16_t index = (dana >> 8) & 0x7F; 
 800291e:	f3c3 2206 	ubfx	r2, r3, #8, #7
              if( index == 0x00 )  continue;      // index+1 - zabezpieczenie przed skasowaniem
 8002922:	f413 4ffe 	tst.w	r3, #32512	; 0x7f00
 8002926:	d0e2      	beq.n	80028ee <_ZN10MFlash_SSD10initParamsEv+0x62>
              index -= 1;
 8002928:	3a01      	subs	r2, #1
 800292a:	b292      	uxth	r2, r2
              if( index >= _SSD_TABSIZE_ ) continue; // blad za duzy index !!!
 800292c:	2a07      	cmp	r2, #7
 800292e:	d8de      	bhi.n	80028ee <_ZN10MFlash_SSD10initParamsEv+0x62>
              set8( index, wrt ); // + ustawi changeTable na 1
 8002930:	b2db      	uxtb	r3, r3
      if( aIndex >= _SSD_TABSIZE_ ) return;             // blad indeksu
 8002932:	d8cf      	bhi.n	80028d4 <_ZN10MFlash_SSD10initParamsEv+0x48>
      return mTable[ aIndex ];
 8002934:	18a1      	adds	r1, r4, r2
 8002936:	7b49      	ldrb	r1, [r1, #13]
      if( prevWrt != aValue ){
 8002938:	428b      	cmp	r3, r1
 800293a:	d0cb      	beq.n	80028d4 <_ZN10MFlash_SSD10initParamsEv+0x48>
          mTable[ aIndex ] = aValue;
 800293c:	18a1      	adds	r1, r4, r2
 800293e:	734b      	strb	r3, [r1, #13]
        if( aIndex >= _SSD_TABSIZE_ ) return;           // blad indeksu
 8002940:	2a07      	cmp	r2, #7
 8002942:	d9bd      	bls.n	80028c0 <_ZN10MFlash_SSD10initParamsEv+0x34>
 8002944:	e7c6      	b.n	80028d4 <_ZN10MFlash_SSD10initParamsEv+0x48>
  // NIE ZERUJE mOffset
  public: void flash_searchFF(){
    
       // --- ustaw odpowiednio offset - na pierwsze FF -------
       do{
          uint16_t dana = MFlash::read16( mPage, mOffset );
 8002946:	68a2      	ldr	r2, [r4, #8]
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 8002948:	8823      	ldrh	r3, [r4, #0]
 800294a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800294e:	02db      	lsls	r3, r3, #11
 8002950:	b291      	uxth	r1, r2
      uint16_t res = *(__IO uint16_t*)(addr);
 8002952:	5acb      	ldrh	r3, [r1, r3]
 8002954:	b29b      	uxth	r3, r3
          if( dana == 0xFFFF ) return;         // koniec przetwarzania
 8002956:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800295a:	428b      	cmp	r3, r1
 800295c:	d005      	beq.n	800296a <_ZN10MFlash_SSD10initParamsEv+0xde>
          mOffset += 2;
 800295e:	3202      	adds	r2, #2
 8002960:	60a2      	str	r2, [r4, #8]
       }while( mOffset < (2048-1) );
 8002962:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8002966:	429a      	cmp	r2, r3
 8002968:	dded      	ble.n	8002946 <_ZN10MFlash_SSD10initParamsEv+0xba>
      return mTable[ aIndex ];
 800296a:	7b62      	ldrb	r2, [r4, #13]
    
    parseFlash();
    
    g485E.mMyAddr   = get8( 0 );
 800296c:	4b50      	ldr	r3, [pc, #320]	; (8002ab0 <_ZN10MFlash_SSD10initParamsEv+0x224>)
 800296e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  public: uint8_t flush(){
      // zapisz wszystkie wpisy z tablicy stosownie do mChangeTable
      
    // idz po kolei po bitach mChange Table
        // tutaj zmieniac index oraz maske - troche trudniejsze
     for( int i=0; i<(_SSD_TABSIZE_); i++ ){
 8002972:	2500      	movs	r5, #0
 8002974:	e019      	b.n	80029aa <_ZN10MFlash_SSD10initParamsEv+0x11e>
      if( mOffset >= (2048-1) )     return 2; // blad FLASH: ERASE REQ
            
      // --- upewnij sie ze mOffset jest ok -----
      { uint16_t dana = MFlash::read16( mPage, mOffset );
        if( dana != 0xFFFF ){
          mOffset = 0;  flash_searchFF();
 8002976:	2300      	movs	r3, #0
 8002978:	60a3      	str	r3, [r4, #8]
          uint16_t dana = MFlash::read16( mPage, mOffset );
 800297a:	68a2      	ldr	r2, [r4, #8]
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 800297c:	8823      	ldrh	r3, [r4, #0]
 800297e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002982:	02db      	lsls	r3, r3, #11
 8002984:	b291      	uxth	r1, r2
      uint16_t res = *(__IO uint16_t*)(addr);
 8002986:	5acb      	ldrh	r3, [r1, r3]
 8002988:	b29b      	uxth	r3, r3
          if( dana == 0xFFFF ) return;         // koniec przetwarzania
 800298a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800298e:	428b      	cmp	r3, r1
 8002990:	d02b      	beq.n	80029ea <_ZN10MFlash_SSD10initParamsEv+0x15e>
          mOffset += 2;
 8002992:	3202      	adds	r2, #2
 8002994:	60a2      	str	r2, [r4, #8]
       }while( mOffset < (2048-1) );
 8002996:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800299a:	429a      	cmp	r2, r3
 800299c:	dded      	ble.n	800297a <_ZN10MFlash_SSD10initParamsEv+0xee>
 800299e:	e024      	b.n	80029ea <_ZN10MFlash_SSD10initParamsEv+0x15e>
      if( aIndex >= _SSD_TABSIZE_ ) return 1; // blad indeksu: za duzy
 80029a0:	2301      	movs	r3, #1
            uint8_t res = flushIndex( i );
 80029a2:	b2db      	uxtb	r3, r3
            if( res == 2 ){     // flash czyszczony !!!
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d063      	beq.n	8002a70 <_ZN10MFlash_SSD10initParamsEv+0x1e4>
     for( int i=0; i<(_SSD_TABSIZE_); i++ ){
 80029a8:	3501      	adds	r5, #1
 80029aa:	2d07      	cmp	r5, #7
 80029ac:	dc7d      	bgt.n	8002aaa <_ZN10MFlash_SSD10initParamsEv+0x21e>
        uint8_t bitChange = changeTable_getBit( i );
 80029ae:	b2ae      	uxth	r6, r5
        if( aIndex >= _SSD_TABSIZE_ ) return 0;         // blad indeksu
 80029b0:	2e07      	cmp	r6, #7
 80029b2:	d8f9      	bhi.n	80029a8 <_ZN10MFlash_SSD10initParamsEv+0x11c>
        int ind8A = aIndex / 8;
 80029b4:	08f3      	lsrs	r3, r6, #3
        int ind8B = aIndex - ind8A*8;
 80029b6:	eba6 01c3 	sub.w	r1, r6, r3, lsl #3
        uint8_t maska = 0x01 << ind8B; 
 80029ba:	2201      	movs	r2, #1
 80029bc:	408a      	lsls	r2, r1
        return  (mChangeTable[ind8A] & maska);
 80029be:	4423      	add	r3, r4
 80029c0:	7d5b      	ldrb	r3, [r3, #21]
        if( bitChange != 0 ){
 80029c2:	421a      	tst	r2, r3
 80029c4:	d0f0      	beq.n	80029a8 <_ZN10MFlash_SSD10initParamsEv+0x11c>
      if( aIndex >= _SSD_TABSIZE_ ) return 1; // blad indeksu: za duzy
 80029c6:	2e07      	cmp	r6, #7
 80029c8:	d8ea      	bhi.n	80029a0 <_ZN10MFlash_SSD10initParamsEv+0x114>
      if( mOffset >= (2048-1) )     return 2; // blad FLASH: ERASE REQ
 80029ca:	68a2      	ldr	r2, [r4, #8]
 80029cc:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80029d0:	429a      	cmp	r2, r3
 80029d2:	dc47      	bgt.n	8002a64 <_ZN10MFlash_SSD10initParamsEv+0x1d8>
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 80029d4:	8823      	ldrh	r3, [r4, #0]
 80029d6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80029da:	02db      	lsls	r3, r3, #11
 80029dc:	b292      	uxth	r2, r2
      uint16_t res = *(__IO uint16_t*)(addr);
 80029de:	5ad3      	ldrh	r3, [r2, r3]
 80029e0:	b29b      	uxth	r3, r3
        if( dana != 0xFFFF ){
 80029e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d1c5      	bne.n	8002976 <_ZN10MFlash_SSD10initParamsEv+0xea>
        }
      }
      if( mOffset >= (2048-1) )     return 2;   // blad FLASH: ERASE REQ
 80029ea:	68a2      	ldr	r2, [r4, #8]
 80029ec:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80029f0:	429a      	cmp	r2, r3
 80029f2:	dc39      	bgt.n	8002a68 <_ZN10MFlash_SSD10initParamsEv+0x1dc>
      HAL_StatusTypeDef res = HAL_FLASH_Unlock();
 80029f4:	f7fd fd2a 	bl	800044c <HAL_FLASH_Unlock>
      
      // --- ZAPIS ------------------------------
      MFlash::unlock();
      uint8_t index = aIndex;
 80029f8:	b2f3      	uxtb	r3, r6
      if( index > 126 ) return 3;               // blad indeksu: za duzy
 80029fa:	2b7e      	cmp	r3, #126	; 0x7e
 80029fc:	d836      	bhi.n	8002a6c <_ZN10MFlash_SSD10initParamsEv+0x1e0>
      uint8_t wrt = mTable[aIndex];
 80029fe:	19a2      	adds	r2, r4, r6
 8002a00:	7b52      	ldrb	r2, [r2, #13]
      
      uint16_t dana2 = ((index+1)<<8) | (wrt);
 8002a02:	3301      	adds	r3, #1
 8002a04:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
      MFlash::write16( mPage, mOffset, dana2 );
 8002a08:	8821      	ldrh	r1, [r4, #0]
 8002a0a:	8920      	ldrh	r0, [r4, #8]
       uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 8002a0c:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
       HAL_StatusTypeDef res = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD , addr, aData );
 8002a10:	b292      	uxth	r2, r2
 8002a12:	2300      	movs	r3, #0
 8002a14:	eb00 21c1 	add.w	r1, r0, r1, lsl #11
 8002a18:	2001      	movs	r0, #1
 8002a1a:	f7fd fd6b 	bl	80004f4 <HAL_FLASH_Program>
      HAL_StatusTypeDef res = HAL_FLASH_Lock();
 8002a1e:	f7fd fd2f 	bl	8000480 <HAL_FLASH_Lock>
          uint16_t dana = MFlash::read16( mPage, mOffset );
 8002a22:	68a2      	ldr	r2, [r4, #8]
      uint32_t addr = 0x08000000 + (aPage * 0x800) + aOffset;
 8002a24:	8823      	ldrh	r3, [r4, #0]
 8002a26:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002a2a:	02db      	lsls	r3, r3, #11
 8002a2c:	b291      	uxth	r1, r2
      uint16_t res = *(__IO uint16_t*)(addr);
 8002a2e:	5acb      	ldrh	r3, [r1, r3]
 8002a30:	b29b      	uxth	r3, r3
          if( dana == 0xFFFF ) return;         // koniec przetwarzania
 8002a32:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a36:	428b      	cmp	r3, r1
 8002a38:	d005      	beq.n	8002a46 <_ZN10MFlash_SSD10initParamsEv+0x1ba>
          mOffset += 2;
 8002a3a:	3202      	adds	r2, #2
 8002a3c:	60a2      	str	r2, [r4, #8]
       }while( mOffset < (2048-1) );
 8002a3e:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8002a42:	429a      	cmp	r2, r3
 8002a44:	dded      	ble.n	8002a22 <_ZN10MFlash_SSD10initParamsEv+0x196>
        if( aIndex >= _SSD_TABSIZE_ ) return;           // blad indeksu
 8002a46:	2e07      	cmp	r6, #7
 8002a48:	d80a      	bhi.n	8002a60 <_ZN10MFlash_SSD10initParamsEv+0x1d4>
        int ind8B = aIndex - ind8A*8;
 8002a4a:	f006 0207 	and.w	r2, r6, #7
        uint8_t maska = 0x01 << ind8B; 
 8002a4e:	2301      	movs	r3, #1
 8002a50:	fa03 f202 	lsl.w	r2, r3, r2
        mChangeTable[ind8A] &= (~maska);
 8002a54:	eb04 06d6 	add.w	r6, r4, r6, lsr #3
 8002a58:	7d73      	ldrb	r3, [r6, #21]
 8002a5a:	ea23 0302 	bic.w	r3, r3, r2
 8002a5e:	7573      	strb	r3, [r6, #21]
      flash_searchFF(); // update do mOffset
      
      // --- uaktualnij index w changeTable -----
      changeTable_bitClear( aIndex );
      
      return 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	e79e      	b.n	80029a2 <_ZN10MFlash_SSD10initParamsEv+0x116>
      if( mOffset >= (2048-1) )     return 2; // blad FLASH: ERASE REQ
 8002a64:	2302      	movs	r3, #2
 8002a66:	e79c      	b.n	80029a2 <_ZN10MFlash_SSD10initParamsEv+0x116>
      if( mOffset >= (2048-1) )     return 2;   // blad FLASH: ERASE REQ
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e79a      	b.n	80029a2 <_ZN10MFlash_SSD10initParamsEv+0x116>
      if( index > 126 ) return 3;               // blad indeksu: za duzy
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e798      	b.n	80029a2 <_ZN10MFlash_SSD10initParamsEv+0x116>
      HAL_StatusTypeDef res = HAL_FLASH_Unlock();
 8002a70:	f7fd fcec 	bl	800044c <HAL_FLASH_Unlock>
               MFlash::MFlash::erasePage(mPage);
 8002a74:	8823      	ldrh	r3, [r4, #0]
       uint32_t addr = 0x08000000 + (aPage * 0x800);
 8002a76:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002a7a:	02db      	lsls	r3, r3, #11
       f.TypeErase = FLASH_TYPEERASE_PAGES;
 8002a7c:	2500      	movs	r5, #0
 8002a7e:	9501      	str	r5, [sp, #4]
       f.PageAddress = addr;
 8002a80:	9302      	str	r3, [sp, #8]
       f.NbPages = 1;
 8002a82:	2301      	movs	r3, #1
 8002a84:	9303      	str	r3, [sp, #12]
       uint32_t PageError = 0;
 8002a86:	9500      	str	r5, [sp, #0]
       HAL_StatusTypeDef res = HAL_FLASHEx_Erase(&f, &PageError);
 8002a88:	4669      	mov	r1, sp
 8002a8a:	a801      	add	r0, sp, #4
 8002a8c:	f7fd fda6 	bl	80005dc <HAL_FLASHEx_Erase>
      HAL_StatusTypeDef res = HAL_FLASH_Lock();
 8002a90:	f7fd fcf6 	bl	8000480 <HAL_FLASH_Lock>
               mOffset = 0;
 8002a94:	60a5      	str	r5, [r4, #8]
        for( int i=0; i<((_SSD_TABSIZE_/8)+1); i++ ) mChangeTable[i] = 0xFF;
 8002a96:	462b      	mov	r3, r5
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	dc04      	bgt.n	8002aa6 <_ZN10MFlash_SSD10initParamsEv+0x21a>
 8002a9c:	18e2      	adds	r2, r4, r3
 8002a9e:	21ff      	movs	r1, #255	; 0xff
 8002aa0:	7551      	strb	r1, [r2, #21]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	e7f8      	b.n	8002a98 <_ZN10MFlash_SSD10initParamsEv+0x20c>
               i = 0; continue;
 8002aa6:	2500      	movs	r5, #0
 8002aa8:	e77e      	b.n	80029a8 <_ZN10MFlash_SSD10initParamsEv+0x11c>
    flush();
    
    return 0;
    
}//----------------------------------------------------------
 8002aaa:	2000      	movs	r0, #0
 8002aac:	b004      	add	sp, #16
 8002aae:	bd70      	pop	{r4, r5, r6, pc}
 8002ab0:	20000050 	.word	0x20000050

08002ab4 <main>:
{
 8002ab4:	b508      	push	{r3, lr}
  HAL_Init();
 8002ab6:	f7fd fbc1 	bl	800023c <HAL_Init>
  SystemClock_Config();
 8002aba:	f7ff fadf 	bl	800207c <_Z18SystemClock_Configv>
  __ASM volatile ("cpsid i" : : : "memory");
 8002abe:	b672      	cpsid	i
  MX_GPIO_Init();
 8002ac0:	f7ff f9c8 	bl	8001e54 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002ac4:	f000 f8cc 	bl	8002c60 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002ac8:	f000 f8ee 	bl	8002ca8 <MX_USART2_UART_Init>
  _o485E_PwrEN = 0;  
 8002acc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002ad0:	7d53      	ldrb	r3, [r2, #21]
 8002ad2:	f36f 0300 	bfc	r3, #0, #1
 8002ad6:	7553      	strb	r3, [r2, #21]
      mhUart = aUart;
 8002ad8:	4834      	ldr	r0, [pc, #208]	; (8002bac <main+0xf8>)
 8002ada:	4935      	ldr	r1, [pc, #212]	; (8002bb0 <main+0xfc>)
 8002adc:	f841 0b4a 	str.w	r0, [r1], #74
      HAL_UART_Receive_IT( mhUart, mRXBuf, 1 );
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f7ff f98d 	bl	8001e00 <HAL_UART_Receive_IT>
        mPage = aPage;
 8002ae6:	4b33      	ldr	r3, [pc, #204]	; (8002bb4 <main+0x100>)
 8002ae8:	221f      	movs	r2, #31
 8002aea:	601a      	str	r2, [r3, #0]
	mAddr = 0x08000000 + (mPage * 0x800);
 8002aec:	4a32      	ldr	r2, [pc, #200]	; (8002bb8 <main+0x104>)
 8002aee:	605a      	str	r2, [r3, #4]
        for( int i=0; i<(_SSD_TABSIZE_); i++ ) mTable[i] = 0xFF;
 8002af0:	2300      	movs	r3, #0
 8002af2:	e004      	b.n	8002afe <main+0x4a>
 8002af4:	4a2f      	ldr	r2, [pc, #188]	; (8002bb4 <main+0x100>)
 8002af6:	441a      	add	r2, r3
 8002af8:	21ff      	movs	r1, #255	; 0xff
 8002afa:	7351      	strb	r1, [r2, #13]
 8002afc:	3301      	adds	r3, #1
 8002afe:	2b07      	cmp	r3, #7
 8002b00:	ddf8      	ble.n	8002af4 <main+0x40>
        for( int i=0; i<((_SSD_TABSIZE_/8)+1); i++ ) mChangeTable[i] = 0xFF;
 8002b02:	2300      	movs	r3, #0
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	dc05      	bgt.n	8002b14 <main+0x60>
 8002b08:	4a2a      	ldr	r2, [pc, #168]	; (8002bb4 <main+0x100>)
 8002b0a:	441a      	add	r2, r3
 8002b0c:	21ff      	movs	r1, #255	; 0xff
 8002b0e:	7551      	strb	r1, [r2, #21]
 8002b10:	3301      	adds	r3, #1
 8002b12:	e7f7      	b.n	8002b04 <main+0x50>
	  gFlash_SSD.initParams();
 8002b14:	4827      	ldr	r0, [pc, #156]	; (8002bb4 <main+0x100>)
 8002b16:	f7ff feb9 	bl	800288c <_ZN10MFlash_SSD10initParamsEv>
  __ASM volatile ("cpsie i" : : : "memory");
 8002b1a:	b662      	cpsie	i
}
 8002b1c:	e00a      	b.n	8002b34 <main+0x80>
			  JumpToAddress(gJumpAddress);
 8002b1e:	4b27      	ldr	r3, [pc, #156]	; (8002bbc <main+0x108>)
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	f7ff fa01 	bl	8001f28 <_Z13JumpToAddressm>
 8002b26:	e009      	b.n	8002b3c <main+0x88>
      gSystem.mTimer_Is100ms = false;
 8002b28:	4b25      	ldr	r3, [pc, #148]	; (8002bc0 <main+0x10c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	715a      	strb	r2, [r3, #5]
    if( gSystem.mTimer_Is10ms ){
 8002b2e:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <main+0x10c>)
 8002b30:	799b      	ldrb	r3, [r3, #6]
 8002b32:	b973      	cbnz	r3, 8002b52 <main+0x9e>
	  if(gIsToJump!=0){
 8002b34:	4b23      	ldr	r3, [pc, #140]	; (8002bc4 <main+0x110>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f0      	bne.n	8002b1e <main+0x6a>
  if( gSystem.mTimer_Is1000ms ){
 8002b3c:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <main+0x10c>)
 8002b3e:	791b      	ldrb	r3, [r3, #4]
 8002b40:	b113      	cbz	r3, 8002b48 <main+0x94>
	  gSystem.mTimer_Is1000ms = false;
 8002b42:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <main+0x10c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	711a      	strb	r2, [r3, #4]
    if( gSystem.mTimer_Is100ms ){
 8002b48:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <main+0x10c>)
 8002b4a:	795b      	ldrb	r3, [r3, #5]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ee      	beq.n	8002b2e <main+0x7a>
 8002b50:	e7ea      	b.n	8002b28 <main+0x74>
      gSystem.mTimer_Is10ms = false;
 8002b52:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <main+0x10c>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	719a      	strb	r2, [r3, #6]
      if( _o485E_EN == 1 ){
 8002b58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b5c:	7d5b      	ldrb	r3, [r3, #21]
 8002b5e:	f013 0f10 	tst.w	r3, #16
 8002b62:	d00e      	beq.n	8002b82 <main+0xce>
        if( mTX_WDT > 20 ){
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <main+0xfc>)
 8002b66:	791b      	ldrb	r3, [r3, #4]
 8002b68:	2b14      	cmp	r3, #20
 8002b6a:	d906      	bls.n	8002b7a <main+0xc6>
          _o485E_EN = 0;
 8002b6c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002b70:	7d53      	ldrb	r3, [r2, #21]
 8002b72:	f36f 1304 	bfc	r3, #4, #1
 8002b76:	7553      	strb	r3, [r2, #21]
 8002b78:	e006      	b.n	8002b88 <main+0xd4>
        }else mTX_WDT += 1;
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	4a0c      	ldr	r2, [pc, #48]	; (8002bb0 <main+0xfc>)
 8002b7e:	7113      	strb	r3, [r2, #4]
 8002b80:	e002      	b.n	8002b88 <main+0xd4>
      }else mTX_WDT = 0;
 8002b82:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <main+0xfc>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	711a      	strb	r2, [r3, #4]
     if( mRecState != 0 ){
 8002b88:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <main+0xfc>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0d1      	beq.n	8002b34 <main+0x80>
       if( mFrameTimeOutCnt > 0 ){
 8002b90:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <main+0xfc>)
 8002b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	ddcd      	ble.n	8002b34 <main+0x80>
         mFrameTimeOutCnt -=1;
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	4a05      	ldr	r2, [pc, #20]	; (8002bb0 <main+0xfc>)
 8002b9c:	6453      	str	r3, [r2, #68]	; 0x44
         if( mFrameTimeOutCnt == 0 ){
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1c8      	bne.n	8002b34 <main+0x80>
            mRecState = 0;
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40
    }//-------------------------------------------------------------------------
 8002ba8:	e7c4      	b.n	8002b34 <main+0x80>
 8002baa:	bf00      	nop
 8002bac:	20000160 	.word	0x20000160
 8002bb0:	20000050 	.word	0x20000050
 8002bb4:	200000c8 	.word	0x200000c8
 8002bb8:	0800f800 	.word	0x0800f800
 8002bbc:	200000e4 	.word	0x200000e4
 8002bc0:	200000e8 	.word	0x200000e8
 8002bc4:	200000e0 	.word	0x200000e0

08002bc8 <Error_Handler>:
}
 8002bc8:	4770      	bx	lr

08002bca <_GLOBAL__sub_I_gDbgTab>:
 8002bca:	b508      	push	{r3, lr}
 8002bcc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	f7ff f969 	bl	8001ea8 <_Z41__static_initialization_and_destruction_0ii>
 8002bd6:	bd08      	pop	{r3, pc}

08002bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bd8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bda:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <HAL_MspInit+0x2c>)
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	619a      	str	r2, [r3, #24]
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	f002 0201 	and.w	r2, r2, #1
 8002bea:	9200      	str	r2, [sp, #0]
 8002bec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bee:	69da      	ldr	r2, [r3, #28]
 8002bf0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002bf4:	61da      	str	r2, [r3, #28]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	9301      	str	r3, [sp, #4]
 8002bfe:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c00:	b002      	add	sp, #8
 8002c02:	4770      	bx	lr
 8002c04:	40021000 	.word	0x40021000

08002c08 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c08:	4770      	bx	lr

08002c0a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c0a:	e7fe      	b.n	8002c0a <HardFault_Handler>

08002c0c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c0c:	e7fe      	b.n	8002c0c <MemManage_Handler>

08002c0e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c0e:	e7fe      	b.n	8002c0e <BusFault_Handler>

08002c10 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c10:	e7fe      	b.n	8002c10 <UsageFault_Handler>

08002c12 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c12:	4770      	bx	lr

08002c14 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c14:	4770      	bx	lr

08002c16 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c16:	4770      	bx	lr

08002c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  HAL_SYSTICK_IRQHandler();
 8002c1a:	f7fd fb9f 	bl	800035c <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c1e:	f7fd fb1f 	bl	8000260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c22:	bd08      	pop	{r3, pc}

08002c24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8002c24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c26:	4802      	ldr	r0, [pc, #8]	; (8002c30 <USART1_IRQHandler+0xc>)
 8002c28:	f7fe fc82 	bl	8001530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c2c:	bd08      	pop	{r3, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000160 	.word	0x20000160

08002c34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8002c34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c36:	4802      	ldr	r0, [pc, #8]	; (8002c40 <USART2_IRQHandler+0xc>)
 8002c38:	f7fe fc7a 	bl	8001530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c3c:	bd08      	pop	{r3, pc}
 8002c3e:	bf00      	nop
 8002c40:	200001e4 	.word	0x200001e4

08002c44 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <SystemInit+0x18>)
 8002c46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c4a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002c4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c56:	609a      	str	r2, [r3, #8]
#endif
}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c60:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c62:	480f      	ldr	r0, [pc, #60]	; (8002ca0 <MX_USART1_UART_Init+0x40>)
 8002c64:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <MX_USART1_UART_Init+0x44>)
 8002c66:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 38400;
 8002c68:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8002c6c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c72:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c74:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c76:	220c      	movs	r2, #12
 8002c78:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c7a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c7c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c7e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8002c80:	2330      	movs	r3, #48	; 0x30
 8002c82:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c88:	6383      	str	r3, [r0, #56]	; 0x38
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8002c8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c8e:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c90:	f7ff f825 	bl	8001cde <HAL_UART_Init>
 8002c94:	b900      	cbnz	r0, 8002c98 <MX_USART1_UART_Init+0x38>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c96:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002c98:	f7ff ff96 	bl	8002bc8 <Error_Handler>
}
 8002c9c:	e7fb      	b.n	8002c96 <MX_USART1_UART_Init+0x36>
 8002c9e:	bf00      	nop
 8002ca0:	20000160 	.word	0x20000160
 8002ca4:	40013800 	.word	0x40013800

08002ca8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ca8:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002caa:	480f      	ldr	r0, [pc, #60]	; (8002ce8 <MX_USART2_UART_Init+0x40>)
 8002cac:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <MX_USART2_UART_Init+0x44>)
 8002cae:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 57600;
 8002cb0:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8002cb4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cba:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cbc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cbe:	220c      	movs	r2, #12
 8002cc0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cc2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cc4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cc6:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8002cc8:	2330      	movs	r3, #48	; 0x30
 8002cca:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cd0:	6383      	str	r3, [r0, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8002cd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cd6:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cd8:	f7ff f801 	bl	8001cde <HAL_UART_Init>
 8002cdc:	b900      	cbnz	r0, 8002ce0 <MX_USART2_UART_Init+0x38>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cde:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002ce0:	f7ff ff72 	bl	8002bc8 <Error_Handler>
}
 8002ce4:	e7fb      	b.n	8002cde <MX_USART2_UART_Init+0x36>
 8002ce6:	bf00      	nop
 8002ce8:	200001e4 	.word	0x200001e4
 8002cec:	40004400 	.word	0x40004400

08002cf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cf0:	b500      	push	{lr}
 8002cf2:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	9305      	str	r3, [sp, #20]
 8002cf8:	9306      	str	r3, [sp, #24]
 8002cfa:	9307      	str	r3, [sp, #28]
 8002cfc:	9308      	str	r3, [sp, #32]
 8002cfe:	9309      	str	r3, [sp, #36]	; 0x24
  if(uartHandle->Instance==USART1)
 8002d00:	6803      	ldr	r3, [r0, #0]
 8002d02:	4a2e      	ldr	r2, [pc, #184]	; (8002dbc <HAL_UART_MspInit+0xcc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d005      	beq.n	8002d14 <HAL_UART_MspInit+0x24>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002d08:	4a2d      	ldr	r2, [pc, #180]	; (8002dc0 <HAL_UART_MspInit+0xd0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d02c      	beq.n	8002d68 <HAL_UART_MspInit+0x78>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d0e:	b00b      	add	sp, #44	; 0x2c
 8002d10:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d14:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <HAL_UART_MspInit+0xd4>)
 8002d16:	699a      	ldr	r2, [r3, #24]
 8002d18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d1c:	619a      	str	r2, [r3, #24]
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002d24:	9201      	str	r2, [sp, #4]
 8002d26:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002d2e:	615a      	str	r2, [r3, #20]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d36:	9302      	str	r3, [sp, #8]
 8002d38:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d3e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d40:	2302      	movs	r3, #2
 8002d42:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d44:	2303      	movs	r3, #3
 8002d46:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d48:	2307      	movs	r3, #7
 8002d4a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4c:	a905      	add	r1, sp, #20
 8002d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d52:	f7fd fc95 	bl	8000680 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002d56:	2200      	movs	r2, #0
 8002d58:	2101      	movs	r1, #1
 8002d5a:	2025      	movs	r0, #37	; 0x25
 8002d5c:	f7fd faa4 	bl	80002a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d60:	2025      	movs	r0, #37	; 0x25
 8002d62:	f7fd fad9 	bl	8000318 <HAL_NVIC_EnableIRQ>
 8002d66:	e7d2      	b.n	8002d0e <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d68:	4b16      	ldr	r3, [pc, #88]	; (8002dc4 <HAL_UART_MspInit+0xd4>)
 8002d6a:	69da      	ldr	r2, [r3, #28]
 8002d6c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002d70:	61da      	str	r2, [r3, #28]
 8002d72:	69da      	ldr	r2, [r3, #28]
 8002d74:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002d78:	9203      	str	r2, [sp, #12]
 8002d7a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7c:	695a      	ldr	r2, [r3, #20]
 8002d7e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002d82:	615a      	str	r2, [r3, #20]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	9304      	str	r3, [sp, #16]
 8002d8c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d8e:	230c      	movs	r3, #12
 8002d90:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d92:	2302      	movs	r3, #2
 8002d94:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d96:	2303      	movs	r3, #3
 8002d98:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d9a:	2307      	movs	r3, #7
 8002d9c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9e:	a905      	add	r1, sp, #20
 8002da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002da4:	f7fd fc6c 	bl	8000680 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002da8:	2200      	movs	r2, #0
 8002daa:	2101      	movs	r1, #1
 8002dac:	2026      	movs	r0, #38	; 0x26
 8002dae:	f7fd fa7b 	bl	80002a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002db2:	2026      	movs	r0, #38	; 0x26
 8002db4:	f7fd fab0 	bl	8000318 <HAL_NVIC_EnableIRQ>
}
 8002db8:	e7a9      	b.n	8002d0e <HAL_UART_MspInit+0x1e>
 8002dba:	bf00      	nop
 8002dbc:	40013800 	.word	0x40013800
 8002dc0:	40004400 	.word	0x40004400
 8002dc4:	40021000 	.word	0x40021000

08002dc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e00 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dcc:	480d      	ldr	r0, [pc, #52]	; (8002e04 <LoopForever+0x6>)
  ldr r1, =_edata
 8002dce:	490e      	ldr	r1, [pc, #56]	; (8002e08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002dd0:	4a0e      	ldr	r2, [pc, #56]	; (8002e0c <LoopForever+0xe>)
  movs r3, #0
 8002dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dd4:	e002      	b.n	8002ddc <LoopCopyDataInit>

08002dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dda:	3304      	adds	r3, #4

08002ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002de0:	d3f9      	bcc.n	8002dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002de2:	4a0b      	ldr	r2, [pc, #44]	; (8002e10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002de4:	4c0b      	ldr	r4, [pc, #44]	; (8002e14 <LoopForever+0x16>)
  movs r3, #0
 8002de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002de8:	e001      	b.n	8002dee <LoopFillZerobss>

08002dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dec:	3204      	adds	r2, #4

08002dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002df0:	d3fb      	bcc.n	8002dea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002df2:	f7ff ff27 	bl	8002c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002df6:	f000 f811 	bl	8002e1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dfa:	f7ff fe5b 	bl	8002ab4 <main>

08002dfe <LoopForever>:

LoopForever:
    b LoopForever
 8002dfe:	e7fe      	b.n	8002dfe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e00:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002e0c:	08002ed0 	.word	0x08002ed0
  ldr r2, =_sbss
 8002e10:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002e14:	20000268 	.word	0x20000268

08002e18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e18:	e7fe      	b.n	8002e18 <ADC1_2_IRQHandler>
	...

08002e1c <__libc_init_array>:
 8002e1c:	b570      	push	{r4, r5, r6, lr}
 8002e1e:	4d0d      	ldr	r5, [pc, #52]	; (8002e54 <__libc_init_array+0x38>)
 8002e20:	4c0d      	ldr	r4, [pc, #52]	; (8002e58 <__libc_init_array+0x3c>)
 8002e22:	1b64      	subs	r4, r4, r5
 8002e24:	10a4      	asrs	r4, r4, #2
 8002e26:	2600      	movs	r6, #0
 8002e28:	42a6      	cmp	r6, r4
 8002e2a:	d109      	bne.n	8002e40 <__libc_init_array+0x24>
 8002e2c:	4d0b      	ldr	r5, [pc, #44]	; (8002e5c <__libc_init_array+0x40>)
 8002e2e:	4c0c      	ldr	r4, [pc, #48]	; (8002e60 <__libc_init_array+0x44>)
 8002e30:	f000 f820 	bl	8002e74 <_init>
 8002e34:	1b64      	subs	r4, r4, r5
 8002e36:	10a4      	asrs	r4, r4, #2
 8002e38:	2600      	movs	r6, #0
 8002e3a:	42a6      	cmp	r6, r4
 8002e3c:	d105      	bne.n	8002e4a <__libc_init_array+0x2e>
 8002e3e:	bd70      	pop	{r4, r5, r6, pc}
 8002e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e44:	4798      	blx	r3
 8002e46:	3601      	adds	r6, #1
 8002e48:	e7ee      	b.n	8002e28 <__libc_init_array+0xc>
 8002e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e4e:	4798      	blx	r3
 8002e50:	3601      	adds	r6, #1
 8002e52:	e7f2      	b.n	8002e3a <__libc_init_array+0x1e>
 8002e54:	08002ec4 	.word	0x08002ec4
 8002e58:	08002ec4 	.word	0x08002ec4
 8002e5c:	08002ec4 	.word	0x08002ec4
 8002e60:	08002ecc 	.word	0x08002ecc

08002e64 <memset>:
 8002e64:	4402      	add	r2, r0
 8002e66:	4603      	mov	r3, r0
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d100      	bne.n	8002e6e <memset+0xa>
 8002e6c:	4770      	bx	lr
 8002e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e72:	e7f9      	b.n	8002e68 <memset+0x4>

08002e74 <_init>:
 8002e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e76:	bf00      	nop
 8002e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e7a:	bc08      	pop	{r3}
 8002e7c:	469e      	mov	lr, r3
 8002e7e:	4770      	bx	lr

08002e80 <_fini>:
 8002e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e82:	bf00      	nop
 8002e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e86:	bc08      	pop	{r3}
 8002e88:	469e      	mov	lr, r3
 8002e8a:	4770      	bx	lr
